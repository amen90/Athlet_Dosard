
Dossard_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db0  08006bc0  08006bc0  00007bc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007970  08007970  0000979c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007970  08007970  0000979c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007970  08007970  0000979c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007970  08007970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000079c  24000000  08007978  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b9c  2400079c  08008114  0000979c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  0000a000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000979c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f7b  00000000  00000000  000097ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc2  00000000  00000000  0001d745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00020708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc0  00000000  00000000  000216b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ae93  00000000  00000000  00022278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001170d  00000000  00000000  0005d10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187600  00000000  00000000  0006e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001f5e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004184  00000000  00000000  001f5ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001fa024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400079c 	.word	0x2400079c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006b8c 	.word	0x08006b8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007a0 	.word	0x240007a0
 80002dc:	08006b8c 	.word	0x08006b8c

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b49      	ldr	r3, [pc, #292]	@ (800040c <SystemInit+0x12c>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a48      	ldr	r2, [pc, #288]	@ (800040c <SystemInit+0x12c>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b45      	ldr	r3, [pc, #276]	@ (800040c <SystemInit+0x12c>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a44      	ldr	r2, [pc, #272]	@ (800040c <SystemInit+0x12c>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <SystemInit+0x130>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <SystemInit+0x130>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a3e      	ldr	r2, [pc, #248]	@ (8000410 <SystemInit+0x130>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <SystemInit+0x134>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a3c      	ldr	r2, [pc, #240]	@ (8000414 <SystemInit+0x134>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b3a      	ldr	r3, [pc, #232]	@ (8000414 <SystemInit+0x134>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b39      	ldr	r3, [pc, #228]	@ (8000414 <SystemInit+0x134>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4938      	ldr	r1, [pc, #224]	@ (8000414 <SystemInit+0x134>)
 8000334:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <SystemInit+0x138>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b35      	ldr	r3, [pc, #212]	@ (8000410 <SystemInit+0x130>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <SystemInit+0x130>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a30      	ldr	r2, [pc, #192]	@ (8000410 <SystemInit+0x130>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <SystemInit+0x134>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <SystemInit+0x134>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b2c      	ldr	r3, [pc, #176]	@ (8000414 <SystemInit+0x134>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <SystemInit+0x134>)
 800036a:	4a2c      	ldr	r2, [pc, #176]	@ (800041c <SystemInit+0x13c>)
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <SystemInit+0x134>)
 8000370:	4a2b      	ldr	r2, [pc, #172]	@ (8000420 <SystemInit+0x140>)
 8000372:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <SystemInit+0x134>)
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <SystemInit+0x144>)
 8000378:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <SystemInit+0x134>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b24      	ldr	r3, [pc, #144]	@ (8000414 <SystemInit+0x134>)
 8000382:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <SystemInit+0x144>)
 8000384:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <SystemInit+0x134>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <SystemInit+0x134>)
 800038e:	4a25      	ldr	r2, [pc, #148]	@ (8000424 <SystemInit+0x144>)
 8000390:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <SystemInit+0x134>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <SystemInit+0x134>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1d      	ldr	r2, [pc, #116]	@ (8000414 <SystemInit+0x134>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <SystemInit+0x134>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <SystemInit+0x148>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000428 <SystemInit+0x148>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b1d      	ldr	r3, [pc, #116]	@ (800042c <SystemInit+0x14c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <SystemInit+0x150>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <SystemInit+0x154>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <SystemInit+0x134>)
 80003cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d113      	bne.n	8000400 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <SystemInit+0x134>)
 80003da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <SystemInit+0x134>)
 80003e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <SystemInit+0x158>)
 80003ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <SystemInit+0x134>)
 80003f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003f6:	4a07      	ldr	r2, [pc, #28]	@ (8000414 <SystemInit+0x134>)
 80003f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	52002000 	.word	0x52002000
 8000414:	58024400 	.word	0x58024400
 8000418:	eaf6ed7f 	.word	0xeaf6ed7f
 800041c:	02020200 	.word	0x02020200
 8000420:	01ff0000 	.word	0x01ff0000
 8000424:	01010280 	.word	0x01010280
 8000428:	580000c0 	.word	0x580000c0
 800042c:	5c001000 	.word	0x5c001000
 8000430:	ffff0000 	.word	0xffff0000
 8000434:	51008108 	.word	0x51008108
 8000438:	52004000 	.word	0x52004000

0800043c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000440:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <ExitRun0Mode+0x30>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	f023 0306 	bic.w	r3, r3, #6
 8000448:	4a08      	ldr	r2, [pc, #32]	@ (800046c <ExitRun0Mode+0x30>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000450:	bf00      	nop
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <ExitRun0Mode+0x30>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	58024800 	.word	0x58024800

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08c      	sub	sp, #48	@ 0x30
 8000474:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000476:	f000 fa5d 	bl	8000934 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b79      	ldr	r3, [pc, #484]	@ (8000660 <main+0x1f0>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b73      	ldr	r3, [pc, #460]	@ (8000660 <main+0x1f0>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000660 <main+0x1f0>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a6d      	ldr	r2, [pc, #436]	@ (8000660 <main+0x1f0>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b67      	ldr	r3, [pc, #412]	@ (8000660 <main+0x1f0>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b64      	ldr	r3, [pc, #400]	@ (8000660 <main+0x1f0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b61      	ldr	r3, [pc, #388]	@ (8000660 <main+0x1f0>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004e0:	62bb      	str	r3, [r7, #40]	@ 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	627b      	str	r3, [r7, #36]	@ 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	4956      	ldr	r1, [pc, #344]	@ (8000660 <main+0x1f0>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	6a3b      	ldr	r3, [r7, #32]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	623a      	str	r2, [r7, #32]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x86>
    } while(sets-- != 0U);
 8000516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	627a      	str	r2, [r7, #36]	@ 0x24
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b4e      	ldr	r3, [pc, #312]	@ (8000660 <main+0x1f0>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a4d      	ldr	r2, [pc, #308]	@ (8000660 <main+0x1f0>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000546:	bf00      	nop
 8000548:	4b46      	ldr	r3, [pc, #280]	@ (8000664 <main+0x1f4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <main+0xee>
 8000554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf4      	bgt.n	8000548 <main+0xd8>
  if ( timeout < 0 )
 800055e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000560:	2b00      	cmp	r3, #0
 8000562:	da01      	bge.n	8000568 <main+0xf8>
  {
  Error_Handler();
 8000564:	f000 fa12 	bl	800098c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fa88 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f88a 	bl	8000684 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000570:	4b3c      	ldr	r3, [pc, #240]	@ (8000664 <main+0x1f4>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000576:	4a3b      	ldr	r2, [pc, #236]	@ (8000664 <main+0x1f4>)
 8000578:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000580:	4b38      	ldr	r3, [pc, #224]	@ (8000664 <main+0x1f4>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800058a:	61fb      	str	r3, [r7, #28]
 800058c:	69fb      	ldr	r3, [r7, #28]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fc9a 	bl	8000ec8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fcb0 	bl	8000efc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800059c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005a2:	bf00      	nop
 80005a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000664 <main+0x1f4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <main+0x14a>
 80005b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dcf4      	bgt.n	80005a4 <main+0x134>
if ( timeout < 0 )
 80005ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da01      	bge.n	80005c4 <main+0x154>
{
Error_Handler();
 80005c0:	f000 f9e4 	bl	800098c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80005c4:	f000 f8da 	bl	800077c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  Mailbox_Init();
 80005c8:	f000 f8f2 	bl	80007b0 <Mailbox_Init>
  AI_Init();
 80005cc:	f000 f900 	bl	80007d0 <AI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d0:	f001 fcd2 	bl	8001f78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d4:	4a24      	ldr	r2, [pc, #144]	@ (8000668 <main+0x1f8>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4824      	ldr	r0, [pc, #144]	@ (800066c <main+0x1fc>)
 80005da:	f001 fd17 	bl	800200c <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a23      	ldr	r2, [pc, #140]	@ (8000670 <main+0x200>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f001 fcec 	bl	8001fc0 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Process new data from CM4 when notified via HSEM
    if (g_mailbox_notified) {
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <main+0x204>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0fb      	beq.n	80005e8 <main+0x178>
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
      __disable_irq();
      g_mailbox_notified = 0;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <main+0x204>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005fa:	b662      	cpsie	i
}
 80005fc:	bf00      	nop
      __enable_irq();

      if (g_sensor_mb->magic == SHARED_MAILBOX_MAGIC && g_sensor_mb->seq != g_last_seq) {
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <main+0x208>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <main+0x20c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d1ef      	bne.n	80005e8 <main+0x178>
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <main+0x208>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <main+0x210>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d0e9      	beq.n	80005e8 <main+0x178>
        g_last_seq = g_sensor_mb->seq;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <main+0x208>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <main+0x210>)
 800061a:	6013      	str	r3, [r2, #0]
        float features[AI_ATHLET_IN_1_SIZE] = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
        // Map: [temp, spo2, hr, fatigue, bias]
        features[0] = g_sensor_mb->temperature_c;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <main+0x208>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	60bb      	str	r3, [r7, #8]
        features[1] = g_sensor_mb->spo2_pct;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <main+0x208>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	60fb      	str	r3, [r7, #12]
        features[2] = g_sensor_mb->heart_rate_bpm;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <main+0x208>)
 800063a:	691b      	ldr	r3, [r3, #16]
 800063c:	613b      	str	r3, [r7, #16]
        features[3] = g_sensor_mb->fatigue_score;
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <main+0x208>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	617b      	str	r3, [r7, #20]
        features[4] = 1.0f;
 8000644:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000648:	61bb      	str	r3, [r7, #24]

        float pred = 0.0f;
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
        (void)AI_RunOnce(features, &pred);
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f92b 	bl	80008b4 <AI_RunOnce>
    if (g_mailbox_notified) {
 800065e:	e7c3      	b.n	80005e8 <main+0x178>
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	58024400 	.word	0x58024400
 8000668:	08006c44 	.word	0x08006c44
 800066c:	08000925 	.word	0x08000925
 8000670:	240007b8 	.word	0x240007b8
 8000674:	240007bc 	.word	0x240007bc
 8000678:	30040000 	.word	0x30040000
 800067c:	ba5ecafe 	.word	0xba5ecafe
 8000680:	240007c0 	.word	0x240007c0

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	@ 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068e:	224c      	movs	r2, #76	@ 0x4c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 f99a 	bl	80069cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 f994 	bl	80069cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fc4f 	bl	8000f48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemClock_Config+0xf0>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemClock_Config+0xf0>)
 80006b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemClock_Config+0xf0>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemClock_Config+0xf4>)
 80006c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000778 <SystemClock_Config+0xf4>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemClock_Config+0xf4>)
 80006d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006dc:	bf00      	nop
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <SystemClock_Config+0xf0>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ea:	d1f8      	bne.n	80006de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000704:	233c      	movs	r3, #60	@ 0x3c
 8000706:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000714:	230c      	movs	r3, #12
 8000716:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000718:	2300      	movs	r3, #0
 800071a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc69 	bl	8000ffc <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000730:	f000 f92c 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	233f      	movs	r3, #63	@ 0x3f
 8000736:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2303      	movs	r3, #3
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000740:	2308      	movs	r3, #8
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000744:	2340      	movs	r3, #64	@ 0x40
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000748:	2340      	movs	r3, #64	@ 0x40
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800074c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000752:	2340      	movs	r3, #64	@ 0x40
 8000754:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f8a8 	bl	80018b0 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000766:	f000 f911 	bl	800098c <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3770      	adds	r7, #112	@ 0x70
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	58024800 	.word	0x58024800
 8000778:	58000400 	.word	0x58000400

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_DMA_Init+0x30>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <MX_DMA_Init+0x30>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_DMA_Init+0x30>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	58024400 	.word	0x58024400

080007b0 <Mailbox_Init>:
{
  g_mailbox_notified = 1;
}

static void Mailbox_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  // CPU1 (CM7) will be notified by CM4 via HSEM HSEM_ID_MAILBOX
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2105      	movs	r1, #5
 80007b8:	207d      	movs	r0, #125	@ 0x7d
 80007ba:	f000 fad8 	bl	8000d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80007be:	207d      	movs	r0, #125	@ 0x7d
 80007c0:	f000 faef 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_MAILBOX));
 80007c4:	2020      	movs	r0, #32
 80007c6:	f000 fbad 	bl	8000f24 <HAL_HSEM_ActivateNotification>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <AI_Init>:
    Mailbox_NotifyCallback();
  }
}

static void AI_Init(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b09b      	sub	sp, #108	@ 0x6c
 80007d4:	af00      	add	r7, sp, #0
  ai_error err;
  const ai_handle act_addr[] = { AI_HANDLE_PTR(NULL) };
 80007d6:	2300      	movs	r3, #0
 80007d8:	663b      	str	r3, [r7, #96]	@ 0x60
  const ai_handle wgt_addr[] = { AI_HANDLE_PTR(ai_athlet_data_weights_get()) };
 80007da:	f004 fb37 	bl	8004e4c <ai_athlet_data_weights_get>
 80007de:	4603      	mov	r3, r0
 80007e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  err = ai_athlet_create_and_init(&g_network, act_addr, wgt_addr);
 80007e2:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80007e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ea:	4619      	mov	r1, r3
 80007ec:	4829      	ldr	r0, [pc, #164]	@ (8000894 <AI_Init+0xc4>)
 80007ee:	f004 fa63 	bl	8004cb8 <ai_athlet_create_and_init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	667b      	str	r3, [r7, #100]	@ 0x64
  if (err.type) {
 80007f6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <AI_Init+0x32>
    while (1) { }
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <AI_Init+0x2e>
  }

  static float s_in[AI_ATHLET_IN_1_SIZE];
  static float s_out[AI_ATHLET_OUT_1_SIZE];
  g_ai_in_buf = (ai_buffer)AI_BUFFER_INIT(
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <AI_Init+0xc8>)
 8000804:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <AI_Init+0xcc>)
 8000810:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <AI_Init+0xd0>)
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <AI_Init+0xcc>)
 8000816:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <AI_Init+0xd4>)
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <AI_Init+0xcc>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <AI_Init+0xcc>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <AI_Init+0xcc>)
 8000828:	2205      	movs	r2, #5
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <AI_Init+0xcc>)
 800082e:	2201      	movs	r2, #1
 8000830:	751a      	strb	r2, [r3, #20]
 8000832:	4a1a      	ldr	r2, [pc, #104]	@ (800089c <AI_Init+0xcc>)
 8000834:	6953      	ldr	r3, [r2, #20]
 8000836:	2104      	movs	r1, #4
 8000838:	f361 231f 	bfi	r3, r1, #8, #24
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4a17      	ldr	r2, [pc, #92]	@ (800089c <AI_Init+0xcc>)
 8000840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000844:	6193      	str	r3, [r2, #24]
    AI_ATHLET_IN_1_FORMAT,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_ATHLET_IN_1_CHANNEL, 1, 1),
    AI_ATHLET_IN_1_SIZE,
    NULL,
    s_in);
  g_ai_out_buf = (ai_buffer)AI_BUFFER_INIT(
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <AI_Init+0xd8>)
 8000848:	f107 0420 	add.w	r4, r7, #32
 800084c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <AI_Init+0xdc>)
 8000854:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <AI_Init+0xd0>)
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <AI_Init+0xdc>)
 800085a:	4a15      	ldr	r2, [pc, #84]	@ (80008b0 <AI_Init+0xe0>)
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <AI_Init+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <AI_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <AI_Init+0xdc>)
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <AI_Init+0xdc>)
 8000872:	2201      	movs	r2, #1
 8000874:	751a      	strb	r2, [r3, #20]
 8000876:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <AI_Init+0xdc>)
 8000878:	6953      	ldr	r3, [r2, #20]
 800087a:	2104      	movs	r1, #4
 800087c:	f361 231f 	bfi	r3, r1, #8, #24
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <AI_Init+0xdc>)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	6193      	str	r3, [r2, #24]
    AI_ATHLET_OUT_1_FORMAT,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_ATHLET_OUT_1_CHANNEL, 1, 1),
    AI_ATHLET_OUT_1_SIZE,
    NULL,
    s_out);
}
 800088a:	bf00      	nop
 800088c:	376c      	adds	r7, #108	@ 0x6c
 800088e:	46bd      	mov	sp, r7
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	bf00      	nop
 8000894:	240007c4 	.word	0x240007c4
 8000898:	08006bcc 	.word	0x08006bcc
 800089c:	240007c8 	.word	0x240007c8
 80008a0:	00821040 	.word	0x00821040
 80008a4:	24000800 	.word	0x24000800
 80008a8:	08006bdc 	.word	0x08006bdc
 80008ac:	240007e4 	.word	0x240007e4
 80008b0:	24000814 	.word	0x24000814

080008b4 <AI_RunOnce>:

static ai_i32 AI_RunOnce(const float* features5, float* prediction1)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  float* in = (float*)g_ai_in_buf.data;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <AI_RunOnce+0x64>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	613b      	str	r3, [r7, #16]
  float* out = (float*)g_ai_out_buf.data;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <AI_RunOnce+0x68>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0; i < AI_ATHLET_IN_1_SIZE; ++i) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e00c      	b.n	80008ea <AI_RunOnce+0x36>
    in[i] = features5[i];
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	441a      	add	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	440b      	add	r3, r1
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < AI_ATHLET_IN_1_SIZE; ++i) {
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3301      	adds	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d9ef      	bls.n	80008d0 <AI_RunOnce+0x1c>
  }
  ai_i32 nb = ai_athlet_run(g_network, &g_ai_in_buf, &g_ai_out_buf);
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <AI_RunOnce+0x6c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a09      	ldr	r2, [pc, #36]	@ (800091c <AI_RunOnce+0x68>)
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <AI_RunOnce+0x64>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 fa97 	bl	8004e2c <ai_athlet_run>
 80008fe:	60b8      	str	r0, [r7, #8]
  if (nb > 0) {
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	dd03      	ble.n	800090e <AI_RunOnce+0x5a>
    *prediction1 = out[0];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	601a      	str	r2, [r3, #0]
  }
  return nb;
 800090e:	68bb      	ldr	r3, [r7, #8]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	240007c8 	.word	0x240007c8
 800091c:	240007e4 	.word	0x240007e4
 8000920:	240007c4 	.word	0x240007c4

08000924 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f001 fbff 	bl	8002130 <osDelay>
 8000932:	e7fb      	b.n	800092c <StartDefaultTask+0x8>

08000934 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000946:	f000 fa47 	bl	8000dd8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800094a:	2301      	movs	r3, #1
 800094c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800094e:	2300      	movs	r3, #0
 8000950:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000956:	231f      	movs	r3, #31
 8000958:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800095a:	2387      	movs	r3, #135	@ 0x87
 800095c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800095e:	2300      	movs	r3, #0
 8000960:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000962:	2300      	movs	r3, #0
 8000964:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000966:	2301      	movs	r3, #1
 8000968:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800096a:	2301      	movs	r3, #1
 800096c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fa65 	bl	8000e48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800097e:	2004      	movs	r0, #4
 8000980:	f000 fa42 	bl	8000e08 <HAL_MPU_Enable>

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_MspInit+0x38>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a4:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_MspInit+0x38>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_MspInit+0x38>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	210f      	movs	r1, #15
 80009c0:	f06f 0001 	mvn.w	r0, #1
 80009c4:	f000 f9d3 	bl	8000d6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	58024400 	.word	0x58024400

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0e:	f000 f8a7 	bl	8000b60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a12:	f003 fbf7 	bl	8004204 <xTaskGetSchedulerState>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d001      	beq.n	8000a20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a1c:	f002 f83c 	bl	8002a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a60 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000a28:	f7ff fd08 	bl	800043c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a2c:	f7ff fc58 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f005 ffc7 	bl	80069e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd09 	bl	8000470 <main>
  bx  lr
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a68:	2400079c 	.word	0x2400079c
  ldr r2, =_sidata
 8000a6c:	08007978 	.word	0x08007978
  ldr r2, =_sbss
 8000a70:	2400079c 	.word	0x2400079c
  ldr r4, =_ebss
 8000a74:	24005338 	.word	0x24005338

08000a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC3_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f968 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a88:	f001 f8c8 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_Init+0x68>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	4913      	ldr	r1, [pc, #76]	@ (8000ae8 <HAL_Init+0x6c>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_Init+0x68>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <HAL_Init+0x6c>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	f003 031f 	and.w	r3, r3, #31
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_Init+0x70>)
 8000abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8000af0 <HAL_Init+0x74>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f814 	bl	8000af4 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e002      	b.n	8000adc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff ff5f 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	08006c34 	.word	0x08006c34
 8000aec:	24000004 	.word	0x24000004
 8000af0:	24000000 	.word	0x24000000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_InitTick+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e021      	b.n	8000b4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_InitTick+0x64>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_InitTick+0x60>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f94d 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f917 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_InitTick+0x68>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2400000c 	.word	0x2400000c
 8000b58:	24000000 	.word	0x24000000
 8000b5c:	24000008 	.word	0x24000008

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2400000c 	.word	0x2400000c
 8000b84:	24000818 	.word	0x24000818

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	24000818 	.word	0x24000818

08000ba0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetREVID+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0c1b      	lsrs	r3, r3, #16
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	5c001000 	.word	0x5c001000

08000bb8 <__NVIC_SetPriorityGrouping>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	@ (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff40 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff33 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa4 	bl	8000d14 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ddc:	f3bf 8f5f 	dmb	sy
}
 8000de0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <HAL_MPU_Disable+0x28>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de6:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_MPU_Disable+0x28>)
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_MPU_Disable+0x2c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	e000ed90 	.word	0xe000ed90

08000e08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <HAL_MPU_Enable+0x38>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_MPU_Enable+0x3c>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <HAL_MPU_Enable+0x3c>)
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e26:	f3bf 8f4f 	dsb	sy
}
 8000e2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e2c:	f3bf 8f6f 	isb	sy
}
 8000e30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed90 	.word	0xe000ed90
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	785a      	ldrb	r2, [r3, #1]
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <HAL_MPU_ConfigRegion+0x7c>)
 8000e56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_MPU_ConfigRegion+0x7c>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <HAL_MPU_ConfigRegion+0x7c>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e64:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <HAL_MPU_ConfigRegion+0x7c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7b1b      	ldrb	r3, [r3, #12]
 8000e70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7adb      	ldrb	r3, [r3, #11]
 8000e76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7a9b      	ldrb	r3, [r3, #10]
 8000e7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7b5b      	ldrb	r3, [r3, #13]
 8000e86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7b9b      	ldrb	r3, [r3, #14]
 8000e8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7bdb      	ldrb	r3, [r3, #15]
 8000e96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7a5b      	ldrb	r3, [r3, #9]
 8000e9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7a1b      	ldrb	r3, [r3, #8]
 8000ea6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ea8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eb2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eb4:	6113      	str	r3, [r2, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed90 	.word	0xe000ed90

08000ec8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000ed0:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_HSEM_FastTake+0x2c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3320      	adds	r3, #32
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_HSEM_FastTake+0x30>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d101      	bne.n	8000ee4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e000      	b.n	8000ee6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	58026400 	.word	0x58026400
 8000ef8:	80000300 	.word	0x80000300

08000efc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000f06:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <HAL_HSEM_Release+0x24>)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	58026400 	.word	0x58026400

08000f24 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_HSEM_ActivateNotification+0x20>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4904      	ldr	r1, [pc, #16]	@ (8000f44 <HAL_HSEM_ActivateNotification+0x20>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	58026500 	.word	0x58026500

08000f48 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000f50:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d00a      	beq.n	8000f72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d001      	beq.n	8000f6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e040      	b.n	8000ff0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e03e      	b.n	8000ff0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000f7a:	491f      	ldr	r1, [pc, #124]	@ (8000ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000f82:	f7ff fe01 	bl	8000b88 <HAL_GetTick>
 8000f86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f88:	e009      	b.n	8000f9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f8a:	f7ff fdfd 	bl	8000b88 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f98:	d901      	bls.n	8000f9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e028      	b.n	8000ff0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000faa:	d1ee      	bne.n	8000f8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b1e      	cmp	r3, #30
 8000fb0:	d008      	beq.n	8000fc4 <HAL_PWREx_ConfigSupply+0x7c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fb6:	d005      	beq.n	8000fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b1d      	cmp	r3, #29
 8000fbc:	d002      	beq.n	8000fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8000fc2:	d114      	bne.n	8000fee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000fc4:	f7ff fde0 	bl	8000b88 <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000fca:	e009      	b.n	8000fe0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fcc:	f7ff fddc 	bl	8000b88 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fda:	d901      	bls.n	8000fe0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e007      	b.n	8000ff0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fec:	d1ee      	bne.n	8000fcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024800 	.word	0x58024800

08000ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	f000 bc48 	b.w	80018a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 8088 	beq.w	800112e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101e:	4b99      	ldr	r3, [pc, #612]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001028:	4b96      	ldr	r3, [pc, #600]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800102a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800102e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001030:	2b10      	cmp	r3, #16
 8001032:	d007      	beq.n	8001044 <HAL_RCC_OscConfig+0x48>
 8001034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001036:	2b18      	cmp	r3, #24
 8001038:	d111      	bne.n	800105e <HAL_RCC_OscConfig+0x62>
 800103a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d10c      	bne.n	800105e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4b8f      	ldr	r3, [pc, #572]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d06d      	beq.n	800112c <HAL_RCC_OscConfig+0x130>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d169      	bne.n	800112c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	f000 bc21 	b.w	80018a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x7a>
 8001068:	4b86      	ldr	r3, [pc, #536]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a85      	ldr	r2, [pc, #532]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	e02e      	b.n	80010d4 <HAL_RCC_OscConfig+0xd8>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0x9c>
 800107e:	4b81      	ldr	r3, [pc, #516]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a80      	ldr	r2, [pc, #512]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b7e      	ldr	r3, [pc, #504]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a7d      	ldr	r2, [pc, #500]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e01d      	b.n	80010d4 <HAL_RCC_OscConfig+0xd8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0xc0>
 80010a2:	4b78      	ldr	r3, [pc, #480]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a77      	ldr	r2, [pc, #476]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b75      	ldr	r3, [pc, #468]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a74      	ldr	r2, [pc, #464]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e00b      	b.n	80010d4 <HAL_RCC_OscConfig+0xd8>
 80010bc:	4b71      	ldr	r3, [pc, #452]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a70      	ldr	r2, [pc, #448]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a6d      	ldr	r2, [pc, #436]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fd54 	bl	8000b88 <HAL_GetTick>
 80010e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fd50 	bl	8000b88 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	@ 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e3d4      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f6:	4b63      	ldr	r3, [pc, #396]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0xe8>
 8001102:	e014      	b.n	800112e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fd40 	bl	8000b88 <HAL_GetTick>
 8001108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fd3c 	bl	8000b88 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	@ 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e3c0      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800111e:	4b59      	ldr	r3, [pc, #356]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x110>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80ca 	beq.w	80012d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113c:	4b51      	ldr	r3, [pc, #324]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001146:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_RCC_OscConfig+0x166>
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	2b18      	cmp	r3, #24
 8001156:	d156      	bne.n	8001206 <HAL_RCC_OscConfig+0x20a>
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d151      	bne.n	8001206 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001162:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x17e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e392      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800117a:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 0219 	bic.w	r2, r3, #25
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	493f      	ldr	r1, [pc, #252]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fcfc 	bl	8000b88 <HAL_GetTick>
 8001190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fcf8 	bl	8000b88 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e37c      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a6:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	f7ff fcf5 	bl	8000ba0 <HAL_GetREVID>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80011bc:	4293      	cmp	r3, r2
 80011be:	d817      	bhi.n	80011f0 <HAL_RCC_OscConfig+0x1f4>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b40      	cmp	r3, #64	@ 0x40
 80011c6:	d108      	bne.n	80011da <HAL_RCC_OscConfig+0x1de>
 80011c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80011d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80011d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d8:	e07a      	b.n	80012d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	031b      	lsls	r3, r3, #12
 80011e8:	4926      	ldr	r1, [pc, #152]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ee:	e06f      	b.n	80012d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	4921      	ldr	r1, [pc, #132]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001204:	e064      	b.n	80012d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d047      	beq.n	800129e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0219 	bic.w	r2, r3, #25
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	491a      	ldr	r1, [pc, #104]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fcb2 	bl	8000b88 <HAL_GetTick>
 8001224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fcae 	bl	8000b88 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e332      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	f7ff fcab 	bl	8000ba0 <HAL_GetREVID>
 800124a:	4603      	mov	r3, r0
 800124c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001250:	4293      	cmp	r3, r2
 8001252:	d819      	bhi.n	8001288 <HAL_RCC_OscConfig+0x28c>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b40      	cmp	r3, #64	@ 0x40
 800125a:	d108      	bne.n	800126e <HAL_RCC_OscConfig+0x272>
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126a:	6053      	str	r3, [r2, #4]
 800126c:	e030      	b.n	80012d0 <HAL_RCC_OscConfig+0x2d4>
 800126e:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	031b      	lsls	r3, r3, #12
 800127c:	4901      	ldr	r1, [pc, #4]	@ (8001284 <HAL_RCC_OscConfig+0x288>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
 8001282:	e025      	b.n	80012d0 <HAL_RCC_OscConfig+0x2d4>
 8001284:	58024400 	.word	0x58024400
 8001288:	4b9a      	ldr	r3, [pc, #616]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	4997      	ldr	r1, [pc, #604]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e018      	b.n	80012d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b95      	ldr	r3, [pc, #596]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a94      	ldr	r2, [pc, #592]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fc6d 	bl	8000b88 <HAL_GetTick>
 80012ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc69 	bl	8000b88 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e2ed      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c4:	4b8b      	ldr	r3, [pc, #556]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a9 	beq.w	8001430 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012de:	4b85      	ldr	r3, [pc, #532]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012e8:	4b82      	ldr	r3, [pc, #520]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d007      	beq.n	8001304 <HAL_RCC_OscConfig+0x308>
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b18      	cmp	r3, #24
 80012f8:	d13a      	bne.n	8001370 <HAL_RCC_OscConfig+0x374>
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d135      	bne.n	8001370 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001304:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x320>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b80      	cmp	r3, #128	@ 0x80
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e2c1      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800131c:	f7ff fc40 	bl	8000ba0 <HAL_GetREVID>
 8001320:	4603      	mov	r3, r0
 8001322:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001326:	4293      	cmp	r3, r2
 8001328:	d817      	bhi.n	800135a <HAL_RCC_OscConfig+0x35e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	2b20      	cmp	r3, #32
 8001330:	d108      	bne.n	8001344 <HAL_RCC_OscConfig+0x348>
 8001332:	4b70      	ldr	r3, [pc, #448]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800133a:	4a6e      	ldr	r2, [pc, #440]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800133c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001340:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001342:	e075      	b.n	8001430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001344:	4b6b      	ldr	r3, [pc, #428]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	069b      	lsls	r3, r3, #26
 8001352:	4968      	ldr	r1, [pc, #416]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001358:	e06a      	b.n	8001430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800135a:	4b66      	ldr	r3, [pc, #408]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	061b      	lsls	r3, r3, #24
 8001368:	4962      	ldr	r1, [pc, #392]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800136a:	4313      	orrs	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800136e:	e05f      	b.n	8001430 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d042      	beq.n	80013fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001378:	4b5e      	ldr	r3, [pc, #376]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a5d      	ldr	r2, [pc, #372]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800137e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fc00 	bl	8000b88 <HAL_GetTick>
 8001388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800138c:	f7ff fbfc 	bl	8000b88 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e280      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800139e:	4b55      	ldr	r3, [pc, #340]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013aa:	f7ff fbf9 	bl	8000ba0 <HAL_GetREVID>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d817      	bhi.n	80013e8 <HAL_RCC_OscConfig+0x3ec>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d108      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3d6>
 80013c0:	4b4c      	ldr	r3, [pc, #304]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013c8:	4a4a      	ldr	r2, [pc, #296]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013ce:	6053      	str	r3, [r2, #4]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0x434>
 80013d2:	4b48      	ldr	r3, [pc, #288]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	069b      	lsls	r3, r3, #26
 80013e0:	4944      	ldr	r1, [pc, #272]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
 80013e6:	e023      	b.n	8001430 <HAL_RCC_OscConfig+0x434>
 80013e8:	4b42      	ldr	r3, [pc, #264]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	061b      	lsls	r3, r3, #24
 80013f6:	493f      	ldr	r1, [pc, #252]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
 80013fc:	e018      	b.n	8001430 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a3c      	ldr	r2, [pc, #240]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fbbd 	bl	8000b88 <HAL_GetTick>
 800140e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001412:	f7ff fbb9 	bl	8000b88 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e23d      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001424:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d036      	beq.n	80014aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d019      	beq.n	8001478 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 8001446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001448:	4a2a      	ldr	r2, [pc, #168]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fb9a 	bl	8000b88 <HAL_GetTick>
 8001454:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fb96 	bl	8000b88 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e21a      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800146a:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800146c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x45c>
 8001476:	e018      	b.n	80014aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800147c:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fb80 	bl	8000b88 <HAL_GetTick>
 8001488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fb7c 	bl	8000b88 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e200      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d039      	beq.n	800152a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fb5d 	bl	8000b88 <HAL_GetTick>
 80014ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014d2:	f7ff fb59 	bl	8000b88 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1dd      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_RCC_OscConfig+0x4f8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4d6>
 80014f0:	e01b      	b.n	800152a <HAL_RCC_OscConfig+0x52e>
 80014f2:	bf00      	nop
 80014f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a9a      	ldr	r2, [pc, #616]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80014fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001504:	f7ff fb40 	bl	8000b88 <HAL_GetTick>
 8001508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150c:	f7ff fb3c 	bl	8000b88 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1c0      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800151e:	4b92      	ldr	r3, [pc, #584]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8081 	beq.w	800163a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001538:	4b8c      	ldr	r3, [pc, #560]	@ (800176c <HAL_RCC_OscConfig+0x770>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a8b      	ldr	r2, [pc, #556]	@ (800176c <HAL_RCC_OscConfig+0x770>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001544:	f7ff fb20 	bl	8000b88 <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7ff fb1c 	bl	8000b88 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1a0      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800155e:	4b83      	ldr	r3, [pc, #524]	@ (800176c <HAL_RCC_OscConfig+0x770>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x584>
 8001572:	4b7d      	ldr	r3, [pc, #500]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001576:	4a7c      	ldr	r2, [pc, #496]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	@ 0x70
 800157e:	e02d      	b.n	80015dc <HAL_RCC_OscConfig+0x5e0>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10c      	bne.n	80015a2 <HAL_RCC_OscConfig+0x5a6>
 8001588:	4b77      	ldr	r3, [pc, #476]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158c:	4a76      	ldr	r2, [pc, #472]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	@ 0x70
 8001594:	4b74      	ldr	r3, [pc, #464]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a73      	ldr	r2, [pc, #460]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x5e0>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c8>
 80015aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x5e0>
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a67      	ldr	r2, [pc, #412]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d0:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a64      	ldr	r2, [pc, #400]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fad0 	bl	8000b88 <HAL_GetTick>
 80015e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff facc 	bl	8000b88 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e14e      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001602:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0ee      	beq.n	80015ec <HAL_RCC_OscConfig+0x5f0>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff faba 	bl	8000b88 <HAL_GetTick>
 8001614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fab6 	bl	8000b88 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e138      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162e:	4b4e      	ldr	r3, [pc, #312]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 812d 	beq.w	800189e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001644:	4b48      	ldr	r3, [pc, #288]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800164c:	2b18      	cmp	r3, #24
 800164e:	f000 80bd 	beq.w	80017cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 809e 	bne.w	8001798 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a41      	ldr	r2, [pc, #260]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fa8e 	bl	8000b88 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fa8a 	bl	8000b88 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e10e      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001682:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168e:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001690:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_RCC_OscConfig+0x774>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	430a      	orrs	r2, r1
 80016a2:	4931      	ldr	r1, [pc, #196]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	3b01      	subs	r3, #1
 80016ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b6:	3b01      	subs	r3, #1
 80016b8:	025b      	lsls	r3, r3, #9
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d0:	3b01      	subs	r3, #1
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80016d8:	4923      	ldr	r1, [pc, #140]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_RCC_OscConfig+0x778>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016f6:	00d2      	lsls	r2, r2, #3
 80016f8:	491b      	ldr	r1, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	f023 020c 	bic.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4917      	ldr	r1, [pc, #92]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800170c:	4313      	orrs	r3, r2
 800170e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	f023 0202 	bic.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	4912      	ldr	r1, [pc, #72]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800173c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <HAL_RCC_OscConfig+0x76c>)
 8001758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800175c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fa13 	bl	8000b88 <HAL_GetTick>
 8001762:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001764:	e011      	b.n	800178a <HAL_RCC_OscConfig+0x78e>
 8001766:	bf00      	nop
 8001768:	58024400 	.word	0x58024400
 800176c:	58024800 	.word	0x58024800
 8001770:	fffffc0c 	.word	0xfffffc0c
 8001774:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fa06 	bl	8000b88 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e08a      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x77c>
 8001796:	e082      	b.n	800189e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b43      	ldr	r3, [pc, #268]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a42      	ldr	r2, [pc, #264]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 800179e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9f0 	bl	8000b88 <HAL_GetTick>
 80017a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f9ec 	bl	8000b88 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e070      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017be:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x7b0>
 80017ca:	e068      	b.n	800189e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017cc:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017d2:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d031      	beq.n	8001844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0203 	and.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d12a      	bne.n	8001844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d122      	bne.n	8001844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d11a      	bne.n	8001844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	0a5b      	lsrs	r3, r3, #9
 8001812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d111      	bne.n	8001844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d108      	bne.n	8001844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0e1b      	lsrs	r3, r3, #24
 8001836:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e02b      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001852:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	429a      	cmp	r2, r3
 800185c:	d01f      	beq.n	800189e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	4a11      	ldr	r2, [pc, #68]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800186a:	f7ff f98d 	bl	8000b88 <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001870:	bf00      	nop
 8001872:	f7ff f989 	bl	8000b88 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	4293      	cmp	r3, r2
 800187c:	d0f9      	beq.n	8001872 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 8001880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_RCC_OscConfig+0x8b0>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800188a:	00d2      	lsls	r2, r2, #3
 800188c:	4906      	ldr	r1, [pc, #24]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 800188e:	4313      	orrs	r3, r2
 8001890:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001892:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <HAL_RCC_OscConfig+0x8ac>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3730      	adds	r7, #48	@ 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58024400 	.word	0x58024400
 80018ac:	ffff0007 	.word	0xffff0007

080018b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e19c      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d910      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b87      	ldr	r3, [pc, #540]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 020f 	bic.w	r2, r3, #15
 80018da:	4985      	ldr	r1, [pc, #532]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b83      	ldr	r3, [pc, #524]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e184      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d010      	beq.n	8001922 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	4b7b      	ldr	r3, [pc, #492]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800190c:	429a      	cmp	r2, r3
 800190e:	d908      	bls.n	8001922 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001910:	4b78      	ldr	r3, [pc, #480]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4975      	ldr	r1, [pc, #468]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 800191e:	4313      	orrs	r3, r2
 8001920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d010      	beq.n	8001950 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	4b70      	ldr	r3, [pc, #448]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800193a:	429a      	cmp	r2, r3
 800193c:	d908      	bls.n	8001950 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800193e:	4b6d      	ldr	r3, [pc, #436]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	496a      	ldr	r1, [pc, #424]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 800194c:	4313      	orrs	r3, r2
 800194e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	4b64      	ldr	r3, [pc, #400]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001968:	429a      	cmp	r2, r3
 800196a:	d908      	bls.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800196c:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	495e      	ldr	r1, [pc, #376]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 800197a:	4313      	orrs	r3, r2
 800197c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	2b00      	cmp	r3, #0
 8001988:	d010      	beq.n	80019ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001996:	429a      	cmp	r2, r3
 8001998:	d908      	bls.n	80019ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800199a:	4b56      	ldr	r3, [pc, #344]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4953      	ldr	r1, [pc, #332]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d010      	beq.n	80019da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d908      	bls.n	80019da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f023 020f 	bic.w	r2, r3, #15
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4947      	ldr	r1, [pc, #284]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d055      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019e6:	4b43      	ldr	r3, [pc, #268]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4940      	ldr	r1, [pc, #256]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a00:	4b3c      	ldr	r3, [pc, #240]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d121      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0f6      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d115      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0ea      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0de      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a40:	4b2c      	ldr	r3, [pc, #176]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0d6      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a50:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f023 0207 	bic.w	r2, r3, #7
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4925      	ldr	r1, [pc, #148]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a62:	f7ff f891 	bl	8000b88 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7ff f88d 	bl	8000b88 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0be      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d1eb      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d208      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f023 020f 	bic.w	r2, r3, #15
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	490e      	ldr	r1, [pc, #56]	@ (8001af4 <HAL_RCC_ClockConfig+0x244>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d214      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 020f 	bic.w	r2, r3, #15
 8001ad6:	4906      	ldr	r1, [pc, #24]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <HAL_RCC_ClockConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e086      	b.n	8001bfe <HAL_RCC_ClockConfig+0x34e>
 8001af0:	52002000 	.word	0x52002000
 8001af4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	4b3f      	ldr	r3, [pc, #252]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d208      	bcs.n	8001b26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b14:	4b3c      	ldr	r3, [pc, #240]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4939      	ldr	r1, [pc, #228]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d010      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d208      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b42:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	492e      	ldr	r1, [pc, #184]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d208      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b70:	4b25      	ldr	r3, [pc, #148]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4922      	ldr	r1, [pc, #136]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d208      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4917      	ldr	r1, [pc, #92]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bb0:	f000 f834 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	4912      	ldr	r1, [pc, #72]	@ (8001c0c <HAL_RCC_ClockConfig+0x35c>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_RCC_ClockConfig+0x358>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <HAL_RCC_ClockConfig+0x35c>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <HAL_RCC_ClockConfig+0x360>)
 8001be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_RCC_ClockConfig+0x364>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_RCC_ClockConfig+0x368>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe ff7e 	bl	8000af4 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	08006c34 	.word	0x08006c34
 8001c10:	24000004 	.word	0x24000004
 8001c14:	24000000 	.word	0x24000000
 8001c18:	24000008 	.word	0x24000008

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c22:	4bb3      	ldr	r3, [pc, #716]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c2a:	2b18      	cmp	r3, #24
 8001c2c:	f200 8155 	bhi.w	8001eda <HAL_RCC_GetSysClockFreq+0x2be>
 8001c30:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c9d 	.word	0x08001c9d
 8001c3c:	08001edb 	.word	0x08001edb
 8001c40:	08001edb 	.word	0x08001edb
 8001c44:	08001edb 	.word	0x08001edb
 8001c48:	08001edb 	.word	0x08001edb
 8001c4c:	08001edb 	.word	0x08001edb
 8001c50:	08001edb 	.word	0x08001edb
 8001c54:	08001edb 	.word	0x08001edb
 8001c58:	08001cc3 	.word	0x08001cc3
 8001c5c:	08001edb 	.word	0x08001edb
 8001c60:	08001edb 	.word	0x08001edb
 8001c64:	08001edb 	.word	0x08001edb
 8001c68:	08001edb 	.word	0x08001edb
 8001c6c:	08001edb 	.word	0x08001edb
 8001c70:	08001edb 	.word	0x08001edb
 8001c74:	08001edb 	.word	0x08001edb
 8001c78:	08001cc9 	.word	0x08001cc9
 8001c7c:	08001edb 	.word	0x08001edb
 8001c80:	08001edb 	.word	0x08001edb
 8001c84:	08001edb 	.word	0x08001edb
 8001c88:	08001edb 	.word	0x08001edb
 8001c8c:	08001edb 	.word	0x08001edb
 8001c90:	08001edb 	.word	0x08001edb
 8001c94:	08001edb 	.word	0x08001edb
 8001c98:	08001ccf 	.word	0x08001ccf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c9c:	4b94      	ldr	r3, [pc, #592]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ca8:	4b91      	ldr	r3, [pc, #580]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	4a90      	ldr	r2, [pc, #576]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001cba:	e111      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cbc:	4b8d      	ldr	r3, [pc, #564]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cbe:	61bb      	str	r3, [r7, #24]
      break;
 8001cc0:	e10e      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cc4:	61bb      	str	r3, [r7, #24]
      break;
 8001cc6:	e10b      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cca:	61bb      	str	r3, [r7, #24]
      break;
 8001ccc:	e108      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cce:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001cd8:	4b85      	ldr	r3, [pc, #532]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ce4:	4b82      	ldr	r3, [pc, #520]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001cee:	4b80      	ldr	r3, [pc, #512]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80e1 	beq.w	8001ed4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f000 8083 	beq.w	8001e20 <HAL_RCC_GetSysClockFreq+0x204>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f200 80a1 	bhi.w	8001e64 <HAL_RCC_GetSysClockFreq+0x248>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x114>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d056      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d2e:	e099      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d02d      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	08db      	lsrs	r3, r3, #3
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	4a6b      	ldr	r2, [pc, #428]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d66:	4b62      	ldr	r3, [pc, #392]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001d96:	e087      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001daa:	4b51      	ldr	r3, [pc, #324]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dbe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dda:	e065      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dee:	4b40      	ldr	r3, [pc, #256]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e1e:	e043      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001f0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e62:	e021      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ea6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	0a5b      	lsrs	r3, r3, #9
 8001eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ecc:	ee17 3a90 	vmov	r3, s15
 8001ed0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
      break;
 8001ed8:	e002      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001edc:	61bb      	str	r3, [r7, #24]
      break;
 8001ede:	bf00      	nop
  }

  return sysclockfreq;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	03d09000 	.word	0x03d09000
 8001ef8:	003d0900 	.word	0x003d0900
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	46000000 	.word	0x46000000
 8001f04:	4c742400 	.word	0x4c742400
 8001f08:	4a742400 	.word	0x4a742400
 8001f0c:	4af42400 	.word	0x4af42400

08001f10 <__NVIC_SetPriority>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f06f 0004 	mvn.w	r0, #4
 8001f6e:	f7ff ffcf 	bl	8001f10 <__NVIC_SetPriority>
#endif
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f7e:	f3ef 8305 	mrs	r3, IPSR
 8001f82:	603b      	str	r3, [r7, #0]
  return(result);
 8001f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f8a:	f06f 0305 	mvn.w	r3, #5
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	e00c      	b.n	8001fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <osKernelInitialize+0x44>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <osKernelInitialize+0x44>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	e002      	b.n	8001fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	2400081c 	.word	0x2400081c

08001fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc6:	f3ef 8305 	mrs	r3, IPSR
 8001fca:	603b      	str	r3, [r7, #0]
  return(result);
 8001fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8001fd2:	f06f 0305 	mvn.w	r3, #5
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	e010      	b.n	8001ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <osKernelStart+0x48>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d109      	bne.n	8001ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fe2:	f7ff ffbf 	bl	8001f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <osKernelStart+0x48>)
 8001fe8:	2202      	movs	r2, #2
 8001fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fec:	f001 fcbc 	bl	8003968 <vTaskStartScheduler>
      stat = osOK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	e002      	b.n	8001ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2400081c 	.word	0x2400081c

0800200c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	@ 0x38
 8002010:	af04      	add	r7, sp, #16
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800201c:	f3ef 8305 	mrs	r3, IPSR
 8002020:	617b      	str	r3, [r7, #20]
  return(result);
 8002022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002024:	2b00      	cmp	r3, #0
 8002026:	d17e      	bne.n	8002126 <osThreadNew+0x11a>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d07b      	beq.n	8002126 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002032:	2318      	movs	r3, #24
 8002034:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d045      	beq.n	80020d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <osThreadNew+0x48>
        name = attr->name;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <osThreadNew+0x6e>
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b38      	cmp	r3, #56	@ 0x38
 800206c:	d805      	bhi.n	800207a <osThreadNew+0x6e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <osThreadNew+0x72>
        return (NULL);
 800207a:	2300      	movs	r3, #0
 800207c:	e054      	b.n	8002128 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <osThreadNew+0xa8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b5b      	cmp	r3, #91	@ 0x5b
 800209c:	d90a      	bls.n	80020b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <osThreadNew+0xa8>
        mem = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e010      	b.n	80020d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10c      	bne.n	80020d6 <osThreadNew+0xca>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <osThreadNew+0xca>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <osThreadNew+0xca>
          mem = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	e001      	b.n	80020d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d110      	bne.n	80020fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020e4:	9202      	str	r2, [sp, #8]
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f001 fa5c 	bl	80035b0 <xTaskCreateStatic>
 80020f8:	4603      	mov	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e013      	b.n	8002126 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d110      	bne.n	8002126 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	b29a      	uxth	r2, r3
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f001 faaa 	bl	8003670 <xTaskCreate>
 800211c:	4603      	mov	r3, r0
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <osThreadNew+0x11a>
            hTask = NULL;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002126:	693b      	ldr	r3, [r7, #16]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3728      	adds	r7, #40	@ 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002138:	f3ef 8305 	mrs	r3, IPSR
 800213c:	60bb      	str	r3, [r7, #8]
  return(result);
 800213e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <osDelay+0x1c>
    stat = osErrorISR;
 8002144:	f06f 0305 	mvn.w	r3, #5
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e007      	b.n	800215c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 fbd0 	bl	80038fc <vTaskDelay>
    }
  }

  return (stat);
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <vApplicationGetIdleTaskMemory+0x2c>)
 8002178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4a06      	ldr	r2, [pc, #24]	@ (8002198 <vApplicationGetIdleTaskMemory+0x30>)
 800217e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2280      	movs	r2, #128	@ 0x80
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	24000820 	.word	0x24000820
 8002198:	2400087c 	.word	0x2400087c

0800219c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a07      	ldr	r2, [pc, #28]	@ (80021c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80021ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <vApplicationGetTimerTaskMemory+0x30>)
 80021b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	24000a7c 	.word	0x24000a7c
 80021cc:	24000ad8 	.word	0x24000ad8

080021d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80021dc:	f001 fc2c 	bl	8003a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80021e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002354 <pvPortMalloc+0x184>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80021e8:	f000 f924 	bl	8002434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80021ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002358 <pvPortMalloc+0x188>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 8095 	bne.w	8002324 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01e      	beq.n	800223e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002200:	2208      	movs	r2, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	3308      	adds	r3, #8
 800221a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	f3bf 8f6f 	isb	sy
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	e7fd      	b.n	800223a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d06f      	beq.n	8002324 <pvPortMalloc+0x154>
 8002244:	4b45      	ldr	r3, [pc, #276]	@ (800235c <pvPortMalloc+0x18c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	d86a      	bhi.n	8002324 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800224e:	4b44      	ldr	r3, [pc, #272]	@ (8002360 <pvPortMalloc+0x190>)
 8002250:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <pvPortMalloc+0x190>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002258:	e004      	b.n	8002264 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d903      	bls.n	8002276 <pvPortMalloc+0xa6>
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f1      	bne.n	800225a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002276:	4b37      	ldr	r3, [pc, #220]	@ (8002354 <pvPortMalloc+0x184>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227c:	429a      	cmp	r2, r3
 800227e:	d051      	beq.n	8002324 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2208      	movs	r2, #8
 8002286:	4413      	add	r3, r2
 8002288:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	2308      	movs	r3, #8
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	429a      	cmp	r2, r3
 80022a0:	d920      	bls.n	80022e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <pvPortMalloc+0xfc>
	__asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	613b      	str	r3, [r7, #16]
}
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022de:	69b8      	ldr	r0, [r7, #24]
 80022e0:	f000 f90a 	bl	80024f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <pvPortMalloc+0x18c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	4a1b      	ldr	r2, [pc, #108]	@ (800235c <pvPortMalloc+0x18c>)
 80022f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <pvPortMalloc+0x18c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <pvPortMalloc+0x194>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d203      	bcs.n	8002306 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022fe:	4b17      	ldr	r3, [pc, #92]	@ (800235c <pvPortMalloc+0x18c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a18      	ldr	r2, [pc, #96]	@ (8002364 <pvPortMalloc+0x194>)
 8002304:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <pvPortMalloc+0x188>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	431a      	orrs	r2, r3
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800231a:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <pvPortMalloc+0x198>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <pvPortMalloc+0x198>)
 8002322:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002324:	f001 fb96 	bl	8003a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <pvPortMalloc+0x17a>
	__asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	60fb      	str	r3, [r7, #12]
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	e7fd      	b.n	8002346 <pvPortMalloc+0x176>
	return pvReturn;
 800234a:	69fb      	ldr	r3, [r7, #28]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3728      	adds	r7, #40	@ 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	24004ae0 	.word	0x24004ae0
 8002358:	24004af4 	.word	0x24004af4
 800235c:	24004ae4 	.word	0x24004ae4
 8002360:	24004ad8 	.word	0x24004ad8
 8002364:	24004ae8 	.word	0x24004ae8
 8002368:	24004aec 	.word	0x24004aec

0800236c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04f      	beq.n	800241e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800237e:	2308      	movs	r3, #8
 8002380:	425b      	negs	r3, r3
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4413      	add	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <vPortFree+0xbc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <vPortFree+0x46>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	60fb      	str	r3, [r7, #12]
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <vPortFree+0x66>
	__asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	60bb      	str	r3, [r7, #8]
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <vPortFree+0xbc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01e      	beq.n	800241e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11a      	bne.n	800241e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <vPortFree+0xbc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80023f8:	f001 fb1e 	bl	8003a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <vPortFree+0xc0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4413      	add	r3, r2
 8002406:	4a09      	ldr	r2, [pc, #36]	@ (800242c <vPortFree+0xc0>)
 8002408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f000 f874 	bl	80024f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002410:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <vPortFree+0xc4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <vPortFree+0xc4>)
 8002418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800241a:	f001 fb1b 	bl	8003a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24004af4 	.word	0x24004af4
 800242c:	24004ae4 	.word	0x24004ae4
 8002430:	24004af0 	.word	0x24004af0

08002434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800243a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800243e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <prvHeapInit+0xac>)
 8002442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3307      	adds	r3, #7
 8002452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <prvHeapInit+0xac>)
 8002464:	4413      	add	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800246c:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <prvHeapInit+0xb0>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002472:	4b1c      	ldr	r3, [pc, #112]	@ (80024e4 <prvHeapInit+0xb0>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002480:	2208      	movs	r2, #8
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0307 	bic.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a15      	ldr	r2, [pc, #84]	@ (80024e8 <prvHeapInit+0xb4>)
 8002494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <prvHeapInit+0xb4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <prvHeapInit+0xb4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	1ad2      	subs	r2, r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <prvHeapInit+0xb4>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <prvHeapInit+0xb8>)
 80024c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <prvHeapInit+0xbc>)
 80024ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <prvHeapInit+0xc0>)
 80024ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	24000ed8 	.word	0x24000ed8
 80024e4:	24004ad8 	.word	0x24004ad8
 80024e8:	24004ae0 	.word	0x24004ae0
 80024ec:	24004ae8 	.word	0x24004ae8
 80024f0:	24004ae4 	.word	0x24004ae4
 80024f4:	24004af4 	.word	0x24004af4

080024f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <prvInsertBlockIntoFreeList+0xac>)
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e002      	b.n	800250c <prvInsertBlockIntoFreeList+0x14>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d8f7      	bhi.n	8002506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d108      	bne.n	800253a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	441a      	add	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	441a      	add	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d118      	bne.n	8002580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d00d      	beq.n	8002576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e008      	b.n	8002588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e003      	b.n	8002588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d002      	beq.n	8002596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	24004ad8 	.word	0x24004ad8
 80025a8:	24004ae0 	.word	0x24004ae0

080025ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f103 0208 	add.w	r2, r3, #8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0208 	add.w	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d103      	bne.n	800266e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e00c      	b.n	8002688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3308      	adds	r3, #8
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e002      	b.n	800267c <vListInsert+0x2e>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	d2f6      	bcs.n	8002676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6852      	ldr	r2, [r2, #4]
 80026e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d103      	bne.n	80026f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b04      	subs	r3, #4
 8002724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800272c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b04      	subs	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b04      	subs	r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002744:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <pxPortInitialiseStack+0x64>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b14      	subs	r3, #20
 800274e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b04      	subs	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f06f 0202 	mvn.w	r2, #2
 8002762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3b20      	subs	r3, #32
 8002768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	0800277d 	.word	0x0800277d

0800277c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <prvTaskExitError+0x58>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d00b      	beq.n	80027a8 <prvTaskExitError+0x2c>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	60fb      	str	r3, [r7, #12]
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <prvTaskExitError+0x28>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	60bb      	str	r3, [r7, #8]
}
 80027ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027bc:	bf00      	nop
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0fc      	beq.n	80027be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	24000010 	.word	0x24000010
	...

080027e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027e0:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <pxCurrentTCBConst2>)
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	6808      	ldr	r0, [r1, #0]
 80027e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ea:	f380 8809 	msr	PSP, r0
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f380 8811 	msr	BASEPRI, r0
 80027fa:	4770      	bx	lr
 80027fc:	f3af 8000 	nop.w

08002800 <pxCurrentTCBConst2>:
 8002800:	24004b40 	.word	0x24004b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop

08002808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002808:	4808      	ldr	r0, [pc, #32]	@ (800282c <prvPortStartFirstTask+0x24>)
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	6800      	ldr	r0, [r0, #0]
 800280e:	f380 8808 	msr	MSP, r0
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f380 8814 	msr	CONTROL, r0
 800281a:	b662      	cpsie	i
 800281c:	b661      	cpsie	f
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	df00      	svc	0
 8002828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800282a:	bf00      	nop
 800282c:	e000ed08 	.word	0xe000ed08

08002830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <xPortStartScheduler+0x124>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a47      	ldr	r2, [pc, #284]	@ (8002958 <xPortStartScheduler+0x128>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10b      	bne.n	8002858 <xPortStartScheduler+0x28>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	60fb      	str	r3, [r7, #12]
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002858:	4b3e      	ldr	r3, [pc, #248]	@ (8002954 <xPortStartScheduler+0x124>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3f      	ldr	r2, [pc, #252]	@ (800295c <xPortStartScheduler+0x12c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10b      	bne.n	800287a <xPortStartScheduler+0x4a>
	__asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	613b      	str	r3, [r7, #16]
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	e7fd      	b.n	8002876 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800287a:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <xPortStartScheduler+0x130>)
 800287c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	22ff      	movs	r2, #255	@ 0xff
 800288a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <xPortStartScheduler+0x134>)
 80028a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028a2:	4b31      	ldr	r3, [pc, #196]	@ (8002968 <xPortStartScheduler+0x138>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028a8:	e009      	b.n	80028be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80028aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <xPortStartScheduler+0x138>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002968 <xPortStartScheduler+0x138>)
 80028b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	2b80      	cmp	r3, #128	@ 0x80
 80028c8:	d0ef      	beq.n	80028aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028ca:	4b27      	ldr	r3, [pc, #156]	@ (8002968 <xPortStartScheduler+0x138>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d00b      	beq.n	80028ee <xPortStartScheduler+0xbe>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	60bb      	str	r3, [r7, #8]
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	e7fd      	b.n	80028ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002968 <xPortStartScheduler+0x138>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <xPortStartScheduler+0x138>)
 80028f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <xPortStartScheduler+0x138>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <xPortStartScheduler+0x138>)
 8002902:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800290c:	4b17      	ldr	r3, [pc, #92]	@ (800296c <xPortStartScheduler+0x13c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a16      	ldr	r2, [pc, #88]	@ (800296c <xPortStartScheduler+0x13c>)
 8002912:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002918:	4b14      	ldr	r3, [pc, #80]	@ (800296c <xPortStartScheduler+0x13c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a13      	ldr	r2, [pc, #76]	@ (800296c <xPortStartScheduler+0x13c>)
 800291e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002924:	f000 f8da 	bl	8002adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <xPortStartScheduler+0x140>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800292e:	f000 f8f9 	bl	8002b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <xPortStartScheduler+0x144>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a0f      	ldr	r2, [pc, #60]	@ (8002974 <xPortStartScheduler+0x144>)
 8002938:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800293c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800293e:	f7ff ff63 	bl	8002808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002942:	f001 f9ef 	bl	8003d24 <vTaskSwitchContext>
	prvTaskExitError();
 8002946:	f7ff ff19 	bl	800277c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	e000ed00 	.word	0xe000ed00
 8002958:	410fc271 	.word	0x410fc271
 800295c:	410fc270 	.word	0x410fc270
 8002960:	e000e400 	.word	0xe000e400
 8002964:	24004af8 	.word	0x24004af8
 8002968:	24004afc 	.word	0x24004afc
 800296c:	e000ed20 	.word	0xe000ed20
 8002970:	24000010 	.word	0x24000010
 8002974:	e000ef34 	.word	0xe000ef34

08002978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	607b      	str	r3, [r7, #4]
}
 8002990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <vPortEnterCritical+0x5c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <vPortEnterCritical+0x5c>)
 800299a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800299c:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <vPortEnterCritical+0x5c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d110      	bne.n	80029c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <vPortEnterCritical+0x60>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	603b      	str	r3, [r7, #0]
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	e7fd      	b.n	80029c2 <vPortEnterCritical+0x4a>
	}
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	24000010 	.word	0x24000010
 80029d8:	e000ed04 	.word	0xe000ed04

080029dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80029e2:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <vPortExitCritical+0x50>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <vPortExitCritical+0x26>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	607b      	str	r3, [r7, #4]
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	e7fd      	b.n	80029fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <vPortExitCritical+0x50>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4a08      	ldr	r2, [pc, #32]	@ (8002a2c <vPortExitCritical+0x50>)
 8002a0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a0c:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <vPortExitCritical+0x50>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <vPortExitCritical+0x44>
 8002a14:	2300      	movs	r3, #0
 8002a16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	24000010 	.word	0x24000010

08002a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a30:	f3ef 8009 	mrs	r0, PSP
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <pxCurrentTCBConst>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f01e 0f10 	tst.w	lr, #16
 8002a40:	bf08      	it	eq
 8002a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4a:	6010      	str	r0, [r2, #0]
 8002a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002a54:	f380 8811 	msr	BASEPRI, r0
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f001 f960 	bl	8003d24 <vTaskSwitchContext>
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f380 8811 	msr	BASEPRI, r0
 8002a6c:	bc09      	pop	{r0, r3}
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	6808      	ldr	r0, [r1, #0]
 8002a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a76:	f01e 0f10 	tst.w	lr, #16
 8002a7a:	bf08      	it	eq
 8002a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a80:	f380 8809 	msr	PSP, r0
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst>:
 8002a90:	24004b40 	.word	0x24004b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop

08002a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	607b      	str	r3, [r7, #4]
}
 8002ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ab2:	f001 f87d 	bl	8003bb0 <xTaskIncrementTick>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <xPortSysTickHandler+0x40>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f383 8811 	msr	BASEPRI, r3
}
 8002ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <vPortSetupTimerInterrupt+0x34>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <vPortSetupTimerInterrupt+0x38>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <vPortSetupTimerInterrupt+0x3c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <vPortSetupTimerInterrupt+0x40>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <vPortSetupTimerInterrupt+0x44>)
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002afe:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <vPortSetupTimerInterrupt+0x34>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010
 8002b14:	e000e018 	.word	0xe000e018
 8002b18:	24000000 	.word	0x24000000
 8002b1c:	10624dd3 	.word	0x10624dd3
 8002b20:	e000e014 	.word	0xe000e014

08002b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002b24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002b34 <vPortEnableVFP+0x10>
 8002b28:	6801      	ldr	r1, [r0, #0]
 8002b2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002b2e:	6001      	str	r1, [r0, #0]
 8002b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b32:	bf00      	nop
 8002b34:	e000ed88 	.word	0xe000ed88

08002b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002b3e:	f3ef 8305 	mrs	r3, IPSR
 8002b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	d915      	bls.n	8002b76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b4a:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <vPortValidateInterruptPriority+0x74>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b54:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <vPortValidateInterruptPriority+0x78>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	7afa      	ldrb	r2, [r7, #11]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20b      	bcs.n	8002b76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	607b      	str	r3, [r7, #4]
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	e7fd      	b.n	8002b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <vPortValidateInterruptPriority+0x7c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <vPortValidateInterruptPriority+0x80>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90b      	bls.n	8002b9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	603b      	str	r3, [r7, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <vPortValidateInterruptPriority+0x62>
	}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e3f0 	.word	0xe000e3f0
 8002bb0:	24004af8 	.word	0x24004af8
 8002bb4:	e000ed0c 	.word	0xe000ed0c
 8002bb8:	24004afc 	.word	0x24004afc

08002bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <xQueueGenericReset+0x2c>
	__asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	60bb      	str	r3, [r7, #8]
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002be8:	f7ff fec6 	bl	8002978 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	441a      	add	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	68f9      	ldr	r1, [r7, #12]
 8002c1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	22ff      	movs	r2, #255	@ 0xff
 8002c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	22ff      	movs	r2, #255	@ 0xff
 8002c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d114      	bne.n	8002c68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01a      	beq.n	8002c7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3310      	adds	r3, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f91a 	bl	8003e84 <xTaskRemoveFromEventList>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d012      	beq.n	8002c7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <xQueueGenericReset+0xd0>)
 8002c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	e009      	b.n	8002c7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fc9d 	bl	80025ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3324      	adds	r3, #36	@ 0x24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fc98 	bl	80025ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c7c:	f7ff feae 	bl	80029dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08e      	sub	sp, #56	@ 0x38
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	e7fd      	b.n	8002cd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <xQueueGenericCreateStatic+0x56>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <xQueueGenericCreateStatic+0x5a>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericCreateStatic+0x5c>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	623b      	str	r3, [r7, #32]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <xQueueGenericCreateStatic+0x84>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <xQueueGenericCreateStatic+0x88>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <xQueueGenericCreateStatic+0x8a>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	61fb      	str	r3, [r7, #28]
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	e7fd      	b.n	8002d32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d36:	2350      	movs	r3, #80	@ 0x50
 8002d38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b50      	cmp	r3, #80	@ 0x50
 8002d3e:	d00b      	beq.n	8002d58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	61bb      	str	r3, [r7, #24]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f805 	bl	8002d8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3730      	adds	r7, #48	@ 0x30
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e002      	b.n	8002dac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002db8:	2101      	movs	r1, #1
 8002dba:	69b8      	ldr	r0, [r7, #24]
 8002dbc:	f7ff fefe 	bl	8002bbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	@ 0x38
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dde:	2300      	movs	r3, #0
 8002de0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <xQueueGenericSend+0x34>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <xQueueGenericSend+0x42>
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <xQueueGenericSend+0x46>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <xQueueGenericSend+0x48>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <xQueueGenericSend+0x64>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d103      	bne.n	8002e42 <xQueueGenericSend+0x72>
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <xQueueGenericSend+0x76>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <xQueueGenericSend+0x78>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <xQueueGenericSend+0x94>
	__asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	623b      	str	r3, [r7, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e64:	f001 f9ce 	bl	8004204 <xTaskGetSchedulerState>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <xQueueGenericSend+0xa4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <xQueueGenericSend+0xa8>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <xQueueGenericSend+0xaa>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <xQueueGenericSend+0xc6>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	61fb      	str	r3, [r7, #28]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e96:	f7ff fd6f 	bl	8002978 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <xQueueGenericSend+0xdc>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d129      	bne.n	8002f00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eb2:	f000 fa0f 	bl	80032d4 <prvCopyDataToQueue>
 8002eb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	3324      	adds	r3, #36	@ 0x24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 ffdd 	bl	8003e84 <xTaskRemoveFromEventList>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd0 <xQueueGenericSend+0x200>)
 8002ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	e00a      	b.n	8002ef8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b39      	ldr	r3, [pc, #228]	@ (8002fd0 <xQueueGenericSend+0x200>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ef8:	f7ff fd70 	bl	80029dc <vPortExitCritical>
				return pdPASS;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e063      	b.n	8002fc8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f06:	f7ff fd69 	bl	80029dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e05c      	b.n	8002fc8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 f817 	bl	8003f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f22:	f7ff fd5b 	bl	80029dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f26:	f000 fd87 	bl	8003a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f2a:	f7ff fd25 	bl	8002978 <vPortEnterCritical>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d103      	bne.n	8002f44 <xQueueGenericSend+0x174>
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d103      	bne.n	8002f5a <xQueueGenericSend+0x18a>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f5a:	f7ff fd3f 	bl	80029dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f5e:	1d3a      	adds	r2, r7, #4
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 f806 	bl	8003f78 <xTaskCheckForTimeOut>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d124      	bne.n	8002fbc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f74:	f000 faa6 	bl	80034c4 <prvIsQueueFull>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d018      	beq.n	8002fb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	3310      	adds	r3, #16
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 ff2a 	bl	8003de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f8e:	f000 fa31 	bl	80033f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f92:	f000 fd5f 	bl	8003a54 <xTaskResumeAll>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f af7c 	bne.w	8002e96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <xQueueGenericSend+0x200>)
 8002fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	e772      	b.n	8002e96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fb2:	f000 fa1f 	bl	80033f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fb6:	f000 fd4d 	bl	8003a54 <xTaskResumeAll>
 8002fba:	e76c      	b.n	8002e96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fbe:	f000 fa19 	bl	80033f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fc2:	f000 fd47 	bl	8003a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3738      	adds	r7, #56	@ 0x38
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b090      	sub	sp, #64	@ 0x40
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <xQueueGenericSendFromISR+0x3e>
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <xQueueGenericSendFromISR+0x42>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <xQueueGenericSendFromISR+0x44>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d103      	bne.n	8003042 <xQueueGenericSendFromISR+0x6e>
 800303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <xQueueGenericSendFromISR+0x72>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueGenericSendFromISR+0x74>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	623b      	str	r3, [r7, #32]
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003064:	f7ff fd68 	bl	8002b38 <vPortValidateInterruptPriority>
	__asm volatile
 8003068:	f3ef 8211 	mrs	r2, BASEPRI
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	61fa      	str	r2, [r7, #28]
 800307e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003080:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <xQueueGenericSendFromISR+0xc2>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d12f      	bne.n	80030f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800309c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030ac:	f000 f912 	bl	80032d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d112      	bne.n	80030e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c4:	3324      	adds	r3, #36	@ 0x24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fedc 	bl	8003e84 <xTaskRemoveFromEventList>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e007      	b.n	80030f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030e4:	3301      	adds	r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	b25a      	sxtb	r2, r3
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80030f0:	2301      	movs	r3, #1
 80030f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80030f4:	e001      	b.n	80030fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fc:	617b      	str	r3, [r7, #20]
	__asm volatile
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f383 8811 	msr	BASEPRI, r3
}
 8003104:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003108:	4618      	mov	r0, r3
 800310a:	3740      	adds	r7, #64	@ 0x40
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	@ 0x30
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <xQueueReceive+0x32>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	623b      	str	r3, [r7, #32]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <xQueueReceive+0x40>
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <xQueueReceive+0x44>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <xQueueReceive+0x46>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <xQueueReceive+0x62>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	61fb      	str	r3, [r7, #28]
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003172:	f001 f847 	bl	8004204 <xTaskGetSchedulerState>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <xQueueReceive+0x72>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <xQueueReceive+0x76>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueReceive+0x78>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <xQueueReceive+0x94>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	61bb      	str	r3, [r7, #24]
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031a4:	f7ff fbe8 	bl	8002978 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01f      	beq.n	80031f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b8:	f000 f8f6 	bl	80033a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	1e5a      	subs	r2, r3, #1
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00f      	beq.n	80031ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ce:	3310      	adds	r3, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fe57 	bl	8003e84 <xTaskRemoveFromEventList>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031dc:	4b3c      	ldr	r3, [pc, #240]	@ (80032d0 <xQueueReceive+0x1c0>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031ec:	f7ff fbf6 	bl	80029dc <vPortExitCritical>
				return pdPASS;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e069      	b.n	80032c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031fa:	f7ff fbef 	bl	80029dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031fe:	2300      	movs	r3, #0
 8003200:	e062      	b.n	80032c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fe9d 	bl	8003f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003212:	2301      	movs	r3, #1
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003216:	f7ff fbe1 	bl	80029dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800321a:	f000 fc0d 	bl	8003a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800321e:	f7ff fbab 	bl	8002978 <vPortEnterCritical>
 8003222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003228:	b25b      	sxtb	r3, r3
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d103      	bne.n	8003238 <xQueueReceive+0x128>
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800323e:	b25b      	sxtb	r3, r3
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d103      	bne.n	800324e <xQueueReceive+0x13e>
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800324e:	f7ff fbc5 	bl	80029dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003252:	1d3a      	adds	r2, r7, #4
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fe8c 	bl	8003f78 <xTaskCheckForTimeOut>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d123      	bne.n	80032ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003268:	f000 f916 	bl	8003498 <prvIsQueueEmpty>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003274:	3324      	adds	r3, #36	@ 0x24
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fdb0 	bl	8003de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003282:	f000 f8b7 	bl	80033f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003286:	f000 fbe5 	bl	8003a54 <xTaskResumeAll>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d189      	bne.n	80031a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <xQueueReceive+0x1c0>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	e780      	b.n	80031a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032a4:	f000 f8a6 	bl	80033f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032a8:	f000 fbd4 	bl	8003a54 <xTaskResumeAll>
 80032ac:	e77a      	b.n	80031a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032b0:	f000 f8a0 	bl	80033f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032b4:	f000 fbce 	bl	8003a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ba:	f000 f8ed 	bl	8003498 <prvIsQueueEmpty>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f43f af6f 	beq.w	80031a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3730      	adds	r7, #48	@ 0x30
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	e000ed04 	.word	0xe000ed04

080032d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10d      	bne.n	800330e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d14d      	bne.n	8003396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 ff9e 	bl	8004240 <xTaskPriorityDisinherit>
 8003304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e043      	b.n	8003396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d119      	bne.n	8003348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6858      	ldr	r0, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	461a      	mov	r2, r3
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	f003 fb86 	bl	8006a30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	441a      	add	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d32b      	bcc.n	8003396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	e026      	b.n	8003396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68d8      	ldr	r0, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	461a      	mov	r2, r3
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	f003 fb6c 	bl	8006a30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	425b      	negs	r3, r3
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d207      	bcs.n	8003384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	425b      	negs	r3, r3
 800337e:	441a      	add	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d105      	bne.n	8003396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	3b01      	subs	r3, #1
 8003394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800339e:	697b      	ldr	r3, [r7, #20]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	441a      	add	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d303      	bcc.n	80033dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68d9      	ldr	r1, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	461a      	mov	r2, r3
 80033e6:	6838      	ldr	r0, [r7, #0]
 80033e8:	f003 fb22 	bl	8006a30 <memcpy>
	}
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033fc:	f7ff fabc 	bl	8002978 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003408:	e011      	b.n	800342e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3324      	adds	r3, #36	@ 0x24
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fd34 	bl	8003e84 <xTaskRemoveFromEventList>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003422:	f000 fe0d 	bl	8004040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	3b01      	subs	r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	dce9      	bgt.n	800340a <prvUnlockQueue+0x16>
 8003436:	e000      	b.n	800343a <prvUnlockQueue+0x46>
					break;
 8003438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	22ff      	movs	r2, #255	@ 0xff
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003442:	f7ff facb 	bl	80029dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003446:	f7ff fa97 	bl	8002978 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003452:	e011      	b.n	8003478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3310      	adds	r3, #16
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd0f 	bl	8003e84 <xTaskRemoveFromEventList>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800346c:	f000 fde8 	bl	8004040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	3b01      	subs	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800347c:	2b00      	cmp	r3, #0
 800347e:	dce9      	bgt.n	8003454 <prvUnlockQueue+0x60>
 8003480:	e000      	b.n	8003484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	22ff      	movs	r2, #255	@ 0xff
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800348c:	f7ff faa6 	bl	80029dc <vPortExitCritical>
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034a0:	f7ff fa6a 	bl	8002978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e001      	b.n	80034b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034b6:	f7ff fa91 	bl	80029dc <vPortExitCritical>

	return xReturn;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034cc:	f7ff fa54 	bl	8002978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	429a      	cmp	r2, r3
 80034da:	d102      	bne.n	80034e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034dc:	2301      	movs	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e001      	b.n	80034e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034e6:	f7ff fa79 	bl	80029dc <vPortExitCritical>

	return xReturn;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e014      	b.n	800352e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003504:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <vQueueAddToRegistry+0x50>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003510:	490c      	ldr	r1, [pc, #48]	@ (8003544 <vQueueAddToRegistry+0x50>)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <vQueueAddToRegistry+0x50>)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003526:	e006      	b.n	8003536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b07      	cmp	r3, #7
 8003532:	d9e7      	bls.n	8003504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	24004b00 	.word	0x24004b00

08003548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003558:	f7ff fa0e 	bl	8002978 <vPortEnterCritical>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003562:	b25b      	sxtb	r3, r3
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d103      	bne.n	8003572 <vQueueWaitForMessageRestricted+0x2a>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003578:	b25b      	sxtb	r3, r3
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d103      	bne.n	8003588 <vQueueWaitForMessageRestricted+0x40>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003588:	f7ff fa28 	bl	80029dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3324      	adds	r3, #36	@ 0x24
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fc45 	bl	8003e2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff ff26 	bl	80033f4 <prvUnlockQueue>
	}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08e      	sub	sp, #56	@ 0x38
 80035b4:	af04      	add	r7, sp, #16
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	623b      	str	r3, [r7, #32]
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	61fb      	str	r3, [r7, #28]
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	e7fd      	b.n	80035f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035fa:	235c      	movs	r3, #92	@ 0x5c
 80035fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b5c      	cmp	r3, #92	@ 0x5c
 8003602:	d00b      	beq.n	800361c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	61bb      	str	r3, [r7, #24]
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800361c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01e      	beq.n	8003662 <xTaskCreateStatic+0xb2>
 8003624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01b      	beq.n	8003662 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800363c:	2300      	movs	r3, #0
 800363e:	9303      	str	r3, [sp, #12]
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	9302      	str	r3, [sp, #8]
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f850 	bl	80036fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800365a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800365c:	f000 f8de 	bl	800381c <prvAddNewTaskToReadyList>
 8003660:	e001      	b.n	8003666 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003666:	697b      	ldr	r3, [r7, #20]
	}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	@ 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	@ 0x30
 8003674:	af04      	add	r7, sp, #16
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fda3 	bl	80021d0 <pvPortMalloc>
 800368a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003692:	205c      	movs	r0, #92	@ 0x5c
 8003694:	f7fe fd9c 	bl	80021d0 <pvPortMalloc>
 8003698:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80036a6:	e005      	b.n	80036b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036a8:	6978      	ldr	r0, [r7, #20]
 80036aa:	f7fe fe5f 	bl	800236c <vPortFree>
 80036ae:	e001      	b.n	80036b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d017      	beq.n	80036ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	2300      	movs	r3, #0
 80036c6:	9303      	str	r3, [sp, #12]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	9302      	str	r3, [sp, #8]
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f80e 	bl	80036fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036de:	69f8      	ldr	r0, [r7, #28]
 80036e0:	f000 f89c 	bl	800381c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036e4:	2301      	movs	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	e002      	b.n	80036f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036f0:	69bb      	ldr	r3, [r7, #24]
	}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b088      	sub	sp, #32
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	21a5      	movs	r1, #165	@ 0xa5
 8003714:	f003 f95a 	bl	80069cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003722:	440b      	add	r3, r1
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f023 0307 	bic.w	r3, r3, #7
 8003730:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	617b      	str	r3, [r7, #20]
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01f      	beq.n	800379a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e012      	b.n	8003786 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	7819      	ldrb	r1, [r3, #0]
 8003768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	3334      	adds	r3, #52	@ 0x34
 8003770:	460a      	mov	r2, r1
 8003772:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	3301      	adds	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b0f      	cmp	r3, #15
 800378a:	d9e9      	bls.n	8003760 <prvInitialiseNewTask+0x66>
 800378c:	e000      	b.n	8003790 <prvInitialiseNewTask+0x96>
			{
				break;
 800378e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003798:	e003      	b.n	80037a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	2b37      	cmp	r3, #55	@ 0x37
 80037a6:	d901      	bls.n	80037ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037a8:	2337      	movs	r3, #55	@ 0x37
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ba:	2200      	movs	r2, #0
 80037bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	3304      	adds	r3, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff12 	bl	80025ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	3318      	adds	r3, #24
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ff0d 	bl	80025ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	2200      	movs	r2, #0
 80037ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	68f9      	ldr	r1, [r7, #12]
 80037fa:	69b8      	ldr	r0, [r7, #24]
 80037fc:	f7fe ff8a 	bl	8002714 <pxPortInitialiseStack>
 8003800:	4602      	mov	r2, r0
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003812:	bf00      	nop
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003824:	f7ff f8a8 	bl	8002978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 8003830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003832:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800383a:	4a2a      	ldr	r2, [pc, #168]	@ (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003840:	4b27      	ldr	r3, [pc, #156]	@ (80038e0 <prvAddNewTaskToReadyList+0xc4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d110      	bne.n	800386a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003848:	f000 fc1e 	bl	8004088 <prvInitialiseTaskLists>
 800384c:	e00d      	b.n	800386a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800384e:	4b26      	ldr	r3, [pc, #152]	@ (80038e8 <prvAddNewTaskToReadyList+0xcc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003856:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d802      	bhi.n	800386a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003864:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800386a:	4b20      	ldr	r3, [pc, #128]	@ (80038ec <prvAddNewTaskToReadyList+0xd0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	4a1e      	ldr	r2, [pc, #120]	@ (80038ec <prvAddNewTaskToReadyList+0xd0>)
 8003872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <prvAddNewTaskToReadyList+0xd0>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <prvAddNewTaskToReadyList+0xd4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d903      	bls.n	8003890 <prvAddNewTaskToReadyList+0x74>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <prvAddNewTaskToReadyList+0xd4>)
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4a15      	ldr	r2, [pc, #84]	@ (80038f4 <prvAddNewTaskToReadyList+0xd8>)
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f7fe fead 	bl	8002606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ac:	f7ff f896 	bl	80029dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038b0:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <prvAddNewTaskToReadyList+0xcc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00e      	beq.n	80038d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <prvAddNewTaskToReadyList+0xc8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d207      	bcs.n	80038d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038c6:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <prvAddNewTaskToReadyList+0xdc>)
 80038c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24005014 	.word	0x24005014
 80038e4:	24004b40 	.word	0x24004b40
 80038e8:	24005020 	.word	0x24005020
 80038ec:	24005030 	.word	0x24005030
 80038f0:	2400501c 	.word	0x2400501c
 80038f4:	24004b44 	.word	0x24004b44
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <vTaskDelay+0x64>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <vTaskDelay+0x32>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	60bb      	str	r3, [r7, #8]
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800392e:	f000 f883 	bl	8003a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003932:	2100      	movs	r1, #0
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fcf3 	bl	8004320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800393a:	f000 f88b 	bl	8003a54 <xTaskResumeAll>
 800393e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003946:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <vTaskDelay+0x68>)
 8003948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	2400503c 	.word	0x2400503c
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003976:	463a      	mov	r2, r7
 8003978:	1d39      	adds	r1, r7, #4
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fbf2 	bl	8002168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	9202      	str	r2, [sp, #8]
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2300      	movs	r3, #0
 8003994:	460a      	mov	r2, r1
 8003996:	4922      	ldr	r1, [pc, #136]	@ (8003a20 <vTaskStartScheduler+0xb8>)
 8003998:	4822      	ldr	r0, [pc, #136]	@ (8003a24 <vTaskStartScheduler+0xbc>)
 800399a:	f7ff fe09 	bl	80035b0 <xTaskCreateStatic>
 800399e:	4603      	mov	r3, r0
 80039a0:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <vTaskStartScheduler+0xc0>)
 80039a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039a4:	4b20      	ldr	r3, [pc, #128]	@ (8003a28 <vTaskStartScheduler+0xc0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039ac:	2301      	movs	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e001      	b.n	80039b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039bc:	f000 fd04 	bl	80043c8 <xTimerCreateTimerTask>
 80039c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d116      	bne.n	80039f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	613b      	str	r3, [r7, #16]
}
 80039da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039dc:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <vTaskStartScheduler+0xc4>)
 80039de:	f04f 32ff 	mov.w	r2, #4294967295
 80039e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039e4:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <vTaskStartScheduler+0xc8>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <vTaskStartScheduler+0xcc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039f0:	f7fe ff1e 	bl	8002830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039f4:	e00f      	b.n	8003a16 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d10b      	bne.n	8003a16 <vTaskStartScheduler+0xae>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60fb      	str	r3, [r7, #12]
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	e7fd      	b.n	8003a12 <vTaskStartScheduler+0xaa>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	08006bec 	.word	0x08006bec
 8003a24:	08004059 	.word	0x08004059
 8003a28:	24005038 	.word	0x24005038
 8003a2c:	24005034 	.word	0x24005034
 8003a30:	24005020 	.word	0x24005020
 8003a34:	24005018 	.word	0x24005018

08003a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a3c:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <vTaskSuspendAll+0x18>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	4a03      	ldr	r2, [pc, #12]	@ (8003a50 <vTaskSuspendAll+0x18>)
 8003a44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	2400503c 	.word	0x2400503c

08003a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a62:	4b42      	ldr	r3, [pc, #264]	@ (8003b6c <xTaskResumeAll+0x118>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <xTaskResumeAll+0x2e>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	603b      	str	r3, [r7, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	e7fd      	b.n	8003a7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a82:	f7fe ff79 	bl	8002978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a86:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <xTaskResumeAll+0x118>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	4a37      	ldr	r2, [pc, #220]	@ (8003b6c <xTaskResumeAll+0x118>)
 8003a8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a90:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <xTaskResumeAll+0x118>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d162      	bne.n	8003b5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a98:	4b35      	ldr	r3, [pc, #212]	@ (8003b70 <xTaskResumeAll+0x11c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d05e      	beq.n	8003b5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa0:	e02f      	b.n	8003b02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa2:	4b34      	ldr	r3, [pc, #208]	@ (8003b74 <xTaskResumeAll+0x120>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3318      	adds	r3, #24
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fe06 	bl	80026c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fe01 	bl	80026c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <xTaskResumeAll+0x124>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d903      	bls.n	8003ad2 <xTaskResumeAll+0x7e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	4a2a      	ldr	r2, [pc, #168]	@ (8003b78 <xTaskResumeAll+0x124>)
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4a27      	ldr	r2, [pc, #156]	@ (8003b7c <xTaskResumeAll+0x128>)
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fe fd8c 	bl	8002606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af2:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <xTaskResumeAll+0x12c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003afc:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <xTaskResumeAll+0x130>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b02:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <xTaskResumeAll+0x120>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1cb      	bne.n	8003aa2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b10:	f000 fb58 	bl	80041c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b14:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <xTaskResumeAll+0x134>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b20:	f000 f846 	bl	8003bb0 <xTaskIncrementTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b2a:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <xTaskResumeAll+0x130>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f1      	bne.n	8003b20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <xTaskResumeAll+0x134>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <xTaskResumeAll+0x130>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <xTaskResumeAll+0x138>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b5e:	f7fe ff3d 	bl	80029dc <vPortExitCritical>

	return xAlreadyYielded;
 8003b62:	68bb      	ldr	r3, [r7, #8]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	2400503c 	.word	0x2400503c
 8003b70:	24005014 	.word	0x24005014
 8003b74:	24004fd4 	.word	0x24004fd4
 8003b78:	2400501c 	.word	0x2400501c
 8003b7c:	24004b44 	.word	0x24004b44
 8003b80:	24004b40 	.word	0x24004b40
 8003b84:	24005028 	.word	0x24005028
 8003b88:	24005024 	.word	0x24005024
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b96:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <xTaskGetTickCount+0x1c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b9c:	687b      	ldr	r3, [r7, #4]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	24005018 	.word	0x24005018

08003bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bba:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf8 <xTaskIncrementTick+0x148>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 8090 	bne.w	8003ce4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <xTaskIncrementTick+0x14c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003cfc <xTaskIncrementTick+0x14c>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d121      	bne.n	8003c1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bd8:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <xTaskIncrementTick+0x150>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	603b      	str	r3, [r7, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	e7fd      	b.n	8003bf6 <xTaskIncrementTick+0x46>
 8003bfa:	4b41      	ldr	r3, [pc, #260]	@ (8003d00 <xTaskIncrementTick+0x150>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	4b40      	ldr	r3, [pc, #256]	@ (8003d04 <xTaskIncrementTick+0x154>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3e      	ldr	r2, [pc, #248]	@ (8003d00 <xTaskIncrementTick+0x150>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4a3e      	ldr	r2, [pc, #248]	@ (8003d04 <xTaskIncrementTick+0x154>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d08 <xTaskIncrementTick+0x158>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	4a3c      	ldr	r2, [pc, #240]	@ (8003d08 <xTaskIncrementTick+0x158>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	f000 fad4 	bl	80041c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <xTaskIncrementTick+0x15c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d349      	bcc.n	8003cba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <xTaskIncrementTick+0x150>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c30:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <xTaskIncrementTick+0x15c>)
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	601a      	str	r2, [r3, #0]
					break;
 8003c38:	e03f      	b.n	8003cba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3a:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <xTaskIncrementTick+0x150>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d203      	bcs.n	8003c5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c52:	4a2e      	ldr	r2, [pc, #184]	@ (8003d0c <xTaskIncrementTick+0x15c>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c58:	e02f      	b.n	8003cba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fd2e 	bl	80026c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3318      	adds	r3, #24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fd25 	bl	80026c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <xTaskIncrementTick+0x160>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d903      	bls.n	8003c8a <xTaskIncrementTick+0xda>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <xTaskIncrementTick+0x160>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a1f      	ldr	r2, [pc, #124]	@ (8003d14 <xTaskIncrementTick+0x164>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe fcb0 	bl	8002606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003caa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <xTaskIncrementTick+0x168>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3b8      	bcc.n	8003c26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb8:	e7b5      	b.n	8003c26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cba:	4b17      	ldr	r3, [pc, #92]	@ (8003d18 <xTaskIncrementTick+0x168>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc0:	4914      	ldr	r1, [pc, #80]	@ (8003d14 <xTaskIncrementTick+0x164>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d901      	bls.n	8003cd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <xTaskIncrementTick+0x16c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e004      	b.n	8003cee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d20 <xTaskIncrementTick+0x170>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <xTaskIncrementTick+0x170>)
 8003cec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2400503c 	.word	0x2400503c
 8003cfc:	24005018 	.word	0x24005018
 8003d00:	24004fcc 	.word	0x24004fcc
 8003d04:	24004fd0 	.word	0x24004fd0
 8003d08:	2400502c 	.word	0x2400502c
 8003d0c:	24005034 	.word	0x24005034
 8003d10:	2400501c 	.word	0x2400501c
 8003d14:	24004b44 	.word	0x24004b44
 8003d18:	24004b40 	.word	0x24004b40
 8003d1c:	24005028 	.word	0x24005028
 8003d20:	24005024 	.word	0x24005024

08003d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d2a:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <vTaskSwitchContext+0xa8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d32:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <vTaskSwitchContext+0xac>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d38:	e042      	b.n	8003dc0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d3a:	4b25      	ldr	r3, [pc, #148]	@ (8003dd0 <vTaskSwitchContext+0xac>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d40:	4b24      	ldr	r3, [pc, #144]	@ (8003dd4 <vTaskSwitchContext+0xb0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e011      	b.n	8003d6c <vTaskSwitchContext+0x48>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <vTaskSwitchContext+0x42>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	607b      	str	r3, [r7, #4]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <vTaskSwitchContext+0x3e>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	491a      	ldr	r1, [pc, #104]	@ (8003dd8 <vTaskSwitchContext+0xb4>)
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0e3      	beq.n	8003d48 <vTaskSwitchContext+0x24>
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <vTaskSwitchContext+0xb4>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3308      	adds	r3, #8
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d104      	bne.n	8003db0 <vTaskSwitchContext+0x8c>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <vTaskSwitchContext+0xb8>)
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4a06      	ldr	r2, [pc, #24]	@ (8003dd4 <vTaskSwitchContext+0xb0>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	2400503c 	.word	0x2400503c
 8003dd0:	24005028 	.word	0x24005028
 8003dd4:	2400501c 	.word	0x2400501c
 8003dd8:	24004b44 	.word	0x24004b44
 8003ddc:	24004b40 	.word	0x24004b40

08003de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e08:	4b07      	ldr	r3, [pc, #28]	@ (8003e28 <vTaskPlaceOnEventList+0x48>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fe fc1c 	bl	800264e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e16:	2101      	movs	r1, #1
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f000 fa81 	bl	8004320 <prvAddCurrentTaskToDelayedList>
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	24004b40 	.word	0x24004b40

08003e2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	617b      	str	r3, [r7, #20]
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	e7fd      	b.n	8003e52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7fe fbd1 	bl	8002606 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	68b8      	ldr	r0, [r7, #8]
 8003e74:	f000 fa54 	bl	8004320 <prvAddCurrentTaskToDelayedList>
	}
 8003e78:	bf00      	nop
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	24004b40 	.word	0x24004b40

08003e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60fb      	str	r3, [r7, #12]
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	e7fd      	b.n	8003eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fc02 	bl	80026c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f34 <xTaskRemoveFromEventList+0xb0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d11d      	bne.n	8003f00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fbf9 	bl	80026c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <xTaskRemoveFromEventList+0xb4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <xTaskRemoveFromEventList+0x5e>
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <xTaskRemoveFromEventList+0xb4>)
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a13      	ldr	r2, [pc, #76]	@ (8003f3c <xTaskRemoveFromEventList+0xb8>)
 8003ef0:	441a      	add	r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe fb84 	bl	8002606 <vListInsertEnd>
 8003efe:	e005      	b.n	8003f0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	3318      	adds	r3, #24
 8003f04:	4619      	mov	r1, r3
 8003f06:	480e      	ldr	r0, [pc, #56]	@ (8003f40 <xTaskRemoveFromEventList+0xbc>)
 8003f08:	f7fe fb7d 	bl	8002606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <xTaskRemoveFromEventList+0xc0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d905      	bls.n	8003f26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <xTaskRemoveFromEventList+0xc4>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e001      	b.n	8003f2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f2a:	697b      	ldr	r3, [r7, #20]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	2400503c 	.word	0x2400503c
 8003f38:	2400501c 	.word	0x2400501c
 8003f3c:	24004b44 	.word	0x24004b44
 8003f40:	24004fd4 	.word	0x24004fd4
 8003f44:	24004b40 	.word	0x24004b40
 8003f48:	24005028 	.word	0x24005028

08003f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <vTaskInternalSetTimeOutState+0x24>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <vTaskInternalSetTimeOutState+0x28>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	605a      	str	r2, [r3, #4]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	2400502c 	.word	0x2400502c
 8003f74:	24005018 	.word	0x24005018

08003f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	613b      	str	r3, [r7, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60fb      	str	r3, [r7, #12]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003fbe:	f7fe fcdb 	bl	8002978 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <xTaskCheckForTimeOut+0xc0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d102      	bne.n	8003fe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	e023      	b.n	800402a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b15      	ldr	r3, [pc, #84]	@ (800403c <xTaskCheckForTimeOut+0xc4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d007      	beq.n	8003ffe <xTaskCheckForTimeOut+0x86>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e015      	b.n	800402a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d20b      	bcs.n	8004020 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ff99 	bl	8003f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	e004      	b.n	800402a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800402a:	f7fe fcd7 	bl	80029dc <vPortExitCritical>

	return xReturn;
 800402e:	69fb      	ldr	r3, [r7, #28]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	24005018 	.word	0x24005018
 800403c:	2400502c 	.word	0x2400502c

08004040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004044:	4b03      	ldr	r3, [pc, #12]	@ (8004054 <vTaskMissedYield+0x14>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	24005028 	.word	0x24005028

08004058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004060:	f000 f852 	bl	8004108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004064:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <prvIdleTask+0x28>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d9f9      	bls.n	8004060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <prvIdleTask+0x2c>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800407c:	e7f0      	b.n	8004060 <prvIdleTask+0x8>
 800407e:	bf00      	nop
 8004080:	24004b44 	.word	0x24004b44
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	e00c      	b.n	80040ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4a12      	ldr	r2, [pc, #72]	@ (80040e8 <prvInitialiseTaskLists+0x60>)
 80040a0:	4413      	add	r3, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fa82 	bl	80025ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3301      	adds	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b37      	cmp	r3, #55	@ 0x37
 80040b2:	d9ef      	bls.n	8004094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040b4:	480d      	ldr	r0, [pc, #52]	@ (80040ec <prvInitialiseTaskLists+0x64>)
 80040b6:	f7fe fa79 	bl	80025ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040ba:	480d      	ldr	r0, [pc, #52]	@ (80040f0 <prvInitialiseTaskLists+0x68>)
 80040bc:	f7fe fa76 	bl	80025ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040c0:	480c      	ldr	r0, [pc, #48]	@ (80040f4 <prvInitialiseTaskLists+0x6c>)
 80040c2:	f7fe fa73 	bl	80025ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040c6:	480c      	ldr	r0, [pc, #48]	@ (80040f8 <prvInitialiseTaskLists+0x70>)
 80040c8:	f7fe fa70 	bl	80025ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040cc:	480b      	ldr	r0, [pc, #44]	@ (80040fc <prvInitialiseTaskLists+0x74>)
 80040ce:	f7fe fa6d 	bl	80025ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <prvInitialiseTaskLists+0x78>)
 80040d4:	4a05      	ldr	r2, [pc, #20]	@ (80040ec <prvInitialiseTaskLists+0x64>)
 80040d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <prvInitialiseTaskLists+0x7c>)
 80040da:	4a05      	ldr	r2, [pc, #20]	@ (80040f0 <prvInitialiseTaskLists+0x68>)
 80040dc:	601a      	str	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	24004b44 	.word	0x24004b44
 80040ec:	24004fa4 	.word	0x24004fa4
 80040f0:	24004fb8 	.word	0x24004fb8
 80040f4:	24004fd4 	.word	0x24004fd4
 80040f8:	24004fe8 	.word	0x24004fe8
 80040fc:	24005000 	.word	0x24005000
 8004100:	24004fcc 	.word	0x24004fcc
 8004104:	24004fd0 	.word	0x24004fd0

08004108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800410e:	e019      	b.n	8004144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004110:	f7fe fc32 	bl	8002978 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004114:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <prvCheckTasksWaitingTermination+0x50>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe facd 	bl	80026c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <prvCheckTasksWaitingTermination+0x54>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	4a0b      	ldr	r2, [pc, #44]	@ (800415c <prvCheckTasksWaitingTermination+0x54>)
 800412e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3b01      	subs	r3, #1
 8004136:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800413a:	f7fe fc4f 	bl	80029dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f810 	bl	8004164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e1      	bne.n	8004110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	24004fe8 	.word	0x24004fe8
 800415c:	24005014 	.word	0x24005014
 8004160:	24004ffc 	.word	0x24004ffc

08004164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004172:	2b00      	cmp	r3, #0
 8004174:	d108      	bne.n	8004188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe f8f6 	bl	800236c <vPortFree>
				vPortFree( pxTCB );
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fe f8f3 	bl	800236c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004186:	e019      	b.n	80041bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800418e:	2b01      	cmp	r3, #1
 8004190:	d103      	bne.n	800419a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fe f8ea 	bl	800236c <vPortFree>
	}
 8004198:	e010      	b.n	80041bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d00b      	beq.n	80041bc <prvDeleteTCB+0x58>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <prvDeleteTCB+0x54>
	}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ca:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <prvResetNextTaskUnblockTime+0x38>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <prvResetNextTaskUnblockTime+0x3c>)
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295
 80041da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041dc:	e008      	b.n	80041f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041de:	4b07      	ldr	r3, [pc, #28]	@ (80041fc <prvResetNextTaskUnblockTime+0x38>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <prvResetNextTaskUnblockTime+0x3c>)
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	24004fcc 	.word	0x24004fcc
 8004200:	24005034 	.word	0x24005034

08004204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <xTaskGetSchedulerState+0x34>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004212:	2301      	movs	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e008      	b.n	800422a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004218:	4b08      	ldr	r3, [pc, #32]	@ (800423c <xTaskGetSchedulerState+0x38>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004220:	2302      	movs	r3, #2
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	e001      	b.n	800422a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800422a:	687b      	ldr	r3, [r7, #4]
	}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	24005020 	.word	0x24005020
 800423c:	2400503c 	.word	0x2400503c

08004240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d058      	beq.n	8004308 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004256:	4b2f      	ldr	r3, [pc, #188]	@ (8004314 <xTaskPriorityDisinherit+0xd4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	429a      	cmp	r2, r3
 800425e:	d00b      	beq.n	8004278 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	60fb      	str	r3, [r7, #12]
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60bb      	str	r3, [r7, #8]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429c:	1e5a      	subs	r2, r3, #1
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d02c      	beq.n	8004308 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d128      	bne.n	8004308 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fa00 	bl	80026c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <xTaskPriorityDisinherit+0xd8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d903      	bls.n	80042e8 <xTaskPriorityDisinherit+0xa8>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <xTaskPriorityDisinherit+0xd8>)
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4a09      	ldr	r2, [pc, #36]	@ (800431c <xTaskPriorityDisinherit+0xdc>)
 80042f6:	441a      	add	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f7fe f981 	bl	8002606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004308:	697b      	ldr	r3, [r7, #20]
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	24004b40 	.word	0x24004b40
 8004318:	2400501c 	.word	0x2400501c
 800431c:	24004b44 	.word	0x24004b44

08004320 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800432a:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004330:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe f9c2 	bl	80026c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d10a      	bne.n	800435a <prvAddCurrentTaskToDelayedList+0x3a>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434a:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3304      	adds	r3, #4
 8004350:	4619      	mov	r1, r3
 8004352:	4819      	ldr	r0, [pc, #100]	@ (80043b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004354:	f7fe f957 	bl	8002606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004358:	e026      	b.n	80043a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004362:	4b14      	ldr	r3, [pc, #80]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	429a      	cmp	r2, r3
 8004370:	d209      	bcs.n	8004386 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b0f      	ldr	r3, [pc, #60]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f7fe f965 	bl	800264e <vListInsert>
}
 8004384:	e010      	b.n	80043a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004386:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7fe f95b 	bl	800264e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d202      	bcs.n	80043a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043a2:	4a08      	ldr	r2, [pc, #32]	@ (80043c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6013      	str	r3, [r2, #0]
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	24005018 	.word	0x24005018
 80043b4:	24004b40 	.word	0x24004b40
 80043b8:	24005000 	.word	0x24005000
 80043bc:	24004fd0 	.word	0x24004fd0
 80043c0:	24004fcc 	.word	0x24004fcc
 80043c4:	24005034 	.word	0x24005034

080043c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043d2:	f000 fb13 	bl	80049fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043d6:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <xTimerCreateTimerTask+0x84>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d021      	beq.n	8004422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043e6:	1d3a      	adds	r2, r7, #4
 80043e8:	f107 0108 	add.w	r1, r7, #8
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fd fed3 	bl	800219c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	9202      	str	r2, [sp, #8]
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	2302      	movs	r3, #2
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	460a      	mov	r2, r1
 8004408:	4911      	ldr	r1, [pc, #68]	@ (8004450 <xTimerCreateTimerTask+0x88>)
 800440a:	4812      	ldr	r0, [pc, #72]	@ (8004454 <xTimerCreateTimerTask+0x8c>)
 800440c:	f7ff f8d0 	bl	80035b0 <xTaskCreateStatic>
 8004410:	4603      	mov	r3, r0
 8004412:	4a11      	ldr	r2, [pc, #68]	@ (8004458 <xTimerCreateTimerTask+0x90>)
 8004414:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <xTimerCreateTimerTask+0x90>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800441e:	2301      	movs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004440:	697b      	ldr	r3, [r7, #20]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	24005070 	.word	0x24005070
 8004450:	08006bf4 	.word	0x08006bf4
 8004454:	08004595 	.word	0x08004595
 8004458:	24005074 	.word	0x24005074

0800445c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	@ 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <xTimerGenericCommand+0x30>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	623b      	str	r3, [r7, #32]
}
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800448c:	4b19      	ldr	r3, [pc, #100]	@ (80044f4 <xTimerGenericCommand+0x98>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02a      	beq.n	80044ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	dc18      	bgt.n	80044d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044a6:	f7ff fead 	bl	8004204 <xTaskGetSchedulerState>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d109      	bne.n	80044c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044b0:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <xTimerGenericCommand+0x98>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	f107 0110 	add.w	r1, r7, #16
 80044b8:	2300      	movs	r3, #0
 80044ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044bc:	f7fe fc88 	bl	8002dd0 <xQueueGenericSend>
 80044c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80044c2:	e012      	b.n	80044ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044c4:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <xTimerGenericCommand+0x98>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	f107 0110 	add.w	r1, r7, #16
 80044cc:	2300      	movs	r3, #0
 80044ce:	2200      	movs	r2, #0
 80044d0:	f7fe fc7e 	bl	8002dd0 <xQueueGenericSend>
 80044d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80044d6:	e008      	b.n	80044ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <xTimerGenericCommand+0x98>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f107 0110 	add.w	r1, r7, #16
 80044e0:	2300      	movs	r3, #0
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	f7fe fd76 	bl	8002fd4 <xQueueGenericSendFromISR>
 80044e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	@ 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	24005070 	.word	0x24005070

080044f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <prvProcessExpiredTimer+0x98>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3304      	adds	r3, #4
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe f8d5 	bl	80026c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d023      	beq.n	800456c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	18d1      	adds	r1, r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f000 f8d5 	bl	80046e0 <prvInsertTimerInActiveList>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800453c:	2300      	movs	r3, #0
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2300      	movs	r3, #0
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	2100      	movs	r1, #0
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	f7ff ff88 	bl	800445c <xTimerGenericCommand>
 800454c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d114      	bne.n	800457e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60fb      	str	r3, [r7, #12]
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	b2da      	uxtb	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	4798      	blx	r3
}
 8004586:	bf00      	nop
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	24005068 	.word	0x24005068

08004594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800459c:	f107 0308 	add.w	r3, r7, #8
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f859 	bl	8004658 <prvGetNextExpireTime>
 80045a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4619      	mov	r1, r3
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f805 	bl	80045bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045b2:	f000 f8d7 	bl	8004764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045b6:	bf00      	nop
 80045b8:	e7f0      	b.n	800459c <prvTimerTask+0x8>
	...

080045bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045c6:	f7ff fa37 	bl	8003a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f866 	bl	80046a0 <prvSampleTimeNow>
 80045d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d130      	bne.n	800463e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <prvProcessTimerOrBlockTask+0x3c>
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d806      	bhi.n	80045f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045ea:	f7ff fa33 	bl	8003a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff81 	bl	80044f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045f6:	e024      	b.n	8004642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045fe:	4b13      	ldr	r3, [pc, #76]	@ (800464c <prvProcessTimerOrBlockTask+0x90>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <prvProcessTimerOrBlockTask+0x50>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <prvProcessTimerOrBlockTask+0x52>
 800460c:	2300      	movs	r3, #0
 800460e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004610:	4b0f      	ldr	r3, [pc, #60]	@ (8004650 <prvProcessTimerOrBlockTask+0x94>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	f7fe ff93 	bl	8003548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004622:	f7ff fa17 	bl	8003a54 <xTaskResumeAll>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <prvProcessTimerOrBlockTask+0x98>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
}
 800463c:	e001      	b.n	8004642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800463e:	f7ff fa09 	bl	8003a54 <xTaskResumeAll>
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2400506c 	.word	0x2400506c
 8004650:	24005070 	.word	0x24005070
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004660:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <prvGetNextExpireTime+0x44>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <prvGetNextExpireTime+0x16>
 800466a:	2201      	movs	r2, #1
 800466c:	e000      	b.n	8004670 <prvGetNextExpireTime+0x18>
 800466e:	2200      	movs	r2, #0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800467c:	4b07      	ldr	r3, [pc, #28]	@ (800469c <prvGetNextExpireTime+0x44>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e001      	b.n	800468c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	24005068 	.word	0x24005068

080046a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046a8:	f7ff fa72 	bl	8003b90 <xTaskGetTickCount>
 80046ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <prvSampleTimeNow+0x3c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d205      	bcs.n	80046c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046b8:	f000 f93a 	bl	8004930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046ca:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <prvSampleTimeNow+0x3c>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	24005078 	.word	0x24005078

080046e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d812      	bhi.n	800472c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e01b      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <prvInsertTimerInActiveList+0x7c>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fd ff92 	bl	800264e <vListInsert>
 800472a:	e012      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d206      	bcs.n	8004742 <prvInsertTimerInActiveList+0x62>
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e007      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004742:	4b07      	ldr	r3, [pc, #28]	@ (8004760 <prvInsertTimerInActiveList+0x80>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fd ff7e 	bl	800264e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004752:	697b      	ldr	r3, [r7, #20]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	2400506c 	.word	0x2400506c
 8004760:	24005068 	.word	0x24005068

08004764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	@ 0x38
 8004768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800476a:	e0ce      	b.n	800490a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da19      	bge.n	80047a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	3304      	adds	r3, #4
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	61fb      	str	r3, [r7, #28]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800479c:	6850      	ldr	r0, [r2, #4]
 800479e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047a0:	6892      	ldr	r2, [r2, #8]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f2c0 80ae 	blt.w	800490a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	3304      	adds	r3, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd ff7e 	bl	80026c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047c4:	463b      	mov	r3, r7
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff ff6a 	bl	80046a0 <prvSampleTimeNow>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b09      	cmp	r3, #9
 80047d2:	f200 8097 	bhi.w	8004904 <prvProcessReceivedCommands+0x1a0>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <prvProcessReceivedCommands+0x78>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004805 	.word	0x08004805
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004805 	.word	0x08004805
 80047e8:	0800487b 	.word	0x0800487b
 80047ec:	0800488f 	.word	0x0800488f
 80047f0:	080048db 	.word	0x080048db
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004805 	.word	0x08004805
 80047fc:	0800487b 	.word	0x0800487b
 8004800:	0800488f 	.word	0x0800488f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2da      	uxtb	r2, r3
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	18d1      	adds	r1, r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004824:	f7ff ff5c 	bl	80046e0 <prvInsertTimerInActiveList>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d06c      	beq.n	8004908 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d061      	beq.n	8004908 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	441a      	add	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	2100      	movs	r1, #0
 8004854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004856:	f7ff fe01 	bl	800445c <xTimerGenericCommand>
 800485a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d152      	bne.n	8004908 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61bb      	str	r3, [r7, #24]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	b2da      	uxtb	r2, r3
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800488c:	e03d      	b.n	800490a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	617b      	str	r3, [r7, #20]
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	e7fd      	b.n	80048c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	18d1      	adds	r1, r2, r3
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048d4:	f7ff ff04 	bl	80046e0 <prvInsertTimerInActiveList>
					break;
 80048d8:	e017      	b.n	800490a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80048e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ea:	f7fd fd3f 	bl	800236c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048ee:	e00c      	b.n	800490a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004902:	e002      	b.n	800490a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004904:	bf00      	nop
 8004906:	e000      	b.n	800490a <prvProcessReceivedCommands+0x1a6>
					break;
 8004908:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800490a:	4b08      	ldr	r3, [pc, #32]	@ (800492c <prvProcessReceivedCommands+0x1c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1d39      	adds	r1, r7, #4
 8004910:	2200      	movs	r2, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fbfc 	bl	8003110 <xQueueReceive>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	f47f af26 	bne.w	800476c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3730      	adds	r7, #48	@ 0x30
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	24005070 	.word	0x24005070

08004930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004936:	e049      	b.n	80049cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004938:	4b2e      	ldr	r3, [pc, #184]	@ (80049f4 <prvSwitchTimerLists+0xc4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004942:	4b2c      	ldr	r3, [pc, #176]	@ (80049f4 <prvSwitchTimerLists+0xc4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fd feb5 	bl	80026c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02f      	beq.n	80049cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4413      	add	r3, r2
 8004974:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d90e      	bls.n	800499c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800498a:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <prvSwitchTimerLists+0xc4>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fd fe5a 	bl	800264e <vListInsert>
 800499a:	e017      	b.n	80049cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800499c:	2300      	movs	r3, #0
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	2100      	movs	r1, #0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff fd58 	bl	800445c <xTimerGenericCommand>
 80049ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	603b      	str	r3, [r7, #0]
}
 80049c6:	bf00      	nop
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049cc:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <prvSwitchTimerLists+0xc4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1b0      	bne.n	8004938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049d6:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <prvSwitchTimerLists+0xc4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <prvSwitchTimerLists+0xc8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a04      	ldr	r2, [pc, #16]	@ (80049f4 <prvSwitchTimerLists+0xc4>)
 80049e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <prvSwitchTimerLists+0xc8>)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6013      	str	r3, [r2, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	24005068 	.word	0x24005068
 80049f8:	2400506c 	.word	0x2400506c

080049fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a02:	f7fd ffb9 	bl	8002978 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a06:	4b15      	ldr	r3, [pc, #84]	@ (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d120      	bne.n	8004a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a0e:	4814      	ldr	r0, [pc, #80]	@ (8004a60 <prvCheckForValidListAndQueue+0x64>)
 8004a10:	f7fd fdcc 	bl	80025ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a14:	4813      	ldr	r0, [pc, #76]	@ (8004a64 <prvCheckForValidListAndQueue+0x68>)
 8004a16:	f7fd fdc9 	bl	80025ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a1a:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <prvCheckForValidListAndQueue+0x6c>)
 8004a1c:	4a10      	ldr	r2, [pc, #64]	@ (8004a60 <prvCheckForValidListAndQueue+0x64>)
 8004a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a20:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <prvCheckForValidListAndQueue+0x70>)
 8004a22:	4a10      	ldr	r2, [pc, #64]	@ (8004a64 <prvCheckForValidListAndQueue+0x68>)
 8004a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <prvCheckForValidListAndQueue+0x74>)
 8004a2c:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <prvCheckForValidListAndQueue+0x78>)
 8004a2e:	2110      	movs	r1, #16
 8004a30:	200a      	movs	r0, #10
 8004a32:	f7fe f92d 	bl	8002c90 <xQueueGenericCreateStatic>
 8004a36:	4603      	mov	r3, r0
 8004a38:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a3c:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <prvCheckForValidListAndQueue+0x60>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	490b      	ldr	r1, [pc, #44]	@ (8004a78 <prvCheckForValidListAndQueue+0x7c>)
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fd52 	bl	80034f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a50:	f7fd ffc4 	bl	80029dc <vPortExitCritical>
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	24005070 	.word	0x24005070
 8004a60:	24005040 	.word	0x24005040
 8004a64:	24005054 	.word	0x24005054
 8004a68:	24005068 	.word	0x24005068
 8004a6c:	2400506c 	.word	0x2400506c
 8004a70:	2400511c 	.word	0x2400511c
 8004a74:	2400507c 	.word	0x2400507c
 8004a78:	08006bfc 	.word	0x08006bfc

08004a7c <athlet_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool athlet_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_athlet_activations_map, 1, params)) {
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	482a      	ldr	r0, [pc, #168]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004a8c:	f000 fab0 	bl	8004ff0 <ai_platform_get_activations_map>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d043      	beq.n	8004b1e <athlet_configure_activations+0xa2>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_athlet_activations_map[0] + 44);
 8004a96:	4b27      	ldr	r3, [pc, #156]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	332c      	adds	r3, #44	@ 0x2c
 8004a9c:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <athlet_configure_activations+0xbc>)
 8004a9e:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 44);
 8004aa0:	4b24      	ldr	r3, [pc, #144]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	332c      	adds	r3, #44	@ 0x2c
 8004aa6:	4a24      	ldr	r2, [pc, #144]	@ (8004b38 <athlet_configure_activations+0xbc>)
 8004aa8:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_athlet_activations_map[0] + 64);
 8004aaa:	4b22      	ldr	r3, [pc, #136]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3340      	adds	r3, #64	@ 0x40
 8004ab0:	4a22      	ldr	r2, [pc, #136]	@ (8004b3c <athlet_configure_activations+0xc0>)
 8004ab2:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 64);
 8004ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3340      	adds	r3, #64	@ 0x40
 8004aba:	4a20      	ldr	r2, [pc, #128]	@ (8004b3c <athlet_configure_activations+0xc0>)
 8004abc:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_athlet_activations_map[0] + 64);
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3340      	adds	r3, #64	@ 0x40
 8004ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b40 <athlet_configure_activations+0xc4>)
 8004ac6:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 64);
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3340      	adds	r3, #64	@ 0x40
 8004ace:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <athlet_configure_activations+0xc4>)
 8004ad0:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_athlet_activations_map[0] + 0);
 8004ad2:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <athlet_configure_activations+0xc8>)
 8004ad8:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 0);
 8004ada:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <athlet_configure_activations+0xc8>)
 8004ae0:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_athlet_activations_map[0] + 64);
 8004ae2:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3340      	adds	r3, #64	@ 0x40
 8004ae8:	4a17      	ldr	r2, [pc, #92]	@ (8004b48 <athlet_configure_activations+0xcc>)
 8004aea:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 64);
 8004aec:	4b11      	ldr	r3, [pc, #68]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3340      	adds	r3, #64	@ 0x40
 8004af2:	4a15      	ldr	r2, [pc, #84]	@ (8004b48 <athlet_configure_activations+0xcc>)
 8004af4:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_athlet_activations_map[0] + 0);
 8004af6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <athlet_configure_activations+0xd0>)
 8004afc:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 0);
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a12      	ldr	r2, [pc, #72]	@ (8004b4c <athlet_configure_activations+0xd0>)
 8004b04:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(g_athlet_activations_map[0] + 4);
 8004b06:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4a10      	ldr	r2, [pc, #64]	@ (8004b50 <athlet_configure_activations+0xd4>)
 8004b0e:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_athlet_activations_map[0] + 4);
 8004b10:	4b08      	ldr	r3, [pc, #32]	@ (8004b34 <athlet_configure_activations+0xb8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4a0e      	ldr	r2, [pc, #56]	@ (8004b50 <athlet_configure_activations+0xd4>)
 8004b18:	60d3      	str	r3, [r2, #12]
    return true;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e005      	b.n	8004b2a <athlet_configure_activations+0xae>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004b1e:	2213      	movs	r2, #19
 8004b20:	2130      	movs	r1, #48	@ 0x30
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fae4 	bl	80050f0 <ai_platform_network_set_error>
  return false;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	2400516c 	.word	0x2400516c
 8004b38:	24000014 	.word	0x24000014
 8004b3c:	24000024 	.word	0x24000024
 8004b40:	24000034 	.word	0x24000034
 8004b44:	24000044 	.word	0x24000044
 8004b48:	24000054 	.word	0x24000054
 8004b4c:	24000064 	.word	0x24000064
 8004b50:	24000074 	.word	0x24000074

08004b54 <athlet_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool athlet_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_athlet_weights_map, 1, params)) {
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	483d      	ldr	r0, [pc, #244]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004b64:	f000 f9ec 	bl	8004f40 <ai_platform_get_weights_map>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d069      	beq.n	8004c42 <athlet_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c5c <athlet_configure_weights+0x108>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b76:	4a39      	ldr	r2, [pc, #228]	@ (8004c5c <athlet_configure_weights+0x108>)
 8004b78:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_athlet_weights_map[0] + 0);
 8004b7a:	4b37      	ldr	r3, [pc, #220]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a37      	ldr	r2, [pc, #220]	@ (8004c5c <athlet_configure_weights+0x108>)
 8004b80:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_athlet_weights_map[0] + 0);
 8004b82:	4b35      	ldr	r3, [pc, #212]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a35      	ldr	r2, [pc, #212]	@ (8004c5c <athlet_configure_weights+0x108>)
 8004b88:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b8a:	4b35      	ldr	r3, [pc, #212]	@ (8004c60 <athlet_configure_weights+0x10c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b92:	4a33      	ldr	r2, [pc, #204]	@ (8004c60 <athlet_configure_weights+0x10c>)
 8004b94:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_athlet_weights_map[0] + 640);
 8004b96:	4b30      	ldr	r3, [pc, #192]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004b9e:	4a30      	ldr	r2, [pc, #192]	@ (8004c60 <athlet_configure_weights+0x10c>)
 8004ba0:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_athlet_weights_map[0] + 640);
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004baa:	4a2d      	ldr	r2, [pc, #180]	@ (8004c60 <athlet_configure_weights+0x10c>)
 8004bac:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bae:	4b2d      	ldr	r3, [pc, #180]	@ (8004c64 <athlet_configure_weights+0x110>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c64 <athlet_configure_weights+0x110>)
 8004bb8:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_athlet_weights_map[0] + 768);
 8004bba:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004bc2:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <athlet_configure_weights+0x110>)
 8004bc4:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_athlet_weights_map[0] + 768);
 8004bc6:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004bce:	4a25      	ldr	r2, [pc, #148]	@ (8004c64 <athlet_configure_weights+0x110>)
 8004bd0:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bd2:	4b25      	ldr	r3, [pc, #148]	@ (8004c68 <athlet_configure_weights+0x114>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	4a23      	ldr	r2, [pc, #140]	@ (8004c68 <athlet_configure_weights+0x114>)
 8004bdc:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_athlet_weights_map[0] + 2816);
 8004bde:	4b1e      	ldr	r3, [pc, #120]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be6:	4a20      	ldr	r2, [pc, #128]	@ (8004c68 <athlet_configure_weights+0x114>)
 8004be8:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_athlet_weights_map[0] + 2816);
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <athlet_configure_weights+0x114>)
 8004bf4:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <athlet_configure_weights+0x118>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c6c <athlet_configure_weights+0x118>)
 8004c00:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_athlet_weights_map[0] + 2880);
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f503 6334 	add.w	r3, r3, #2880	@ 0xb40
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <athlet_configure_weights+0x118>)
 8004c0c:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_athlet_weights_map[0] + 2880);
 8004c0e:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f503 6334 	add.w	r3, r3, #2880	@ 0xb40
 8004c16:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <athlet_configure_weights+0x118>)
 8004c18:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <athlet_configure_weights+0x11c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c22:	4a13      	ldr	r2, [pc, #76]	@ (8004c70 <athlet_configure_weights+0x11c>)
 8004c24:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_athlet_weights_map[0] + 2944);
 8004c26:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f503 6338 	add.w	r3, r3, #2944	@ 0xb80
 8004c2e:	4a10      	ldr	r2, [pc, #64]	@ (8004c70 <athlet_configure_weights+0x11c>)
 8004c30:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_athlet_weights_map[0] + 2944);
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <athlet_configure_weights+0x104>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f503 6338 	add.w	r3, r3, #2944	@ 0xb80
 8004c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c70 <athlet_configure_weights+0x11c>)
 8004c3c:	60d3      	str	r3, [r2, #12]
    return true;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e005      	b.n	8004c4e <athlet_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004c42:	2212      	movs	r2, #18
 8004c44:	2130      	movs	r1, #48	@ 0x30
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa52 	bl	80050f0 <ai_platform_network_set_error>
  return false;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	24005170 	.word	0x24005170
 8004c5c:	24000084 	.word	0x24000084
 8004c60:	24000094 	.word	0x24000094
 8004c64:	240000a4 	.word	0x240000a4
 8004c68:	240000b4 	.word	0x240000b4
 8004c6c:	240000c4 	.word	0x240000c4
 8004c70:	240000d4 	.word	0x240000d4

08004c74 <ai_athlet_get_error>:
}


AI_API_ENTRY
ai_error ai_athlet_get_error(ai_handle network)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa2b 	bl	80050d8 <ai_platform_network_get_error>
 8004c82:	4603      	mov	r3, r0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <ai_athlet_create>:


AI_API_ENTRY
ai_error ai_athlet_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004c96:	2300      	movs	r3, #0
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	2305      	movs	r3, #5
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4a04      	ldr	r2, [pc, #16]	@ (8004cb4 <ai_athlet_create+0x28>)
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fa29 	bl	80050fc <ai_platform_network_create>
 8004caa:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	2400069c 	.word	0x2400069c

08004cb8 <ai_athlet_create_and_init>:


AI_API_ENTRY
ai_error ai_athlet_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b094      	sub	sp, #80	@ 0x50
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_athlet_create(network, AI_ATHLET_DATA_CONFIG);
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff ffe0 	bl	8004c8c <ai_athlet_create>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8004cd0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <ai_athlet_create_and_init+0x24>
    return err;
 8004cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cda:	e067      	b.n	8004dac <ai_athlet_create_and_init+0xf4>
  }
  
  if (ai_athlet_data_params_get(&params) != true) {
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f8bd 	bl	8004e60 <ai_athlet_data_params_get>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f083 0301 	eor.w	r3, r3, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <ai_athlet_create_and_init+0x4c>
    err = ai_athlet_get_error(*network);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ffbc 	bl	8004c74 <ai_athlet_get_error>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8004d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d02:	e053      	b.n	8004dac <ai_athlet_create_and_init+0xf4>
  }
#if defined(AI_ATHLET_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d0a:	e012      	b.n	8004d32 <ai_athlet_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004d0c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8004d10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4413      	add	r3, r2
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	330c      	adds	r3, #12
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f8fe 	bl	8004f24 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004d28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <ai_athlet_create_and_init+0x8a>
 8004d38:	8bfb      	ldrh	r3, [r7, #30]
 8004d3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d3e4      	bcc.n	8004d0c <ai_athlet_create_and_init+0x54>
  }
#endif
#if defined(AI_ATHLET_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d48:	e012      	b.n	8004d70 <ai_athlet_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004d4a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8004d4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	f107 0310 	add.w	r3, r7, #16
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f8df 	bl	8004f24 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004d66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <ai_athlet_create_and_init+0xc8>
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d3e4      	bcc.n	8004d4a <ai_athlet_create_and_init+0x92>
  }
#endif
  if (ai_athlet_init(*network, &params) != true) {
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f107 0210 	add.w	r2, r7, #16
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f812 	bl	8004db4 <ai_athlet_init>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f083 0301 	eor.w	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <ai_athlet_create_and_init+0xf2>
    err = ai_athlet_get_error(*network);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff67 	bl	8004c74 <ai_athlet_get_error>
 8004da6:	4603      	mov	r3, r0
 8004da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8004daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3750      	adds	r7, #80	@ 0x50
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <ai_athlet_init>:


AI_API_ENTRY
ai_bool ai_athlet_init(
  ai_handle network, const ai_network_params* params)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f9dd 	bl	8005180 <ai_platform_network_init>
 8004dc6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <ai_athlet_init+0x22>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e026      	b.n	8004e24 <ai_athlet_init+0x70>
  ok &= athlet_configure_weights(net_ctx, params);
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff febb 	bl	8004b54 <athlet_configure_weights>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	72fb      	strb	r3, [r7, #11]
  ok &= athlet_configure_activations(net_ctx, params);
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff fe42 	bl	8004a7c <athlet_configure_activations>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	7afb      	ldrb	r3, [r7, #11]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa5a 	bl	80052c4 <ai_platform_network_post_init>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	7afb      	ldrb	r3, [r7, #11]
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004e22:	7afb      	ldrb	r3, [r7, #11]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <ai_athlet_run>:


AI_API_ENTRY
ai_i32 ai_athlet_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fa6d 	bl	800531c <ai_platform_network_process>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <ai_athlet_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_athlet_data_weights_get(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_athlet_weights_table);
 8004e50:	4b02      	ldr	r3, [pc, #8]	@ (8004e5c <ai_athlet_data_weights_get+0x10>)

}
 8004e52:	4618      	mov	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	24000740 	.word	0x24000740

08004e60 <ai_athlet_data_params_get>:
 * @ingroup athlet_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_athlet_data_params_get(ai_network_params* params)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <ai_athlet_data_params_get+0x12>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e016      	b.n	8004ea0 <ai_athlet_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8004e72:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea8 <ai_athlet_data_params_get+0x48>)
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e7c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ATHLET_DATA_ACTIVATIONS_COUNT, g_athlet_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004e80:	4a0a      	ldr	r2, [pc, #40]	@ (8004eac <ai_athlet_data_params_get+0x4c>)
 8004e82:	f107 0308 	add.w	r3, r7, #8
 8004e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e8a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ATHLET_DATA_WEIGHTS_COUNT, g_athlet_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004e8e:	f107 0210 	add.w	r2, r7, #16
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f903 	bl	80050a4 <ai_platform_bind_network_params>
 8004e9e:	4603      	mov	r3, r0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	08006c24 	.word	0x08006c24
 8004eac:	08006c2c 	.word	0x08006c2c

08004eb0 <ai_buffer_get_size>:
 8004eb0:	b348      	cbz	r0, 8004f06 <ai_buffer_get_size+0x56>
 8004eb2:	4b15      	ldr	r3, [pc, #84]	@ (8004f08 <ai_buffer_get_size+0x58>)
 8004eb4:	b430      	push	{r4, r5}
 8004eb6:	6802      	ldr	r2, [r0, #0]
 8004eb8:	4d14      	ldr	r5, [pc, #80]	@ (8004f0c <ai_buffer_get_size+0x5c>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	6984      	ldr	r4, [r0, #24]
 8004ebe:	42ab      	cmp	r3, r5
 8004ec0:	6862      	ldr	r2, [r4, #4]
 8004ec2:	d103      	bne.n	8004ecc <ai_buffer_get_size+0x1c>
 8004ec4:	b111      	cbz	r1, 8004ecc <ai_buffer_get_size+0x1c>
 8004ec6:	321f      	adds	r2, #31
 8004ec8:	f022 021f 	bic.w	r2, r2, #31
 8004ecc:	7d03      	ldrb	r3, [r0, #20]
 8004ece:	6941      	ldr	r1, [r0, #20]
 8004ed0:	f1a3 0301 	sub.w	r3, r3, #1
 8004ed4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004ee2:	da0c      	bge.n	8004efe <ai_buffer_get_size+0x4e>
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d103      	bne.n	8004ef0 <ai_buffer_get_size+0x40>
 8004ee8:	2802      	cmp	r0, #2
 8004eea:	f04f 0302 	mov.w	r3, #2
 8004eee:	d006      	beq.n	8004efe <ai_buffer_get_size+0x4e>
 8004ef0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	fb01 f202 	mul.w	r2, r1, r2
 8004efc:	d1f2      	bne.n	8004ee4 <ai_buffer_get_size+0x34>
 8004efe:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004f02:	bc30      	pop	{r4, r5}
 8004f04:	4770      	bx	lr
 8004f06:	4770      	bx	lr
 8004f08:	017fffff 	.word	0x017fffff
 8004f0c:	000400c0 	.word	0x000400c0

08004f10 <ai_buffer_array_sane>:
 8004f10:	b138      	cbz	r0, 8004f22 <ai_buffer_array_sane+0x12>
 8004f12:	6843      	ldr	r3, [r0, #4]
 8004f14:	b123      	cbz	r3, 8004f20 <ai_buffer_array_sane+0x10>
 8004f16:	8840      	ldrh	r0, [r0, #2]
 8004f18:	3800      	subs	r0, #0
 8004f1a:	bf18      	it	ne
 8004f1c:	2001      	movne	r0, #1
 8004f1e:	4770      	bx	lr
 8004f20:	4618      	mov	r0, r3
 8004f22:	4770      	bx	lr

08004f24 <ai_buffer_array_item_set_address>:
 8004f24:	b158      	cbz	r0, 8004f3e <ai_buffer_array_item_set_address+0x1a>
 8004f26:	6843      	ldr	r3, [r0, #4]
 8004f28:	b143      	cbz	r3, 8004f3c <ai_buffer_array_item_set_address+0x18>
 8004f2a:	8840      	ldrh	r0, [r0, #2]
 8004f2c:	b138      	cbz	r0, 8004f3e <ai_buffer_array_item_set_address+0x1a>
 8004f2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f32:	2001      	movs	r0, #1
 8004f34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	4770      	bx	lr
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4770      	bx	lr

08004f40 <ai_platform_get_weights_map>:
 8004f40:	2900      	cmp	r1, #0
 8004f42:	bf18      	it	ne
 8004f44:	2800      	cmpne	r0, #0
 8004f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f48:	bf0c      	ite	eq
 8004f4a:	2401      	moveq	r4, #1
 8004f4c:	2400      	movne	r4, #0
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	bf08      	it	eq
 8004f52:	f044 0401 	orreq.w	r4, r4, #1
 8004f56:	b114      	cbz	r4, 8004f5e <ai_platform_get_weights_map+0x1e>
 8004f58:	2400      	movs	r4, #0
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f5e:	4616      	mov	r6, r2
 8004f60:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <ai_platform_get_weights_map+0xac>)
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	4605      	mov	r5, r0
 8004f66:	460f      	mov	r7, r1
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d024      	beq.n	8004fb6 <ai_platform_get_weights_map+0x76>
 8004f6c:	6870      	ldr	r0, [r6, #4]
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d0f2      	beq.n	8004f58 <ai_platform_get_weights_map+0x18>
 8004f72:	6806      	ldr	r6, [r0, #0]
 8004f74:	429e      	cmp	r6, r3
 8004f76:	d006      	beq.n	8004f86 <ai_platform_get_weights_map+0x46>
 8004f78:	f1a1 0401 	sub.w	r4, r1, #1
 8004f7c:	6028      	str	r0, [r5, #0]
 8004f7e:	fab4 f484 	clz	r4, r4
 8004f82:	0964      	lsrs	r4, r4, #5
 8004f84:	e7e9      	b.n	8004f5a <ai_platform_get_weights_map+0x1a>
 8004f86:	3d04      	subs	r5, #4
 8004f88:	4601      	mov	r1, r0
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	e004      	b.n	8004f98 <ai_platform_get_weights_map+0x58>
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f845 2f04 	str.w	r2, [r5, #4]!
 8004f94:	429f      	cmp	r7, r3
 8004f96:	d903      	bls.n	8004fa0 <ai_platform_get_weights_map+0x60>
 8004f98:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004f9c:	42b2      	cmp	r2, r6
 8004f9e:	d1f6      	bne.n	8004f8e <ai_platform_get_weights_map+0x4e>
 8004fa0:	429f      	cmp	r7, r3
 8004fa2:	d1da      	bne.n	8004f5a <ai_platform_get_weights_map+0x1a>
 8004fa4:	1c79      	adds	r1, r7, #1
 8004fa6:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <ai_platform_get_weights_map+0xac>)
 8004fa8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8004fac:	1ae4      	subs	r4, r4, r3
 8004fae:	fab4 f484 	clz	r4, r4
 8004fb2:	0964      	lsrs	r4, r4, #5
 8004fb4:	e7d1      	b.n	8004f5a <ai_platform_get_weights_map+0x1a>
 8004fb6:	1d30      	adds	r0, r6, #4
 8004fb8:	f7ff ffaa 	bl	8004f10 <ai_buffer_array_sane>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d0cb      	beq.n	8004f58 <ai_platform_get_weights_map+0x18>
 8004fc0:	88f3      	ldrh	r3, [r6, #6]
 8004fc2:	429f      	cmp	r7, r3
 8004fc4:	d1c8      	bne.n	8004f58 <ai_platform_get_weights_map+0x18>
 8004fc6:	3d04      	subs	r5, #4
 8004fc8:	4622      	mov	r2, r4
 8004fca:	e004      	b.n	8004fd6 <ai_platform_get_weights_map+0x96>
 8004fcc:	3201      	adds	r2, #1
 8004fce:	f845 3f04 	str.w	r3, [r5, #4]!
 8004fd2:	4297      	cmp	r7, r2
 8004fd4:	d905      	bls.n	8004fe2 <ai_platform_get_weights_map+0xa2>
 8004fd6:	68b3      	ldr	r3, [r6, #8]
 8004fd8:	4423      	add	r3, r4
 8004fda:	341c      	adds	r4, #28
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f4      	bne.n	8004fcc <ai_platform_get_weights_map+0x8c>
 8004fe2:	1abc      	subs	r4, r7, r2
 8004fe4:	fab4 f484 	clz	r4, r4
 8004fe8:	0964      	lsrs	r4, r4, #5
 8004fea:	e7b6      	b.n	8004f5a <ai_platform_get_weights_map+0x1a>
 8004fec:	a1facade 	.word	0xa1facade

08004ff0 <ai_platform_get_activations_map>:
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	bf18      	it	ne
 8004ff4:	2800      	cmpne	r0, #0
 8004ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2401      	moveq	r4, #1
 8004ffc:	2400      	movne	r4, #0
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	bf08      	it	eq
 8005002:	f044 0401 	orreq.w	r4, r4, #1
 8005006:	b114      	cbz	r4, 800500e <ai_platform_get_activations_map+0x1e>
 8005008:	2400      	movs	r4, #0
 800500a:	4620      	mov	r0, r4
 800500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800500e:	4616      	mov	r6, r2
 8005010:	4b23      	ldr	r3, [pc, #140]	@ (80050a0 <ai_platform_get_activations_map+0xb0>)
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	4605      	mov	r5, r0
 8005016:	460f      	mov	r7, r1
 8005018:	429a      	cmp	r2, r3
 800501a:	d024      	beq.n	8005066 <ai_platform_get_activations_map+0x76>
 800501c:	6a30      	ldr	r0, [r6, #32]
 800501e:	2800      	cmp	r0, #0
 8005020:	d0f2      	beq.n	8005008 <ai_platform_get_activations_map+0x18>
 8005022:	6806      	ldr	r6, [r0, #0]
 8005024:	429e      	cmp	r6, r3
 8005026:	d006      	beq.n	8005036 <ai_platform_get_activations_map+0x46>
 8005028:	f1a1 0401 	sub.w	r4, r1, #1
 800502c:	6028      	str	r0, [r5, #0]
 800502e:	fab4 f484 	clz	r4, r4
 8005032:	0964      	lsrs	r4, r4, #5
 8005034:	e7e9      	b.n	800500a <ai_platform_get_activations_map+0x1a>
 8005036:	3d04      	subs	r5, #4
 8005038:	4601      	mov	r1, r0
 800503a:	4623      	mov	r3, r4
 800503c:	e004      	b.n	8005048 <ai_platform_get_activations_map+0x58>
 800503e:	3301      	adds	r3, #1
 8005040:	f845 2f04 	str.w	r2, [r5, #4]!
 8005044:	429f      	cmp	r7, r3
 8005046:	d903      	bls.n	8005050 <ai_platform_get_activations_map+0x60>
 8005048:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800504c:	42b2      	cmp	r2, r6
 800504e:	d1f6      	bne.n	800503e <ai_platform_get_activations_map+0x4e>
 8005050:	429f      	cmp	r7, r3
 8005052:	d1da      	bne.n	800500a <ai_platform_get_activations_map+0x1a>
 8005054:	1c79      	adds	r1, r7, #1
 8005056:	4b12      	ldr	r3, [pc, #72]	@ (80050a0 <ai_platform_get_activations_map+0xb0>)
 8005058:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 800505c:	1ae4      	subs	r4, r4, r3
 800505e:	fab4 f484 	clz	r4, r4
 8005062:	0964      	lsrs	r4, r4, #5
 8005064:	e7d1      	b.n	800500a <ai_platform_get_activations_map+0x1a>
 8005066:	f106 000c 	add.w	r0, r6, #12
 800506a:	f7ff ff51 	bl	8004f10 <ai_buffer_array_sane>
 800506e:	2800      	cmp	r0, #0
 8005070:	d0ca      	beq.n	8005008 <ai_platform_get_activations_map+0x18>
 8005072:	89f3      	ldrh	r3, [r6, #14]
 8005074:	429f      	cmp	r7, r3
 8005076:	d1c7      	bne.n	8005008 <ai_platform_get_activations_map+0x18>
 8005078:	3d04      	subs	r5, #4
 800507a:	4622      	mov	r2, r4
 800507c:	e004      	b.n	8005088 <ai_platform_get_activations_map+0x98>
 800507e:	3201      	adds	r2, #1
 8005080:	f845 3f04 	str.w	r3, [r5, #4]!
 8005084:	4297      	cmp	r7, r2
 8005086:	d905      	bls.n	8005094 <ai_platform_get_activations_map+0xa4>
 8005088:	6933      	ldr	r3, [r6, #16]
 800508a:	4423      	add	r3, r4
 800508c:	341c      	adds	r4, #28
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f4      	bne.n	800507e <ai_platform_get_activations_map+0x8e>
 8005094:	1abc      	subs	r4, r7, r2
 8005096:	fab4 f484 	clz	r4, r4
 800509a:	0964      	lsrs	r4, r4, #5
 800509c:	e7b5      	b.n	800500a <ai_platform_get_activations_map+0x1a>
 800509e:	bf00      	nop
 80050a0:	a1facade 	.word	0xa1facade

080050a4 <ai_platform_bind_network_params>:
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	bf18      	it	ne
 80050a8:	2900      	cmpne	r1, #0
 80050aa:	d010      	beq.n	80050ce <ai_platform_bind_network_params+0x2a>
 80050ac:	b178      	cbz	r0, 80050ce <ai_platform_bind_network_params+0x2a>
 80050ae:	4603      	mov	r3, r0
 80050b0:	4808      	ldr	r0, [pc, #32]	@ (80050d4 <ai_platform_bind_network_params+0x30>)
 80050b2:	f103 0c0c 	add.w	ip, r3, #12
 80050b6:	f843 0b04 	str.w	r0, [r3], #4
 80050ba:	c903      	ldmia	r1, {r0, r1}
 80050bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80050c0:	2301      	movs	r3, #1
 80050c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80050ca:	4618      	mov	r0, r3
 80050cc:	4770      	bx	lr
 80050ce:	2300      	movs	r3, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	4770      	bx	lr
 80050d4:	a1facade 	.word	0xa1facade

080050d8 <ai_platform_network_get_error>:
 80050d8:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <ai_platform_network_get_error+0x14>)
 80050da:	6802      	ldr	r2, [r0, #0]
 80050dc:	4393      	bics	r3, r2
 80050de:	d102      	bne.n	80050e6 <ai_platform_network_get_error+0xe>
 80050e0:	300c      	adds	r0, #12
 80050e2:	f000 bb43 	b.w	800576c <core_get_error>
 80050e6:	f241 0010 	movw	r0, #4112	@ 0x1010
 80050ea:	4770      	bx	lr
 80050ec:	a1c00100 	.word	0xa1c00100

080050f0 <ai_platform_network_set_error>:
 80050f0:	b110      	cbz	r0, 80050f8 <ai_platform_network_set_error+0x8>
 80050f2:	300c      	adds	r0, #12
 80050f4:	f000 bb40 	b.w	8005778 <core_set_error>
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop

080050fc <ai_platform_network_create>:
 80050fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005100:	b083      	sub	sp, #12
 8005102:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8005106:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800510a:	b320      	cbz	r0, 8005156 <ai_platform_network_create+0x5a>
 800510c:	6002      	str	r2, [r0, #0]
 800510e:	4616      	mov	r6, r2
 8005110:	461f      	mov	r7, r3
 8005112:	4604      	mov	r4, r0
 8005114:	f000 fb28 	bl	8005768 <core_init>
 8005118:	b970      	cbnz	r0, 8005138 <ai_platform_network_create+0x3c>
 800511a:	2530      	movs	r5, #48	@ 0x30
 800511c:	2300      	movs	r3, #0
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2410      	movs	r4, #16
 8005122:	464a      	mov	r2, r9
 8005124:	4641      	mov	r1, r8
 8005126:	4638      	mov	r0, r7
 8005128:	f001 fc34 	bl	8006994 <ai_version_get>
 800512c:	60b0      	str	r0, [r6, #8]
 800512e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005132:	b003      	add	sp, #12
 8005134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005138:	2200      	movs	r2, #0
 800513a:	4641      	mov	r1, r8
 800513c:	4638      	mov	r0, r7
 800513e:	f001 fc29 	bl	8006994 <ai_version_get>
 8005142:	4605      	mov	r5, r0
 8005144:	2200      	movs	r2, #0
 8005146:	2105      	movs	r1, #5
 8005148:	2001      	movs	r0, #1
 800514a:	f001 fc23 	bl	8006994 <ai_version_get>
 800514e:	4285      	cmp	r5, r0
 8005150:	d008      	beq.n	8005164 <ai_platform_network_create+0x68>
 8005152:	2501      	movs	r5, #1
 8005154:	e7e2      	b.n	800511c <ai_platform_network_create+0x20>
 8005156:	2510      	movs	r5, #16
 8005158:	462c      	mov	r4, r5
 800515a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800515e:	b003      	add	sp, #12
 8005160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <ai_platform_network_create+0x80>)
 8005166:	a801      	add	r0, sp, #4
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	f000 fb11 	bl	8005790 <ai_check_custom_types>
 800516e:	b110      	cbz	r0, 8005176 <ai_platform_network_create+0x7a>
 8005170:	2400      	movs	r4, #0
 8005172:	4625      	mov	r5, r4
 8005174:	e7d5      	b.n	8005122 <ai_platform_network_create+0x26>
 8005176:	2502      	movs	r5, #2
 8005178:	e7d0      	b.n	800511c <ai_platform_network_create+0x20>
 800517a:	bf00      	nop
 800517c:	84048403 	.word	0x84048403

08005180 <ai_platform_network_init>:
 8005180:	4a4e      	ldr	r2, [pc, #312]	@ (80052bc <ai_platform_network_init+0x13c>)
 8005182:	460b      	mov	r3, r1
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	6801      	ldr	r1, [r0, #0]
 800518a:	ea01 0802 	and.w	r8, r1, r2
 800518e:	438a      	bics	r2, r1
 8005190:	d13b      	bne.n	800520a <ai_platform_network_init+0x8a>
 8005192:	4604      	mov	r4, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05b      	beq.n	8005250 <ai_platform_network_init+0xd0>
 8005198:	4a49      	ldr	r2, [pc, #292]	@ (80052c0 <ai_platform_network_init+0x140>)
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	4290      	cmp	r0, r2
 800519e:	d10a      	bne.n	80051b6 <ai_platform_network_init+0x36>
 80051a0:	4541      	cmp	r1, r8
 80051a2:	e9d3 7203 	ldrd	r7, r2, [r3, #12]
 80051a6:	e9d3 0301 	ldrd	r0, r3, [r3, #4]
 80051aa:	d042      	beq.n	8005232 <ai_platform_network_init+0xb2>
 80051ac:	2303      	movs	r3, #3
 80051ae:	4620      	mov	r0, r4
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	461d      	mov	r5, r3
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80051c0:	f105 061c 	add.w	r6, r5, #28
 80051c4:	f7ff fe74 	bl	8004eb0 <ai_buffer_get_size>
 80051c8:	4607      	mov	r7, r0
 80051ca:	2101      	movs	r1, #1
 80051cc:	4630      	mov	r0, r6
 80051ce:	f8d5 a020 	ldr.w	sl, [r5, #32]
 80051d2:	f7ff fe6d 	bl	8004eb0 <ai_buffer_get_size>
 80051d6:	b1d7      	cbz	r7, 800520e <ai_platform_network_init+0x8e>
 80051d8:	b340      	cbz	r0, 800522c <ai_platform_network_init+0xac>
 80051da:	f1ba 0f00 	cmp.w	sl, #0
 80051de:	d030      	beq.n	8005242 <ai_platform_network_init+0xc2>
 80051e0:	f04f 0e01 	mov.w	lr, #1
 80051e4:	f1b9 0f00 	cmp.w	r9, #0
 80051e8:	d038      	beq.n	800525c <ai_platform_network_init+0xdc>
 80051ea:	2001      	movs	r0, #1
 80051ec:	4b33      	ldr	r3, [pc, #204]	@ (80052bc <ai_platform_network_init+0x13c>)
 80051ee:	ea4f 470e 	mov.w	r7, lr, lsl #16
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1d9      	bne.n	80051ac <ai_platform_network_init+0x2c>
 80051f8:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80051fa:	4283      	cmp	r3, r0
 80051fc:	d235      	bcs.n	800526a <ai_platform_network_init+0xea>
 80051fe:	2212      	movs	r2, #18
 8005200:	2116      	movs	r1, #22
 8005202:	f104 000c 	add.w	r0, r4, #12
 8005206:	f000 fab7 	bl	8005778 <core_set_error>
 800520a:	2000      	movs	r0, #0
 800520c:	e7d1      	b.n	80051b2 <ai_platform_network_init+0x32>
 800520e:	b138      	cbz	r0, 8005220 <ai_platform_network_init+0xa0>
 8005210:	f1ba 0f00 	cmp.w	sl, #0
 8005214:	d015      	beq.n	8005242 <ai_platform_network_init+0xc2>
 8005216:	4638      	mov	r0, r7
 8005218:	f04f 0e01 	mov.w	lr, #1
 800521c:	463d      	mov	r5, r7
 800521e:	e7e5      	b.n	80051ec <ai_platform_network_init+0x6c>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	4543      	cmp	r3, r8
 8005224:	d1c2      	bne.n	80051ac <ai_platform_network_init+0x2c>
 8005226:	4607      	mov	r7, r0
 8005228:	6220      	str	r0, [r4, #32]
 800522a:	e005      	b.n	8005238 <ai_platform_network_init+0xb8>
 800522c:	4606      	mov	r6, r0
 800522e:	4686      	mov	lr, r0
 8005230:	e7d8      	b.n	80051e4 <ai_platform_network_init+0x64>
 8005232:	e9c4 0308 	strd	r0, r3, [r4, #32]
 8005236:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8005238:	4620      	mov	r0, r4
 800523a:	62a7      	str	r7, [r4, #40]	@ 0x28
 800523c:	f000 fad0 	bl	80057e0 <ai_layers_init_all>
 8005240:	e7b4      	b.n	80051ac <ai_platform_network_init+0x2c>
 8005242:	2213      	movs	r2, #19
 8005244:	2110      	movs	r1, #16
 8005246:	f104 000c 	add.w	r0, r4, #12
 800524a:	f000 fa95 	bl	8005778 <core_set_error>
 800524e:	e7dc      	b.n	800520a <ai_platform_network_init+0x8a>
 8005250:	2211      	movs	r2, #17
 8005252:	2110      	movs	r1, #16
 8005254:	300c      	adds	r0, #12
 8005256:	f000 fa8f 	bl	8005778 <core_set_error>
 800525a:	e7d6      	b.n	800520a <ai_platform_network_init+0x8a>
 800525c:	2212      	movs	r2, #18
 800525e:	2110      	movs	r1, #16
 8005260:	f104 000c 	add.w	r0, r4, #12
 8005264:	f000 fa88 	bl	8005778 <core_set_error>
 8005268:	e7cf      	b.n	800520a <ai_platform_network_init+0x8a>
 800526a:	b1e0      	cbz	r0, 80052a6 <ai_platform_network_init+0x126>
 800526c:	46ac      	mov	ip, r5
 800526e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005270:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8005274:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800527e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005282:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005284:	f8c4 8020 	str.w	r8, [r4, #32]
 8005288:	4573      	cmp	r3, lr
 800528a:	d310      	bcc.n	80052ae <ai_platform_network_init+0x12e>
 800528c:	f1be 0f00 	cmp.w	lr, #0
 8005290:	d0d2      	beq.n	8005238 <ai_platform_network_init+0xb8>
 8005292:	46b4      	mov	ip, r6
 8005294:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800529a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80052a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80052a4:	e7c8      	b.n	8005238 <ai_platform_network_init+0xb8>
 80052a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80052a8:	6220      	str	r0, [r4, #32]
 80052aa:	4573      	cmp	r3, lr
 80052ac:	d2ee      	bcs.n	800528c <ai_platform_network_init+0x10c>
 80052ae:	2213      	movs	r2, #19
 80052b0:	2116      	movs	r1, #22
 80052b2:	f104 000c 	add.w	r0, r4, #12
 80052b6:	f000 fa5f 	bl	8005778 <core_set_error>
 80052ba:	e7a6      	b.n	800520a <ai_platform_network_init+0x8a>
 80052bc:	a1c00100 	.word	0xa1c00100
 80052c0:	a1facade 	.word	0xa1facade

080052c4 <ai_platform_network_post_init>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <ai_platform_network_post_init+0x54>)
 80052c8:	6802      	ldr	r2, [r0, #0]
 80052ca:	ea02 0103 	and.w	r1, r2, r3
 80052ce:	4393      	bics	r3, r2
 80052d0:	d10c      	bne.n	80052ec <ai_platform_network_post_init+0x28>
 80052d2:	6903      	ldr	r3, [r0, #16]
 80052d4:	4604      	mov	r4, r0
 80052d6:	079b      	lsls	r3, r3, #30
 80052d8:	d503      	bpl.n	80052e2 <ai_platform_network_post_init+0x1e>
 80052da:	428a      	cmp	r2, r1
 80052dc:	d008      	beq.n	80052f0 <ai_platform_network_post_init+0x2c>
 80052de:	2001      	movs	r0, #1
 80052e0:	bd38      	pop	{r3, r4, r5, pc}
 80052e2:	2210      	movs	r2, #16
 80052e4:	2111      	movs	r1, #17
 80052e6:	300c      	adds	r0, #12
 80052e8:	f000 fa46 	bl	8005778 <core_set_error>
 80052ec:	2000      	movs	r0, #0
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	f000 fa86 	bl	8005800 <ai_layers_post_init_all>
 80052f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f1      	beq.n	80052de <ai_platform_network_post_init+0x1a>
 80052fa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	d0ee      	beq.n	80052de <ai_platform_network_post_init+0x1a>
 8005300:	4629      	mov	r1, r5
 8005302:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005304:	2000      	movs	r0, #0
 8005306:	4798      	blx	r3
 8005308:	692b      	ldr	r3, [r5, #16]
 800530a:	42ab      	cmp	r3, r5
 800530c:	461d      	mov	r5, r3
 800530e:	d0e6      	beq.n	80052de <ai_platform_network_post_init+0x1a>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0e4      	beq.n	80052de <ai_platform_network_post_init+0x1a>
 8005314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005316:	e7f3      	b.n	8005300 <ai_platform_network_post_init+0x3c>
 8005318:	a1c00100 	.word	0xa1c00100

0800531c <ai_platform_network_process>:
 800531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005320:	4bba      	ldr	r3, [pc, #744]	@ (800560c <ai_platform_network_process+0x2f0>)
 8005322:	4691      	mov	r9, r2
 8005324:	6802      	ldr	r2, [r0, #0]
 8005326:	b085      	sub	sp, #20
 8005328:	4393      	bics	r3, r2
 800532a:	f040 812f 	bne.w	800558c <ai_platform_network_process+0x270>
 800532e:	6903      	ldr	r3, [r0, #16]
 8005330:	4604      	mov	r4, r0
 8005332:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2a00      	cmp	r2, #0
 800533a:	f000 811e 	beq.w	800557a <ai_platform_network_process+0x25e>
 800533e:	2200      	movs	r2, #0
 8005340:	2b03      	cmp	r3, #3
 8005342:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8005346:	6182      	str	r2, [r0, #24]
 8005348:	f040 811a 	bne.w	8005580 <ai_platform_network_process+0x264>
 800534c:	2900      	cmp	r1, #0
 800534e:	f000 8128 	beq.w	80055a2 <ai_platform_network_process+0x286>
 8005352:	faba f78a 	clz	r7, sl
 8005356:	097f      	lsrs	r7, r7, #5
 8005358:	f1ba 0f00 	cmp.w	sl, #0
 800535c:	f000 8121 	beq.w	80055a2 <ai_platform_network_process+0x286>
 8005360:	f8ba 3000 	ldrh.w	r3, [sl]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 811c 	beq.w	80055a2 <ai_platform_network_process+0x286>
 800536a:	698b      	ldr	r3, [r1, #24]
 800536c:	460d      	mov	r5, r1
 800536e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8005378:	f8da 3004 	ldr.w	r3, [sl, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d072      	beq.n	8005466 <ai_platform_network_process+0x14a>
 8005380:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005384:	2e00      	cmp	r6, #0
 8005386:	d06e      	beq.n	8005466 <ai_platform_network_process+0x14a>
 8005388:	f8da 3008 	ldr.w	r3, [sl, #8]
 800538c:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8005390:	f8d3 b000 	ldr.w	fp, [r3]
 8005394:	eb1b 1807 	adds.w	r8, fp, r7, lsl #4
 8005398:	f000 8102 	beq.w	80055a0 <ai_platform_network_process+0x284>
 800539c:	69b3      	ldr	r3, [r6, #24]
 800539e:	2101      	movs	r1, #1
 80053a0:	4628      	mov	r0, r5
 80053a2:	685c      	ldr	r4, [r3, #4]
 80053a4:	f7ff fd84 	bl	8004eb0 <ai_buffer_get_size>
 80053a8:	4284      	cmp	r4, r0
 80053aa:	f0c0 8101 	bcc.w	80055b0 <ai_platform_network_process+0x294>
 80053ae:	68f0      	ldr	r0, [r6, #12]
 80053b0:	69a9      	ldr	r1, [r5, #24]
 80053b2:	68c2      	ldr	r2, [r0, #12]
 80053b4:	68cb      	ldr	r3, [r1, #12]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	f040 80fa 	bne.w	80055b0 <ai_platform_network_process+0x294>
 80053bc:	6882      	ldr	r2, [r0, #8]
 80053be:	688b      	ldr	r3, [r1, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	f040 80f5 	bne.w	80055b0 <ai_platform_network_process+0x294>
 80053c6:	6842      	ldr	r2, [r0, #4]
 80053c8:	684b      	ldr	r3, [r1, #4]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	f040 80f0 	bne.w	80055b0 <ai_platform_network_process+0x294>
 80053d0:	69b3      	ldr	r3, [r6, #24]
 80053d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053d6:	f001 facd 	bl	8006974 <ai_array_get_data_byte_size>
 80053da:	4604      	mov	r4, r0
 80053dc:	4630      	mov	r0, r6
 80053de:	f001 fadf 	bl	80069a0 <get_tensor_byte_size>
 80053e2:	4284      	cmp	r4, r0
 80053e4:	f0c0 80e4 	bcc.w	80055b0 <ai_platform_network_process+0x294>
 80053e8:	69b3      	ldr	r3, [r6, #24]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	f001 fa52 	bl	8006894 <ai_array_to_buffer_fmt>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	4058      	eors	r0, r3
 80053f4:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 80053f8:	f040 8192 	bne.w	8005720 <ai_platform_network_process+0x404>
 80053fc:	686b      	ldr	r3, [r5, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 80ce 	beq.w	80055a0 <ai_platform_network_process+0x284>
 8005404:	69ab      	ldr	r3, [r5, #24]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8181 	beq.w	8005710 <ai_platform_network_process+0x3f4>
 800540e:	9a01      	ldr	r2, [sp, #4]
 8005410:	4630      	mov	r0, r6
 8005412:	3701      	adds	r7, #1
 8005414:	351c      	adds	r5, #28
 8005416:	429a      	cmp	r2, r3
 8005418:	bf38      	it	cc
 800541a:	461a      	movcc	r2, r3
 800541c:	9201      	str	r2, [sp, #4]
 800541e:	f001 fabf 	bl	80069a0 <get_tensor_byte_size>
 8005422:	f8c8 0008 	str.w	r0, [r8, #8]
 8005426:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fb00 f303 	mul.w	r3, r0, r3
 8005430:	f8c8 300c 	str.w	r3, [r8, #12]
 8005434:	f855 1c18 	ldr.w	r1, [r5, #-24]
 8005438:	440b      	add	r3, r1
 800543a:	f8c8 1004 	str.w	r1, [r8, #4]
 800543e:	f84b 3009 	str.w	r3, [fp, r9]
 8005442:	69b0      	ldr	r0, [r6, #24]
 8005444:	6803      	ldr	r3, [r0, #0]
 8005446:	009a      	lsls	r2, r3, #2
 8005448:	f100 80a4 	bmi.w	8005594 <ai_platform_network_process+0x278>
 800544c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	4419      	add	r1, r3
 8005454:	6081      	str	r1, [r0, #8]
 8005456:	69b3      	ldr	r3, [r6, #24]
 8005458:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005462:	42bb      	cmp	r3, r7
 8005464:	d888      	bhi.n	8005378 <ai_platform_network_process+0x5c>
 8005466:	e9dd 4902 	ldrd	r4, r9, [sp, #8]
 800546a:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800546c:	f1b9 0f00 	cmp.w	r9, #0
 8005470:	f000 815e 	beq.w	8005730 <ai_platform_network_process+0x414>
 8005474:	2a01      	cmp	r2, #1
 8005476:	f240 80a4 	bls.w	80055c2 <ai_platform_network_process+0x2a6>
 800547a:	f8d4 8034 	ldr.w	r8, [r4, #52]	@ 0x34
 800547e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 809d 	beq.w	80055c2 <ai_platform_network_process+0x2a6>
 8005488:	464e      	mov	r6, r9
 800548a:	2700      	movs	r7, #0
 800548c:	9402      	str	r4, [sp, #8]
 800548e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80a1 	beq.w	80055da <ai_platform_network_process+0x2be>
 8005498:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800549c:	2d00      	cmp	r5, #0
 800549e:	f000 809c 	beq.w	80055da <ai_platform_network_process+0x2be>
 80054a2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80054a6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80054aa:	f8d3 9000 	ldr.w	r9, [r3]
 80054ae:	eb19 1a07 	adds.w	sl, r9, r7, lsl #4
 80054b2:	f000 8150 	beq.w	8005756 <ai_platform_network_process+0x43a>
 80054b6:	69ab      	ldr	r3, [r5, #24]
 80054b8:	2101      	movs	r1, #1
 80054ba:	4630      	mov	r0, r6
 80054bc:	685c      	ldr	r4, [r3, #4]
 80054be:	f7ff fcf7 	bl	8004eb0 <ai_buffer_get_size>
 80054c2:	4284      	cmp	r4, r0
 80054c4:	d37c      	bcc.n	80055c0 <ai_platform_network_process+0x2a4>
 80054c6:	68e8      	ldr	r0, [r5, #12]
 80054c8:	69b1      	ldr	r1, [r6, #24]
 80054ca:	68c2      	ldr	r2, [r0, #12]
 80054cc:	68cb      	ldr	r3, [r1, #12]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d176      	bne.n	80055c0 <ai_platform_network_process+0x2a4>
 80054d2:	6882      	ldr	r2, [r0, #8]
 80054d4:	688b      	ldr	r3, [r1, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d172      	bne.n	80055c0 <ai_platform_network_process+0x2a4>
 80054da:	6842      	ldr	r2, [r0, #4]
 80054dc:	684b      	ldr	r3, [r1, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d16e      	bne.n	80055c0 <ai_platform_network_process+0x2a4>
 80054e2:	69ab      	ldr	r3, [r5, #24]
 80054e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054e8:	f001 fa44 	bl	8006974 <ai_array_get_data_byte_size>
 80054ec:	9003      	str	r0, [sp, #12]
 80054ee:	4628      	mov	r0, r5
 80054f0:	f001 fa56 	bl	80069a0 <get_tensor_byte_size>
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	4283      	cmp	r3, r0
 80054f8:	d362      	bcc.n	80055c0 <ai_platform_network_process+0x2a4>
 80054fa:	69ab      	ldr	r3, [r5, #24]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f001 f9c9 	bl	8006894 <ai_array_to_buffer_fmt>
 8005502:	6833      	ldr	r3, [r6, #0]
 8005504:	4043      	eors	r3, r0
 8005506:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800550a:	f040 8114 	bne.w	8005736 <ai_platform_network_process+0x41a>
 800550e:	6873      	ldr	r3, [r6, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8120 	beq.w	8005756 <ai_platform_network_process+0x43a>
 8005516:	69b3      	ldr	r3, [r6, #24]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8113 	beq.w	8005746 <ai_platform_network_process+0x42a>
 8005520:	9a01      	ldr	r2, [sp, #4]
 8005522:	4628      	mov	r0, r5
 8005524:	3701      	adds	r7, #1
 8005526:	361c      	adds	r6, #28
 8005528:	429a      	cmp	r2, r3
 800552a:	bf38      	it	cc
 800552c:	461a      	movcc	r2, r3
 800552e:	9201      	str	r2, [sp, #4]
 8005530:	f001 fa36 	bl	80069a0 <get_tensor_byte_size>
 8005534:	f8ca 0008 	str.w	r0, [sl, #8]
 8005538:	4603      	mov	r3, r0
 800553a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	f8ca 300c 	str.w	r3, [sl, #12]
 8005548:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800554c:	440b      	add	r3, r1
 800554e:	f8ca 1004 	str.w	r1, [sl, #4]
 8005552:	f849 300b 	str.w	r3, [r9, fp]
 8005556:	69a8      	ldr	r0, [r5, #24]
 8005558:	6803      	ldr	r3, [r0, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	d438      	bmi.n	80055d0 <ai_platform_network_process+0x2b4>
 800555e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	4419      	add	r1, r3
 8005566:	6081      	str	r1, [r0, #8]
 8005568:	69ab      	ldr	r3, [r5, #24]
 800556a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005574:	429f      	cmp	r7, r3
 8005576:	d38a      	bcc.n	800548e <ai_platform_network_process+0x172>
 8005578:	e02f      	b.n	80055da <ai_platform_network_process+0x2be>
 800557a:	2b03      	cmp	r3, #3
 800557c:	6182      	str	r2, [r0, #24]
 800557e:	d010      	beq.n	80055a2 <ai_platform_network_process+0x286>
 8005580:	2230      	movs	r2, #48	@ 0x30
 8005582:	2111      	movs	r1, #17
 8005584:	f104 000c 	add.w	r0, r4, #12
 8005588:	f000 f8f6 	bl	8005778 <core_set_error>
 800558c:	2000      	movs	r0, #0
 800558e:	b005      	add	sp, #20
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	f8ba 3000 	ldrh.w	r3, [sl]
 8005598:	429f      	cmp	r7, r3
 800559a:	f4ff aeed 	bcc.w	8005378 <ai_platform_network_process+0x5c>
 800559e:	e762      	b.n	8005466 <ai_platform_network_process+0x14a>
 80055a0:	9c02      	ldr	r4, [sp, #8]
 80055a2:	2217      	movs	r2, #23
 80055a4:	2112      	movs	r1, #18
 80055a6:	f104 000c 	add.w	r0, r4, #12
 80055aa:	f000 f8e5 	bl	8005778 <core_set_error>
 80055ae:	e7ed      	b.n	800558c <ai_platform_network_process+0x270>
 80055b0:	9c02      	ldr	r4, [sp, #8]
 80055b2:	2218      	movs	r2, #24
 80055b4:	2112      	movs	r1, #18
 80055b6:	f104 000c 	add.w	r0, r4, #12
 80055ba:	f000 f8dd 	bl	8005778 <core_set_error>
 80055be:	e7e5      	b.n	800558c <ai_platform_network_process+0x270>
 80055c0:	9c02      	ldr	r4, [sp, #8]
 80055c2:	2218      	movs	r2, #24
 80055c4:	2113      	movs	r1, #19
 80055c6:	f104 000c 	add.w	r0, r4, #12
 80055ca:	f000 f8d5 	bl	8005778 <core_set_error>
 80055ce:	e7dd      	b.n	800558c <ai_platform_network_process+0x270>
 80055d0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80055d4:	429f      	cmp	r7, r3
 80055d6:	f4ff af5a 	bcc.w	800548e <ai_platform_network_process+0x172>
 80055da:	9c02      	ldr	r4, [sp, #8]
 80055dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80055e0:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80055e2:	8323      	strh	r3, [r4, #24]
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	f000 808d 	beq.w	8005704 <ai_platform_network_process+0x3e8>
 80055ea:	2a01      	cmp	r2, #1
 80055ec:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80055ee:	f000 808c 	beq.w	800570a <ai_platform_network_process+0x3ee>
 80055f2:	f107 080c 	add.w	r8, r7, #12
 80055f6:	8b60      	ldrh	r0, [r4, #26]
 80055f8:	4283      	cmp	r3, r0
 80055fa:	d9c8      	bls.n	800558e <ai_platform_network_process+0x272>
 80055fc:	4646      	mov	r6, r8
 80055fe:	46a3      	mov	fp, r4
 8005600:	2f00      	cmp	r7, #0
 8005602:	d031      	beq.n	8005668 <ai_platform_network_process+0x34c>
 8005604:	f04f 0800 	mov.w	r8, #0
 8005608:	e015      	b.n	8005636 <ai_platform_network_process+0x31a>
 800560a:	bf00      	nop
 800560c:	a1c00100 	.word	0xa1c00100
 8005610:	68dc      	ldr	r4, [r3, #12]
 8005612:	1b09      	subs	r1, r1, r4
 8005614:	4408      	add	r0, r1
 8005616:	6098      	str	r0, [r3, #8]
 8005618:	6993      	ldr	r3, [r2, #24]
 800561a:	686a      	ldr	r2, [r5, #4]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	f859 200a 	ldr.w	r2, [r9, sl]
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 800562a:	440b      	add	r3, r1
 800562c:	4293      	cmp	r3, r2
 800562e:	d301      	bcc.n	8005634 <ai_platform_network_process+0x318>
 8005630:	68eb      	ldr	r3, [r5, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	606b      	str	r3, [r5, #4]
 8005636:	883b      	ldrh	r3, [r7, #0]
 8005638:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800563c:	4543      	cmp	r3, r8
 800563e:	d913      	bls.n	8005668 <ai_platform_network_process+0x34c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	b18b      	cbz	r3, 8005668 <ai_platform_network_process+0x34c>
 8005644:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8005648:	b172      	cbz	r2, 8005668 <ai_platform_network_process+0x34c>
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6993      	ldr	r3, [r2, #24]
 800564e:	f8d1 9000 	ldr.w	r9, [r1]
 8005652:	681c      	ldr	r4, [r3, #0]
 8005654:	eb09 1508 	add.w	r5, r9, r8, lsl #4
 8005658:	6899      	ldr	r1, [r3, #8]
 800565a:	00a4      	lsls	r4, r4, #2
 800565c:	6868      	ldr	r0, [r5, #4]
 800565e:	d5d7      	bpl.n	8005610 <ai_platform_network_process+0x2f4>
 8005660:	68aa      	ldr	r2, [r5, #8]
 8005662:	f001 f86f 	bl	8006744 <st_int8_copy>
 8005666:	e7da      	b.n	800561e <ai_platform_network_process+0x302>
 8005668:	4658      	mov	r0, fp
 800566a:	f000 f8e1 	bl	8005830 <ai_layers_forward_all>
 800566e:	2e00      	cmp	r6, #0
 8005670:	d03b      	beq.n	80056ea <ai_platform_network_process+0x3ce>
 8005672:	2500      	movs	r5, #0
 8005674:	e014      	b.n	80056a0 <ai_platform_network_process+0x384>
 8005676:	4411      	add	r1, r2
 8005678:	f859 300a 	ldr.w	r3, [r9, sl]
 800567c:	4299      	cmp	r1, r3
 800567e:	d302      	bcc.n	8005686 <ai_platform_network_process+0x36a>
 8005680:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005684:	1a59      	subs	r1, r3, r1
 8005686:	f8c8 1004 	str.w	r1, [r8, #4]
 800568a:	6982      	ldr	r2, [r0, #24]
 800568c:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8005690:	1b1b      	subs	r3, r3, r4
 8005692:	4419      	add	r1, r3
 8005694:	6091      	str	r1, [r2, #8]
 8005696:	6983      	ldr	r3, [r0, #24]
 8005698:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	3501      	adds	r5, #1
 80056a0:	8833      	ldrh	r3, [r6, #0]
 80056a2:	42ab      	cmp	r3, r5
 80056a4:	d921      	bls.n	80056ea <ai_platform_network_process+0x3ce>
 80056a6:	6873      	ldr	r3, [r6, #4]
 80056a8:	b1fb      	cbz	r3, 80056ea <ai_platform_network_process+0x3ce>
 80056aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056ae:	b1e0      	cbz	r0, 80056ea <ai_platform_network_process+0x3ce>
 80056b0:	68b2      	ldr	r2, [r6, #8]
 80056b2:	ea4f 1a05 	mov.w	sl, r5, lsl #4
 80056b6:	6983      	ldr	r3, [r0, #24]
 80056b8:	f8d2 9000 	ldr.w	r9, [r2]
 80056bc:	681c      	ldr	r4, [r3, #0]
 80056be:	eb09 1805 	add.w	r8, r9, r5, lsl #4
 80056c2:	00a4      	lsls	r4, r4, #2
 80056c4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80056c8:	d5d5      	bpl.n	8005676 <ai_platform_network_process+0x35a>
 80056ca:	6898      	ldr	r0, [r3, #8]
 80056cc:	f001 f83a 	bl	8006744 <st_int8_copy>
 80056d0:	f859 200a 	ldr.w	r2, [r9, sl]
 80056d4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80056d8:	440b      	add	r3, r1
 80056da:	4293      	cmp	r3, r2
 80056dc:	d302      	bcc.n	80056e4 <ai_platform_network_process+0x3c8>
 80056de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80056e8:	e7d9      	b.n	800569e <ai_platform_network_process+0x382>
 80056ea:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 80056ee:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80056f2:	3001      	adds	r0, #1
 80056f4:	b280      	uxth	r0, r0
 80056f6:	4283      	cmp	r3, r0
 80056f8:	f8ab 001a 	strh.w	r0, [fp, #26]
 80056fc:	d880      	bhi.n	8005600 <ai_platform_network_process+0x2e4>
 80056fe:	b005      	add	sp, #20
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	4617      	mov	r7, r2
 8005706:	4690      	mov	r8, r2
 8005708:	e775      	b.n	80055f6 <ai_platform_network_process+0x2da>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	e772      	b.n	80055f6 <ai_platform_network_process+0x2da>
 8005710:	9c02      	ldr	r4, [sp, #8]
 8005712:	2221      	movs	r2, #33	@ 0x21
 8005714:	2112      	movs	r1, #18
 8005716:	f104 000c 	add.w	r0, r4, #12
 800571a:	f000 f82d 	bl	8005778 <core_set_error>
 800571e:	e735      	b.n	800558c <ai_platform_network_process+0x270>
 8005720:	9c02      	ldr	r4, [sp, #8]
 8005722:	2219      	movs	r2, #25
 8005724:	2112      	movs	r1, #18
 8005726:	f104 000c 	add.w	r0, r4, #12
 800572a:	f000 f825 	bl	8005778 <core_set_error>
 800572e:	e72d      	b.n	800558c <ai_platform_network_process+0x270>
 8005730:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005734:	e755      	b.n	80055e2 <ai_platform_network_process+0x2c6>
 8005736:	9c02      	ldr	r4, [sp, #8]
 8005738:	2219      	movs	r2, #25
 800573a:	2113      	movs	r1, #19
 800573c:	f104 000c 	add.w	r0, r4, #12
 8005740:	f000 f81a 	bl	8005778 <core_set_error>
 8005744:	e722      	b.n	800558c <ai_platform_network_process+0x270>
 8005746:	9c02      	ldr	r4, [sp, #8]
 8005748:	2221      	movs	r2, #33	@ 0x21
 800574a:	2113      	movs	r1, #19
 800574c:	f104 000c 	add.w	r0, r4, #12
 8005750:	f000 f812 	bl	8005778 <core_set_error>
 8005754:	e71a      	b.n	800558c <ai_platform_network_process+0x270>
 8005756:	9c02      	ldr	r4, [sp, #8]
 8005758:	2217      	movs	r2, #23
 800575a:	2113      	movs	r1, #19
 800575c:	f104 000c 	add.w	r0, r4, #12
 8005760:	f000 f80a 	bl	8005778 <core_set_error>
 8005764:	e712      	b.n	800558c <ai_platform_network_process+0x270>
 8005766:	bf00      	nop

08005768 <core_init>:
 8005768:	2001      	movs	r0, #1
 800576a:	4770      	bx	lr

0800576c <core_get_error>:
 800576c:	4603      	mov	r3, r0
 800576e:	2200      	movs	r2, #0
 8005770:	6800      	ldr	r0, [r0, #0]
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop

08005778 <core_set_error>:
 8005778:	4603      	mov	r3, r0
 800577a:	7800      	ldrb	r0, [r0, #0]
 800577c:	b108      	cbz	r0, 8005782 <core_set_error+0xa>
 800577e:	2000      	movs	r0, #0
 8005780:	4770      	bx	lr
 8005782:	7019      	strb	r1, [r3, #0]
 8005784:	2001      	movs	r0, #1
 8005786:	6819      	ldr	r1, [r3, #0]
 8005788:	f362 211f 	bfi	r1, r2, #8, #24
 800578c:	6019      	str	r1, [r3, #0]
 800578e:	4770      	bx	lr

08005790 <ai_check_custom_types>:
 8005790:	b082      	sub	sp, #8
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <ai_check_custom_types+0x4c>)
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	b118      	cbz	r0, 80057a0 <ai_check_custom_types+0x10>
 8005798:	7803      	ldrb	r3, [r0, #0]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d002      	beq.n	80057a4 <ai_check_custom_types+0x14>
 800579e:	2000      	movs	r0, #0
 80057a0:	b002      	add	sp, #8
 80057a2:	4770      	bx	lr
 80057a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <ai_check_custom_types+0x26>
 80057ac:	2001      	movs	r0, #1
 80057ae:	f080 0001 	eor.w	r0, r0, #1
 80057b2:	b002      	add	sp, #8
 80057b4:	4770      	bx	lr
 80057b6:	7842      	ldrb	r2, [r0, #1]
 80057b8:	3001      	adds	r0, #1
 80057ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d1f4      	bne.n	80057ac <ai_check_custom_types+0x1c>
 80057c2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80057c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d1ee      	bne.n	80057ac <ai_check_custom_types+0x1c>
 80057ce:	7842      	ldrb	r2, [r0, #1]
 80057d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1e9      	bne.n	80057ac <ai_check_custom_types+0x1c>
 80057d8:	2000      	movs	r0, #0
 80057da:	e7e8      	b.n	80057ae <ai_check_custom_types+0x1e>
 80057dc:	84048403 	.word	0x84048403

080057e0 <ai_layers_init_all>:
 80057e0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80057e2:	4601      	mov	r1, r0
 80057e4:	b14b      	cbz	r3, 80057fa <ai_layers_init_all+0x1a>
 80057e6:	2000      	movs	r0, #0
 80057e8:	461a      	mov	r2, r3
 80057ea:	60d9      	str	r1, [r3, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	3001      	adds	r0, #1
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <ai_layers_init_all+0x1c>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f7      	bne.n	80057e8 <ai_layers_init_all+0x8>
 80057f8:	4770      	bx	lr
 80057fa:	4618      	mov	r0, r3
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <ai_layers_post_init_all>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005804:	b184      	cbz	r4, 8005828 <ai_layers_post_init_all+0x28>
 8005806:	2500      	movs	r5, #0
 8005808:	6863      	ldr	r3, [r4, #4]
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d504      	bpl.n	8005818 <ai_layers_post_init_all+0x18>
 800580e:	6a23      	ldr	r3, [r4, #32]
 8005810:	4620      	mov	r0, r4
 8005812:	b10b      	cbz	r3, 8005818 <ai_layers_post_init_all+0x18>
 8005814:	3501      	adds	r5, #1
 8005816:	4798      	blx	r3
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	42a3      	cmp	r3, r4
 800581c:	461c      	mov	r4, r3
 800581e:	d001      	beq.n	8005824 <ai_layers_post_init_all+0x24>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f1      	bne.n	8005808 <ai_layers_post_init_all+0x8>
 8005824:	4628      	mov	r0, r5
 8005826:	bd38      	pop	{r3, r4, r5, pc}
 8005828:	4625      	mov	r5, r4
 800582a:	4628      	mov	r0, r5
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	bf00      	nop

08005830 <ai_layers_forward_all>:
 8005830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005834:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005836:	4604      	mov	r4, r0
 8005838:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800583c:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800583e:	f1b8 0f00 	cmp.w	r8, #0
 8005842:	d029      	beq.n	8005898 <ai_layers_forward_all+0x68>
 8005844:	b325      	cbz	r5, 8005890 <ai_layers_forward_all+0x60>
 8005846:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005848:	4629      	mov	r1, r5
 800584a:	2001      	movs	r0, #1
 800584c:	47c0      	blx	r8
 800584e:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8005850:	b1f6      	cbz	r6, 8005890 <ai_layers_forward_all+0x60>
 8005852:	2700      	movs	r7, #0
 8005854:	4631      	mov	r1, r6
 8005856:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005858:	2002      	movs	r0, #2
 800585a:	47c0      	blx	r8
 800585c:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800585e:	4628      	mov	r0, r5
 8005860:	696b      	ldr	r3, [r5, #20]
 8005862:	4798      	blx	r3
 8005864:	692e      	ldr	r6, [r5, #16]
 8005866:	2003      	movs	r0, #3
 8005868:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800586a:	42b5      	cmp	r5, r6
 800586c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800586e:	d007      	beq.n	8005880 <ai_layers_forward_all+0x50>
 8005870:	47c0      	blx	r8
 8005872:	3701      	adds	r7, #1
 8005874:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8005876:	2e00      	cmp	r6, #0
 8005878:	d1ec      	bne.n	8005854 <ai_layers_forward_all+0x24>
 800587a:	4638      	mov	r0, r7
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	2003      	movs	r0, #3
 8005882:	3701      	adds	r7, #1
 8005884:	47c0      	blx	r8
 8005886:	2300      	movs	r3, #0
 8005888:	4638      	mov	r0, r7
 800588a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	2700      	movs	r7, #0
 8005892:	4638      	mov	r0, r7
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	2d00      	cmp	r5, #0
 800589a:	d0f9      	beq.n	8005890 <ai_layers_forward_all+0x60>
 800589c:	4647      	mov	r7, r8
 800589e:	696b      	ldr	r3, [r5, #20]
 80058a0:	4628      	mov	r0, r5
 80058a2:	4798      	blx	r3
 80058a4:	462b      	mov	r3, r5
 80058a6:	692d      	ldr	r5, [r5, #16]
 80058a8:	429d      	cmp	r5, r3
 80058aa:	d004      	beq.n	80058b6 <ai_layers_forward_all+0x86>
 80058ac:	3701      	adds	r7, #1
 80058ae:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	d1f4      	bne.n	800589e <ai_layers_forward_all+0x6e>
 80058b4:	e7e1      	b.n	800587a <ai_layers_forward_all+0x4a>
 80058b6:	2300      	movs	r3, #0
 80058b8:	3701      	adds	r7, #1
 80058ba:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80058bc:	e7dd      	b.n	800587a <ai_layers_forward_all+0x4a>
 80058be:	bf00      	nop

080058c0 <forward_dense>:
 80058c0:	6982      	ldr	r2, [r0, #24]
 80058c2:	8813      	ldrh	r3, [r2, #0]
 80058c4:	b90b      	cbnz	r3, 80058ca <forward_dense+0xa>
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	deff      	udf	#255	@ 0xff
 80058ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ce:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80058d2:	b08e      	sub	sp, #56	@ 0x38
 80058d4:	f8da 0004 	ldr.w	r0, [sl, #4]
 80058d8:	b100      	cbz	r0, 80058dc <forward_dense+0x1c>
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d061      	beq.n	80059a4 <forward_dense+0xe4>
 80058e0:	f8da 2010 	ldr.w	r2, [sl, #16]
 80058e4:	b102      	cbz	r2, 80058e8 <forward_dense+0x28>
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d035      	beq.n	8005958 <forward_dense+0x98>
 80058ec:	f8da 501c 	ldr.w	r5, [sl, #28]
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	d055      	beq.n	80059a0 <forward_dense+0xe0>
 80058f4:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 80058f8:	6829      	ldr	r1, [r5, #0]
 80058fa:	2c01      	cmp	r4, #1
 80058fc:	d955      	bls.n	80059aa <forward_dense+0xea>
 80058fe:	686d      	ldr	r5, [r5, #4]
 8005900:	698e      	ldr	r6, [r1, #24]
 8005902:	2b03      	cmp	r3, #3
 8005904:	68d1      	ldr	r1, [r2, #12]
 8005906:	68c4      	ldr	r4, [r0, #12]
 8005908:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800590c:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8005910:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 8005914:	6831      	ldr	r1, [r6, #0]
 8005916:	fb07 f804 	mul.w	r8, r7, r4
 800591a:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800591e:	d046      	beq.n	80059ae <forward_dense+0xee>
 8005920:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 8005924:	b11c      	cbz	r4, 800592e <forward_dense+0x6e>
 8005926:	6824      	ldr	r4, [r4, #0]
 8005928:	b10c      	cbz	r4, 800592e <forward_dense+0x6e>
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	689c      	ldr	r4, [r3, #8]
 800592e:	6983      	ldr	r3, [r0, #24]
 8005930:	6992      	ldr	r2, [r2, #24]
 8005932:	6899      	ldr	r1, [r3, #8]
 8005934:	6890      	ldr	r0, [r2, #8]
 8005936:	b10d      	cbz	r5, 800593c <forward_dense+0x7c>
 8005938:	69ab      	ldr	r3, [r5, #24]
 800593a:	689d      	ldr	r5, [r3, #8]
 800593c:	4f1d      	ldr	r7, [pc, #116]	@ (80059b4 <forward_dense+0xf4>)
 800593e:	45bc      	cmp	ip, r7
 8005940:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8005944:	d022      	beq.n	800598c <forward_dense+0xcc>
 8005946:	4e1c      	ldr	r6, [pc, #112]	@ (80059b8 <forward_dense+0xf8>)
 8005948:	45b4      	cmp	ip, r6
 800594a:	d015      	beq.n	8005978 <forward_dense+0xb8>
 800594c:	4b1b      	ldr	r3, [pc, #108]	@ (80059bc <forward_dense+0xfc>)
 800594e:	459c      	cmp	ip, r3
 8005950:	d005      	beq.n	800595e <forward_dense+0x9e>
 8005952:	b00e      	add	sp, #56	@ 0x38
 8005954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005958:	2300      	movs	r3, #0
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	deff      	udf	#255	@ 0xff
 800595e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8005962:	a807      	add	r0, sp, #28
 8005964:	9209      	str	r2, [sp, #36]	@ 0x24
 8005966:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 800596a:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 800596e:	f000 f97d 	bl	8005c6c <forward_lite_dense_if32of32wf32>
 8005972:	b00e      	add	sp, #56	@ 0x38
 8005974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005978:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800597c:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8005980:	9400      	str	r4, [sp, #0]
 8005982:	f000 facd 	bl	8005f20 <forward_lite_dense_if32of32wf32_lut4>
 8005986:	b00e      	add	sp, #56	@ 0x38
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8005990:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8005994:	9400      	str	r4, [sp, #0]
 8005996:	f000 fc0b 	bl	80061b0 <forward_lite_dense_if32of32wf32_lut8>
 800599a:	b00e      	add	sp, #56	@ 0x38
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	4629      	mov	r1, r5
 80059a2:	e7ad      	b.n	8005900 <forward_dense+0x40>
 80059a4:	2300      	movs	r3, #0
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	deff      	udf	#255	@ 0xff
 80059aa:	2500      	movs	r5, #0
 80059ac:	e7a8      	b.n	8005900 <forward_dense+0x40>
 80059ae:	2300      	movs	r3, #0
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	deff      	udf	#255	@ 0xff
 80059b4:	00d01040 	.word	0x00d01040
 80059b8:	00f01040 	.word	0x00f01040
 80059bc:	00821040 	.word	0x00821040

080059c0 <forward_sigmoid>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	ed2d 8b02 	vpush	{d8}
 80059c6:	6982      	ldr	r2, [r0, #24]
 80059c8:	8813      	ldrh	r3, [r2, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03b      	beq.n	8005a46 <forward_sigmoid+0x86>
 80059ce:	6852      	ldr	r2, [r2, #4]
 80059d0:	6854      	ldr	r4, [r2, #4]
 80059d2:	b104      	cbz	r4, 80059d6 <forward_sigmoid+0x16>
 80059d4:	6824      	ldr	r4, [r4, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d034      	beq.n	8005a44 <forward_sigmoid+0x84>
 80059da:	6915      	ldr	r5, [r2, #16]
 80059dc:	b105      	cbz	r5, 80059e0 <forward_sigmoid+0x20>
 80059de:	682d      	ldr	r5, [r5, #0]
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	d031      	beq.n	8005a4a <forward_sigmoid+0x8a>
 80059e6:	68e0      	ldr	r0, [r4, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80059ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059f2:	4298      	cmp	r0, r3
 80059f4:	fb01 f202 	mul.w	r2, r1, r2
 80059f8:	d1f9      	bne.n	80059ee <forward_sigmoid+0x2e>
 80059fa:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80059fe:	69a7      	ldr	r7, [r4, #24]
 8005a00:	69a9      	ldr	r1, [r5, #24]
 8005a02:	4413      	add	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	688e      	ldr	r6, [r1, #8]
 8005a08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005a0c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8005a10:	42aa      	cmp	r2, r5
 8005a12:	d814      	bhi.n	8005a3e <forward_sigmoid+0x7e>
 8005a14:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8005a18:	3504      	adds	r5, #4
 8005a1a:	3604      	adds	r6, #4
 8005a1c:	462c      	mov	r4, r5
 8005a1e:	ed35 0a01 	vldmdb	r5!, {s0}
 8005a22:	eeb1 0a40 	vneg.f32	s0, s0
 8005a26:	3c08      	subs	r4, #8
 8005a28:	f001 f810 	bl	8006a4c <expf>
 8005a2c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005a30:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8005a34:	ed66 7a01 	vstmdb	r6!, {s15}
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	d9ee      	bls.n	8005a1c <forward_sigmoid+0x5c>
 8005a3e:	ecbd 8b02 	vpop	{d8}
 8005a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a44:	2300      	movs	r3, #0
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	deff      	udf	#255	@ 0xff
 8005a4a:	69ab      	ldr	r3, [r5, #24]
 8005a4c:	69a7      	ldr	r7, [r4, #24]
 8005a4e:	689e      	ldr	r6, [r3, #8]
 8005a50:	68bd      	ldr	r5, [r7, #8]
 8005a52:	e7df      	b.n	8005a14 <forward_sigmoid+0x54>

08005a54 <forward_relu>:
 8005a54:	6982      	ldr	r2, [r0, #24]
 8005a56:	8813      	ldrh	r3, [r2, #0]
 8005a58:	b90b      	cbnz	r3, 8005a5e <forward_relu+0xa>
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	deff      	udf	#255	@ 0xff
 8005a5e:	6851      	ldr	r1, [r2, #4]
 8005a60:	684a      	ldr	r2, [r1, #4]
 8005a62:	b102      	cbz	r2, 8005a66 <forward_relu+0x12>
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	f000 8084 	beq.w	8005b74 <forward_relu+0x120>
 8005a6c:	b470      	push	{r4, r5, r6}
 8005a6e:	690b      	ldr	r3, [r1, #16]
 8005a70:	b103      	cbz	r3, 8005a74 <forward_relu+0x20>
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699c      	ldr	r4, [r3, #24]
 8005a76:	6991      	ldr	r1, [r2, #24]
 8005a78:	6893      	ldr	r3, [r2, #8]
 8005a7a:	69c6      	ldr	r6, [r0, #28]
 8005a7c:	6889      	ldr	r1, [r1, #8]
 8005a7e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005a82:	68a0      	ldr	r0, [r4, #8]
 8005a84:	b196      	cbz	r6, 8005aac <forward_relu+0x58>
 8005a86:	6874      	ldr	r4, [r6, #4]
 8005a88:	2c01      	cmp	r4, #1
 8005a8a:	d036      	beq.n	8005afa <forward_relu+0xa6>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d068      	beq.n	8005b62 <forward_relu+0x10e>
 8005a90:	68d5      	ldr	r5, [r2, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005a98:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005a9c:	429d      	cmp	r5, r3
 8005a9e:	fb04 f202 	mul.w	r2, r4, r2
 8005aa2:	d1f9      	bne.n	8005a98 <forward_relu+0x44>
 8005aa4:	68b3      	ldr	r3, [r6, #8]
 8005aa6:	bc70      	pop	{r4, r5, r6}
 8005aa8:	f000 b86a 	b.w	8005b80 <forward_lite_nl_relu_generic_if32of32_kernel>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d05a      	beq.n	8005b66 <forward_relu+0x112>
 8005ab0:	68d5      	ldr	r5, [r2, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005ab8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005abc:	429d      	cmp	r5, r3
 8005abe:	fb04 f202 	mul.w	r2, r4, r2
 8005ac2:	d1f9      	bne.n	8005ab8 <forward_relu+0x64>
 8005ac4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005ac8:	4413      	add	r3, r2
 8005aca:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8005ace:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ad2:	428a      	cmp	r2, r1
 8005ad4:	d30f      	bcc.n	8005af6 <forward_relu+0xa2>
 8005ad6:	1a51      	subs	r1, r2, r1
 8005ad8:	1d13      	adds	r3, r2, #4
 8005ada:	3004      	adds	r0, #4
 8005adc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8005b7c <forward_relu+0x128>
 8005ae0:	f021 0103 	bic.w	r1, r1, #3
 8005ae4:	1a52      	subs	r2, r2, r1
 8005ae6:	ed73 7a01 	vldmdb	r3!, {s15}
 8005aea:	429a      	cmp	r2, r3
 8005aec:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8005af0:	ed60 7a01 	vstmdb	r0!, {s15}
 8005af4:	d1f7      	bne.n	8005ae6 <forward_relu+0x92>
 8005af6:	bc70      	pop	{r4, r5, r6}
 8005af8:	4770      	bx	lr
 8005afa:	b3b3      	cbz	r3, 8005b6a <forward_relu+0x116>
 8005afc:	68d5      	ldr	r5, [r2, #12]
 8005afe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b02:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005b06:	429d      	cmp	r5, r3
 8005b08:	fb02 f404 	mul.w	r4, r2, r4
 8005b0c:	d1f9      	bne.n	8005b02 <forward_relu+0xae>
 8005b0e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005b12:	68b2      	ldr	r2, [r6, #8]
 8005b14:	4423      	add	r3, r4
 8005b16:	ed92 7a00 	vldr	s14, [r2]
 8005b1a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8005b1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005b22:	428a      	cmp	r2, r1
 8005b24:	d3e7      	bcc.n	8005af6 <forward_relu+0xa2>
 8005b26:	1a51      	subs	r1, r2, r1
 8005b28:	1d13      	adds	r3, r2, #4
 8005b2a:	3004      	adds	r0, #4
 8005b2c:	2400      	movs	r4, #0
 8005b2e:	f021 0103 	bic.w	r1, r1, #3
 8005b32:	1a52      	subs	r2, r2, r1
 8005b34:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	d50a      	bpl.n	8005b58 <forward_relu+0x104>
 8005b42:	429a      	cmp	r2, r3
 8005b44:	ed60 7a01 	vstmdb	r0!, {s15}
 8005b48:	d0d5      	beq.n	8005af6 <forward_relu+0xa2>
 8005b4a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b56:	d4f4      	bmi.n	8005b42 <forward_relu+0xee>
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	f840 4d04 	str.w	r4, [r0, #-4]!
 8005b5e:	d1e9      	bne.n	8005b34 <forward_relu+0xe0>
 8005b60:	e7c9      	b.n	8005af6 <forward_relu+0xa2>
 8005b62:	2201      	movs	r2, #1
 8005b64:	e79e      	b.n	8005aa4 <forward_relu+0x50>
 8005b66:	460a      	mov	r2, r1
 8005b68:	e7b5      	b.n	8005ad6 <forward_relu+0x82>
 8005b6a:	68b3      	ldr	r3, [r6, #8]
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	ed93 7a00 	vldr	s14, [r3]
 8005b72:	e7d8      	b.n	8005b26 <forward_relu+0xd2>
 8005b74:	2300      	movs	r3, #0
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	deff      	udf	#255	@ 0xff
 8005b7a:	bf00      	nop
 8005b7c:	00000000 	.word	0x00000000

08005b80 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8005b80:	b500      	push	{lr}
 8005b82:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b86:	f06f 4c40 	mvn.w	ip, #3221225472	@ 0xc0000000
 8005b8a:	ed93 7a00 	vldr	s14, [r3]
 8005b8e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005b92:	4494      	add	ip, r2
 8005b94:	ed93 6a01 	vldr	s12, [r3, #4]
 8005b98:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 8005ba4:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005ba8:	d422      	bmi.n	8005bf0 <forward_lite_nl_relu_generic_if32of32_kernel+0x70>
 8005baa:	428a      	cmp	r2, r1
 8005bac:	d31e      	bcc.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005bae:	1d13      	adds	r3, r2, #4
 8005bb0:	3004      	adds	r0, #4
 8005bb2:	eba2 020e 	sub.w	r2, r2, lr
 8005bb6:	e00c      	b.n	8005bd2 <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 8005bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bbc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc4:	db01      	blt.n	8005bca <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 8005bc6:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	ed60 7a01 	vstmdb	r0!, {s15}
 8005bd0:	d00c      	beq.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005bd2:	ed73 7a01 	vldmdb	r3!, {s15}
 8005bd6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bde:	daeb      	bge.n	8005bb8 <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 8005be0:	eef0 7a66 	vmov.f32	s15, s13
 8005be4:	4293      	cmp	r3, r2
 8005be6:	ed60 7a01 	vstmdb	r0!, {s15}
 8005bea:	d1f2      	bne.n	8005bd2 <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 8005bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bf0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	d015      	beq.n	8005c26 <forward_lite_nl_relu_generic_if32of32_kernel+0xa6>
 8005bfa:	428a      	cmp	r2, r1
 8005bfc:	d3f6      	bcc.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005bfe:	1d13      	adds	r3, r2, #4
 8005c00:	3004      	adds	r0, #4
 8005c02:	eba2 020e 	sub.w	r2, r2, lr
 8005c06:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c0e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005c1a:	d822      	bhi.n	8005c62 <forward_lite_nl_relu_generic_if32of32_kernel+0xe2>
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	ed60 6a01 	vstmdb	r0!, {s13}
 8005c22:	d1f0      	bne.n	8005c06 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8005c24:	e7e2      	b.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005c26:	428a      	cmp	r2, r1
 8005c28:	d3e0      	bcc.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005c2a:	1d13      	adds	r3, r2, #4
 8005c2c:	3004      	adds	r0, #4
 8005c2e:	eba2 020e 	sub.w	r2, r2, lr
 8005c32:	2100      	movs	r1, #0
 8005c34:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	dd0a      	ble.n	8005c58 <forward_lite_nl_relu_generic_if32of32_kernel+0xd8>
 8005c42:	429a      	cmp	r2, r3
 8005c44:	ed60 7a01 	vstmdb	r0!, {s15}
 8005c48:	d0d0      	beq.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005c4a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	dcf4      	bgt.n	8005c42 <forward_lite_nl_relu_generic_if32of32_kernel+0xc2>
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	f840 1d04 	str.w	r1, [r0, #-4]!
 8005c5e:	d1e9      	bne.n	8005c34 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8005c60:	e7c4      	b.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005c62:	4293      	cmp	r3, r2
 8005c64:	ed60 7a01 	vstmdb	r0!, {s15}
 8005c68:	d1cd      	bne.n	8005c06 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8005c6a:	e7bf      	b.n	8005bec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>

08005c6c <forward_lite_dense_if32of32wf32>:
 8005c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c70:	ed2d 8b0c 	vpush	{d8-d13}
 8005c74:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 8005c78:	e9d0 1700 	ldrd	r1, r7, [r0]
 8005c7c:	fb03 f30c 	mul.w	r3, r3, ip
 8005c80:	4602      	mov	r2, r0
 8005c82:	b083      	sub	sp, #12
 8005c84:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005c88:	4281      	cmp	r1, r0
 8005c8a:	f080 811d 	bcs.w	8005ec8 <forward_lite_dense_if32of32wf32+0x25c>
 8005c8e:	6915      	ldr	r5, [r2, #16]
 8005c90:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8005c94:	4664      	mov	r4, ip
 8005c96:	eb01 0806 	add.w	r8, r1, r6
 8005c9a:	6896      	ldr	r6, [r2, #8]
 8005c9c:	4588      	cmp	r8, r1
 8005c9e:	f240 8108 	bls.w	8005eb2 <forward_lite_dense_if32of32wf32+0x246>
 8005ca2:	f1a5 0e10 	sub.w	lr, r5, #16
 8005ca6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8005caa:	468c      	mov	ip, r1
 8005cac:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8005cb0:	f10e 0e01 	add.w	lr, lr, #1
 8005cb4:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 8005cb8:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 8005cbc:	e9cd 0100 	strd	r0, r1, [sp]
 8005cc0:	2d0f      	cmp	r5, #15
 8005cc2:	f240 8106 	bls.w	8005ed2 <forward_lite_dense_if32of32wf32+0x266>
 8005cc6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005cca:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 8005cce:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8005f1c <forward_lite_dense_if32of32wf32+0x2b0>
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8005cd8:	3810      	subs	r0, #16
 8005cda:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 8005cde:	3340      	adds	r3, #64	@ 0x40
 8005ce0:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 8005ce4:	280f      	cmp	r0, #15
 8005ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cea:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8005cee:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 8005cf2:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8005cf6:	ed53 6a1e 	vldr	s13, [r3, #-120]	@ 0xffffff88
 8005cfa:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005cfe:	ed11 6a1d 	vldr	s12, [r1, #-116]	@ 0xffffff8c
 8005d02:	ed13 da1d 	vldr	s26, [r3, #-116]	@ 0xffffff8c
 8005d06:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 8005d0a:	ed11 ca1c 	vldr	s24, [r1, #-112]	@ 0xffffff90
 8005d0e:	ed11 ba1b 	vldr	s22, [r1, #-108]	@ 0xffffff94
 8005d12:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8005d16:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8005d1a:	ed11 aa1a 	vldr	s20, [r1, #-104]	@ 0xffffff98
 8005d1e:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8005d22:	ed11 9a19 	vldr	s18, [r1, #-100]	@ 0xffffff9c
 8005d26:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8005d2a:	ed51 8a18 	vldr	s17, [r1, #-96]	@ 0xffffffa0
 8005d2e:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8005d32:	eeed 7a06 	vfma.f32	s15, s26, s12
 8005d36:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8005d3a:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8005d3e:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8005d42:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8005d46:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 8005d4a:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8005d4e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005d52:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8005d56:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8005d5a:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8005d5e:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8005d62:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8005d66:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8005d6a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005d6e:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8005d72:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8005d76:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8005d7a:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005d7e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005d82:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005d86:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005d8a:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005d8e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d92:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d96:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005da2:	d897      	bhi.n	8005cd4 <forward_lite_dense_if32of32wf32+0x68>
 8005da4:	eb06 010b 	add.w	r1, r6, fp
 8005da8:	f005 000f 	and.w	r0, r5, #15
 8005dac:	4673      	mov	r3, lr
 8005dae:	2803      	cmp	r0, #3
 8005db0:	d95f      	bls.n	8005e72 <forward_lite_dense_if32of32wf32+0x206>
 8005db2:	edd1 6a01 	vldr	s13, [r1, #4]
 8005db6:	1f04      	subs	r4, r0, #4
 8005db8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dbc:	ed93 4a00 	vldr	s8, [r3]
 8005dc0:	2c03      	cmp	r4, #3
 8005dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dc6:	edd1 4a00 	vldr	s9, [r1]
 8005dca:	ed93 5a02 	vldr	s10, [r3, #8]
 8005dce:	edd1 5a02 	vldr	s11, [r1, #8]
 8005dd2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005dd6:	ed93 6a03 	vldr	s12, [r3, #12]
 8005dda:	edd1 6a03 	vldr	s13, [r1, #12]
 8005dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005de6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005dea:	eeb0 7a67 	vmov.f32	s14, s15
 8005dee:	d938      	bls.n	8005e62 <forward_lite_dense_if32of32wf32+0x1f6>
 8005df0:	edd1 6a05 	vldr	s13, [r1, #20]
 8005df4:	f1a0 0a08 	sub.w	sl, r0, #8
 8005df8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005dfc:	ed93 4a04 	vldr	s8, [r3, #16]
 8005e00:	f1ba 0f03 	cmp.w	sl, #3
 8005e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e08:	edd1 4a04 	vldr	s9, [r1, #16]
 8005e0c:	ed93 5a06 	vldr	s10, [r3, #24]
 8005e10:	edd1 5a06 	vldr	s11, [r1, #24]
 8005e14:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e18:	ed93 6a07 	vldr	s12, [r3, #28]
 8005e1c:	edd1 6a07 	vldr	s13, [r1, #28]
 8005e20:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e24:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e2c:	d919      	bls.n	8005e62 <forward_lite_dense_if32of32wf32+0x1f6>
 8005e2e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005e32:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 8005e36:	ed91 4a08 	vldr	s8, [r1, #32]
 8005e3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e3e:	edd3 4a08 	vldr	s9, [r3, #32]
 8005e42:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 8005e46:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8005e4a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e4e:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 8005e52:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005e56:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e62:	08a4      	lsrs	r4, r4, #2
 8005e64:	f000 0003 	and.w	r0, r0, #3
 8005e68:	3401      	adds	r4, #1
 8005e6a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8005e6e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005e72:	b1a8      	cbz	r0, 8005ea0 <forward_lite_dense_if32of32wf32+0x234>
 8005e74:	edd3 6a00 	vldr	s13, [r3]
 8005e78:	2801      	cmp	r0, #1
 8005e7a:	edd1 7a00 	vldr	s15, [r1]
 8005e7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e82:	d00d      	beq.n	8005ea0 <forward_lite_dense_if32of32wf32+0x234>
 8005e84:	edd3 6a01 	vldr	s13, [r3, #4]
 8005e88:	2802      	cmp	r0, #2
 8005e8a:	edd1 7a01 	vldr	s15, [r1, #4]
 8005e8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e92:	d005      	beq.n	8005ea0 <forward_lite_dense_if32of32wf32+0x234>
 8005e94:	edd1 6a02 	vldr	s13, [r1, #8]
 8005e98:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ea0:	ecac 7a01 	vstmia	ip!, {s14}
 8005ea4:	45e0      	cmp	r8, ip
 8005ea6:	444e      	add	r6, r9
 8005ea8:	f63f af0a 	bhi.w	8005cc0 <forward_lite_dense_if32of32wf32+0x54>
 8005eac:	6954      	ldr	r4, [r2, #20]
 8005eae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eb2:	68d3      	ldr	r3, [r2, #12]
 8005eb4:	b99b      	cbnz	r3, 8005ede <forward_lite_dense_if32of32wf32+0x272>
 8005eb6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005eba:	6915      	ldr	r5, [r2, #16]
 8005ebc:	00a6      	lsls	r6, r4, #2
 8005ebe:	4288      	cmp	r0, r1
 8005ec0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8005ec4:	f63f aee7 	bhi.w	8005c96 <forward_lite_dense_if32of32wf32+0x2a>
 8005ec8:	b003      	add	sp, #12
 8005eca:	ecbd 8b0c 	vpop	{d8-d13}
 8005ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005f1c <forward_lite_dense_if32of32wf32+0x2b0>
 8005ed8:	4631      	mov	r1, r6
 8005eda:	463b      	mov	r3, r7
 8005edc:	e767      	b.n	8005dae <forward_lite_dense_if32of32wf32+0x142>
 8005ede:	2c00      	cmp	r4, #0
 8005ee0:	d0e9      	beq.n	8005eb6 <forward_lite_dense_if32of32wf32+0x24a>
 8005ee2:	edd1 7a00 	vldr	s15, [r1]
 8005ee6:	ed93 7a00 	vldr	s14, [r3]
 8005eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eee:	edc1 7a00 	vstr	s15, [r1]
 8005ef2:	6954      	ldr	r4, [r2, #20]
 8005ef4:	2c01      	cmp	r4, #1
 8005ef6:	d9de      	bls.n	8005eb6 <forward_lite_dense_if32of32wf32+0x24a>
 8005ef8:	1d0d      	adds	r5, r1, #4
 8005efa:	2301      	movs	r3, #1
 8005efc:	68d4      	ldr	r4, [r2, #12]
 8005efe:	ed95 7a00 	vldr	s14, [r5]
 8005f02:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005f06:	3301      	adds	r3, #1
 8005f08:	edd4 7a00 	vldr	s15, [r4]
 8005f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f10:	ece5 7a01 	vstmia	r5!, {s15}
 8005f14:	6954      	ldr	r4, [r2, #20]
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d8f0      	bhi.n	8005efc <forward_lite_dense_if32of32wf32+0x290>
 8005f1a:	e7cc      	b.n	8005eb6 <forward_lite_dense_if32of32wf32+0x24a>
 8005f1c:	00000000 	.word	0x00000000

08005f20 <forward_lite_dense_if32of32wf32_lut4>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	b08d      	sub	sp, #52	@ 0x34
 8005f26:	4604      	mov	r4, r0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f2e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f32:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8005f36:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f42:	9308      	str	r3, [sp, #32]
 8005f44:	f1b8 0f00 	cmp.w	r8, #0
 8005f48:	d004      	beq.n	8005f54 <forward_lite_dense_if32of32wf32_lut4+0x34>
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	f000 fbf9 	bl	8006744 <st_int8_copy>
 8005f52:	4640      	mov	r0, r8
 8005f54:	9b08      	ldr	r3, [sp, #32]
 8005f56:	429c      	cmp	r4, r3
 8005f58:	f080 810c 	bcs.w	8006174 <forward_lite_dense_if32of32wf32_lut4+0x254>
 8005f5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f5e:	08fa      	lsrs	r2, r7, #3
 8005f60:	f027 0901 	bic.w	r9, r7, #1
 8005f64:	9405      	str	r4, [sp, #20]
 8005f66:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8005f6a:	f007 0301 	and.w	r3, r7, #1
 8005f6e:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 8005f72:	9202      	str	r2, [sp, #8]
 8005f74:	9303      	str	r3, [sp, #12]
 8005f76:	00bb      	lsls	r3, r7, #2
 8005f78:	0092      	lsls	r2, r2, #2
 8005f7a:	f105 0120 	add.w	r1, r5, #32
 8005f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f80:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8005f84:	46e6      	mov	lr, ip
 8005f86:	465c      	mov	r4, fp
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	9204      	str	r2, [sp, #16]
 8005f8c:	f8cd c01c 	str.w	ip, [sp, #28]
 8005f90:	9617      	str	r6, [sp, #92]	@ 0x5c
 8005f92:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8005f96:	9a07      	ldr	r2, [sp, #28]
 8005f98:	eb03 0a02 	add.w	sl, r3, r2
 8005f9c:	f1a1 0220 	sub.w	r2, r1, #32
 8005fa0:	459a      	cmp	sl, r3
 8005fa2:	9206      	str	r2, [sp, #24]
 8005fa4:	f240 80e9 	bls.w	800617a <forward_lite_dense_if32of32wf32_lut4+0x25a>
 8005fa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005fac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fae:	4698      	mov	r8, r3
 8005fb0:	465d      	mov	r5, fp
 8005fb2:	9b02      	ldr	r3, [sp, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80c0 	beq.w	800613a <forward_lite_dense_if32of32wf32_lut4+0x21a>
 8005fba:	9b04      	ldr	r3, [sp, #16]
 8005fbc:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80061ac <forward_lite_dense_if32of32wf32_lut4+0x28c>
 8005fc0:	eb02 0c03 	add.w	ip, r2, r3
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	f892 e000 	ldrb.w	lr, [r2]
 8005fca:	3204      	adds	r2, #4
 8005fcc:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8005fd0:	3320      	adds	r3, #32
 8005fd2:	f00e 0b0f 	and.w	fp, lr, #15
 8005fd6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8005fda:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 8005fde:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005fe2:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8005fe6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005fea:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8005fee:	eddb 7a00 	vldr	s15, [fp]
 8005ff2:	ed9e 3a00 	vldr	s6, [lr]
 8005ff6:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 8005ffa:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005ffe:	f007 070f 	and.w	r7, r7, #15
 8006002:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006006:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 800600a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800600e:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8006012:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006016:	ed9e 3a00 	vldr	s6, [lr]
 800601a:	ed97 4a00 	vldr	s8, [r7]
 800601e:	0937      	lsrs	r7, r6, #4
 8006020:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8006024:	f006 060f 	and.w	r6, r6, #15
 8006028:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800602c:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8006030:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006034:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8006038:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 800603c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006040:	eee4 7a05 	vfma.f32	s15, s8, s10
 8006044:	ed97 4a00 	vldr	s8, [r7]
 8006048:	ed96 5a00 	vldr	s10, [r6]
 800604c:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8006050:	4562      	cmp	r2, ip
 8006052:	ea4f 1716 	mov.w	r7, r6, lsr #4
 8006056:	f006 060f 	and.w	r6, r6, #15
 800605a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800605e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8006062:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006066:	eee5 7a06 	vfma.f32	s15, s10, s12
 800606a:	ed97 5a00 	vldr	s10, [r7]
 800606e:	ed96 6a00 	vldr	s12, [r6]
 8006072:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006076:	eee6 7a26 	vfma.f32	s15, s12, s13
 800607a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800607e:	d1a2      	bne.n	8005fc6 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 8006080:	46a6      	mov	lr, r4
 8006082:	45ce      	cmp	lr, r9
 8006084:	d260      	bcs.n	8006148 <forward_lite_dense_if32of32wf32_lut4+0x228>
 8006086:	eba5 070e 	sub.w	r7, r5, lr
 800608a:	f10e 0208 	add.w	r2, lr, #8
 800608e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8006092:	f8cd a004 	str.w	sl, [sp, #4]
 8006096:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 800609a:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 800609e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80060a2:	3208      	adds	r2, #8
 80060a4:	ed52 5a03 	vldr	s11, [r2, #-12]
 80060a8:	f003 0a0f 	and.w	sl, r3, #15
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	ed52 6a04 	vldr	s13, [r2, #-16]
 80060b2:	42b7      	cmp	r7, r6
 80060b4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80060b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80060bc:	edda 7a00 	vldr	s15, [sl]
 80060c0:	ed93 6a00 	vldr	s12, [r3]
 80060c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80060c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80060cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060d0:	d1e5      	bne.n	800609e <forward_lite_dense_if32of32wf32_lut4+0x17e>
 80060d2:	f10b 0b01 	add.w	fp, fp, #1
 80060d6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80060da:	eb0c 020b 	add.w	r2, ip, fp
 80060de:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	b30b      	cbz	r3, 800612a <forward_lite_dense_if32of32wf32_lut4+0x20a>
 80060e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80060ea:	edde 7a00 	vldr	s15, [lr]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80060f4:	edd3 6a00 	vldr	s13, [r3]
 80060f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80060fc:	eca8 7a01 	vstmia	r8!, {s14}
 8006100:	45c2      	cmp	sl, r8
 8006102:	f63f af56 	bhi.w	8005fb2 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800610a:	189d      	adds	r5, r3, r2
 800610c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800610e:	b9eb      	cbnz	r3, 800614c <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	42ab      	cmp	r3, r5
 8006114:	d92e      	bls.n	8006174 <forward_lite_dense_if32of32wf32_lut4+0x254>
 8006116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006118:	4499      	add	r9, r3
 800611a:	441c      	add	r4, r3
 800611c:	4419      	add	r1, r3
 800611e:	9b05      	ldr	r3, [sp, #20]
 8006120:	459a      	cmp	sl, r3
 8006122:	d92c      	bls.n	800617e <forward_lite_dense_if32of32wf32_lut4+0x25e>
 8006124:	462b      	mov	r3, r5
 8006126:	9505      	str	r5, [sp, #20]
 8006128:	e735      	b.n	8005f96 <forward_lite_dense_if32of32wf32_lut4+0x76>
 800612a:	eca8 7a01 	vstmia	r8!, {s14}
 800612e:	45c2      	cmp	sl, r8
 8006130:	d9e9      	bls.n	8006106 <forward_lite_dense_if32of32wf32_lut4+0x1e6>
 8006132:	9b02      	ldr	r3, [sp, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f47f af40 	bne.w	8005fba <forward_lite_dense_if32of32wf32_lut4+0x9a>
 800613a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800613e:	4694      	mov	ip, r2
 8006140:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80061ac <forward_lite_dense_if32of32wf32_lut4+0x28c>
 8006144:	45ce      	cmp	lr, r9
 8006146:	d39e      	bcc.n	8006086 <forward_lite_dense_if32of32wf32_lut4+0x166>
 8006148:	4662      	mov	r2, ip
 800614a:	e7ca      	b.n	80060e2 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800614c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0de      	beq.n	8006110 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8006152:	9b07      	ldr	r3, [sp, #28]
 8006154:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8006158:	1aea      	subs	r2, r5, r3
 800615a:	edd2 7a00 	vldr	s15, [r2]
 800615e:	ecbc 7a01 	vldmia	ip!, {s14}
 8006162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006166:	ece2 7a01 	vstmia	r2!, {s15}
 800616a:	42aa      	cmp	r2, r5
 800616c:	d1f5      	bne.n	800615a <forward_lite_dense_if32of32wf32_lut4+0x23a>
 800616e:	9b08      	ldr	r3, [sp, #32]
 8006170:	42ab      	cmp	r3, r5
 8006172:	d8d0      	bhi.n	8006116 <forward_lite_dense_if32of32wf32_lut4+0x1f6>
 8006174:	b00d      	add	sp, #52	@ 0x34
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	461d      	mov	r5, r3
 800617c:	e7c6      	b.n	800610c <forward_lite_dense_if32of32wf32_lut4+0x1ec>
 800617e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006182:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006184:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8006186:	eba5 0c0c 	sub.w	ip, r5, ip
 800618a:	b169      	cbz	r1, 80061a8 <forward_lite_dense_if32of32wf32_lut4+0x288>
 800618c:	4663      	mov	r3, ip
 800618e:	4632      	mov	r2, r6
 8006190:	ed93 7a00 	vldr	s14, [r3]
 8006194:	ecf2 7a01 	vldmia	r2!, {s15}
 8006198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800619c:	ece3 7a01 	vstmia	r3!, {s15}
 80061a0:	429d      	cmp	r5, r3
 80061a2:	d1f5      	bne.n	8006190 <forward_lite_dense_if32of32wf32_lut4+0x270>
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d1f1      	bne.n	800618c <forward_lite_dense_if32of32wf32_lut4+0x26c>
 80061a8:	e7fe      	b.n	80061a8 <forward_lite_dense_if32of32wf32_lut4+0x288>
 80061aa:	bf00      	nop
 80061ac:	00000000 	.word	0x00000000

080061b0 <forward_lite_dense_if32of32wf32_lut8>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	b093      	sub	sp, #76	@ 0x4c
 80061b6:	469a      	mov	sl, r3
 80061b8:	4604      	mov	r4, r0
 80061ba:	468b      	mov	fp, r1
 80061bc:	920d      	str	r2, [sp, #52]	@ 0x34
 80061be:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80061c0:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 80061c4:	e9dd 591d 	ldrd	r5, r9, [sp, #116]	@ 0x74
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80061d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80061d2:	b136      	cbz	r6, 80061e2 <forward_lite_dense_if32of32wf32_lut8+0x32>
 80061d4:	4650      	mov	r0, sl
 80061d6:	46b2      	mov	sl, r6
 80061d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061dc:	4631      	mov	r1, r6
 80061de:	f000 fab1 	bl	8006744 <st_int8_copy>
 80061e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061e4:	429c      	cmp	r4, r3
 80061e6:	f080 8290 	bcs.w	800670a <forward_lite_dense_if32of32wf32_lut8+0x55a>
 80061ea:	4ab5      	ldr	r2, [pc, #724]	@ (80064c0 <forward_lite_dense_if32of32wf32_lut8+0x310>)
 80061ec:	462f      	mov	r7, r5
 80061ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80061f0:	444a      	add	r2, r9
 80061f2:	eddf 3ab4 	vldr	s7, [pc, #720]	@ 80064c4 <forward_lite_dense_if32of32wf32_lut8+0x314>
 80061f6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80061fa:	0092      	lsls	r2, r2, #2
 80061fc:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8006200:	0953      	lsrs	r3, r2, #5
 8006202:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8006206:	f102 0020 	add.w	r0, r2, #32
 800620a:	4616      	mov	r6, r2
 800620c:	930e      	str	r3, [sp, #56]	@ 0x38
 800620e:	3301      	adds	r3, #1
 8006210:	eb0b 0800 	add.w	r8, fp, r0
 8006214:	4602      	mov	r2, r0
 8006216:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	9310      	str	r3, [sp, #64]	@ 0x40
 800621c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800621e:	eb04 0c03 	add.w	ip, r4, r3
 8006222:	45a4      	cmp	ip, r4
 8006224:	d952      	bls.n	80062cc <forward_lite_dense_if32of32wf32_lut8+0x11c>
 8006226:	f106 031f 	add.w	r3, r6, #31
 800622a:	eb06 000b 	add.w	r0, r6, fp
 800622e:	4625      	mov	r5, r4
 8006230:	eb0b 0e02 	add.w	lr, fp, r2
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	f100 011f 	add.w	r1, r0, #31
 800623a:	9001      	str	r0, [sp, #4]
 800623c:	3301      	adds	r3, #1
 800623e:	9103      	str	r1, [sp, #12]
 8006240:	1f01      	subs	r1, r0, #4
 8006242:	940a      	str	r4, [sp, #40]	@ 0x28
 8006244:	9302      	str	r3, [sp, #8]
 8006246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	f10b 0104 	add.w	r1, fp, #4
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	971d      	str	r7, [sp, #116]	@ 0x74
 8006252:	9105      	str	r1, [sp, #20]
 8006254:	3310      	adds	r3, #16
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800625a:	eb0b 1343 	add.w	r3, fp, r3, lsl #5
 800625e:	9306      	str	r3, [sp, #24]
 8006260:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006262:	e9cd 2608 	strd	r2, r6, [sp, #32]
 8006266:	f1b9 0f07 	cmp.w	r9, #7
 800626a:	d83f      	bhi.n	80062ec <forward_lite_dense_if32of32wf32_lut8+0x13c>
 800626c:	45c3      	cmp	fp, r8
 800626e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80064c4 <forward_lite_dense_if32of32wf32_lut8+0x314>
 8006272:	d20f      	bcs.n	8006294 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 8006274:	4659      	mov	r1, fp
 8006276:	4618      	mov	r0, r3
 8006278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800627c:	ecf1 7a01 	vldmia	r1!, {s15}
 8006280:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006284:	4541      	cmp	r1, r8
 8006286:	edd2 6a00 	vldr	s13, [r2]
 800628a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800628e:	d3f3      	bcc.n	8006278 <forward_lite_dense_if32of32wf32_lut8+0xc8>
 8006290:	9a02      	ldr	r2, [sp, #8]
 8006292:	4413      	add	r3, r2
 8006294:	eca5 7a01 	vstmia	r5!, {s14}
 8006298:	45ac      	cmp	ip, r5
 800629a:	d8e4      	bhi.n	8006266 <forward_lite_dense_if32of32wf32_lut8+0xb6>
 800629c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800629e:	46f3      	mov	fp, lr
 80062a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062a2:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80062a4:	18e0      	adds	r0, r4, r3
 80062a6:	e9dd 2608 	ldrd	r2, r6, [sp, #32]
 80062aa:	2f00      	cmp	r7, #0
 80062ac:	f040 8218 	bne.w	80066e0 <forward_lite_dense_if32of32wf32_lut8+0x530>
 80062b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062b2:	4283      	cmp	r3, r0
 80062b4:	f240 8229 	bls.w	800670a <forward_lite_dense_if32of32wf32_lut8+0x55a>
 80062b8:	45a4      	cmp	ip, r4
 80062ba:	4490      	add	r8, r2
 80062bc:	f240 823d 	bls.w	800673a <forward_lite_dense_if32of32wf32_lut8+0x58a>
 80062c0:	4604      	mov	r4, r0
 80062c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c4:	eb04 0c03 	add.w	ip, r4, r3
 80062c8:	45a4      	cmp	ip, r4
 80062ca:	d8ac      	bhi.n	8006226 <forward_lite_dense_if32of32wf32_lut8+0x76>
 80062cc:	2f00      	cmp	r7, #0
 80062ce:	f040 8205 	bne.w	80066dc <forward_lite_dense_if32of32wf32_lut8+0x52c>
 80062d2:	469c      	mov	ip, r3
 80062d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062d6:	463d      	mov	r5, r7
 80062d8:	42a3      	cmp	r3, r4
 80062da:	f240 8216 	bls.w	800670a <forward_lite_dense_if32of32wf32_lut8+0x55a>
 80062de:	f1cc 0100 	rsb	r1, ip, #0
 80062e2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	f040 8217 	bne.w	8006718 <forward_lite_dense_if32of32wf32_lut8+0x568>
 80062ea:	e7fe      	b.n	80062ea <forward_lite_dense_if32of32wf32_lut8+0x13a>
 80062ec:	f003 0203 	and.w	r2, r3, #3
 80062f0:	2a02      	cmp	r2, #2
 80062f2:	f000 81ef 	beq.w	80066d4 <forward_lite_dense_if32of32wf32_lut8+0x524>
 80062f6:	2a03      	cmp	r2, #3
 80062f8:	f000 80e6 	beq.w	80064c8 <forward_lite_dense_if32of32wf32_lut8+0x318>
 80062fc:	2a01      	cmp	r2, #1
 80062fe:	f000 81d3 	beq.w	80066a8 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8006302:	9a01      	ldr	r2, [sp, #4]
 8006304:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80064c4 <forward_lite_dense_if32of32wf32_lut8+0x314>
 8006308:	4593      	cmp	fp, r2
 800630a:	f200 8203 	bhi.w	8006714 <forward_lite_dense_if32of32wf32_lut8+0x564>
 800630e:	9807      	ldr	r0, [sp, #28]
 8006310:	f103 0208 	add.w	r2, r3, #8
 8006314:	f10b 0120 	add.w	r1, fp, #32
 8006318:	18c4      	adds	r4, r0, r3
 800631a:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800631e:	3208      	adds	r2, #8
 8006320:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8006324:	3120      	adds	r1, #32
 8006326:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800632a:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 800632e:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 8006332:	edd0 7a00 	vldr	s15, [r0]
 8006336:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800633a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800633e:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 8006342:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006346:	ed51 6a0c 	vldr	s13, [r1, #-48]	@ 0xffffffd0
 800634a:	ed11 5a0b 	vldr	s10, [r1, #-44]	@ 0xffffffd4
 800634e:	edd0 2a00 	vldr	s5, [r0]
 8006352:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8006356:	eee2 7a83 	vfma.f32	s15, s5, s6
 800635a:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 800635e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006362:	ed11 6a09 	vldr	s12, [r1, #-36]	@ 0xffffffdc
 8006366:	ed90 3a00 	vldr	s6, [r0]
 800636a:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800636e:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006372:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006376:	ed90 4a00 	vldr	s8, [r0]
 800637a:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800637e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006382:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006386:	edd0 4a00 	vldr	s9, [r0]
 800638a:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800638e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006392:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006396:	edd0 6a00 	vldr	s13, [r0]
 800639a:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800639e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80063a2:	eee5 7a26 	vfma.f32	s15, s10, s13
 80063a6:	edd0 6a00 	vldr	s13, [r0]
 80063aa:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 80063ae:	4294      	cmp	r4, r2
 80063b0:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80063b4:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80063b8:	edd0 6a00 	vldr	s13, [r0]
 80063bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80063c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c4:	d1a9      	bne.n	800631a <forward_lite_dense_if32of32wf32_lut8+0x16a>
 80063c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80063c8:	4413      	add	r3, r2
 80063ca:	9a06      	ldr	r2, [sp, #24]
 80063cc:	4572      	cmp	r2, lr
 80063ce:	f4bf af61 	bcs.w	8006294 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 80063d2:	7819      	ldrb	r1, [r3, #0]
 80063d4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80063d8:	edd1 7a00 	vldr	s15, [r1]
 80063dc:	4611      	mov	r1, r2
 80063de:	ecf1 6a01 	vldmia	r1!, {s13}
 80063e2:	458e      	cmp	lr, r1
 80063e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063e8:	d963      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 80063ea:	7859      	ldrb	r1, [r3, #1]
 80063ec:	edd2 6a01 	vldr	s13, [r2, #4]
 80063f0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80063f4:	edd1 7a00 	vldr	s15, [r1]
 80063f8:	f102 0108 	add.w	r1, r2, #8
 80063fc:	4588      	cmp	r8, r1
 80063fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006402:	d956      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 8006404:	7899      	ldrb	r1, [r3, #2]
 8006406:	edd2 7a02 	vldr	s15, [r2, #8]
 800640a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800640e:	edd1 6a00 	vldr	s13, [r1]
 8006412:	f102 010c 	add.w	r1, r2, #12
 8006416:	4588      	cmp	r8, r1
 8006418:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800641c:	d949      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 800641e:	78d9      	ldrb	r1, [r3, #3]
 8006420:	edd2 6a03 	vldr	s13, [r2, #12]
 8006424:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006428:	edd1 7a00 	vldr	s15, [r1]
 800642c:	f102 0110 	add.w	r1, r2, #16
 8006430:	4588      	cmp	r8, r1
 8006432:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006436:	d93c      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 8006438:	7919      	ldrb	r1, [r3, #4]
 800643a:	edd2 6a04 	vldr	s13, [r2, #16]
 800643e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006442:	edd1 7a00 	vldr	s15, [r1]
 8006446:	f102 0114 	add.w	r1, r2, #20
 800644a:	4588      	cmp	r8, r1
 800644c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006450:	d92f      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 8006452:	7959      	ldrb	r1, [r3, #5]
 8006454:	edd2 6a05 	vldr	s13, [r2, #20]
 8006458:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800645c:	edd1 7a00 	vldr	s15, [r1]
 8006460:	f102 0118 	add.w	r1, r2, #24
 8006464:	4588      	cmp	r8, r1
 8006466:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800646a:	d922      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 800646c:	7999      	ldrb	r1, [r3, #6]
 800646e:	edd2 6a06 	vldr	s13, [r2, #24]
 8006472:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006476:	edd1 7a00 	vldr	s15, [r1]
 800647a:	f102 011c 	add.w	r1, r2, #28
 800647e:	4588      	cmp	r8, r1
 8006480:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006484:	d915      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 8006486:	79d9      	ldrb	r1, [r3, #7]
 8006488:	edd2 7a07 	vldr	s15, [r2, #28]
 800648c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006490:	edd1 6a00 	vldr	s13, [r1]
 8006494:	f102 0120 	add.w	r1, r2, #32
 8006498:	4588      	cmp	r8, r1
 800649a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800649e:	d908      	bls.n	80064b2 <forward_lite_dense_if32of32wf32_lut8+0x302>
 80064a0:	7a19      	ldrb	r1, [r3, #8]
 80064a2:	edd2 7a08 	vldr	s15, [r2, #32]
 80064a6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80064aa:	edd1 6a00 	vldr	s13, [r1]
 80064ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064b2:	9903      	ldr	r1, [sp, #12]
 80064b4:	1a8a      	subs	r2, r1, r2
 80064b6:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 80064ba:	1c53      	adds	r3, r2, #1
 80064bc:	e6ea      	b.n	8006294 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 80064be:	bf00      	nop
 80064c0:	3ffffff8 	.word	0x3ffffff8
 80064c4:	00000000 	.word	0x00000000
 80064c8:	eeb0 7a63 	vmov.f32	s14, s7
 80064cc:	465a      	mov	r2, fp
 80064ce:	461f      	mov	r7, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064d6:	ecf0 7a01 	vldmia	r0!, {s15}
 80064da:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80064de:	edd1 6a00 	vldr	s13, [r1]
 80064e2:	9901      	ldr	r1, [sp, #4]
 80064e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064e8:	4288      	cmp	r0, r1
 80064ea:	f200 8111 	bhi.w	8006710 <forward_lite_dense_if32of32wf32_lut8+0x560>
 80064ee:	9904      	ldr	r1, [sp, #16]
 80064f0:	f103 0411 	add.w	r4, r3, #17
 80064f4:	3309      	adds	r3, #9
 80064f6:	1a8e      	subs	r6, r1, r2
 80064f8:	3224      	adds	r2, #36	@ 0x24
 80064fa:	0976      	lsrs	r6, r6, #5
 80064fc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006500:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8006504:	3308      	adds	r3, #8
 8006506:	ed12 6a07 	vldr	s12, [r2, #-28]	@ 0xffffffe4
 800650a:	3220      	adds	r2, #32
 800650c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006510:	ed52 2a10 	vldr	s5, [r2, #-64]	@ 0xffffffc0
 8006514:	ed12 3a0e 	vldr	s6, [r2, #-56]	@ 0xffffffc8
 8006518:	edd1 7a00 	vldr	s15, [r1]
 800651c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8006520:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006524:	ed12 4a0d 	vldr	s8, [r2, #-52]	@ 0xffffffcc
 8006528:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800652c:	ed52 4a0c 	vldr	s9, [r2, #-48]	@ 0xffffffd0
 8006530:	ed12 5a0b 	vldr	s10, [r2, #-44]	@ 0xffffffd4
 8006534:	ed91 6a00 	vldr	s12, [r1]
 8006538:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 800653c:	eee2 7a86 	vfma.f32	s15, s5, s12
 8006540:	ed52 5a0a 	vldr	s11, [r2, #-40]	@ 0xffffffd8
 8006544:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006548:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 800654c:	ed91 6a00 	vldr	s12, [r1]
 8006550:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8006554:	eee3 7a06 	vfma.f32	s15, s6, s12
 8006558:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800655c:	ed91 6a00 	vldr	s12, [r1]
 8006560:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8006564:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006568:	eee4 7a06 	vfma.f32	s15, s8, s12
 800656c:	ed91 6a00 	vldr	s12, [r1]
 8006570:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8006574:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006578:	eee4 7a86 	vfma.f32	s15, s9, s12
 800657c:	ed91 6a00 	vldr	s12, [r1]
 8006580:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8006584:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8006588:	eee5 7a06 	vfma.f32	s15, s10, s12
 800658c:	ed91 6a00 	vldr	s12, [r1]
 8006590:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8006594:	429c      	cmp	r4, r3
 8006596:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800659a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800659e:	ed91 6a00 	vldr	s12, [r1]
 80065a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80065a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065aa:	d1a9      	bne.n	8006500 <forward_lite_dense_if32of32wf32_lut8+0x350>
 80065ac:	3601      	adds	r6, #1
 80065ae:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 80065b2:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80065b6:	4540      	cmp	r0, r8
 80065b8:	f4bf ae6c 	bcs.w	8006294 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80065c2:	edd2 7a00 	vldr	s15, [r2]
 80065c6:	4602      	mov	r2, r0
 80065c8:	ecf2 6a01 	vldmia	r2!, {s13}
 80065cc:	4590      	cmp	r8, r2
 80065ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80065d2:	d963      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 80065d4:	785a      	ldrb	r2, [r3, #1]
 80065d6:	edd0 6a01 	vldr	s13, [r0, #4]
 80065da:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80065de:	edd2 7a00 	vldr	s15, [r2]
 80065e2:	f100 0208 	add.w	r2, r0, #8
 80065e6:	4590      	cmp	r8, r2
 80065e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80065ec:	d956      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 80065ee:	789a      	ldrb	r2, [r3, #2]
 80065f0:	edd0 6a02 	vldr	s13, [r0, #8]
 80065f4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80065f8:	edd2 7a00 	vldr	s15, [r2]
 80065fc:	f100 020c 	add.w	r2, r0, #12
 8006600:	4590      	cmp	r8, r2
 8006602:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006606:	d949      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8006608:	78da      	ldrb	r2, [r3, #3]
 800660a:	edd0 6a03 	vldr	s13, [r0, #12]
 800660e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006612:	edd2 7a00 	vldr	s15, [r2]
 8006616:	f100 0210 	add.w	r2, r0, #16
 800661a:	4590      	cmp	r8, r2
 800661c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006620:	d93c      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8006622:	791a      	ldrb	r2, [r3, #4]
 8006624:	edd0 6a04 	vldr	s13, [r0, #16]
 8006628:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800662c:	edd2 7a00 	vldr	s15, [r2]
 8006630:	f100 0214 	add.w	r2, r0, #20
 8006634:	4590      	cmp	r8, r2
 8006636:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800663a:	d92f      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800663c:	795a      	ldrb	r2, [r3, #5]
 800663e:	edd0 6a05 	vldr	s13, [r0, #20]
 8006642:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006646:	edd2 7a00 	vldr	s15, [r2]
 800664a:	f100 0218 	add.w	r2, r0, #24
 800664e:	4596      	cmp	lr, r2
 8006650:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006654:	d922      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8006656:	799a      	ldrb	r2, [r3, #6]
 8006658:	edd0 6a06 	vldr	s13, [r0, #24]
 800665c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006660:	edd2 7a00 	vldr	s15, [r2]
 8006664:	f100 021c 	add.w	r2, r0, #28
 8006668:	4596      	cmp	lr, r2
 800666a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800666e:	d915      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8006670:	79da      	ldrb	r2, [r3, #7]
 8006672:	edd0 6a07 	vldr	s13, [r0, #28]
 8006676:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800667a:	edd2 7a00 	vldr	s15, [r2]
 800667e:	f100 0220 	add.w	r2, r0, #32
 8006682:	4596      	cmp	lr, r2
 8006684:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006688:	d908      	bls.n	800669c <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800668a:	7a1a      	ldrb	r2, [r3, #8]
 800668c:	edd0 7a08 	vldr	s15, [r0, #32]
 8006690:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006694:	edd2 6a00 	vldr	s13, [r2]
 8006698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800669c:	9a03      	ldr	r2, [sp, #12]
 800669e:	1a10      	subs	r0, r2, r0
 80066a0:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	e5f5      	b.n	8006294 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 80066a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80066ac:	eddb 7a00 	vldr	s15, [fp]
 80066b0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80066b4:	9a05      	ldr	r2, [sp, #20]
 80066b6:	ed91 7a00 	vldr	s14, [r1]
 80066ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066be:	f813 1b01 	ldrb.w	r1, [r3], #1
 80066c2:	ecf2 7a01 	vldmia	r2!, {s15}
 80066c6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80066ca:	edd1 6a00 	vldr	s13, [r1]
 80066ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80066d2:	e6fc      	b.n	80064ce <forward_lite_dense_if32of32wf32_lut8+0x31e>
 80066d4:	eeb0 7a63 	vmov.f32	s14, s7
 80066d8:	465a      	mov	r2, fp
 80066da:	e7f0      	b.n	80066be <forward_lite_dense_if32of32wf32_lut8+0x50e>
 80066dc:	4493      	add	fp, r2
 80066de:	4620      	mov	r0, r4
 80066e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f43f ade4 	beq.w	80062b0 <forward_lite_dense_if32of32wf32_lut8+0x100>
 80066e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ea:	4639      	mov	r1, r7
 80066ec:	1ac3      	subs	r3, r0, r3
 80066ee:	edd3 7a00 	vldr	s15, [r3]
 80066f2:	ecb1 7a01 	vldmia	r1!, {s14}
 80066f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066fa:	ece3 7a01 	vstmia	r3!, {s15}
 80066fe:	4298      	cmp	r0, r3
 8006700:	d1f5      	bne.n	80066ee <forward_lite_dense_if32of32wf32_lut8+0x53e>
 8006702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006704:	4283      	cmp	r3, r0
 8006706:	f63f add7 	bhi.w	80062b8 <forward_lite_dense_if32of32wf32_lut8+0x108>
 800670a:	b013      	add	sp, #76	@ 0x4c
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	463b      	mov	r3, r7
 8006712:	e750      	b.n	80065b6 <forward_lite_dense_if32of32wf32_lut8+0x406>
 8006714:	465a      	mov	r2, fp
 8006716:	e659      	b.n	80063cc <forward_lite_dense_if32of32wf32_lut8+0x21c>
 8006718:	2b00      	cmp	r3, #0
 800671a:	f43f ade3 	beq.w	80062e4 <forward_lite_dense_if32of32wf32_lut8+0x134>
 800671e:	4421      	add	r1, r4
 8006720:	460b      	mov	r3, r1
 8006722:	462a      	mov	r2, r5
 8006724:	ed93 7a00 	vldr	s14, [r3]
 8006728:	ecf2 7a01 	vldmia	r2!, {s15}
 800672c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006730:	ece3 7a01 	vstmia	r3!, {s15}
 8006734:	429c      	cmp	r4, r3
 8006736:	d1f5      	bne.n	8006724 <forward_lite_dense_if32of32wf32_lut8+0x574>
 8006738:	e7f2      	b.n	8006720 <forward_lite_dense_if32of32wf32_lut8+0x570>
 800673a:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 800673e:	463d      	mov	r5, r7
 8006740:	4604      	mov	r4, r0
 8006742:	e5cc      	b.n	80062de <forward_lite_dense_if32of32wf32_lut8+0x12e>

08006744 <st_int8_copy>:
 8006744:	4288      	cmp	r0, r1
 8006746:	d00e      	beq.n	8006766 <st_int8_copy+0x22>
 8006748:	b16a      	cbz	r2, 8006766 <st_int8_copy+0x22>
 800674a:	4288      	cmp	r0, r1
 800674c:	eb00 0302 	add.w	r3, r0, r2
 8006750:	d20a      	bcs.n	8006768 <st_int8_copy+0x24>
 8006752:	4299      	cmp	r1, r3
 8006754:	d208      	bcs.n	8006768 <st_int8_copy+0x24>
 8006756:	440a      	add	r2, r1
 8006758:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800675c:	4298      	cmp	r0, r3
 800675e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006762:	d1f9      	bne.n	8006758 <st_int8_copy+0x14>
 8006764:	4770      	bx	lr
 8006766:	4770      	bx	lr
 8006768:	2a03      	cmp	r2, #3
 800676a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800676e:	d81b      	bhi.n	80067a8 <st_int8_copy+0x64>
 8006770:	1e54      	subs	r4, r2, #1
 8006772:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006776:	f801 3b01 	strb.w	r3, [r1], #1
 800677a:	b19c      	cbz	r4, 80067a4 <st_int8_copy+0x60>
 800677c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006780:	f801 3b01 	strb.w	r3, [r1], #1
 8006784:	2a02      	cmp	r2, #2
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	bf18      	it	ne
 800678c:	2200      	movne	r2, #0
 800678e:	2c01      	cmp	r4, #1
 8006790:	d008      	beq.n	80067a4 <st_int8_copy+0x60>
 8006792:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006796:	f801 3b01 	strb.w	r3, [r1], #1
 800679a:	b11a      	cbz	r2, 80067a4 <st_int8_copy+0x60>
 800679c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067a0:	f801 3b01 	strb.w	r3, [r1], #1
 80067a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067a8:	f001 0e03 	and.w	lr, r1, #3
 80067ac:	f000 0803 	and.w	r8, r0, #3
 80067b0:	f1ce 0304 	rsb	r3, lr, #4
 80067b4:	eba2 0c03 	sub.w	ip, r2, r3
 80067b8:	f1ce 0203 	rsb	r2, lr, #3
 80067bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067c0:	f801 3b01 	strb.w	r3, [r1], #1
 80067c4:	b182      	cbz	r2, 80067e8 <st_int8_copy+0xa4>
 80067c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067ca:	f801 3b01 	strb.w	r3, [r1], #1
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	d00a      	beq.n	80067e8 <st_int8_copy+0xa4>
 80067d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067d6:	f801 3b01 	strb.w	r3, [r1], #1
 80067da:	f1be 0f01 	cmp.w	lr, #1
 80067de:	d003      	beq.n	80067e8 <st_int8_copy+0xa4>
 80067e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067e4:	f801 3b01 	strb.w	r3, [r1], #1
 80067e8:	45c6      	cmp	lr, r8
 80067ea:	d02a      	beq.n	8006842 <st_int8_copy+0xfe>
 80067ec:	ea5f 121c 	movs.w	r2, ip, lsr #4
 80067f0:	d00a      	beq.n	8006808 <st_int8_copy+0xc4>
 80067f2:	f850 3b04 	ldr.w	r3, [r0], #4
 80067f6:	f850 4b04 	ldr.w	r4, [r0], #4
 80067fa:	f850 5b04 	ldr.w	r5, [r0], #4
 80067fe:	f850 6b04 	ldr.w	r6, [r0], #4
 8006802:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8006804:	3a01      	subs	r2, #1
 8006806:	d1f4      	bne.n	80067f2 <st_int8_copy+0xae>
 8006808:	f01c 0f08 	tst.w	ip, #8
 800680c:	d004      	beq.n	8006818 <st_int8_copy+0xd4>
 800680e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006812:	f850 4b04 	ldr.w	r4, [r0], #4
 8006816:	c118      	stmia	r1!, {r3, r4}
 8006818:	f01c 0f04 	tst.w	ip, #4
 800681c:	d003      	beq.n	8006826 <st_int8_copy+0xe2>
 800681e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006822:	f841 3b04 	str.w	r3, [r1], #4
 8006826:	f01c 0f02 	tst.w	ip, #2
 800682a:	d003      	beq.n	8006834 <st_int8_copy+0xf0>
 800682c:	f830 3b02 	ldrh.w	r3, [r0], #2
 8006830:	f821 3b02 	strh.w	r3, [r1], #2
 8006834:	f01c 0f01 	tst.w	ip, #1
 8006838:	d0b4      	beq.n	80067a4 <st_int8_copy+0x60>
 800683a:	7803      	ldrb	r3, [r0, #0]
 800683c:	700b      	strb	r3, [r1, #0]
 800683e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006842:	ea5f 199c 	movs.w	r9, ip, lsr #6
 8006846:	d00e      	beq.n	8006866 <st_int8_copy+0x122>
 8006848:	4688      	mov	r8, r1
 800684a:	4686      	mov	lr, r0
 800684c:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006850:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006854:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006858:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800685c:	f1b9 0901 	subs.w	r9, r9, #1
 8006860:	4641      	mov	r1, r8
 8006862:	4670      	mov	r0, lr
 8006864:	d1f0      	bne.n	8006848 <st_int8_copy+0x104>
 8006866:	f01c 0f20 	tst.w	ip, #32
 800686a:	d007      	beq.n	800687c <st_int8_copy+0x138>
 800686c:	4688      	mov	r8, r1
 800686e:	4686      	mov	lr, r0
 8006870:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006874:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006878:	4641      	mov	r1, r8
 800687a:	4670      	mov	r0, lr
 800687c:	f01c 0f10 	tst.w	ip, #16
 8006880:	d001      	beq.n	8006886 <st_int8_copy+0x142>
 8006882:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8006884:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8006886:	f01c 0f08 	tst.w	ip, #8
 800688a:	d0c5      	beq.n	8006818 <st_int8_copy+0xd4>
 800688c:	c818      	ldmia	r0!, {r3, r4}
 800688e:	c118      	stmia	r1!, {r3, r4}
 8006890:	e7c2      	b.n	8006818 <st_int8_copy+0xd4>
 8006892:	bf00      	nop

08006894 <ai_array_to_buffer_fmt>:
 8006894:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006898:	2b02      	cmp	r3, #2
 800689a:	d055      	beq.n	8006948 <ai_array_to_buffer_fmt+0xb4>
 800689c:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80068a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006954 <ai_array_to_buffer_fmt+0xc0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d010      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068a6:	dc21      	bgt.n	80068ec <ai_array_to_buffer_fmt+0x58>
 80068a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006958 <ai_array_to_buffer_fmt+0xc4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00c      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068ae:	dd0f      	ble.n	80068d0 <ai_array_to_buffer_fmt+0x3c>
 80068b0:	4a2a      	ldr	r2, [pc, #168]	@ (800695c <ai_array_to_buffer_fmt+0xc8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d008      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068b6:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068be:	4a28      	ldr	r2, [pc, #160]	@ (8006960 <ai_array_to_buffer_fmt+0xcc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf0c      	ite	eq
 80068c4:	4613      	moveq	r3, r2
 80068c6:	2340      	movne	r3, #64	@ 0x40
 80068c8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80068cc:	4318      	orrs	r0, r3
 80068ce:	4770      	bx	lr
 80068d0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d0f7      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068d8:	dd2c      	ble.n	8006934 <ai_array_to_buffer_fmt+0xa0>
 80068da:	4a22      	ldr	r2, [pc, #136]	@ (8006964 <ai_array_to_buffer_fmt+0xd0>)
 80068dc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80068e0:	4293      	cmp	r3, r2
 80068e2:	bf0c      	ite	eq
 80068e4:	4613      	moveq	r3, r2
 80068e6:	2340      	movne	r3, #64	@ 0x40
 80068e8:	4318      	orrs	r0, r3
 80068ea:	4770      	bx	lr
 80068ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006968 <ai_array_to_buffer_fmt+0xd4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d0ea      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068f2:	dd10      	ble.n	8006916 <ai_array_to_buffer_fmt+0x82>
 80068f4:	4a1d      	ldr	r2, [pc, #116]	@ (800696c <ai_array_to_buffer_fmt+0xd8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d0e6      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 80068fa:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 80068fe:	4293      	cmp	r3, r2
 8006900:	d0e2      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 8006902:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8006906:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800690a:	4293      	cmp	r3, r2
 800690c:	bf0c      	ite	eq
 800690e:	4613      	moveq	r3, r2
 8006910:	2340      	movne	r3, #64	@ 0x40
 8006912:	4318      	orrs	r0, r3
 8006914:	4770      	bx	lr
 8006916:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800691a:	4293      	cmp	r3, r2
 800691c:	d0d4      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 800691e:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8006922:	4293      	cmp	r3, r2
 8006924:	d0d0      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 8006926:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800692a:	4293      	cmp	r3, r2
 800692c:	bf0c      	ite	eq
 800692e:	4613      	moveq	r3, r2
 8006930:	2340      	movne	r3, #64	@ 0x40
 8006932:	e7c9      	b.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 8006934:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006938:	4293      	cmp	r3, r2
 800693a:	d0c5      	beq.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 800693c:	3280      	adds	r2, #128	@ 0x80
 800693e:	4293      	cmp	r3, r2
 8006940:	bf0c      	ite	eq
 8006942:	4613      	moveq	r3, r2
 8006944:	2340      	movne	r3, #64	@ 0x40
 8006946:	e7bf      	b.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <ai_array_to_buffer_fmt+0xdc>)
 800694a:	4003      	ands	r3, r0
 800694c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006950:	e7ba      	b.n	80068c8 <ai_array_to_buffer_fmt+0x34>
 8006952:	bf00      	nop
 8006954:	00821040 	.word	0x00821040
 8006958:	00040840 	.word	0x00040840
 800695c:	00041040 	.word	0x00041040
 8006960:	0004084f 	.word	0x0004084f
 8006964:	00040447 	.word	0x00040447
 8006968:	00840447 	.word	0x00840447
 800696c:	0084084f 	.word	0x0084084f
 8006970:	00803fff 	.word	0x00803fff

08006974 <ai_array_get_data_byte_size>:
 8006974:	b161      	cbz	r1, 8006990 <ai_array_get_data_byte_size+0x1c>
 8006976:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800697a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800697e:	fb01 f003 	mul.w	r0, r1, r3
 8006982:	3007      	adds	r0, #7
 8006984:	f020 0007 	bic.w	r0, r0, #7
 8006988:	40d0      	lsrs	r0, r2
 800698a:	3007      	adds	r0, #7
 800698c:	08c0      	lsrs	r0, r0, #3
 800698e:	4770      	bx	lr
 8006990:	4608      	mov	r0, r1
 8006992:	4770      	bx	lr

08006994 <ai_version_get>:
 8006994:	0212      	lsls	r2, r2, #8
 8006996:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800699a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800699e:	4770      	bx	lr

080069a0 <get_tensor_byte_size>:
 80069a0:	b430      	push	{r4, r5}
 80069a2:	6985      	ldr	r5, [r0, #24]
 80069a4:	68c4      	ldr	r4, [r0, #12]
 80069a6:	6941      	ldr	r1, [r0, #20]
 80069a8:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <get_tensor_byte_size+0x24>)
 80069aa:	6828      	ldr	r0, [r5, #0]
 80069ac:	4a06      	ldr	r2, [pc, #24]	@ (80069c8 <get_tensor_byte_size+0x28>)
 80069ae:	4003      	ands	r3, r0
 80069b0:	68c9      	ldr	r1, [r1, #12]
 80069b2:	68e0      	ldr	r0, [r4, #12]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	fb01 f000 	mul.w	r0, r1, r0
 80069ba:	d101      	bne.n	80069c0 <get_tensor_byte_size+0x20>
 80069bc:	3007      	adds	r0, #7
 80069be:	08c0      	lsrs	r0, r0, #3
 80069c0:	bc30      	pop	{r4, r5}
 80069c2:	4770      	bx	lr
 80069c4:	017fffff 	.word	0x017fffff
 80069c8:	000400c0 	.word	0x000400c0

080069cc <memset>:
 80069cc:	4402      	add	r2, r0
 80069ce:	4603      	mov	r3, r0
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d100      	bne.n	80069d6 <memset+0xa>
 80069d4:	4770      	bx	lr
 80069d6:	f803 1b01 	strb.w	r1, [r3], #1
 80069da:	e7f9      	b.n	80069d0 <memset+0x4>

080069dc <__errno>:
 80069dc:	4b01      	ldr	r3, [pc, #4]	@ (80069e4 <__errno+0x8>)
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2400074c 	.word	0x2400074c

080069e8 <__libc_init_array>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006a20 <__libc_init_array+0x38>)
 80069ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006a24 <__libc_init_array+0x3c>)
 80069ee:	1b64      	subs	r4, r4, r5
 80069f0:	10a4      	asrs	r4, r4, #2
 80069f2:	2600      	movs	r6, #0
 80069f4:	42a6      	cmp	r6, r4
 80069f6:	d109      	bne.n	8006a0c <__libc_init_array+0x24>
 80069f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006a28 <__libc_init_array+0x40>)
 80069fa:	4c0c      	ldr	r4, [pc, #48]	@ (8006a2c <__libc_init_array+0x44>)
 80069fc:	f000 f8c6 	bl	8006b8c <_init>
 8006a00:	1b64      	subs	r4, r4, r5
 8006a02:	10a4      	asrs	r4, r4, #2
 8006a04:	2600      	movs	r6, #0
 8006a06:	42a6      	cmp	r6, r4
 8006a08:	d105      	bne.n	8006a16 <__libc_init_array+0x2e>
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a10:	4798      	blx	r3
 8006a12:	3601      	adds	r6, #1
 8006a14:	e7ee      	b.n	80069f4 <__libc_init_array+0xc>
 8006a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1a:	4798      	blx	r3
 8006a1c:	3601      	adds	r6, #1
 8006a1e:	e7f2      	b.n	8006a06 <__libc_init_array+0x1e>
 8006a20:	08007970 	.word	0x08007970
 8006a24:	08007970 	.word	0x08007970
 8006a28:	08007970 	.word	0x08007970
 8006a2c:	08007974 	.word	0x08007974

08006a30 <memcpy>:
 8006a30:	440a      	add	r2, r1
 8006a32:	4291      	cmp	r1, r2
 8006a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a38:	d100      	bne.n	8006a3c <memcpy+0xc>
 8006a3a:	4770      	bx	lr
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a46:	4291      	cmp	r1, r2
 8006a48:	d1f9      	bne.n	8006a3e <memcpy+0xe>
 8006a4a:	bd10      	pop	{r4, pc}

08006a4c <expf>:
 8006a4c:	ee10 2a10 	vmov	r2, s0
 8006a50:	f240 412a 	movw	r1, #1066	@ 0x42a
 8006a54:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	b430      	push	{r4, r5}
 8006a5c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006a60:	d92a      	bls.n	8006ab8 <expf+0x6c>
 8006a62:	f512 0f00 	cmn.w	r2, #8388608	@ 0x800000
 8006a66:	d058      	beq.n	8006b1a <expf+0xce>
 8006a68:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8006a6c:	d303      	bcc.n	8006a76 <expf+0x2a>
 8006a6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006a72:	bc30      	pop	{r4, r5}
 8006a74:	4770      	bx	lr
 8006a76:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8006b20 <expf+0xd4>
 8006a7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a82:	dd03      	ble.n	8006a8c <expf+0x40>
 8006a84:	bc30      	pop	{r4, r5}
 8006a86:	2000      	movs	r0, #0
 8006a88:	f000 b87a 	b.w	8006b80 <__math_oflowf>
 8006a8c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006b24 <expf+0xd8>
 8006a90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a98:	d503      	bpl.n	8006aa2 <expf+0x56>
 8006a9a:	bc30      	pop	{r4, r5}
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f000 b863 	b.w	8006b68 <__math_uflowf>
 8006aa2:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8006b28 <expf+0xdc>
 8006aa6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aae:	d503      	bpl.n	8006ab8 <expf+0x6c>
 8006ab0:	bc30      	pop	{r4, r5}
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f000 b85e 	b.w	8006b74 <__math_may_uflowf>
 8006ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b2c <expf+0xe0>)
 8006aba:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006abe:	ed93 5b4a 	vldr	d5, [r3, #296]	@ 0x128
 8006ac2:	ed93 4b48 	vldr	d4, [r3, #288]	@ 0x120
 8006ac6:	eeb0 7b44 	vmov.f64	d7, d4
 8006aca:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006ace:	ee17 0a10 	vmov	r0, s14
 8006ad2:	ee37 7b44 	vsub.f64	d7, d7, d4
 8006ad6:	f000 021f 	and.w	r2, r0, #31
 8006ada:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8006ade:	ed93 5b4c 	vldr	d5, [r3, #304]	@ 0x130
 8006ae2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006ae6:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
 8006aea:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8006aee:	eea5 6b07 	vfma.f64	d6, d5, d7
 8006af2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8006af6:	684d      	ldr	r5, [r1, #4]
 8006af8:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
 8006afc:	2100      	movs	r1, #0
 8006afe:	190a      	adds	r2, r1, r4
 8006b00:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8006b04:	eea5 0b07 	vfma.f64	d0, d5, d7
 8006b08:	ec43 2b17 	vmov	d7, r2, r3
 8006b0c:	eea6 0b04 	vfma.f64	d0, d6, d4
 8006b10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006b14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006b18:	e7ab      	b.n	8006a72 <expf+0x26>
 8006b1a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8006b30 <expf+0xe4>
 8006b1e:	e7a8      	b.n	8006a72 <expf+0x26>
 8006b20:	42b17217 	.word	0x42b17217
 8006b24:	c2cff1b4 	.word	0xc2cff1b4
 8006b28:	c2ce8ecf 	.word	0xc2ce8ecf
 8006b2c:	08007828 	.word	0x08007828
 8006b30:	00000000 	.word	0x00000000

08006b34 <with_errnof>:
 8006b34:	b510      	push	{r4, lr}
 8006b36:	ed2d 8b02 	vpush	{d8}
 8006b3a:	eeb0 8a40 	vmov.f32	s16, s0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	f7ff ff4c 	bl	80069dc <__errno>
 8006b44:	eeb0 0a48 	vmov.f32	s0, s16
 8006b48:	ecbd 8b02 	vpop	{d8}
 8006b4c:	6004      	str	r4, [r0, #0]
 8006b4e:	bd10      	pop	{r4, pc}

08006b50 <xflowf>:
 8006b50:	b130      	cbz	r0, 8006b60 <xflowf+0x10>
 8006b52:	eef1 7a40 	vneg.f32	s15, s0
 8006b56:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b5a:	2022      	movs	r0, #34	@ 0x22
 8006b5c:	f7ff bfea 	b.w	8006b34 <with_errnof>
 8006b60:	eef0 7a40 	vmov.f32	s15, s0
 8006b64:	e7f7      	b.n	8006b56 <xflowf+0x6>
	...

08006b68 <__math_uflowf>:
 8006b68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006b70 <__math_uflowf+0x8>
 8006b6c:	f7ff bff0 	b.w	8006b50 <xflowf>
 8006b70:	10000000 	.word	0x10000000

08006b74 <__math_may_uflowf>:
 8006b74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006b7c <__math_may_uflowf+0x8>
 8006b78:	f7ff bfea 	b.w	8006b50 <xflowf>
 8006b7c:	1a200000 	.word	0x1a200000

08006b80 <__math_oflowf>:
 8006b80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006b88 <__math_oflowf+0x8>
 8006b84:	f7ff bfe4 	b.w	8006b50 <xflowf>
 8006b88:	70000000 	.word	0x70000000

08006b8c <_init>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr

08006b98 <_fini>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr
