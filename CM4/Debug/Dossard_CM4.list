
Dossard_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a7c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08111d1c  08111d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08112248  08112248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08112250  08112250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08112254  08112254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  10000000  08112258  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f24  10000074  081122cc  00014074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004f98  081122cc  00014f98  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00014074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a1a0  00000000  00000000  000140a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d78  00000000  00000000  0003e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002250  00000000  00000000  00042fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ac9  00000000  00000000  00045210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ec7b  00000000  00000000  00046cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b3f1  00000000  00000000  00085954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a5c9d  00000000  00000000  000b0d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002569e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f20  00000000  00000000  00256a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  00260948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08111d04 	.word	0x08111d04

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08111d04 	.word	0x08111d04

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_uldivmod>:
 8100708:	b953      	cbnz	r3, 8100720 <__aeabi_uldivmod+0x18>
 810070a:	b94a      	cbnz	r2, 8100720 <__aeabi_uldivmod+0x18>
 810070c:	2900      	cmp	r1, #0
 810070e:	bf08      	it	eq
 8100710:	2800      	cmpeq	r0, #0
 8100712:	bf1c      	itt	ne
 8100714:	f04f 31ff 	movne.w	r1, #4294967295
 8100718:	f04f 30ff 	movne.w	r0, #4294967295
 810071c:	f000 b988 	b.w	8100a30 <__aeabi_idiv0>
 8100720:	f1ad 0c08 	sub.w	ip, sp, #8
 8100724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100728:	f000 f806 	bl	8100738 <__udivmoddi4>
 810072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100734:	b004      	add	sp, #16
 8100736:	4770      	bx	lr

08100738 <__udivmoddi4>:
 8100738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810073c:	9d08      	ldr	r5, [sp, #32]
 810073e:	468e      	mov	lr, r1
 8100740:	4604      	mov	r4, r0
 8100742:	4688      	mov	r8, r1
 8100744:	2b00      	cmp	r3, #0
 8100746:	d14a      	bne.n	81007de <__udivmoddi4+0xa6>
 8100748:	428a      	cmp	r2, r1
 810074a:	4617      	mov	r7, r2
 810074c:	d962      	bls.n	8100814 <__udivmoddi4+0xdc>
 810074e:	fab2 f682 	clz	r6, r2
 8100752:	b14e      	cbz	r6, 8100768 <__udivmoddi4+0x30>
 8100754:	f1c6 0320 	rsb	r3, r6, #32
 8100758:	fa01 f806 	lsl.w	r8, r1, r6
 810075c:	fa20 f303 	lsr.w	r3, r0, r3
 8100760:	40b7      	lsls	r7, r6
 8100762:	ea43 0808 	orr.w	r8, r3, r8
 8100766:	40b4      	lsls	r4, r6
 8100768:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810076c:	fa1f fc87 	uxth.w	ip, r7
 8100770:	fbb8 f1fe 	udiv	r1, r8, lr
 8100774:	0c23      	lsrs	r3, r4, #16
 8100776:	fb0e 8811 	mls	r8, lr, r1, r8
 810077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810077e:	fb01 f20c 	mul.w	r2, r1, ip
 8100782:	429a      	cmp	r2, r3
 8100784:	d909      	bls.n	810079a <__udivmoddi4+0x62>
 8100786:	18fb      	adds	r3, r7, r3
 8100788:	f101 30ff 	add.w	r0, r1, #4294967295
 810078c:	f080 80ea 	bcs.w	8100964 <__udivmoddi4+0x22c>
 8100790:	429a      	cmp	r2, r3
 8100792:	f240 80e7 	bls.w	8100964 <__udivmoddi4+0x22c>
 8100796:	3902      	subs	r1, #2
 8100798:	443b      	add	r3, r7
 810079a:	1a9a      	subs	r2, r3, r2
 810079c:	b2a3      	uxth	r3, r4
 810079e:	fbb2 f0fe 	udiv	r0, r2, lr
 81007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 81007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81007aa:	fb00 fc0c 	mul.w	ip, r0, ip
 81007ae:	459c      	cmp	ip, r3
 81007b0:	d909      	bls.n	81007c6 <__udivmoddi4+0x8e>
 81007b2:	18fb      	adds	r3, r7, r3
 81007b4:	f100 32ff 	add.w	r2, r0, #4294967295
 81007b8:	f080 80d6 	bcs.w	8100968 <__udivmoddi4+0x230>
 81007bc:	459c      	cmp	ip, r3
 81007be:	f240 80d3 	bls.w	8100968 <__udivmoddi4+0x230>
 81007c2:	443b      	add	r3, r7
 81007c4:	3802      	subs	r0, #2
 81007c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 81007ca:	eba3 030c 	sub.w	r3, r3, ip
 81007ce:	2100      	movs	r1, #0
 81007d0:	b11d      	cbz	r5, 81007da <__udivmoddi4+0xa2>
 81007d2:	40f3      	lsrs	r3, r6
 81007d4:	2200      	movs	r2, #0
 81007d6:	e9c5 3200 	strd	r3, r2, [r5]
 81007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81007de:	428b      	cmp	r3, r1
 81007e0:	d905      	bls.n	81007ee <__udivmoddi4+0xb6>
 81007e2:	b10d      	cbz	r5, 81007e8 <__udivmoddi4+0xb0>
 81007e4:	e9c5 0100 	strd	r0, r1, [r5]
 81007e8:	2100      	movs	r1, #0
 81007ea:	4608      	mov	r0, r1
 81007ec:	e7f5      	b.n	81007da <__udivmoddi4+0xa2>
 81007ee:	fab3 f183 	clz	r1, r3
 81007f2:	2900      	cmp	r1, #0
 81007f4:	d146      	bne.n	8100884 <__udivmoddi4+0x14c>
 81007f6:	4573      	cmp	r3, lr
 81007f8:	d302      	bcc.n	8100800 <__udivmoddi4+0xc8>
 81007fa:	4282      	cmp	r2, r0
 81007fc:	f200 8105 	bhi.w	8100a0a <__udivmoddi4+0x2d2>
 8100800:	1a84      	subs	r4, r0, r2
 8100802:	eb6e 0203 	sbc.w	r2, lr, r3
 8100806:	2001      	movs	r0, #1
 8100808:	4690      	mov	r8, r2
 810080a:	2d00      	cmp	r5, #0
 810080c:	d0e5      	beq.n	81007da <__udivmoddi4+0xa2>
 810080e:	e9c5 4800 	strd	r4, r8, [r5]
 8100812:	e7e2      	b.n	81007da <__udivmoddi4+0xa2>
 8100814:	2a00      	cmp	r2, #0
 8100816:	f000 8090 	beq.w	810093a <__udivmoddi4+0x202>
 810081a:	fab2 f682 	clz	r6, r2
 810081e:	2e00      	cmp	r6, #0
 8100820:	f040 80a4 	bne.w	810096c <__udivmoddi4+0x234>
 8100824:	1a8a      	subs	r2, r1, r2
 8100826:	0c03      	lsrs	r3, r0, #16
 8100828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810082c:	b280      	uxth	r0, r0
 810082e:	b2bc      	uxth	r4, r7
 8100830:	2101      	movs	r1, #1
 8100832:	fbb2 fcfe 	udiv	ip, r2, lr
 8100836:	fb0e 221c 	mls	r2, lr, ip, r2
 810083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810083e:	fb04 f20c 	mul.w	r2, r4, ip
 8100842:	429a      	cmp	r2, r3
 8100844:	d907      	bls.n	8100856 <__udivmoddi4+0x11e>
 8100846:	18fb      	adds	r3, r7, r3
 8100848:	f10c 38ff 	add.w	r8, ip, #4294967295
 810084c:	d202      	bcs.n	8100854 <__udivmoddi4+0x11c>
 810084e:	429a      	cmp	r2, r3
 8100850:	f200 80e0 	bhi.w	8100a14 <__udivmoddi4+0x2dc>
 8100854:	46c4      	mov	ip, r8
 8100856:	1a9b      	subs	r3, r3, r2
 8100858:	fbb3 f2fe 	udiv	r2, r3, lr
 810085c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100864:	fb02 f404 	mul.w	r4, r2, r4
 8100868:	429c      	cmp	r4, r3
 810086a:	d907      	bls.n	810087c <__udivmoddi4+0x144>
 810086c:	18fb      	adds	r3, r7, r3
 810086e:	f102 30ff 	add.w	r0, r2, #4294967295
 8100872:	d202      	bcs.n	810087a <__udivmoddi4+0x142>
 8100874:	429c      	cmp	r4, r3
 8100876:	f200 80ca 	bhi.w	8100a0e <__udivmoddi4+0x2d6>
 810087a:	4602      	mov	r2, r0
 810087c:	1b1b      	subs	r3, r3, r4
 810087e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100882:	e7a5      	b.n	81007d0 <__udivmoddi4+0x98>
 8100884:	f1c1 0620 	rsb	r6, r1, #32
 8100888:	408b      	lsls	r3, r1
 810088a:	fa22 f706 	lsr.w	r7, r2, r6
 810088e:	431f      	orrs	r7, r3
 8100890:	fa0e f401 	lsl.w	r4, lr, r1
 8100894:	fa20 f306 	lsr.w	r3, r0, r6
 8100898:	fa2e fe06 	lsr.w	lr, lr, r6
 810089c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 81008a0:	4323      	orrs	r3, r4
 81008a2:	fa00 f801 	lsl.w	r8, r0, r1
 81008a6:	fa1f fc87 	uxth.w	ip, r7
 81008aa:	fbbe f0f9 	udiv	r0, lr, r9
 81008ae:	0c1c      	lsrs	r4, r3, #16
 81008b0:	fb09 ee10 	mls	lr, r9, r0, lr
 81008b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 81008b8:	fb00 fe0c 	mul.w	lr, r0, ip
 81008bc:	45a6      	cmp	lr, r4
 81008be:	fa02 f201 	lsl.w	r2, r2, r1
 81008c2:	d909      	bls.n	81008d8 <__udivmoddi4+0x1a0>
 81008c4:	193c      	adds	r4, r7, r4
 81008c6:	f100 3aff 	add.w	sl, r0, #4294967295
 81008ca:	f080 809c 	bcs.w	8100a06 <__udivmoddi4+0x2ce>
 81008ce:	45a6      	cmp	lr, r4
 81008d0:	f240 8099 	bls.w	8100a06 <__udivmoddi4+0x2ce>
 81008d4:	3802      	subs	r0, #2
 81008d6:	443c      	add	r4, r7
 81008d8:	eba4 040e 	sub.w	r4, r4, lr
 81008dc:	fa1f fe83 	uxth.w	lr, r3
 81008e0:	fbb4 f3f9 	udiv	r3, r4, r9
 81008e4:	fb09 4413 	mls	r4, r9, r3, r4
 81008e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81008ec:	fb03 fc0c 	mul.w	ip, r3, ip
 81008f0:	45a4      	cmp	ip, r4
 81008f2:	d908      	bls.n	8100906 <__udivmoddi4+0x1ce>
 81008f4:	193c      	adds	r4, r7, r4
 81008f6:	f103 3eff 	add.w	lr, r3, #4294967295
 81008fa:	f080 8082 	bcs.w	8100a02 <__udivmoddi4+0x2ca>
 81008fe:	45a4      	cmp	ip, r4
 8100900:	d97f      	bls.n	8100a02 <__udivmoddi4+0x2ca>
 8100902:	3b02      	subs	r3, #2
 8100904:	443c      	add	r4, r7
 8100906:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 810090a:	eba4 040c 	sub.w	r4, r4, ip
 810090e:	fba0 ec02 	umull	lr, ip, r0, r2
 8100912:	4564      	cmp	r4, ip
 8100914:	4673      	mov	r3, lr
 8100916:	46e1      	mov	r9, ip
 8100918:	d362      	bcc.n	81009e0 <__udivmoddi4+0x2a8>
 810091a:	d05f      	beq.n	81009dc <__udivmoddi4+0x2a4>
 810091c:	b15d      	cbz	r5, 8100936 <__udivmoddi4+0x1fe>
 810091e:	ebb8 0203 	subs.w	r2, r8, r3
 8100922:	eb64 0409 	sbc.w	r4, r4, r9
 8100926:	fa04 f606 	lsl.w	r6, r4, r6
 810092a:	fa22 f301 	lsr.w	r3, r2, r1
 810092e:	431e      	orrs	r6, r3
 8100930:	40cc      	lsrs	r4, r1
 8100932:	e9c5 6400 	strd	r6, r4, [r5]
 8100936:	2100      	movs	r1, #0
 8100938:	e74f      	b.n	81007da <__udivmoddi4+0xa2>
 810093a:	fbb1 fcf2 	udiv	ip, r1, r2
 810093e:	0c01      	lsrs	r1, r0, #16
 8100940:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100944:	b280      	uxth	r0, r0
 8100946:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810094a:	463b      	mov	r3, r7
 810094c:	4638      	mov	r0, r7
 810094e:	463c      	mov	r4, r7
 8100950:	46b8      	mov	r8, r7
 8100952:	46be      	mov	lr, r7
 8100954:	2620      	movs	r6, #32
 8100956:	fbb1 f1f7 	udiv	r1, r1, r7
 810095a:	eba2 0208 	sub.w	r2, r2, r8
 810095e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100962:	e766      	b.n	8100832 <__udivmoddi4+0xfa>
 8100964:	4601      	mov	r1, r0
 8100966:	e718      	b.n	810079a <__udivmoddi4+0x62>
 8100968:	4610      	mov	r0, r2
 810096a:	e72c      	b.n	81007c6 <__udivmoddi4+0x8e>
 810096c:	f1c6 0220 	rsb	r2, r6, #32
 8100970:	fa2e f302 	lsr.w	r3, lr, r2
 8100974:	40b7      	lsls	r7, r6
 8100976:	40b1      	lsls	r1, r6
 8100978:	fa20 f202 	lsr.w	r2, r0, r2
 810097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100980:	430a      	orrs	r2, r1
 8100982:	fbb3 f8fe 	udiv	r8, r3, lr
 8100986:	b2bc      	uxth	r4, r7
 8100988:	fb0e 3318 	mls	r3, lr, r8, r3
 810098c:	0c11      	lsrs	r1, r2, #16
 810098e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100992:	fb08 f904 	mul.w	r9, r8, r4
 8100996:	40b0      	lsls	r0, r6
 8100998:	4589      	cmp	r9, r1
 810099a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810099e:	b280      	uxth	r0, r0
 81009a0:	d93e      	bls.n	8100a20 <__udivmoddi4+0x2e8>
 81009a2:	1879      	adds	r1, r7, r1
 81009a4:	f108 3cff 	add.w	ip, r8, #4294967295
 81009a8:	d201      	bcs.n	81009ae <__udivmoddi4+0x276>
 81009aa:	4589      	cmp	r9, r1
 81009ac:	d81f      	bhi.n	81009ee <__udivmoddi4+0x2b6>
 81009ae:	eba1 0109 	sub.w	r1, r1, r9
 81009b2:	fbb1 f9fe 	udiv	r9, r1, lr
 81009b6:	fb09 f804 	mul.w	r8, r9, r4
 81009ba:	fb0e 1119 	mls	r1, lr, r9, r1
 81009be:	b292      	uxth	r2, r2
 81009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81009c4:	4542      	cmp	r2, r8
 81009c6:	d229      	bcs.n	8100a1c <__udivmoddi4+0x2e4>
 81009c8:	18ba      	adds	r2, r7, r2
 81009ca:	f109 31ff 	add.w	r1, r9, #4294967295
 81009ce:	d2c4      	bcs.n	810095a <__udivmoddi4+0x222>
 81009d0:	4542      	cmp	r2, r8
 81009d2:	d2c2      	bcs.n	810095a <__udivmoddi4+0x222>
 81009d4:	f1a9 0102 	sub.w	r1, r9, #2
 81009d8:	443a      	add	r2, r7
 81009da:	e7be      	b.n	810095a <__udivmoddi4+0x222>
 81009dc:	45f0      	cmp	r8, lr
 81009de:	d29d      	bcs.n	810091c <__udivmoddi4+0x1e4>
 81009e0:	ebbe 0302 	subs.w	r3, lr, r2
 81009e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81009e8:	3801      	subs	r0, #1
 81009ea:	46e1      	mov	r9, ip
 81009ec:	e796      	b.n	810091c <__udivmoddi4+0x1e4>
 81009ee:	eba7 0909 	sub.w	r9, r7, r9
 81009f2:	4449      	add	r1, r9
 81009f4:	f1a8 0c02 	sub.w	ip, r8, #2
 81009f8:	fbb1 f9fe 	udiv	r9, r1, lr
 81009fc:	fb09 f804 	mul.w	r8, r9, r4
 8100a00:	e7db      	b.n	81009ba <__udivmoddi4+0x282>
 8100a02:	4673      	mov	r3, lr
 8100a04:	e77f      	b.n	8100906 <__udivmoddi4+0x1ce>
 8100a06:	4650      	mov	r0, sl
 8100a08:	e766      	b.n	81008d8 <__udivmoddi4+0x1a0>
 8100a0a:	4608      	mov	r0, r1
 8100a0c:	e6fd      	b.n	810080a <__udivmoddi4+0xd2>
 8100a0e:	443b      	add	r3, r7
 8100a10:	3a02      	subs	r2, #2
 8100a12:	e733      	b.n	810087c <__udivmoddi4+0x144>
 8100a14:	f1ac 0c02 	sub.w	ip, ip, #2
 8100a18:	443b      	add	r3, r7
 8100a1a:	e71c      	b.n	8100856 <__udivmoddi4+0x11e>
 8100a1c:	4649      	mov	r1, r9
 8100a1e:	e79c      	b.n	810095a <__udivmoddi4+0x222>
 8100a20:	eba1 0109 	sub.w	r1, r1, r9
 8100a24:	46c4      	mov	ip, r8
 8100a26:	fbb1 f9fe 	udiv	r9, r1, lr
 8100a2a:	fb09 f804 	mul.w	r8, r9, r4
 8100a2e:	e7c4      	b.n	81009ba <__udivmoddi4+0x282>

08100a30 <__aeabi_idiv0>:
 8100a30:	4770      	bx	lr
 8100a32:	bf00      	nop

08100a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100a34:	b480      	push	{r7}
 8100a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100a38:	4b09      	ldr	r3, [pc, #36]	@ (8100a60 <SystemInit+0x2c>)
 8100a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100a3e:	4a08      	ldr	r2, [pc, #32]	@ (8100a60 <SystemInit+0x2c>)
 8100a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100a48:	4b05      	ldr	r3, [pc, #20]	@ (8100a60 <SystemInit+0x2c>)
 8100a4a:	691b      	ldr	r3, [r3, #16]
 8100a4c:	4a04      	ldr	r2, [pc, #16]	@ (8100a60 <SystemInit+0x2c>)
 8100a4e:	f043 0310 	orr.w	r3, r3, #16
 8100a52:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100a54:	bf00      	nop
 8100a56:	46bd      	mov	sp, r7
 8100a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a5c:	4770      	bx	lr
 8100a5e:	bf00      	nop
 8100a60:	e000ed00 	.word	0xe000ed00

08100a64 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100a64:	b480      	push	{r7}
 8100a66:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8100a68:	4b0a      	ldr	r3, [pc, #40]	@ (8100a94 <ExitRun0Mode+0x30>)
 8100a6a:	68db      	ldr	r3, [r3, #12]
 8100a6c:	f023 0306 	bic.w	r3, r3, #6
 8100a70:	4a08      	ldr	r2, [pc, #32]	@ (8100a94 <ExitRun0Mode+0x30>)
 8100a72:	f043 0302 	orr.w	r3, r3, #2
 8100a76:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100a78:	bf00      	nop
 8100a7a:	4b06      	ldr	r3, [pc, #24]	@ (8100a94 <ExitRun0Mode+0x30>)
 8100a7c:	685b      	ldr	r3, [r3, #4]
 8100a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100a82:	2b00      	cmp	r3, #0
 8100a84:	d0f9      	beq.n	8100a7a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100a86:	bf00      	nop
 8100a88:	bf00      	nop
 8100a8a:	46bd      	mov	sp, r7
 8100a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a90:	4770      	bx	lr
 8100a92:	bf00      	nop
 8100a94:	58024800 	.word	0x58024800

08100a98 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8100a98:	b480      	push	{r7}
 8100a9a:	b089      	sub	sp, #36	@ 0x24
 8100a9c:	af00      	add	r7, sp, #0
 8100a9e:	6078      	str	r0, [r7, #4]
 8100aa0:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8100aa2:	2300      	movs	r3, #0
 8100aa4:	61fb      	str	r3, [r7, #28]
 8100aa6:	e030      	b.n	8100b0a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8100aa8:	69fb      	ldr	r3, [r7, #28]
 8100aaa:	009b      	lsls	r3, r3, #2
 8100aac:	683a      	ldr	r2, [r7, #0]
 8100aae:	441a      	add	r2, r3
 8100ab0:	69fb      	ldr	r3, [r7, #28]
 8100ab2:	009b      	lsls	r3, r3, #2
 8100ab4:	6879      	ldr	r1, [r7, #4]
 8100ab6:	440b      	add	r3, r1
 8100ab8:	7812      	ldrb	r2, [r2, #0]
 8100aba:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8100abc:	69fb      	ldr	r3, [r7, #28]
 8100abe:	009b      	lsls	r3, r3, #2
 8100ac0:	3301      	adds	r3, #1
 8100ac2:	683a      	ldr	r2, [r7, #0]
 8100ac4:	441a      	add	r2, r3
 8100ac6:	69fb      	ldr	r3, [r7, #28]
 8100ac8:	009b      	lsls	r3, r3, #2
 8100aca:	3301      	adds	r3, #1
 8100acc:	6879      	ldr	r1, [r7, #4]
 8100ace:	440b      	add	r3, r1
 8100ad0:	7812      	ldrb	r2, [r2, #0]
 8100ad2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8100ad4:	69fb      	ldr	r3, [r7, #28]
 8100ad6:	009b      	lsls	r3, r3, #2
 8100ad8:	3302      	adds	r3, #2
 8100ada:	683a      	ldr	r2, [r7, #0]
 8100adc:	441a      	add	r2, r3
 8100ade:	69fb      	ldr	r3, [r7, #28]
 8100ae0:	009b      	lsls	r3, r3, #2
 8100ae2:	3302      	adds	r3, #2
 8100ae4:	6879      	ldr	r1, [r7, #4]
 8100ae6:	440b      	add	r3, r1
 8100ae8:	7812      	ldrb	r2, [r2, #0]
 8100aea:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8100aec:	69fb      	ldr	r3, [r7, #28]
 8100aee:	009b      	lsls	r3, r3, #2
 8100af0:	3303      	adds	r3, #3
 8100af2:	683a      	ldr	r2, [r7, #0]
 8100af4:	441a      	add	r2, r3
 8100af6:	69fb      	ldr	r3, [r7, #28]
 8100af8:	009b      	lsls	r3, r3, #2
 8100afa:	3303      	adds	r3, #3
 8100afc:	6879      	ldr	r1, [r7, #4]
 8100afe:	440b      	add	r3, r1
 8100b00:	7812      	ldrb	r2, [r2, #0]
 8100b02:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8100b04:	69fb      	ldr	r3, [r7, #28]
 8100b06:	3301      	adds	r3, #1
 8100b08:	61fb      	str	r3, [r7, #28]
 8100b0a:	69fb      	ldr	r3, [r7, #28]
 8100b0c:	2b03      	cmp	r3, #3
 8100b0e:	d9cb      	bls.n	8100aa8 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8100b10:	2304      	movs	r3, #4
 8100b12:	61fb      	str	r3, [r7, #28]
 8100b14:	e081      	b.n	8100c1a <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8100b16:	69fb      	ldr	r3, [r7, #28]
 8100b18:	3b01      	subs	r3, #1
 8100b1a:	009b      	lsls	r3, r3, #2
 8100b1c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8100b1e:	687a      	ldr	r2, [r7, #4]
 8100b20:	69bb      	ldr	r3, [r7, #24]
 8100b22:	4413      	add	r3, r2
 8100b24:	781b      	ldrb	r3, [r3, #0]
 8100b26:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8100b28:	69bb      	ldr	r3, [r7, #24]
 8100b2a:	3301      	adds	r3, #1
 8100b2c:	687a      	ldr	r2, [r7, #4]
 8100b2e:	4413      	add	r3, r2
 8100b30:	781b      	ldrb	r3, [r3, #0]
 8100b32:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8100b34:	69bb      	ldr	r3, [r7, #24]
 8100b36:	3302      	adds	r3, #2
 8100b38:	687a      	ldr	r2, [r7, #4]
 8100b3a:	4413      	add	r3, r2
 8100b3c:	781b      	ldrb	r3, [r3, #0]
 8100b3e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8100b40:	69bb      	ldr	r3, [r7, #24]
 8100b42:	3303      	adds	r3, #3
 8100b44:	687a      	ldr	r2, [r7, #4]
 8100b46:	4413      	add	r3, r2
 8100b48:	781b      	ldrb	r3, [r3, #0]
 8100b4a:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8100b4c:	69fb      	ldr	r3, [r7, #28]
 8100b4e:	f003 0303 	and.w	r3, r3, #3
 8100b52:	2b00      	cmp	r3, #0
 8100b54:	d125      	bne.n	8100ba2 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8100b56:	7b3b      	ldrb	r3, [r7, #12]
 8100b58:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8100b5a:	7b7b      	ldrb	r3, [r7, #13]
 8100b5c:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8100b5e:	7bbb      	ldrb	r3, [r7, #14]
 8100b60:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8100b62:	7bfb      	ldrb	r3, [r7, #15]
 8100b64:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8100b66:	7dfb      	ldrb	r3, [r7, #23]
 8100b68:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8100b6a:	7b3b      	ldrb	r3, [r7, #12]
 8100b6c:	461a      	mov	r2, r3
 8100b6e:	4b30      	ldr	r3, [pc, #192]	@ (8100c30 <KeyExpansion+0x198>)
 8100b70:	5c9b      	ldrb	r3, [r3, r2]
 8100b72:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8100b74:	7b7b      	ldrb	r3, [r7, #13]
 8100b76:	461a      	mov	r2, r3
 8100b78:	4b2d      	ldr	r3, [pc, #180]	@ (8100c30 <KeyExpansion+0x198>)
 8100b7a:	5c9b      	ldrb	r3, [r3, r2]
 8100b7c:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8100b7e:	7bbb      	ldrb	r3, [r7, #14]
 8100b80:	461a      	mov	r2, r3
 8100b82:	4b2b      	ldr	r3, [pc, #172]	@ (8100c30 <KeyExpansion+0x198>)
 8100b84:	5c9b      	ldrb	r3, [r3, r2]
 8100b86:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8100b88:	7bfb      	ldrb	r3, [r7, #15]
 8100b8a:	461a      	mov	r2, r3
 8100b8c:	4b28      	ldr	r3, [pc, #160]	@ (8100c30 <KeyExpansion+0x198>)
 8100b8e:	5c9b      	ldrb	r3, [r3, r2]
 8100b90:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8100b92:	7b3a      	ldrb	r2, [r7, #12]
 8100b94:	69fb      	ldr	r3, [r7, #28]
 8100b96:	089b      	lsrs	r3, r3, #2
 8100b98:	4926      	ldr	r1, [pc, #152]	@ (8100c34 <KeyExpansion+0x19c>)
 8100b9a:	5ccb      	ldrb	r3, [r1, r3]
 8100b9c:	4053      	eors	r3, r2
 8100b9e:	b2db      	uxtb	r3, r3
 8100ba0:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8100ba2:	69fb      	ldr	r3, [r7, #28]
 8100ba4:	009b      	lsls	r3, r3, #2
 8100ba6:	613b      	str	r3, [r7, #16]
 8100ba8:	69fb      	ldr	r3, [r7, #28]
 8100baa:	3b04      	subs	r3, #4
 8100bac:	009b      	lsls	r3, r3, #2
 8100bae:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8100bb0:	687a      	ldr	r2, [r7, #4]
 8100bb2:	69bb      	ldr	r3, [r7, #24]
 8100bb4:	4413      	add	r3, r2
 8100bb6:	7819      	ldrb	r1, [r3, #0]
 8100bb8:	7b3a      	ldrb	r2, [r7, #12]
 8100bba:	6878      	ldr	r0, [r7, #4]
 8100bbc:	693b      	ldr	r3, [r7, #16]
 8100bbe:	4403      	add	r3, r0
 8100bc0:	404a      	eors	r2, r1
 8100bc2:	b2d2      	uxtb	r2, r2
 8100bc4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8100bc6:	69bb      	ldr	r3, [r7, #24]
 8100bc8:	3301      	adds	r3, #1
 8100bca:	687a      	ldr	r2, [r7, #4]
 8100bcc:	4413      	add	r3, r2
 8100bce:	7819      	ldrb	r1, [r3, #0]
 8100bd0:	7b7a      	ldrb	r2, [r7, #13]
 8100bd2:	693b      	ldr	r3, [r7, #16]
 8100bd4:	3301      	adds	r3, #1
 8100bd6:	6878      	ldr	r0, [r7, #4]
 8100bd8:	4403      	add	r3, r0
 8100bda:	404a      	eors	r2, r1
 8100bdc:	b2d2      	uxtb	r2, r2
 8100bde:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8100be0:	69bb      	ldr	r3, [r7, #24]
 8100be2:	3302      	adds	r3, #2
 8100be4:	687a      	ldr	r2, [r7, #4]
 8100be6:	4413      	add	r3, r2
 8100be8:	7819      	ldrb	r1, [r3, #0]
 8100bea:	7bba      	ldrb	r2, [r7, #14]
 8100bec:	693b      	ldr	r3, [r7, #16]
 8100bee:	3302      	adds	r3, #2
 8100bf0:	6878      	ldr	r0, [r7, #4]
 8100bf2:	4403      	add	r3, r0
 8100bf4:	404a      	eors	r2, r1
 8100bf6:	b2d2      	uxtb	r2, r2
 8100bf8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8100bfa:	69bb      	ldr	r3, [r7, #24]
 8100bfc:	3303      	adds	r3, #3
 8100bfe:	687a      	ldr	r2, [r7, #4]
 8100c00:	4413      	add	r3, r2
 8100c02:	7819      	ldrb	r1, [r3, #0]
 8100c04:	7bfa      	ldrb	r2, [r7, #15]
 8100c06:	693b      	ldr	r3, [r7, #16]
 8100c08:	3303      	adds	r3, #3
 8100c0a:	6878      	ldr	r0, [r7, #4]
 8100c0c:	4403      	add	r3, r0
 8100c0e:	404a      	eors	r2, r1
 8100c10:	b2d2      	uxtb	r2, r2
 8100c12:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8100c14:	69fb      	ldr	r3, [r7, #28]
 8100c16:	3301      	adds	r3, #1
 8100c18:	61fb      	str	r3, [r7, #28]
 8100c1a:	69fb      	ldr	r3, [r7, #28]
 8100c1c:	2b2b      	cmp	r3, #43	@ 0x2b
 8100c1e:	f67f af7a 	bls.w	8100b16 <KeyExpansion+0x7e>
  }
}
 8100c22:	bf00      	nop
 8100c24:	bf00      	nop
 8100c26:	3724      	adds	r7, #36	@ 0x24
 8100c28:	46bd      	mov	sp, r7
 8100c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c2e:	4770      	bx	lr
 8100c30:	081120a4 	.word	0x081120a4
 8100c34:	081121a4 	.word	0x081121a4

08100c38 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8100c38:	b580      	push	{r7, lr}
 8100c3a:	b084      	sub	sp, #16
 8100c3c:	af00      	add	r7, sp, #0
 8100c3e:	60f8      	str	r0, [r7, #12]
 8100c40:	60b9      	str	r1, [r7, #8]
 8100c42:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8100c44:	68fb      	ldr	r3, [r7, #12]
 8100c46:	68b9      	ldr	r1, [r7, #8]
 8100c48:	4618      	mov	r0, r3
 8100c4a:	f7ff ff25 	bl	8100a98 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8100c4e:	68fb      	ldr	r3, [r7, #12]
 8100c50:	33b0      	adds	r3, #176	@ 0xb0
 8100c52:	2210      	movs	r2, #16
 8100c54:	6879      	ldr	r1, [r7, #4]
 8100c56:	4618      	mov	r0, r3
 8100c58:	f010 f96f 	bl	8110f3a <memcpy>
}
 8100c5c:	bf00      	nop
 8100c5e:	3710      	adds	r7, #16
 8100c60:	46bd      	mov	sp, r7
 8100c62:	bd80      	pop	{r7, pc}

08100c64 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8100c64:	b480      	push	{r7}
 8100c66:	b087      	sub	sp, #28
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	4603      	mov	r3, r0
 8100c6c:	60b9      	str	r1, [r7, #8]
 8100c6e:	607a      	str	r2, [r7, #4]
 8100c70:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8100c72:	2300      	movs	r3, #0
 8100c74:	75fb      	strb	r3, [r7, #23]
 8100c76:	e027      	b.n	8100cc8 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8100c78:	2300      	movs	r3, #0
 8100c7a:	75bb      	strb	r3, [r7, #22]
 8100c7c:	e01e      	b.n	8100cbc <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8100c7e:	7dfa      	ldrb	r2, [r7, #23]
 8100c80:	7dbb      	ldrb	r3, [r7, #22]
 8100c82:	68b9      	ldr	r1, [r7, #8]
 8100c84:	0092      	lsls	r2, r2, #2
 8100c86:	440a      	add	r2, r1
 8100c88:	4413      	add	r3, r2
 8100c8a:	7818      	ldrb	r0, [r3, #0]
 8100c8c:	7bfb      	ldrb	r3, [r7, #15]
 8100c8e:	009a      	lsls	r2, r3, #2
 8100c90:	7dfb      	ldrb	r3, [r7, #23]
 8100c92:	4413      	add	r3, r2
 8100c94:	009a      	lsls	r2, r3, #2
 8100c96:	7dbb      	ldrb	r3, [r7, #22]
 8100c98:	4413      	add	r3, r2
 8100c9a:	461a      	mov	r2, r3
 8100c9c:	687b      	ldr	r3, [r7, #4]
 8100c9e:	4413      	add	r3, r2
 8100ca0:	7819      	ldrb	r1, [r3, #0]
 8100ca2:	7dfa      	ldrb	r2, [r7, #23]
 8100ca4:	7dbb      	ldrb	r3, [r7, #22]
 8100ca6:	4041      	eors	r1, r0
 8100ca8:	b2c8      	uxtb	r0, r1
 8100caa:	68b9      	ldr	r1, [r7, #8]
 8100cac:	0092      	lsls	r2, r2, #2
 8100cae:	440a      	add	r2, r1
 8100cb0:	4413      	add	r3, r2
 8100cb2:	4602      	mov	r2, r0
 8100cb4:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8100cb6:	7dbb      	ldrb	r3, [r7, #22]
 8100cb8:	3301      	adds	r3, #1
 8100cba:	75bb      	strb	r3, [r7, #22]
 8100cbc:	7dbb      	ldrb	r3, [r7, #22]
 8100cbe:	2b03      	cmp	r3, #3
 8100cc0:	d9dd      	bls.n	8100c7e <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8100cc2:	7dfb      	ldrb	r3, [r7, #23]
 8100cc4:	3301      	adds	r3, #1
 8100cc6:	75fb      	strb	r3, [r7, #23]
 8100cc8:	7dfb      	ldrb	r3, [r7, #23]
 8100cca:	2b03      	cmp	r3, #3
 8100ccc:	d9d4      	bls.n	8100c78 <AddRoundKey+0x14>
    }
  }
}
 8100cce:	bf00      	nop
 8100cd0:	bf00      	nop
 8100cd2:	371c      	adds	r7, #28
 8100cd4:	46bd      	mov	sp, r7
 8100cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cda:	4770      	bx	lr

08100cdc <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8100cdc:	b480      	push	{r7}
 8100cde:	b085      	sub	sp, #20
 8100ce0:	af00      	add	r7, sp, #0
 8100ce2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8100ce4:	2300      	movs	r3, #0
 8100ce6:	73fb      	strb	r3, [r7, #15]
 8100ce8:	e01d      	b.n	8100d26 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8100cea:	2300      	movs	r3, #0
 8100cec:	73bb      	strb	r3, [r7, #14]
 8100cee:	e014      	b.n	8100d1a <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8100cf0:	7bba      	ldrb	r2, [r7, #14]
 8100cf2:	7bfb      	ldrb	r3, [r7, #15]
 8100cf4:	6879      	ldr	r1, [r7, #4]
 8100cf6:	0092      	lsls	r2, r2, #2
 8100cf8:	440a      	add	r2, r1
 8100cfa:	4413      	add	r3, r2
 8100cfc:	781b      	ldrb	r3, [r3, #0]
 8100cfe:	4618      	mov	r0, r3
 8100d00:	7bba      	ldrb	r2, [r7, #14]
 8100d02:	7bfb      	ldrb	r3, [r7, #15]
 8100d04:	490d      	ldr	r1, [pc, #52]	@ (8100d3c <SubBytes+0x60>)
 8100d06:	5c08      	ldrb	r0, [r1, r0]
 8100d08:	6879      	ldr	r1, [r7, #4]
 8100d0a:	0092      	lsls	r2, r2, #2
 8100d0c:	440a      	add	r2, r1
 8100d0e:	4413      	add	r3, r2
 8100d10:	4602      	mov	r2, r0
 8100d12:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8100d14:	7bbb      	ldrb	r3, [r7, #14]
 8100d16:	3301      	adds	r3, #1
 8100d18:	73bb      	strb	r3, [r7, #14]
 8100d1a:	7bbb      	ldrb	r3, [r7, #14]
 8100d1c:	2b03      	cmp	r3, #3
 8100d1e:	d9e7      	bls.n	8100cf0 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8100d20:	7bfb      	ldrb	r3, [r7, #15]
 8100d22:	3301      	adds	r3, #1
 8100d24:	73fb      	strb	r3, [r7, #15]
 8100d26:	7bfb      	ldrb	r3, [r7, #15]
 8100d28:	2b03      	cmp	r3, #3
 8100d2a:	d9de      	bls.n	8100cea <SubBytes+0xe>
    }
  }
}
 8100d2c:	bf00      	nop
 8100d2e:	bf00      	nop
 8100d30:	3714      	adds	r7, #20
 8100d32:	46bd      	mov	sp, r7
 8100d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d38:	4770      	bx	lr
 8100d3a:	bf00      	nop
 8100d3c:	081120a4 	.word	0x081120a4

08100d40 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8100d40:	b480      	push	{r7}
 8100d42:	b085      	sub	sp, #20
 8100d44:	af00      	add	r7, sp, #0
 8100d46:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8100d48:	687b      	ldr	r3, [r7, #4]
 8100d4a:	785b      	ldrb	r3, [r3, #1]
 8100d4c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8100d4e:	687b      	ldr	r3, [r7, #4]
 8100d50:	795a      	ldrb	r2, [r3, #5]
 8100d52:	687b      	ldr	r3, [r7, #4]
 8100d54:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8100d56:	687b      	ldr	r3, [r7, #4]
 8100d58:	7a5a      	ldrb	r2, [r3, #9]
 8100d5a:	687b      	ldr	r3, [r7, #4]
 8100d5c:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	7b5a      	ldrb	r2, [r3, #13]
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	7bfa      	ldrb	r2, [r7, #15]
 8100d6a:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	789b      	ldrb	r3, [r3, #2]
 8100d70:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	7a9a      	ldrb	r2, [r3, #10]
 8100d76:	687b      	ldr	r3, [r7, #4]
 8100d78:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8100d7a:	687b      	ldr	r3, [r7, #4]
 8100d7c:	7bfa      	ldrb	r2, [r7, #15]
 8100d7e:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8100d80:	687b      	ldr	r3, [r7, #4]
 8100d82:	799b      	ldrb	r3, [r3, #6]
 8100d84:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8100d86:	687b      	ldr	r3, [r7, #4]
 8100d88:	7b9a      	ldrb	r2, [r3, #14]
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8100d8e:	687b      	ldr	r3, [r7, #4]
 8100d90:	7bfa      	ldrb	r2, [r7, #15]
 8100d92:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8100d94:	687b      	ldr	r3, [r7, #4]
 8100d96:	78db      	ldrb	r3, [r3, #3]
 8100d98:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	7bda      	ldrb	r2, [r3, #15]
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	7ada      	ldrb	r2, [r3, #11]
 8100da6:	687b      	ldr	r3, [r7, #4]
 8100da8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8100daa:	687b      	ldr	r3, [r7, #4]
 8100dac:	79da      	ldrb	r2, [r3, #7]
 8100dae:	687b      	ldr	r3, [r7, #4]
 8100db0:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8100db2:	687b      	ldr	r3, [r7, #4]
 8100db4:	7bfa      	ldrb	r2, [r7, #15]
 8100db6:	71da      	strb	r2, [r3, #7]
}
 8100db8:	bf00      	nop
 8100dba:	3714      	adds	r7, #20
 8100dbc:	46bd      	mov	sp, r7
 8100dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc2:	4770      	bx	lr

08100dc4 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8100dc4:	b480      	push	{r7}
 8100dc6:	b083      	sub	sp, #12
 8100dc8:	af00      	add	r7, sp, #0
 8100dca:	4603      	mov	r3, r0
 8100dcc:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8100dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100dd2:	005b      	lsls	r3, r3, #1
 8100dd4:	b25a      	sxtb	r2, r3
 8100dd6:	79fb      	ldrb	r3, [r7, #7]
 8100dd8:	09db      	lsrs	r3, r3, #7
 8100dda:	b2db      	uxtb	r3, r3
 8100ddc:	b25b      	sxtb	r3, r3
 8100dde:	4619      	mov	r1, r3
 8100de0:	0049      	lsls	r1, r1, #1
 8100de2:	440b      	add	r3, r1
 8100de4:	4619      	mov	r1, r3
 8100de6:	00c8      	lsls	r0, r1, #3
 8100de8:	4619      	mov	r1, r3
 8100dea:	4603      	mov	r3, r0
 8100dec:	440b      	add	r3, r1
 8100dee:	b25b      	sxtb	r3, r3
 8100df0:	4053      	eors	r3, r2
 8100df2:	b25b      	sxtb	r3, r3
 8100df4:	b2db      	uxtb	r3, r3
}
 8100df6:	4618      	mov	r0, r3
 8100df8:	370c      	adds	r7, #12
 8100dfa:	46bd      	mov	sp, r7
 8100dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e00:	4770      	bx	lr

08100e02 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8100e02:	b580      	push	{r7, lr}
 8100e04:	b084      	sub	sp, #16
 8100e06:	af00      	add	r7, sp, #0
 8100e08:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8100e0a:	2300      	movs	r3, #0
 8100e0c:	73fb      	strb	r3, [r7, #15]
 8100e0e:	e0a4      	b.n	8100f5a <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 8100e10:	7bfa      	ldrb	r2, [r7, #15]
 8100e12:	687b      	ldr	r3, [r7, #4]
 8100e14:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8100e18:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8100e1a:	7bfa      	ldrb	r2, [r7, #15]
 8100e1c:	687b      	ldr	r3, [r7, #4]
 8100e1e:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8100e22:	7bfb      	ldrb	r3, [r7, #15]
 8100e24:	6879      	ldr	r1, [r7, #4]
 8100e26:	009b      	lsls	r3, r3, #2
 8100e28:	440b      	add	r3, r1
 8100e2a:	785b      	ldrb	r3, [r3, #1]
 8100e2c:	4053      	eors	r3, r2
 8100e2e:	b2da      	uxtb	r2, r3
 8100e30:	7bfb      	ldrb	r3, [r7, #15]
 8100e32:	6879      	ldr	r1, [r7, #4]
 8100e34:	009b      	lsls	r3, r3, #2
 8100e36:	440b      	add	r3, r1
 8100e38:	789b      	ldrb	r3, [r3, #2]
 8100e3a:	4053      	eors	r3, r2
 8100e3c:	b2da      	uxtb	r2, r3
 8100e3e:	7bfb      	ldrb	r3, [r7, #15]
 8100e40:	6879      	ldr	r1, [r7, #4]
 8100e42:	009b      	lsls	r3, r3, #2
 8100e44:	440b      	add	r3, r1
 8100e46:	78db      	ldrb	r3, [r3, #3]
 8100e48:	4053      	eors	r3, r2
 8100e4a:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8100e4c:	7bfa      	ldrb	r2, [r7, #15]
 8100e4e:	687b      	ldr	r3, [r7, #4]
 8100e50:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8100e54:	7bfb      	ldrb	r3, [r7, #15]
 8100e56:	6879      	ldr	r1, [r7, #4]
 8100e58:	009b      	lsls	r3, r3, #2
 8100e5a:	440b      	add	r3, r1
 8100e5c:	785b      	ldrb	r3, [r3, #1]
 8100e5e:	4053      	eors	r3, r2
 8100e60:	733b      	strb	r3, [r7, #12]
 8100e62:	7b3b      	ldrb	r3, [r7, #12]
 8100e64:	4618      	mov	r0, r3
 8100e66:	f7ff ffad 	bl	8100dc4 <xtime>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	733b      	strb	r3, [r7, #12]
 8100e6e:	7bfa      	ldrb	r2, [r7, #15]
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8100e76:	7b3a      	ldrb	r2, [r7, #12]
 8100e78:	7b7b      	ldrb	r3, [r7, #13]
 8100e7a:	4053      	eors	r3, r2
 8100e7c:	b2db      	uxtb	r3, r3
 8100e7e:	7bfa      	ldrb	r2, [r7, #15]
 8100e80:	404b      	eors	r3, r1
 8100e82:	b2d9      	uxtb	r1, r3
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8100e8a:	7bfb      	ldrb	r3, [r7, #15]
 8100e8c:	687a      	ldr	r2, [r7, #4]
 8100e8e:	009b      	lsls	r3, r3, #2
 8100e90:	4413      	add	r3, r2
 8100e92:	785a      	ldrb	r2, [r3, #1]
 8100e94:	7bfb      	ldrb	r3, [r7, #15]
 8100e96:	6879      	ldr	r1, [r7, #4]
 8100e98:	009b      	lsls	r3, r3, #2
 8100e9a:	440b      	add	r3, r1
 8100e9c:	789b      	ldrb	r3, [r3, #2]
 8100e9e:	4053      	eors	r3, r2
 8100ea0:	733b      	strb	r3, [r7, #12]
 8100ea2:	7b3b      	ldrb	r3, [r7, #12]
 8100ea4:	4618      	mov	r0, r3
 8100ea6:	f7ff ff8d 	bl	8100dc4 <xtime>
 8100eaa:	4603      	mov	r3, r0
 8100eac:	733b      	strb	r3, [r7, #12]
 8100eae:	7bfb      	ldrb	r3, [r7, #15]
 8100eb0:	687a      	ldr	r2, [r7, #4]
 8100eb2:	009b      	lsls	r3, r3, #2
 8100eb4:	4413      	add	r3, r2
 8100eb6:	7859      	ldrb	r1, [r3, #1]
 8100eb8:	7b3a      	ldrb	r2, [r7, #12]
 8100eba:	7b7b      	ldrb	r3, [r7, #13]
 8100ebc:	4053      	eors	r3, r2
 8100ebe:	b2da      	uxtb	r2, r3
 8100ec0:	7bfb      	ldrb	r3, [r7, #15]
 8100ec2:	404a      	eors	r2, r1
 8100ec4:	b2d1      	uxtb	r1, r2
 8100ec6:	687a      	ldr	r2, [r7, #4]
 8100ec8:	009b      	lsls	r3, r3, #2
 8100eca:	4413      	add	r3, r2
 8100ecc:	460a      	mov	r2, r1
 8100ece:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8100ed0:	7bfb      	ldrb	r3, [r7, #15]
 8100ed2:	687a      	ldr	r2, [r7, #4]
 8100ed4:	009b      	lsls	r3, r3, #2
 8100ed6:	4413      	add	r3, r2
 8100ed8:	789a      	ldrb	r2, [r3, #2]
 8100eda:	7bfb      	ldrb	r3, [r7, #15]
 8100edc:	6879      	ldr	r1, [r7, #4]
 8100ede:	009b      	lsls	r3, r3, #2
 8100ee0:	440b      	add	r3, r1
 8100ee2:	78db      	ldrb	r3, [r3, #3]
 8100ee4:	4053      	eors	r3, r2
 8100ee6:	733b      	strb	r3, [r7, #12]
 8100ee8:	7b3b      	ldrb	r3, [r7, #12]
 8100eea:	4618      	mov	r0, r3
 8100eec:	f7ff ff6a 	bl	8100dc4 <xtime>
 8100ef0:	4603      	mov	r3, r0
 8100ef2:	733b      	strb	r3, [r7, #12]
 8100ef4:	7bfb      	ldrb	r3, [r7, #15]
 8100ef6:	687a      	ldr	r2, [r7, #4]
 8100ef8:	009b      	lsls	r3, r3, #2
 8100efa:	4413      	add	r3, r2
 8100efc:	7899      	ldrb	r1, [r3, #2]
 8100efe:	7b3a      	ldrb	r2, [r7, #12]
 8100f00:	7b7b      	ldrb	r3, [r7, #13]
 8100f02:	4053      	eors	r3, r2
 8100f04:	b2da      	uxtb	r2, r3
 8100f06:	7bfb      	ldrb	r3, [r7, #15]
 8100f08:	404a      	eors	r2, r1
 8100f0a:	b2d1      	uxtb	r1, r2
 8100f0c:	687a      	ldr	r2, [r7, #4]
 8100f0e:	009b      	lsls	r3, r3, #2
 8100f10:	4413      	add	r3, r2
 8100f12:	460a      	mov	r2, r1
 8100f14:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8100f16:	7bfb      	ldrb	r3, [r7, #15]
 8100f18:	687a      	ldr	r2, [r7, #4]
 8100f1a:	009b      	lsls	r3, r3, #2
 8100f1c:	4413      	add	r3, r2
 8100f1e:	78da      	ldrb	r2, [r3, #3]
 8100f20:	7bbb      	ldrb	r3, [r7, #14]
 8100f22:	4053      	eors	r3, r2
 8100f24:	733b      	strb	r3, [r7, #12]
 8100f26:	7b3b      	ldrb	r3, [r7, #12]
 8100f28:	4618      	mov	r0, r3
 8100f2a:	f7ff ff4b 	bl	8100dc4 <xtime>
 8100f2e:	4603      	mov	r3, r0
 8100f30:	733b      	strb	r3, [r7, #12]
 8100f32:	7bfb      	ldrb	r3, [r7, #15]
 8100f34:	687a      	ldr	r2, [r7, #4]
 8100f36:	009b      	lsls	r3, r3, #2
 8100f38:	4413      	add	r3, r2
 8100f3a:	78d9      	ldrb	r1, [r3, #3]
 8100f3c:	7b3a      	ldrb	r2, [r7, #12]
 8100f3e:	7b7b      	ldrb	r3, [r7, #13]
 8100f40:	4053      	eors	r3, r2
 8100f42:	b2da      	uxtb	r2, r3
 8100f44:	7bfb      	ldrb	r3, [r7, #15]
 8100f46:	404a      	eors	r2, r1
 8100f48:	b2d1      	uxtb	r1, r2
 8100f4a:	687a      	ldr	r2, [r7, #4]
 8100f4c:	009b      	lsls	r3, r3, #2
 8100f4e:	4413      	add	r3, r2
 8100f50:	460a      	mov	r2, r1
 8100f52:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8100f54:	7bfb      	ldrb	r3, [r7, #15]
 8100f56:	3301      	adds	r3, #1
 8100f58:	73fb      	strb	r3, [r7, #15]
 8100f5a:	7bfb      	ldrb	r3, [r7, #15]
 8100f5c:	2b03      	cmp	r3, #3
 8100f5e:	f67f af57 	bls.w	8100e10 <MixColumns+0xe>
  }
}
 8100f62:	bf00      	nop
 8100f64:	bf00      	nop
 8100f66:	3710      	adds	r7, #16
 8100f68:	46bd      	mov	sp, r7
 8100f6a:	bd80      	pop	{r7, pc}

08100f6c <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8100f6c:	b580      	push	{r7, lr}
 8100f6e:	b084      	sub	sp, #16
 8100f70:	af00      	add	r7, sp, #0
 8100f72:	6078      	str	r0, [r7, #4]
 8100f74:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8100f76:	2300      	movs	r3, #0
 8100f78:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8100f7a:	683a      	ldr	r2, [r7, #0]
 8100f7c:	6879      	ldr	r1, [r7, #4]
 8100f7e:	2000      	movs	r0, #0
 8100f80:	f7ff fe70 	bl	8100c64 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8100f84:	2301      	movs	r3, #1
 8100f86:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8100f88:	6878      	ldr	r0, [r7, #4]
 8100f8a:	f7ff fea7 	bl	8100cdc <SubBytes>
    ShiftRows(state);
 8100f8e:	6878      	ldr	r0, [r7, #4]
 8100f90:	f7ff fed6 	bl	8100d40 <ShiftRows>
    if (round == Nr) {
 8100f94:	7bfb      	ldrb	r3, [r7, #15]
 8100f96:	2b0a      	cmp	r3, #10
 8100f98:	d00c      	beq.n	8100fb4 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8100f9a:	6878      	ldr	r0, [r7, #4]
 8100f9c:	f7ff ff31 	bl	8100e02 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8100fa0:	7bfb      	ldrb	r3, [r7, #15]
 8100fa2:	683a      	ldr	r2, [r7, #0]
 8100fa4:	6879      	ldr	r1, [r7, #4]
 8100fa6:	4618      	mov	r0, r3
 8100fa8:	f7ff fe5c 	bl	8100c64 <AddRoundKey>
  for (round = 1; ; ++round)
 8100fac:	7bfb      	ldrb	r3, [r7, #15]
 8100fae:	3301      	adds	r3, #1
 8100fb0:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8100fb2:	e7e9      	b.n	8100f88 <Cipher+0x1c>
      break;
 8100fb4:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8100fb6:	683a      	ldr	r2, [r7, #0]
 8100fb8:	6879      	ldr	r1, [r7, #4]
 8100fba:	200a      	movs	r0, #10
 8100fbc:	f7ff fe52 	bl	8100c64 <AddRoundKey>
}
 8100fc0:	bf00      	nop
 8100fc2:	3710      	adds	r7, #16
 8100fc4:	46bd      	mov	sp, r7
 8100fc6:	bd80      	pop	{r7, pc}

08100fc8 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8100fc8:	b590      	push	{r4, r7, lr}
 8100fca:	b08b      	sub	sp, #44	@ 0x2c
 8100fcc:	af00      	add	r7, sp, #0
 8100fce:	60f8      	str	r0, [r7, #12]
 8100fd0:	60b9      	str	r1, [r7, #8]
 8100fd2:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];
  
  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8100fd4:	2300      	movs	r3, #0
 8100fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8100fd8:	2310      	movs	r3, #16
 8100fda:	623b      	str	r3, [r7, #32]
 8100fdc:	e04e      	b.n	810107c <AES_CTR_xcrypt_buffer+0xb4>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8100fde:	6a3b      	ldr	r3, [r7, #32]
 8100fe0:	2b10      	cmp	r3, #16
 8100fe2:	d136      	bne.n	8101052 <AES_CTR_xcrypt_buffer+0x8a>
    {
      
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8100fe4:	68fb      	ldr	r3, [r7, #12]
 8100fe6:	33b0      	adds	r3, #176	@ 0xb0
 8100fe8:	f107 0410 	add.w	r4, r7, #16
 8100fec:	6818      	ldr	r0, [r3, #0]
 8100fee:	6859      	ldr	r1, [r3, #4]
 8100ff0:	689a      	ldr	r2, [r3, #8]
 8100ff2:	68db      	ldr	r3, [r3, #12]
 8100ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      Cipher((state_t*)buffer,ctx->RoundKey);
 8100ff6:	68fa      	ldr	r2, [r7, #12]
 8100ff8:	f107 0310 	add.w	r3, r7, #16
 8100ffc:	4611      	mov	r1, r2
 8100ffe:	4618      	mov	r0, r3
 8101000:	f7ff ffb4 	bl	8100f6c <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8101004:	230f      	movs	r3, #15
 8101006:	623b      	str	r3, [r7, #32]
 8101008:	e01e      	b.n	8101048 <AES_CTR_xcrypt_buffer+0x80>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 810100a:	68fa      	ldr	r2, [r7, #12]
 810100c:	6a3b      	ldr	r3, [r7, #32]
 810100e:	4413      	add	r3, r2
 8101010:	33b0      	adds	r3, #176	@ 0xb0
 8101012:	781b      	ldrb	r3, [r3, #0]
 8101014:	2bff      	cmp	r3, #255	@ 0xff
 8101016:	d106      	bne.n	8101026 <AES_CTR_xcrypt_buffer+0x5e>
	{
          ctx->Iv[bi] = 0;
 8101018:	68fa      	ldr	r2, [r7, #12]
 810101a:	6a3b      	ldr	r3, [r7, #32]
 810101c:	4413      	add	r3, r2
 810101e:	33b0      	adds	r3, #176	@ 0xb0
 8101020:	2200      	movs	r2, #0
 8101022:	701a      	strb	r2, [r3, #0]
          continue;
 8101024:	e00d      	b.n	8101042 <AES_CTR_xcrypt_buffer+0x7a>
        } 
        ctx->Iv[bi] += 1;
 8101026:	68fa      	ldr	r2, [r7, #12]
 8101028:	6a3b      	ldr	r3, [r7, #32]
 810102a:	4413      	add	r3, r2
 810102c:	33b0      	adds	r3, #176	@ 0xb0
 810102e:	781b      	ldrb	r3, [r3, #0]
 8101030:	3301      	adds	r3, #1
 8101032:	b2d9      	uxtb	r1, r3
 8101034:	68fa      	ldr	r2, [r7, #12]
 8101036:	6a3b      	ldr	r3, [r7, #32]
 8101038:	4413      	add	r3, r2
 810103a:	33b0      	adds	r3, #176	@ 0xb0
 810103c:	460a      	mov	r2, r1
 810103e:	701a      	strb	r2, [r3, #0]
        break;   
 8101040:	e005      	b.n	810104e <AES_CTR_xcrypt_buffer+0x86>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8101042:	6a3b      	ldr	r3, [r7, #32]
 8101044:	3b01      	subs	r3, #1
 8101046:	623b      	str	r3, [r7, #32]
 8101048:	6a3b      	ldr	r3, [r7, #32]
 810104a:	2b00      	cmp	r3, #0
 810104c:	dadd      	bge.n	810100a <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 810104e:	2300      	movs	r3, #0
 8101050:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8101052:	68ba      	ldr	r2, [r7, #8]
 8101054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101056:	4413      	add	r3, r2
 8101058:	7819      	ldrb	r1, [r3, #0]
 810105a:	f107 0210 	add.w	r2, r7, #16
 810105e:	6a3b      	ldr	r3, [r7, #32]
 8101060:	4413      	add	r3, r2
 8101062:	781a      	ldrb	r2, [r3, #0]
 8101064:	68b8      	ldr	r0, [r7, #8]
 8101066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101068:	4403      	add	r3, r0
 810106a:	404a      	eors	r2, r1
 810106c:	b2d2      	uxtb	r2, r2
 810106e:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8101070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101072:	3301      	adds	r3, #1
 8101074:	627b      	str	r3, [r7, #36]	@ 0x24
 8101076:	6a3b      	ldr	r3, [r7, #32]
 8101078:	3301      	adds	r3, #1
 810107a:	623b      	str	r3, [r7, #32]
 810107c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	429a      	cmp	r2, r3
 8101082:	d3ac      	bcc.n	8100fde <AES_CTR_xcrypt_buffer+0x16>
  }
}
 8101084:	bf00      	nop
 8101086:	bf00      	nop
 8101088:	372c      	adds	r7, #44	@ 0x2c
 810108a:	46bd      	mov	sp, r7
 810108c:	bd90      	pop	{r4, r7, pc}
	...

08101090 <secure_uart_send>:
#define ENABLE_AES_UART 1
static const uint8_t kAesKey128[16] = { 0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c };
static uint32_t g_uart_iv_counter = 1;

static void secure_uart_send(const uint8_t* data, uint16_t len)
{
 8101090:	b580      	push	{r7, lr}
 8101092:	b0fa      	sub	sp, #488	@ 0x1e8
 8101094:	af00      	add	r7, sp, #0
 8101096:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 810109a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 810109e:	6018      	str	r0, [r3, #0]
 81010a0:	460a      	mov	r2, r1
 81010a2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 81010a6:	f5a3 73f3 	sub.w	r3, r3, #486	@ 0x1e6
 81010aa:	801a      	strh	r2, [r3, #0]
#if ENABLE_AES_UART
  struct AES_ctx ctx;
  uint8_t iv[AES_BLOCKLEN] = {0};
 81010ac:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 81010b0:	2200      	movs	r2, #0
 81010b2:	601a      	str	r2, [r3, #0]
 81010b4:	605a      	str	r2, [r3, #4]
 81010b6:	609a      	str	r2, [r3, #8]
 81010b8:	60da      	str	r2, [r3, #12]
  // Simple monotonically increasing IV (last 4 bytes). Ensure ESP32 mirrors this.
  iv[12] = (uint8_t)((g_uart_iv_counter >> 24) & 0xFF);
 81010ba:	4b3e      	ldr	r3, [pc, #248]	@ (81011b4 <secure_uart_send+0x124>)
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	0e1b      	lsrs	r3, r3, #24
 81010c0:	b2db      	uxtb	r3, r3
 81010c2:	f887 3120 	strb.w	r3, [r7, #288]	@ 0x120
  iv[13] = (uint8_t)((g_uart_iv_counter >> 16) & 0xFF);
 81010c6:	4b3b      	ldr	r3, [pc, #236]	@ (81011b4 <secure_uart_send+0x124>)
 81010c8:	681b      	ldr	r3, [r3, #0]
 81010ca:	0c1b      	lsrs	r3, r3, #16
 81010cc:	b2db      	uxtb	r3, r3
 81010ce:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
  iv[14] = (uint8_t)((g_uart_iv_counter >> 8) & 0xFF);
 81010d2:	4b38      	ldr	r3, [pc, #224]	@ (81011b4 <secure_uart_send+0x124>)
 81010d4:	681b      	ldr	r3, [r3, #0]
 81010d6:	0a1b      	lsrs	r3, r3, #8
 81010d8:	b2db      	uxtb	r3, r3
 81010da:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
  iv[15] = (uint8_t)(g_uart_iv_counter & 0xFF);
 81010de:	4b35      	ldr	r3, [pc, #212]	@ (81011b4 <secure_uart_send+0x124>)
 81010e0:	681b      	ldr	r3, [r3, #0]
 81010e2:	b2db      	uxtb	r3, r3
 81010e4:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123

  // Prepare frame: [0xAA 0x55][IV(16)][LEN(2)][CIPHERTEXT]
  uint8_t header[2] = {0xAA, 0x55};
 81010e8:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 81010ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  uint8_t len_be[2] = { (uint8_t)(len >> 8), (uint8_t)(len & 0xFF) };
 81010f0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 81010f4:	f5a3 73f3 	sub.w	r3, r3, #486	@ 0x1e6
 81010f8:	881b      	ldrh	r3, [r3, #0]
 81010fa:	0a1b      	lsrs	r3, r3, #8
 81010fc:	b29b      	uxth	r3, r3
 81010fe:	b2db      	uxtb	r3, r3
 8101100:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8101104:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8101108:	f5a3 73f3 	sub.w	r3, r3, #486	@ 0x1e6
 810110c:	881b      	ldrh	r3, [r3, #0]
 810110e:	b2db      	uxtb	r3, r3
 8101110:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
  // Copy plaintext to a mutable buffer
  uint8_t buf[256];
  uint16_t copy_len = (len > sizeof(buf)) ? sizeof(buf) : len; // truncate if oversized
 8101114:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8101118:	f5a3 73f3 	sub.w	r3, r3, #486	@ 0x1e6
 810111c:	881b      	ldrh	r3, [r3, #0]
 810111e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101122:	bf28      	it	cs
 8101124:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8101128:	f8a7 31e6 	strh.w	r3, [r7, #486]	@ 0x1e6
  memcpy(buf, data, copy_len);
 810112c:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	@ 0x1e6
 8101130:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8101134:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8101138:	f107 000c 	add.w	r0, r7, #12
 810113c:	6819      	ldr	r1, [r3, #0]
 810113e:	f00f fefc 	bl	8110f3a <memcpy>

  AES_init_ctx_iv(&ctx, kAesKey128, iv);
 8101142:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8101146:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 810114a:	491b      	ldr	r1, [pc, #108]	@ (81011b8 <secure_uart_send+0x128>)
 810114c:	4618      	mov	r0, r3
 810114e:	f7ff fd73 	bl	8100c38 <AES_init_ctx_iv>
  AES_CTR_xcrypt_buffer(&ctx, buf, copy_len);
 8101152:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	@ 0x1e6
 8101156:	f107 010c 	add.w	r1, r7, #12
 810115a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 810115e:	4618      	mov	r0, r3
 8101160:	f7ff ff32 	bl	8100fc8 <AES_CTR_xcrypt_buffer>

  HAL_UART_Transmit(&huart3, header, sizeof(header), 100);
 8101164:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101168:	2364      	movs	r3, #100	@ 0x64
 810116a:	2202      	movs	r2, #2
 810116c:	4813      	ldr	r0, [pc, #76]	@ (81011bc <secure_uart_send+0x12c>)
 810116e:	f00b f91b 	bl	810c3a8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, iv, sizeof(iv), 100);
 8101172:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8101176:	2364      	movs	r3, #100	@ 0x64
 8101178:	2210      	movs	r2, #16
 810117a:	4810      	ldr	r0, [pc, #64]	@ (81011bc <secure_uart_send+0x12c>)
 810117c:	f00b f914 	bl	810c3a8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, len_be, sizeof(len_be), 100);
 8101180:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8101184:	2364      	movs	r3, #100	@ 0x64
 8101186:	2202      	movs	r2, #2
 8101188:	480c      	ldr	r0, [pc, #48]	@ (81011bc <secure_uart_send+0x12c>)
 810118a:	f00b f90d 	bl	810c3a8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, buf, copy_len, 200);
 810118e:	f8b7 21e6 	ldrh.w	r2, [r7, #486]	@ 0x1e6
 8101192:	f107 010c 	add.w	r1, r7, #12
 8101196:	23c8      	movs	r3, #200	@ 0xc8
 8101198:	4808      	ldr	r0, [pc, #32]	@ (81011bc <secure_uart_send+0x12c>)
 810119a:	f00b f905 	bl	810c3a8 <HAL_UART_Transmit>

  g_uart_iv_counter++;
 810119e:	4b05      	ldr	r3, [pc, #20]	@ (81011b4 <secure_uart_send+0x124>)
 81011a0:	681b      	ldr	r3, [r3, #0]
 81011a2:	3301      	adds	r3, #1
 81011a4:	4a03      	ldr	r2, [pc, #12]	@ (81011b4 <secure_uart_send+0x124>)
 81011a6:	6013      	str	r3, [r2, #0]
#else
  HAL_UART_Transmit(&huart3, (uint8_t*)data, len, 200);
#endif
}
 81011a8:	bf00      	nop
 81011aa:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 81011ae:	46bd      	mov	sp, r7
 81011b0:	bd80      	pop	{r7, pc}
 81011b2:	bf00      	nop
 81011b4:	10000008 	.word	0x10000008
 81011b8:	081121d4 	.word	0x081121d4
 81011bc:	1000020c 	.word	0x1000020c

081011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81011c0:	b580      	push	{r7, lr}
 81011c2:	b08e      	sub	sp, #56	@ 0x38
 81011c4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81011c6:	4b5c      	ldr	r3, [pc, #368]	@ (8101338 <main+0x178>)
 81011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011cc:	4a5a      	ldr	r2, [pc, #360]	@ (8101338 <main+0x178>)
 81011ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011d6:	4b58      	ldr	r3, [pc, #352]	@ (8101338 <main+0x178>)
 81011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81011e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81011e4:	2001      	movs	r0, #1
 81011e6:	f006 f93b 	bl	8107460 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81011ea:	f007 fecd 	bl	8108f88 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81011ee:	2201      	movs	r2, #1
 81011f0:	2102      	movs	r1, #2
 81011f2:	2000      	movs	r0, #0
 81011f4:	f007 fe4e 	bl	8108e94 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81011f8:	4b50      	ldr	r3, [pc, #320]	@ (810133c <main+0x17c>)
 81011fa:	681b      	ldr	r3, [r3, #0]
 81011fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8101200:	2b70      	cmp	r3, #112	@ 0x70
 8101202:	d108      	bne.n	8101216 <main+0x56>
 8101204:	4b4e      	ldr	r3, [pc, #312]	@ (8101340 <main+0x180>)
 8101206:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810120a:	4a4d      	ldr	r2, [pc, #308]	@ (8101340 <main+0x180>)
 810120c:	f043 0301 	orr.w	r3, r3, #1
 8101210:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101214:	e007      	b.n	8101226 <main+0x66>
 8101216:	4b4a      	ldr	r3, [pc, #296]	@ (8101340 <main+0x180>)
 8101218:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810121c:	4a48      	ldr	r2, [pc, #288]	@ (8101340 <main+0x180>)
 810121e:	f043 0301 	orr.w	r3, r3, #1
 8101222:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101226:	f001 fbe7 	bl	81029f8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810122a:	f000 fce1 	bl	8101bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 810122e:	f000 fcbf 	bl	8101bb0 <MX_DMA_Init>
  MX_ADC1_Init();
 8101232:	f000 fb7f 	bl	8101934 <MX_ADC1_Init>
  MX_I2C1_Init();
 8101236:	f000 fbf9 	bl	8101a2c <MX_I2C1_Init>
  MX_TIM6_Init();
 810123a:	f000 fc37 	bl	8101aac <MX_TIM6_Init>
  MX_USART3_UART_Init();
 810123e:	f000 fc6b 	bl	8101b18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8101242:	f00c fe4f 	bl	810dee4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8101246:	4a3f      	ldr	r2, [pc, #252]	@ (8101344 <main+0x184>)
 8101248:	2100      	movs	r1, #0
 810124a:	483f      	ldr	r0, [pc, #252]	@ (8101348 <main+0x188>)
 810124c:	f00c fe94 	bl	810df78 <osThreadNew>
 8101250:	4603      	mov	r3, r0
 8101252:	4a3e      	ldr	r2, [pc, #248]	@ (810134c <main+0x18c>)
 8101254:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8101256:	f00c fe69 	bl	810df2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("System Initialized.\r\n");
 810125a:	483d      	ldr	r0, [pc, #244]	@ (8101350 <main+0x190>)
 810125c:	f00f fcf0 	bl	8110c40 <puts>
    printf("LM35 on PC0 (ADC1_INP10), MAX30100 on I2C1, INT PB5.\r\n");
 8101260:	483c      	ldr	r0, [pc, #240]	@ (8101354 <main+0x194>)
 8101262:	f00f fced 	bl	8110c40 <puts>

    /* Initialize MAX30100 */
    if (MAX30100_Init(&hi2c1) == HAL_OK) {
 8101266:	483c      	ldr	r0, [pc, #240]	@ (8101358 <main+0x198>)
 8101268:	f000 fe2e 	bl	8101ec8 <MAX30100_Init>
 810126c:	4603      	mov	r3, r0
 810126e:	2b00      	cmp	r3, #0
 8101270:	d110      	bne.n	8101294 <main+0xd4>
      printf("MAX30100 Initialized Successfully.\r\n");
 8101272:	483a      	ldr	r0, [pc, #232]	@ (810135c <main+0x19c>)
 8101274:	f00f fce4 	bl	8110c40 <puts>
      if (MAX30100_SetMode(MAX30100_MODE_SPO2_EN) == HAL_OK) {
 8101278:	2003      	movs	r0, #3
 810127a:	f000 ff11 	bl	81020a0 <MAX30100_SetMode>
 810127e:	4603      	mov	r3, r0
 8101280:	2b00      	cmp	r3, #0
 8101282:	d103      	bne.n	810128c <main+0xcc>
          printf("MAX30100 Mode set to SpO2/HR.\r\n");
 8101284:	4836      	ldr	r0, [pc, #216]	@ (8101360 <main+0x1a0>)
 8101286:	f00f fcdb 	bl	8110c40 <puts>
 810128a:	e008      	b.n	810129e <main+0xde>
      } else {
          printf("Error: Failed to set MAX30100 mode.\r\n");
 810128c:	4835      	ldr	r0, [pc, #212]	@ (8101364 <main+0x1a4>)
 810128e:	f00f fcd7 	bl	8110c40 <puts>
 8101292:	e004      	b.n	810129e <main+0xde>
      }
    } else {
      printf("Error: MAX30100 Initialization Failed. Check connections.\r\n");
 8101294:	4834      	ldr	r0, [pc, #208]	@ (8101368 <main+0x1a8>)
 8101296:	f00f fcd3 	bl	8110c40 <puts>
      while(1); // Halt on critical error
 810129a:	bf00      	nop
 810129c:	e7fd      	b.n	810129a <main+0xda>

    // --- Enable your EXTI interrupt for MAX30100 INT pin here ---
    // Example: HAL_NVIC_SetPriority(EXTIx_IRQn, 0, 0);
    //          HAL_NVIC_EnableIRQ(EXTIx_IRQn);

    uint32_t last_lm35_read_time = HAL_GetTick();
 810129e:	f001 fc53 	bl	8102b48 <HAL_GetTick>
 81012a2:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t last_max_temp_read_time = HAL_GetTick();
 81012a4:	f001 fc50 	bl	8102b48 <HAL_GetTick>
 81012a8:	6338      	str	r0, [r7, #48]	@ 0x30

    while (1)
    {
      if (max30100_new_data_available) {
 81012aa:	4b30      	ldr	r3, [pc, #192]	@ (810136c <main+0x1ac>)
 81012ac:	781b      	ldrb	r3, [r3, #0]
 81012ae:	b2db      	uxtb	r3, r3
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d004      	beq.n	81012be <main+0xfe>
        max30100_new_data_available = 0; // Clear the flag
 81012b4:	4b2d      	ldr	r3, [pc, #180]	@ (810136c <main+0x1ac>)
 81012b6:	2200      	movs	r2, #0
 81012b8:	701a      	strb	r2, [r3, #0]
        processMAX30100Data();
 81012ba:	f000 f85d 	bl	8101378 <processMAX30100Data>
      }

      // Read LM35 temperature periodically
      if (HAL_GetTick() - last_lm35_read_time >= 5000) { // Every 5 seconds
 81012be:	f001 fc43 	bl	8102b48 <HAL_GetTick>
 81012c2:	4602      	mov	r2, r0
 81012c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81012c6:	1ad3      	subs	r3, r2, r3
 81012c8:	f241 3287 	movw	r2, #4999	@ 0x1387
 81012cc:	4293      	cmp	r3, r2
 81012ce:	d904      	bls.n	81012da <main+0x11a>
        readLM35Temperature();
 81012d0:	f000 fab2 	bl	8101838 <readLM35Temperature>
        last_lm35_read_time = HAL_GetTick();
 81012d4:	f001 fc38 	bl	8102b48 <HAL_GetTick>
 81012d8:	6378      	str	r0, [r7, #52]	@ 0x34
      }

      // Read MAX30100 internal temperature periodically
      if (HAL_GetTick() - last_max_temp_read_time >= 10000) { // Every 10 seconds
 81012da:	f001 fc35 	bl	8102b48 <HAL_GetTick>
 81012de:	4602      	mov	r2, r0
 81012e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81012e2:	1ad3      	subs	r3, r2, r3
 81012e4:	f242 720f 	movw	r2, #9999	@ 0x270f
 81012e8:	4293      	cmp	r3, r2
 81012ea:	d9de      	bls.n	81012aa <main+0xea>
          float sensor_temp_max30100;
          if(MAX30100_ReadTemperature(&sensor_temp_max30100) == HAL_OK) {
 81012ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81012f0:	4618      	mov	r0, r3
 81012f2:	f001 f80d 	bl	8102310 <MAX30100_ReadTemperature>
 81012f6:	4603      	mov	r3, r0
 81012f8:	2b00      	cmp	r3, #0
 81012fa:	d115      	bne.n	8101328 <main+0x168>
              char temp_buf[40];
              sprintf(temp_buf, "MAX30100 Die Temp: %.2f C\r\n", sensor_temp_max30100);
 81012fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81012fe:	4618      	mov	r0, r3
 8101300:	f7ff f9aa 	bl	8100658 <__aeabi_f2d>
 8101304:	4602      	mov	r2, r0
 8101306:	460b      	mov	r3, r1
 8101308:	4638      	mov	r0, r7
 810130a:	4919      	ldr	r1, [pc, #100]	@ (8101370 <main+0x1b0>)
 810130c:	f00f fca0 	bl	8110c50 <siprintf>
              secure_uart_send((uint8_t*)temp_buf, strlen(temp_buf));
 8101310:	463b      	mov	r3, r7
 8101312:	4618      	mov	r0, r3
 8101314:	f7fe ffe4 	bl	81002e0 <strlen>
 8101318:	4603      	mov	r3, r0
 810131a:	b29a      	uxth	r2, r3
 810131c:	463b      	mov	r3, r7
 810131e:	4611      	mov	r1, r2
 8101320:	4618      	mov	r0, r3
 8101322:	f7ff feb5 	bl	8101090 <secure_uart_send>
 8101326:	e002      	b.n	810132e <main+0x16e>
          } else {
              printf("Warning: Failed to read MAX30100 temperature.\r\n");
 8101328:	4812      	ldr	r0, [pc, #72]	@ (8101374 <main+0x1b4>)
 810132a:	f00f fc89 	bl	8110c40 <puts>
          }
          last_max_temp_read_time = HAL_GetTick();
 810132e:	f001 fc0b 	bl	8102b48 <HAL_GetTick>
 8101332:	6338      	str	r0, [r7, #48]	@ 0x30
      if (max30100_new_data_available) {
 8101334:	e7b9      	b.n	81012aa <main+0xea>
 8101336:	bf00      	nop
 8101338:	58024400 	.word	0x58024400
 810133c:	e000ed00 	.word	0xe000ed00
 8101340:	58026400 	.word	0x58026400
 8101344:	081121b0 	.word	0x081121b0
 8101348:	08101d23 	.word	0x08101d23
 810134c:	100004a4 	.word	0x100004a4
 8101350:	08111d28 	.word	0x08111d28
 8101354:	08111d40 	.word	0x08111d40
 8101358:	100000f4 	.word	0x100000f4
 810135c:	08111d78 	.word	0x08111d78
 8101360:	08111d9c 	.word	0x08111d9c
 8101364:	08111dbc 	.word	0x08111dbc
 8101368:	08111de4 	.word	0x08111de4
 810136c:	100004f0 	.word	0x100004f0
 8101370:	08111e20 	.word	0x08111e20
 8101374:	08111e3c 	.word	0x08111e3c

08101378 <processMAX30100Data>:
      }
      // __WFI(); // Optional: Wait for interrupt to save power if main loop has nothing else
    }
  }
void processMAX30100Data(void) {
 8101378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810137c:	b0bf      	sub	sp, #252	@ 0xfc
 810137e:	af0e      	add	r7, sp, #56	@ 0x38
    // Copy data from library's buffer to the heart rate calculation buffer
    for (int i = 0; i < MAX30100_SAMPLES_PER_READ; i++) {
 8101380:	2300      	movs	r3, #0
 8101382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8101386:	e024      	b.n	81013d2 <processMAX30100Data+0x5a>
        if (hr_buffer_idx < HR_CALC_BUFFER_SIZE) {
 8101388:	4ba6      	ldr	r3, [pc, #664]	@ (8101624 <processMAX30100Data+0x2ac>)
 810138a:	881b      	ldrh	r3, [r3, #0]
 810138c:	2b7f      	cmp	r3, #127	@ 0x7f
 810138e:	d81b      	bhi.n	81013c8 <processMAX30100Data+0x50>
            hr_ir_sample_buffer[hr_buffer_idx] = max30100_ir_buffer[i];
 8101390:	4ba4      	ldr	r3, [pc, #656]	@ (8101624 <processMAX30100Data+0x2ac>)
 8101392:	881b      	ldrh	r3, [r3, #0]
 8101394:	4619      	mov	r1, r3
 8101396:	4aa4      	ldr	r2, [pc, #656]	@ (8101628 <processMAX30100Data+0x2b0>)
 8101398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 810139c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 81013a0:	4ba2      	ldr	r3, [pc, #648]	@ (810162c <processMAX30100Data+0x2b4>)
 81013a2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            hr_red_sample_buffer[hr_buffer_idx] = max30100_red_buffer[i];
 81013a6:	4b9f      	ldr	r3, [pc, #636]	@ (8101624 <processMAX30100Data+0x2ac>)
 81013a8:	881b      	ldrh	r3, [r3, #0]
 81013aa:	4619      	mov	r1, r3
 81013ac:	4aa0      	ldr	r2, [pc, #640]	@ (8101630 <processMAX30100Data+0x2b8>)
 81013ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 81013b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 81013b6:	4b9f      	ldr	r3, [pc, #636]	@ (8101634 <processMAX30100Data+0x2bc>)
 81013b8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            hr_buffer_idx++;
 81013bc:	4b99      	ldr	r3, [pc, #612]	@ (8101624 <processMAX30100Data+0x2ac>)
 81013be:	881b      	ldrh	r3, [r3, #0]
 81013c0:	3301      	adds	r3, #1
 81013c2:	b29a      	uxth	r2, r3
 81013c4:	4b97      	ldr	r3, [pc, #604]	@ (8101624 <processMAX30100Data+0x2ac>)
 81013c6:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX30100_SAMPLES_PER_READ; i++) {
 81013c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 81013cc:	3301      	adds	r3, #1
 81013ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81013d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 81013d6:	2b0f      	cmp	r3, #15
 81013d8:	ddd6      	ble.n	8101388 <processMAX30100Data+0x10>
        }
    }

    if (hr_buffer_idx >= HR_CALC_BUFFER_SIZE) {
 81013da:	4b92      	ldr	r3, [pc, #584]	@ (8101624 <processMAX30100Data+0x2ac>)
 81013dc:	881b      	ldrh	r3, [r3, #0]
 81013de:	2b7f      	cmp	r3, #127	@ 0x7f
 81013e0:	d905      	bls.n	81013ee <processMAX30100Data+0x76>
        hr_buffer_full = 1;
 81013e2:	4b95      	ldr	r3, [pc, #596]	@ (8101638 <processMAX30100Data+0x2c0>)
 81013e4:	2201      	movs	r2, #1
 81013e6:	701a      	strb	r2, [r3, #0]
        hr_buffer_idx = 0;
 81013e8:	4b8e      	ldr	r3, [pc, #568]	@ (8101624 <processMAX30100Data+0x2ac>)
 81013ea:	2200      	movs	r2, #0
 81013ec:	801a      	strh	r2, [r3, #0]
    }

    if (hr_buffer_full) {
 81013ee:	4b92      	ldr	r3, [pc, #584]	@ (8101638 <processMAX30100Data+0x2c0>)
 81013f0:	781b      	ldrb	r3, [r3, #0]
 81013f2:	2b00      	cmp	r3, #0
 81013f4:	f000 8111 	beq.w	810161a <processMAX30100Data+0x2a2>
        float dc_ir = calculateDC(hr_ir_sample_buffer, HR_CALC_BUFFER_SIZE);
 81013f8:	2180      	movs	r1, #128	@ 0x80
 81013fa:	488c      	ldr	r0, [pc, #560]	@ (810162c <processMAX30100Data+0x2b4>)
 81013fc:	f000 f934 	bl	8101668 <calculateDC>
 8101400:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        float dc_red = calculateDC(hr_red_sample_buffer, HR_CALC_BUFFER_SIZE);
 8101404:	2180      	movs	r1, #128	@ 0x80
 8101406:	488b      	ldr	r0, [pc, #556]	@ (8101634 <processMAX30100Data+0x2bc>)
 8101408:	f000 f92e 	bl	8101668 <calculateDC>
 810140c:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8
        float ac_ir = calculateAC(hr_ir_sample_buffer, HR_CALC_BUFFER_SIZE);
 8101410:	2180      	movs	r1, #128	@ 0x80
 8101412:	4886      	ldr	r0, [pc, #536]	@ (810162c <processMAX30100Data+0x2b4>)
 8101414:	f000 f960 	bl	81016d8 <calculateAC>
 8101418:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
        float ac_red = calculateAC(hr_red_sample_buffer, HR_CALC_BUFFER_SIZE);
 810141c:	2180      	movs	r1, #128	@ 0x80
 810141e:	4885      	ldr	r0, [pc, #532]	@ (8101634 <processMAX30100Data+0x2bc>)
 8101420:	f000 f95a 	bl	81016d8 <calculateAC>
 8101424:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0

        float spo2 = 0.0f;
 8101428:	f04f 0300 	mov.w	r3, #0
 810142c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        float ratio = 0.0f;
 8101430:	f04f 0300 	mov.w	r3, #0
 8101434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        if (dc_ir > 1000 && dc_red > 1000 && ac_ir > 20 && ac_red > 20) {
 8101438:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 810143c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 810163c <processMAX30100Data+0x2c4>
 8101440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101448:	dd4f      	ble.n	81014ea <processMAX30100Data+0x172>
 810144a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 810144e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 810163c <processMAX30100Data+0x2c4>
 8101452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810145a:	dd46      	ble.n	81014ea <processMAX30100Data+0x172>
 810145c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8101460:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8101464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810146c:	dd3d      	ble.n	81014ea <processMAX30100Data+0x172>
 810146e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8101472:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8101476:	eef4 7ac7 	vcmpe.f32	s15, s14
 810147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810147e:	dd34      	ble.n	81014ea <processMAX30100Data+0x172>
            ratio = (ac_red / dc_red) / (ac_ir / dc_ir);
 8101480:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8101484:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8101488:	eec7 6a27 	vdiv.f32	s13, s14, s15
 810148c:	ed97 6a29 	vldr	s12, [r7, #164]	@ 0xa4
 8101490:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8101494:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8101498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810149c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            // Using a more standard quadratic formula. You might need to adjust/calibrate.
            // spo2 = -45.060f * ratio * ratio + 30.354f * ratio + 94.845f;
            // Or your original linear:
            spo2 = -45.060f * ratio + 110.4f;
 81014a0:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 81014a4:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8101640 <processMAX30100Data+0x2c8>
 81014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81014ac:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8101644 <processMAX30100Data+0x2cc>
 81014b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 81014b4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8

            if (spo2 > 100.0f) spo2 = 100.0f;
 81014b8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 81014bc:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8101648 <processMAX30100Data+0x2d0>
 81014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 81014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81014c8:	dd02      	ble.n	81014d0 <processMAX30100Data+0x158>
 81014ca:	4b60      	ldr	r3, [pc, #384]	@ (810164c <processMAX30100Data+0x2d4>)
 81014cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            if (spo2 < 70.0f) spo2 = 70.0f;
 81014d0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 81014d4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8101650 <processMAX30100Data+0x2d8>
 81014d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81014e0:	d507      	bpl.n	81014f2 <processMAX30100Data+0x17a>
 81014e2:	4b5c      	ldr	r3, [pc, #368]	@ (8101654 <processMAX30100Data+0x2dc>)
 81014e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81014e8:	e003      	b.n	81014f2 <processMAX30100Data+0x17a>
        } else {
            spo2 = 0.0f;
 81014ea:	f04f 0300 	mov.w	r3, #0
 81014ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        }

        float heartRate = 0.0f;
 81014f2:	f04f 0300 	mov.w	r3, #0
 81014f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        float peak_threshold = dc_ir + (ac_ir * 0.3f); // Adjust 0.3f (30%) as needed
 81014fa:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 81014fe:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8101658 <processMAX30100Data+0x2e0>
 8101502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101506:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 810150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810150e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
        float min_peak_dist_samples = ppg_sample_rate_hz / (240.0f / 60.0f) ; // For max HR of 240bpm
 8101512:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8101648 <processMAX30100Data+0x2d0>
 8101516:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 810151a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810151e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98

        int peaks = countPeaks(hr_ir_sample_buffer, HR_CALC_BUFFER_SIZE, peak_threshold, min_peak_dist_samples);
 8101522:	edd7 0a26 	vldr	s1, [r7, #152]	@ 0x98
 8101526:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 810152a:	2180      	movs	r1, #128	@ 0x80
 810152c:	483f      	ldr	r0, [pc, #252]	@ (810162c <processMAX30100Data+0x2b4>)
 810152e:	f000 f91b 	bl	8101768 <countPeaks>
 8101532:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        if (peaks > 0) {
 8101536:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810153a:	2b00      	cmp	r3, #0
 810153c:	dd17      	ble.n	810156e <processMAX30100Data+0x1f6>
            float window_duration_sec = (float)HR_CALC_BUFFER_SIZE / ppg_sample_rate_hz;
 810153e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8101648 <processMAX30100Data+0x2d0>
 8101542:	eddf 6a46 	vldr	s13, [pc, #280]	@ 810165c <processMAX30100Data+0x2e4>
 8101546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810154a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            heartRate = (float)peaks * 60.0f / window_duration_sec;
 810154e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8101552:	ee07 3a90 	vmov	s15, r3
 8101556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810155a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8101660 <processMAX30100Data+0x2e8>
 810155e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101562:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8101566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810156a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
             // heartRate = 0.0f; // Or print as is for debugging
        }


        char data_buf[120]; // Increased buffer size
        sprintf(data_buf, "HR:%.1fbpm SpO2:%.1f%% IR(DC:%.0f AC:%.0f) RED(DC:%.0f AC:%.0f) R:%.3f Pks:%d\r\n",
 810156e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8101572:	f7ff f871 	bl	8100658 <__aeabi_f2d>
 8101576:	e9c7 0104 	strd	r0, r1, [r7, #16]
 810157a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 810157e:	f7ff f86b 	bl	8100658 <__aeabi_f2d>
 8101582:	4680      	mov	r8, r0
 8101584:	4689      	mov	r9, r1
 8101586:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 810158a:	f7ff f865 	bl	8100658 <__aeabi_f2d>
 810158e:	4682      	mov	sl, r0
 8101590:	468b      	mov	fp, r1
 8101592:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8101596:	f7ff f85f 	bl	8100658 <__aeabi_f2d>
 810159a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 810159e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 81015a2:	f7ff f859 	bl	8100658 <__aeabi_f2d>
 81015a6:	e9c7 0100 	strd	r0, r1, [r7]
 81015aa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 81015ae:	f7ff f853 	bl	8100658 <__aeabi_f2d>
 81015b2:	4604      	mov	r4, r0
 81015b4:	460d      	mov	r5, r1
 81015b6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 81015ba:	f7ff f84d 	bl	8100658 <__aeabi_f2d>
 81015be:	f107 0618 	add.w	r6, r7, #24
 81015c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81015c6:	930c      	str	r3, [sp, #48]	@ 0x30
 81015c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 81015cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 81015d0:	ed97 7b00 	vldr	d7, [r7]
 81015d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 81015d8:	ed97 7b02 	vldr	d7, [r7, #8]
 81015dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 81015e0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 81015e4:	e9cd 8900 	strd	r8, r9, [sp]
 81015e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81015ec:	491d      	ldr	r1, [pc, #116]	@ (8101664 <processMAX30100Data+0x2ec>)
 81015ee:	4630      	mov	r0, r6
 81015f0:	f00f fb2e 	bl	8110c50 <siprintf>
                heartRate, spo2, dc_ir, ac_ir, dc_red, ac_red, ratio, peaks);
        secure_uart_send((uint8_t*)data_buf, strlen(data_buf));
 81015f4:	f107 0318 	add.w	r3, r7, #24
 81015f8:	4618      	mov	r0, r3
 81015fa:	f7fe fe71 	bl	81002e0 <strlen>
 81015fe:	4603      	mov	r3, r0
 8101600:	b29a      	uxth	r2, r3
 8101602:	f107 0318 	add.w	r3, r7, #24
 8101606:	4611      	mov	r1, r2
 8101608:	4618      	mov	r0, r3
 810160a:	f7ff fd41 	bl	8101090 <secure_uart_send>

        hr_buffer_full = 0;
 810160e:	4b0a      	ldr	r3, [pc, #40]	@ (8101638 <processMAX30100Data+0x2c0>)
 8101610:	2200      	movs	r2, #0
 8101612:	701a      	strb	r2, [r3, #0]
        hr_buffer_idx = 0;
 8101614:	4b03      	ldr	r3, [pc, #12]	@ (8101624 <processMAX30100Data+0x2ac>)
 8101616:	2200      	movs	r2, #0
 8101618:	801a      	strh	r2, [r3, #0]
    }
}
 810161a:	bf00      	nop
 810161c:	37c4      	adds	r7, #196	@ 0xc4
 810161e:	46bd      	mov	sp, r7
 8101620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101624:	100004a0 	.word	0x100004a0
 8101628:	100004ac 	.word	0x100004ac
 810162c:	100002a0 	.word	0x100002a0
 8101630:	100004cc 	.word	0x100004cc
 8101634:	100003a0 	.word	0x100003a0
 8101638:	100004a2 	.word	0x100004a2
 810163c:	447a0000 	.word	0x447a0000
 8101640:	c2343d71 	.word	0xc2343d71
 8101644:	42dccccd 	.word	0x42dccccd
 8101648:	42c80000 	.word	0x42c80000
 810164c:	42c80000 	.word	0x42c80000
 8101650:	428c0000 	.word	0x428c0000
 8101654:	428c0000 	.word	0x428c0000
 8101658:	3e99999a 	.word	0x3e99999a
 810165c:	43000000 	.word	0x43000000
 8101660:	42700000 	.word	0x42700000
 8101664:	08111e6c 	.word	0x08111e6c

08101668 <calculateDC>:

float calculateDC(uint16_t *samples, uint16_t size) {
 8101668:	b480      	push	{r7}
 810166a:	b085      	sub	sp, #20
 810166c:	af00      	add	r7, sp, #0
 810166e:	6078      	str	r0, [r7, #4]
 8101670:	460b      	mov	r3, r1
 8101672:	807b      	strh	r3, [r7, #2]
    if (size == 0) return 0.0f;
 8101674:	887b      	ldrh	r3, [r7, #2]
 8101676:	2b00      	cmp	r3, #0
 8101678:	d102      	bne.n	8101680 <calculateDC+0x18>
 810167a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 81016d4 <calculateDC+0x6c>
 810167e:	e020      	b.n	81016c2 <calculateDC+0x5a>
    uint32_t sum = 0;
 8101680:	2300      	movs	r3, #0
 8101682:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < size; i++) {
 8101684:	2300      	movs	r3, #0
 8101686:	817b      	strh	r3, [r7, #10]
 8101688:	e00b      	b.n	81016a2 <calculateDC+0x3a>
        sum += samples[i];
 810168a:	897b      	ldrh	r3, [r7, #10]
 810168c:	005b      	lsls	r3, r3, #1
 810168e:	687a      	ldr	r2, [r7, #4]
 8101690:	4413      	add	r3, r2
 8101692:	881b      	ldrh	r3, [r3, #0]
 8101694:	461a      	mov	r2, r3
 8101696:	68fb      	ldr	r3, [r7, #12]
 8101698:	4413      	add	r3, r2
 810169a:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < size; i++) {
 810169c:	897b      	ldrh	r3, [r7, #10]
 810169e:	3301      	adds	r3, #1
 81016a0:	817b      	strh	r3, [r7, #10]
 81016a2:	897a      	ldrh	r2, [r7, #10]
 81016a4:	887b      	ldrh	r3, [r7, #2]
 81016a6:	429a      	cmp	r2, r3
 81016a8:	d3ef      	bcc.n	810168a <calculateDC+0x22>
    }
    return (float)sum / size;
 81016aa:	68fb      	ldr	r3, [r7, #12]
 81016ac:	ee07 3a90 	vmov	s15, r3
 81016b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81016b4:	887b      	ldrh	r3, [r7, #2]
 81016b6:	ee07 3a90 	vmov	s15, r3
 81016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81016be:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 81016c2:	eef0 7a66 	vmov.f32	s15, s13
 81016c6:	eeb0 0a67 	vmov.f32	s0, s15
 81016ca:	3714      	adds	r7, #20
 81016cc:	46bd      	mov	sp, r7
 81016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d2:	4770      	bx	lr
 81016d4:	00000000 	.word	0x00000000

081016d8 <calculateAC>:

float calculateAC(uint16_t *samples, uint16_t size) {
 81016d8:	b480      	push	{r7}
 81016da:	b085      	sub	sp, #20
 81016dc:	af00      	add	r7, sp, #0
 81016de:	6078      	str	r0, [r7, #4]
 81016e0:	460b      	mov	r3, r1
 81016e2:	807b      	strh	r3, [r7, #2]
    if (size < 2) return 0.0f; // Need at least 2 samples for a difference
 81016e4:	887b      	ldrh	r3, [r7, #2]
 81016e6:	2b01      	cmp	r3, #1
 81016e8:	d802      	bhi.n	81016f0 <calculateAC+0x18>
 81016ea:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8101764 <calculateAC+0x8c>
 81016ee:	e032      	b.n	8101756 <calculateAC+0x7e>
    uint16_t max_val = samples[0];
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	881b      	ldrh	r3, [r3, #0]
 81016f4:	81fb      	strh	r3, [r7, #14]
    uint16_t min_val = samples[0];
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	881b      	ldrh	r3, [r3, #0]
 81016fa:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 1; i < size; i++) {
 81016fc:	2301      	movs	r3, #1
 81016fe:	817b      	strh	r3, [r7, #10]
 8101700:	e01e      	b.n	8101740 <calculateAC+0x68>
        if (samples[i] > max_val) max_val = samples[i];
 8101702:	897b      	ldrh	r3, [r7, #10]
 8101704:	005b      	lsls	r3, r3, #1
 8101706:	687a      	ldr	r2, [r7, #4]
 8101708:	4413      	add	r3, r2
 810170a:	881b      	ldrh	r3, [r3, #0]
 810170c:	89fa      	ldrh	r2, [r7, #14]
 810170e:	429a      	cmp	r2, r3
 8101710:	d205      	bcs.n	810171e <calculateAC+0x46>
 8101712:	897b      	ldrh	r3, [r7, #10]
 8101714:	005b      	lsls	r3, r3, #1
 8101716:	687a      	ldr	r2, [r7, #4]
 8101718:	4413      	add	r3, r2
 810171a:	881b      	ldrh	r3, [r3, #0]
 810171c:	81fb      	strh	r3, [r7, #14]
        if (samples[i] < min_val) min_val = samples[i];
 810171e:	897b      	ldrh	r3, [r7, #10]
 8101720:	005b      	lsls	r3, r3, #1
 8101722:	687a      	ldr	r2, [r7, #4]
 8101724:	4413      	add	r3, r2
 8101726:	881b      	ldrh	r3, [r3, #0]
 8101728:	89ba      	ldrh	r2, [r7, #12]
 810172a:	429a      	cmp	r2, r3
 810172c:	d905      	bls.n	810173a <calculateAC+0x62>
 810172e:	897b      	ldrh	r3, [r7, #10]
 8101730:	005b      	lsls	r3, r3, #1
 8101732:	687a      	ldr	r2, [r7, #4]
 8101734:	4413      	add	r3, r2
 8101736:	881b      	ldrh	r3, [r3, #0]
 8101738:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = 1; i < size; i++) {
 810173a:	897b      	ldrh	r3, [r7, #10]
 810173c:	3301      	adds	r3, #1
 810173e:	817b      	strh	r3, [r7, #10]
 8101740:	897a      	ldrh	r2, [r7, #10]
 8101742:	887b      	ldrh	r3, [r7, #2]
 8101744:	429a      	cmp	r2, r3
 8101746:	d3dc      	bcc.n	8101702 <calculateAC+0x2a>
    }
    return (float)(max_val - min_val);
 8101748:	89fa      	ldrh	r2, [r7, #14]
 810174a:	89bb      	ldrh	r3, [r7, #12]
 810174c:	1ad3      	subs	r3, r2, r3
 810174e:	ee07 3a90 	vmov	s15, r3
 8101752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8101756:	eeb0 0a67 	vmov.f32	s0, s15
 810175a:	3714      	adds	r7, #20
 810175c:	46bd      	mov	sp, r7
 810175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101762:	4770      	bx	lr
 8101764:	00000000 	.word	0x00000000

08101768 <countPeaks>:

int countPeaks(uint16_t *samples, uint16_t size, float threshold, float min_peak_distance_samples) {
 8101768:	b480      	push	{r7}
 810176a:	b087      	sub	sp, #28
 810176c:	af00      	add	r7, sp, #0
 810176e:	60f8      	str	r0, [r7, #12]
 8101770:	460b      	mov	r3, r1
 8101772:	ed87 0a01 	vstr	s0, [r7, #4]
 8101776:	edc7 0a00 	vstr	s1, [r7]
 810177a:	817b      	strh	r3, [r7, #10]
    int peak_count = 0;
 810177c:	2300      	movs	r3, #0
 810177e:	617b      	str	r3, [r7, #20]
    uint16_t last_peak_idx = 0; // Initialize to 0 or a value that ensures first peak can be detected
 8101780:	2300      	movs	r3, #0
 8101782:	827b      	strh	r3, [r7, #18]

    if (size < 3) return 0;
 8101784:	897b      	ldrh	r3, [r7, #10]
 8101786:	2b02      	cmp	r3, #2
 8101788:	d801      	bhi.n	810178e <countPeaks+0x26>
 810178a:	2300      	movs	r3, #0
 810178c:	e04d      	b.n	810182a <countPeaks+0xc2>

    for (uint16_t i = 1; i < size - 1; i++) {
 810178e:	2301      	movs	r3, #1
 8101790:	823b      	strh	r3, [r7, #16]
 8101792:	e044      	b.n	810181e <countPeaks+0xb6>
        // Basic peak: higher than neighbors and above threshold
        if (samples[i] > threshold && samples[i] > samples[i-1] && samples[i] >= samples[i+1]) {
 8101794:	8a3b      	ldrh	r3, [r7, #16]
 8101796:	005b      	lsls	r3, r3, #1
 8101798:	68fa      	ldr	r2, [r7, #12]
 810179a:	4413      	add	r3, r2
 810179c:	881b      	ldrh	r3, [r3, #0]
 810179e:	ee07 3a90 	vmov	s15, r3
 81017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81017a6:	ed97 7a01 	vldr	s14, [r7, #4]
 81017aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81017b2:	d531      	bpl.n	8101818 <countPeaks+0xb0>
 81017b4:	8a3b      	ldrh	r3, [r7, #16]
 81017b6:	005b      	lsls	r3, r3, #1
 81017b8:	68fa      	ldr	r2, [r7, #12]
 81017ba:	4413      	add	r3, r2
 81017bc:	881a      	ldrh	r2, [r3, #0]
 81017be:	8a3b      	ldrh	r3, [r7, #16]
 81017c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 81017c4:	3b01      	subs	r3, #1
 81017c6:	005b      	lsls	r3, r3, #1
 81017c8:	68f9      	ldr	r1, [r7, #12]
 81017ca:	440b      	add	r3, r1
 81017cc:	881b      	ldrh	r3, [r3, #0]
 81017ce:	429a      	cmp	r2, r3
 81017d0:	d922      	bls.n	8101818 <countPeaks+0xb0>
 81017d2:	8a3b      	ldrh	r3, [r7, #16]
 81017d4:	005b      	lsls	r3, r3, #1
 81017d6:	68fa      	ldr	r2, [r7, #12]
 81017d8:	4413      	add	r3, r2
 81017da:	881a      	ldrh	r2, [r3, #0]
 81017dc:	8a3b      	ldrh	r3, [r7, #16]
 81017de:	3301      	adds	r3, #1
 81017e0:	005b      	lsls	r3, r3, #1
 81017e2:	68f9      	ldr	r1, [r7, #12]
 81017e4:	440b      	add	r3, r1
 81017e6:	881b      	ldrh	r3, [r3, #0]
 81017e8:	429a      	cmp	r2, r3
 81017ea:	d315      	bcc.n	8101818 <countPeaks+0xb0>
            // Check minimum distance from the previously detected peak
            if (last_peak_idx == 0 || (i - last_peak_idx) >= min_peak_distance_samples) {
 81017ec:	8a7b      	ldrh	r3, [r7, #18]
 81017ee:	2b00      	cmp	r3, #0
 81017f0:	d00d      	beq.n	810180e <countPeaks+0xa6>
 81017f2:	8a3a      	ldrh	r2, [r7, #16]
 81017f4:	8a7b      	ldrh	r3, [r7, #18]
 81017f6:	1ad3      	subs	r3, r2, r3
 81017f8:	ee07 3a90 	vmov	s15, r3
 81017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101800:	ed97 7a00 	vldr	s14, [r7]
 8101804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810180c:	d804      	bhi.n	8101818 <countPeaks+0xb0>
                 peak_count++;
 810180e:	697b      	ldr	r3, [r7, #20]
 8101810:	3301      	adds	r3, #1
 8101812:	617b      	str	r3, [r7, #20]
                 last_peak_idx = i;
 8101814:	8a3b      	ldrh	r3, [r7, #16]
 8101816:	827b      	strh	r3, [r7, #18]
    for (uint16_t i = 1; i < size - 1; i++) {
 8101818:	8a3b      	ldrh	r3, [r7, #16]
 810181a:	3301      	adds	r3, #1
 810181c:	823b      	strh	r3, [r7, #16]
 810181e:	8a3a      	ldrh	r2, [r7, #16]
 8101820:	897b      	ldrh	r3, [r7, #10]
 8101822:	3b01      	subs	r3, #1
 8101824:	429a      	cmp	r2, r3
 8101826:	dbb5      	blt.n	8101794 <countPeaks+0x2c>
            }
        }
    }
    return peak_count;
 8101828:	697b      	ldr	r3, [r7, #20]
}
 810182a:	4618      	mov	r0, r3
 810182c:	371c      	adds	r7, #28
 810182e:	46bd      	mov	sp, r7
 8101830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101834:	4770      	bx	lr
	...

08101838 <readLM35Temperature>:

// Reads temperature from LM35 sensor connected to PA3 (ADC1_INP15)
void readLM35Temperature(void) {
 8101838:	b580      	push	{r7, lr}
 810183a:	b096      	sub	sp, #88	@ 0x58
 810183c:	af02      	add	r7, sp, #8
    uint32_t adc_sum = 0;
 810183e:	2300      	movs	r3, #0
 8101840:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int num_samples = 32; // Number of samples to average
 8101842:	2320      	movs	r3, #32
 8101844:	647b      	str	r3, [r7, #68]	@ 0x44

    // Ensure ADC is started and poll for conversion
    // This assumes hadc1 is already configured for PA3 (ADC1_INP15) in MX_ADC1_Init()
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8101846:	4834      	ldr	r0, [pc, #208]	@ (8101918 <readLM35Temperature+0xe0>)
 8101848:	f001 fdd2 	bl	81033f0 <HAL_ADC_Start>
 810184c:	4603      	mov	r3, r0
 810184e:	2b00      	cmp	r3, #0
 8101850:	d003      	beq.n	810185a <readLM35Temperature+0x22>
        printf("Error: HAL_ADC_Start failed for LM35.\r\n");
 8101852:	4832      	ldr	r0, [pc, #200]	@ (810191c <readLM35Temperature+0xe4>)
 8101854:	f00f f9f4 	bl	8110c40 <puts>
        return;
 8101858:	e05a      	b.n	8101910 <readLM35Temperature+0xd8>
    }

    for (int i = 0; i < num_samples; i++) {
 810185a:	2300      	movs	r3, #0
 810185c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810185e:	e017      	b.n	8101890 <readLM35Temperature+0x58>
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) { // 100ms timeout per conversion
 8101860:	2164      	movs	r1, #100	@ 0x64
 8101862:	482d      	ldr	r0, [pc, #180]	@ (8101918 <readLM35Temperature+0xe0>)
 8101864:	f001 fec2 	bl	81035ec <HAL_ADC_PollForConversion>
 8101868:	4603      	mov	r3, r0
 810186a:	2b00      	cmp	r3, #0
 810186c:	d107      	bne.n	810187e <readLM35Temperature+0x46>
            adc_sum += HAL_ADC_GetValue(&hadc1);
 810186e:	482a      	ldr	r0, [pc, #168]	@ (8101918 <readLM35Temperature+0xe0>)
 8101870:	f001 ffb0 	bl	81037d4 <HAL_ADC_GetValue>
 8101874:	4602      	mov	r2, r0
 8101876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101878:	4413      	add	r3, r2
 810187a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810187c:	e005      	b.n	810188a <readLM35Temperature+0x52>
        } else {
            printf("Warning: ADC Poll for LM35 timed out on sample %d.\r\n", i + 1);
 810187e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8101880:	3301      	adds	r3, #1
 8101882:	4619      	mov	r1, r3
 8101884:	4826      	ldr	r0, [pc, #152]	@ (8101920 <readLM35Temperature+0xe8>)
 8101886:	f00f f973 	bl	8110b70 <iprintf>
    for (int i = 0; i < num_samples; i++) {
 810188a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810188c:	3301      	adds	r3, #1
 810188e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8101890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8101892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101894:	429a      	cmp	r2, r3
 8101896:	dbe3      	blt.n	8101860 <readLM35Temperature+0x28>
            // Optionally break or continue with fewer samples
        }
    }
    HAL_ADC_Stop(&hadc1);
 8101898:	481f      	ldr	r0, [pc, #124]	@ (8101918 <readLM35Temperature+0xe0>)
 810189a:	f001 fe73 	bl	8103584 <HAL_ADC_Stop>

    if (num_samples == 0) return; // Should not happen with const > 0
 810189e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d034      	beq.n	810190e <readLM35Temperature+0xd6>
    uint32_t raw_adc = adc_sum / num_samples;
 81018a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81018a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 81018ac:	643b      	str	r3, [r7, #64]	@ 0x40

    // VREF typically 3.3V. STM32H7 ADC can be 16-bit (65535) or 12-bit (4095) etc.
    // Check your CubeMX ADC resolution setting. Default for many H7 is 16-bit.
    // If ADC resolution is 12-bit, use 4095.0f. If 16-bit, use 65535.0f.
    float adc_resolution_divider = 65535.0f; // Assuming 16-bit resolution
 81018ae:	4b1d      	ldr	r3, [pc, #116]	@ (8101924 <readLM35Temperature+0xec>)
 81018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // float adc_resolution_divider = 4095.0f; // If using 12-bit resolution

    float voltage = (raw_adc * 3.3f) / adc_resolution_divider;
 81018b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81018b4:	ee07 3a90 	vmov	s15, r3
 81018b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8101928 <readLM35Temperature+0xf0>
 81018c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 81018c4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 81018c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81018cc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float tempC = voltage * 100.0f;  // LM35: 10mV/°C -> V / 0.01 = V * 100
 81018d0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 81018d4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 810192c <readLM35Temperature+0xf4>
 81018d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81018dc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    char buf[50]; // Increased buffer size
    sprintf(buf, "LM35 Temp: %.1f C (ADC Raw Avg: %lu)\r\n", tempC, raw_adc);
 81018e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81018e2:	f7fe feb9 	bl	8100658 <__aeabi_f2d>
 81018e6:	4602      	mov	r2, r0
 81018e8:	460b      	mov	r3, r1
 81018ea:	4638      	mov	r0, r7
 81018ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81018ee:	9100      	str	r1, [sp, #0]
 81018f0:	490f      	ldr	r1, [pc, #60]	@ (8101930 <readLM35Temperature+0xf8>)
 81018f2:	f00f f9ad 	bl	8110c50 <siprintf>
    secure_uart_send((uint8_t*)buf, strlen(buf));
 81018f6:	463b      	mov	r3, r7
 81018f8:	4618      	mov	r0, r3
 81018fa:	f7fe fcf1 	bl	81002e0 <strlen>
 81018fe:	4603      	mov	r3, r0
 8101900:	b29a      	uxth	r2, r3
 8101902:	463b      	mov	r3, r7
 8101904:	4611      	mov	r1, r2
 8101906:	4618      	mov	r0, r3
 8101908:	f7ff fbc2 	bl	8101090 <secure_uart_send>
 810190c:	e000      	b.n	8101910 <readLM35Temperature+0xd8>
    if (num_samples == 0) return; // Should not happen with const > 0
 810190e:	bf00      	nop
}
 8101910:	3750      	adds	r7, #80	@ 0x50
 8101912:	46bd      	mov	sp, r7
 8101914:	bd80      	pop	{r7, pc}
 8101916:	bf00      	nop
 8101918:	10000090 	.word	0x10000090
 810191c:	08111ebc 	.word	0x08111ebc
 8101920:	08111ee4 	.word	0x08111ee4
 8101924:	477fff00 	.word	0x477fff00
 8101928:	40533333 	.word	0x40533333
 810192c:	42c80000 	.word	0x42c80000
 8101930:	08111f1c 	.word	0x08111f1c

08101934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8101934:	b580      	push	{r7, lr}
 8101936:	b08a      	sub	sp, #40	@ 0x28
 8101938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810193a:	f107 031c 	add.w	r3, r7, #28
 810193e:	2200      	movs	r2, #0
 8101940:	601a      	str	r2, [r3, #0]
 8101942:	605a      	str	r2, [r3, #4]
 8101944:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101946:	463b      	mov	r3, r7
 8101948:	2200      	movs	r2, #0
 810194a:	601a      	str	r2, [r3, #0]
 810194c:	605a      	str	r2, [r3, #4]
 810194e:	609a      	str	r2, [r3, #8]
 8101950:	60da      	str	r2, [r3, #12]
 8101952:	611a      	str	r2, [r3, #16]
 8101954:	615a      	str	r2, [r3, #20]
 8101956:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101958:	4b31      	ldr	r3, [pc, #196]	@ (8101a20 <MX_ADC1_Init+0xec>)
 810195a:	4a32      	ldr	r2, [pc, #200]	@ (8101a24 <MX_ADC1_Init+0xf0>)
 810195c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810195e:	4b30      	ldr	r3, [pc, #192]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101960:	2200      	movs	r2, #0
 8101962:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8101964:	4b2e      	ldr	r3, [pc, #184]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101966:	2200      	movs	r2, #0
 8101968:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810196a:	4b2d      	ldr	r3, [pc, #180]	@ (8101a20 <MX_ADC1_Init+0xec>)
 810196c:	2200      	movs	r2, #0
 810196e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101970:	4b2b      	ldr	r3, [pc, #172]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101972:	2204      	movs	r2, #4
 8101974:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101976:	4b2a      	ldr	r3, [pc, #168]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101978:	2200      	movs	r2, #0
 810197a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810197c:	4b28      	ldr	r3, [pc, #160]	@ (8101a20 <MX_ADC1_Init+0xec>)
 810197e:	2200      	movs	r2, #0
 8101980:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101982:	4b27      	ldr	r3, [pc, #156]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101984:	2201      	movs	r2, #1
 8101986:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101988:	4b25      	ldr	r3, [pc, #148]	@ (8101a20 <MX_ADC1_Init+0xec>)
 810198a:	2200      	movs	r2, #0
 810198c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810198e:	4b24      	ldr	r3, [pc, #144]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101990:	2200      	movs	r2, #0
 8101992:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8101994:	4b22      	ldr	r3, [pc, #136]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101996:	2200      	movs	r2, #0
 8101998:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810199a:	4b21      	ldr	r3, [pc, #132]	@ (8101a20 <MX_ADC1_Init+0xec>)
 810199c:	2200      	movs	r2, #0
 810199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8101a20 <MX_ADC1_Init+0xec>)
 81019a2:	2200      	movs	r2, #0
 81019a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8101a20 <MX_ADC1_Init+0xec>)
 81019a8:	2200      	movs	r2, #0
 81019aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81019ac:	4b1c      	ldr	r3, [pc, #112]	@ (8101a20 <MX_ADC1_Init+0xec>)
 81019ae:	2200      	movs	r2, #0
 81019b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 81019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8101a20 <MX_ADC1_Init+0xec>)
 81019b6:	2201      	movs	r2, #1
 81019b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81019ba:	4819      	ldr	r0, [pc, #100]	@ (8101a20 <MX_ADC1_Init+0xec>)
 81019bc:	f001 fb76 	bl	81030ac <HAL_ADC_Init>
 81019c0:	4603      	mov	r3, r0
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	d001      	beq.n	81019ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81019c6:	f000 f9b4 	bl	8101d32 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81019ca:	2300      	movs	r3, #0
 81019cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81019ce:	f107 031c 	add.w	r3, r7, #28
 81019d2:	4619      	mov	r1, r3
 81019d4:	4812      	ldr	r0, [pc, #72]	@ (8101a20 <MX_ADC1_Init+0xec>)
 81019d6:	f002 ff5d 	bl	8104894 <HAL_ADCEx_MultiModeConfigChannel>
 81019da:	4603      	mov	r3, r0
 81019dc:	2b00      	cmp	r3, #0
 81019de:	d001      	beq.n	81019e4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81019e0:	f000 f9a7 	bl	8101d32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 81019e4:	4b10      	ldr	r3, [pc, #64]	@ (8101a28 <MX_ADC1_Init+0xf4>)
 81019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81019e8:	2306      	movs	r3, #6
 81019ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81019ec:	2300      	movs	r3, #0
 81019ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81019f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81019f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81019f6:	2304      	movs	r3, #4
 81019f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81019fa:	2300      	movs	r3, #0
 81019fc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81019fe:	2300      	movs	r3, #0
 8101a00:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101a02:	463b      	mov	r3, r7
 8101a04:	4619      	mov	r1, r3
 8101a06:	4806      	ldr	r0, [pc, #24]	@ (8101a20 <MX_ADC1_Init+0xec>)
 8101a08:	f002 f94a 	bl	8103ca0 <HAL_ADC_ConfigChannel>
 8101a0c:	4603      	mov	r3, r0
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d001      	beq.n	8101a16 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8101a12:	f000 f98e 	bl	8101d32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8101a16:	bf00      	nop
 8101a18:	3728      	adds	r7, #40	@ 0x28
 8101a1a:	46bd      	mov	sp, r7
 8101a1c:	bd80      	pop	{r7, pc}
 8101a1e:	bf00      	nop
 8101a20:	10000090 	.word	0x10000090
 8101a24:	40022000 	.word	0x40022000
 8101a28:	2a000400 	.word	0x2a000400

08101a2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101a2c:	b580      	push	{r7, lr}
 8101a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101a30:	4b1b      	ldr	r3, [pc, #108]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a32:	4a1c      	ldr	r2, [pc, #112]	@ (8101aa4 <MX_I2C1_Init+0x78>)
 8101a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8101a36:	4b1a      	ldr	r3, [pc, #104]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a38:	4a1b      	ldr	r2, [pc, #108]	@ (8101aa8 <MX_I2C1_Init+0x7c>)
 8101a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101a3c:	4b18      	ldr	r3, [pc, #96]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a3e:	2200      	movs	r2, #0
 8101a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101a42:	4b17      	ldr	r3, [pc, #92]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a44:	2201      	movs	r2, #1
 8101a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101a48:	4b15      	ldr	r3, [pc, #84]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101a4e:	4b14      	ldr	r3, [pc, #80]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a50:	2200      	movs	r2, #0
 8101a52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101a54:	4b12      	ldr	r3, [pc, #72]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a56:	2200      	movs	r2, #0
 8101a58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101a5a:	4b11      	ldr	r3, [pc, #68]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a5c:	2200      	movs	r2, #0
 8101a5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101a60:	4b0f      	ldr	r3, [pc, #60]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a62:	2200      	movs	r2, #0
 8101a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101a66:	480e      	ldr	r0, [pc, #56]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a68:	f005 fd0c 	bl	8107484 <HAL_I2C_Init>
 8101a6c:	4603      	mov	r3, r0
 8101a6e:	2b00      	cmp	r3, #0
 8101a70:	d001      	beq.n	8101a76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101a72:	f000 f95e 	bl	8101d32 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101a76:	2100      	movs	r1, #0
 8101a78:	4809      	ldr	r0, [pc, #36]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a7a:	f007 f973 	bl	8108d64 <HAL_I2CEx_ConfigAnalogFilter>
 8101a7e:	4603      	mov	r3, r0
 8101a80:	2b00      	cmp	r3, #0
 8101a82:	d001      	beq.n	8101a88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101a84:	f000 f955 	bl	8101d32 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101a88:	2100      	movs	r1, #0
 8101a8a:	4805      	ldr	r0, [pc, #20]	@ (8101aa0 <MX_I2C1_Init+0x74>)
 8101a8c:	f007 f9b5 	bl	8108dfa <HAL_I2CEx_ConfigDigitalFilter>
 8101a90:	4603      	mov	r3, r0
 8101a92:	2b00      	cmp	r3, #0
 8101a94:	d001      	beq.n	8101a9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101a96:	f000 f94c 	bl	8101d32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101a9a:	bf00      	nop
 8101a9c:	bd80      	pop	{r7, pc}
 8101a9e:	bf00      	nop
 8101aa0:	100000f4 	.word	0x100000f4
 8101aa4:	40005400 	.word	0x40005400
 8101aa8:	00b03fdb 	.word	0x00b03fdb

08101aac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8101aac:	b580      	push	{r7, lr}
 8101aae:	b084      	sub	sp, #16
 8101ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101ab2:	1d3b      	adds	r3, r7, #4
 8101ab4:	2200      	movs	r2, #0
 8101ab6:	601a      	str	r2, [r3, #0]
 8101ab8:	605a      	str	r2, [r3, #4]
 8101aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8101abc:	4b14      	ldr	r3, [pc, #80]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101abe:	4a15      	ldr	r2, [pc, #84]	@ (8101b14 <MX_TIM6_Init+0x68>)
 8101ac0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8101ac2:	4b13      	ldr	r3, [pc, #76]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101ac4:	2200      	movs	r2, #0
 8101ac6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101ac8:	4b11      	ldr	r3, [pc, #68]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101aca:	2200      	movs	r2, #0
 8101acc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8101ace:	4b10      	ldr	r3, [pc, #64]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8101ad4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101ad8:	2200      	movs	r2, #0
 8101ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8101adc:	480c      	ldr	r0, [pc, #48]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101ade:	f00a f937 	bl	810bd50 <HAL_TIM_Base_Init>
 8101ae2:	4603      	mov	r3, r0
 8101ae4:	2b00      	cmp	r3, #0
 8101ae6:	d001      	beq.n	8101aec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8101ae8:	f000 f923 	bl	8101d32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101aec:	2300      	movs	r3, #0
 8101aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101af0:	2300      	movs	r3, #0
 8101af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8101af4:	1d3b      	adds	r3, r7, #4
 8101af6:	4619      	mov	r1, r3
 8101af8:	4805      	ldr	r0, [pc, #20]	@ (8101b10 <MX_TIM6_Init+0x64>)
 8101afa:	f00a fb59 	bl	810c1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8101afe:	4603      	mov	r3, r0
 8101b00:	2b00      	cmp	r3, #0
 8101b02:	d001      	beq.n	8101b08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8101b04:	f000 f915 	bl	8101d32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8101b08:	bf00      	nop
 8101b0a:	3710      	adds	r7, #16
 8101b0c:	46bd      	mov	sp, r7
 8101b0e:	bd80      	pop	{r7, pc}
 8101b10:	100001c0 	.word	0x100001c0
 8101b14:	40001000 	.word	0x40001000

08101b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101b1c:	4b22      	ldr	r3, [pc, #136]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b1e:	4a23      	ldr	r2, [pc, #140]	@ (8101bac <MX_USART3_UART_Init+0x94>)
 8101b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101b22:	4b21      	ldr	r3, [pc, #132]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b2c:	2200      	movs	r2, #0
 8101b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101b30:	4b1d      	ldr	r3, [pc, #116]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b32:	2200      	movs	r2, #0
 8101b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101b36:	4b1c      	ldr	r3, [pc, #112]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b38:	2200      	movs	r2, #0
 8101b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b3e:	220c      	movs	r2, #12
 8101b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101b42:	4b19      	ldr	r3, [pc, #100]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b44:	2200      	movs	r2, #0
 8101b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101b48:	4b17      	ldr	r3, [pc, #92]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b4a:	2200      	movs	r2, #0
 8101b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101b4e:	4b16      	ldr	r3, [pc, #88]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b50:	2200      	movs	r2, #0
 8101b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101b54:	4b14      	ldr	r3, [pc, #80]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b56:	2200      	movs	r2, #0
 8101b58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b5a:	4b13      	ldr	r3, [pc, #76]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b5c:	2200      	movs	r2, #0
 8101b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101b60:	4811      	ldr	r0, [pc, #68]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b62:	f00a fbd1 	bl	810c308 <HAL_UART_Init>
 8101b66:	4603      	mov	r3, r0
 8101b68:	2b00      	cmp	r3, #0
 8101b6a:	d001      	beq.n	8101b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101b6c:	f000 f8e1 	bl	8101d32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b70:	2100      	movs	r1, #0
 8101b72:	480d      	ldr	r0, [pc, #52]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b74:	f00c f8b7 	bl	810dce6 <HAL_UARTEx_SetTxFifoThreshold>
 8101b78:	4603      	mov	r3, r0
 8101b7a:	2b00      	cmp	r3, #0
 8101b7c:	d001      	beq.n	8101b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101b7e:	f000 f8d8 	bl	8101d32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b82:	2100      	movs	r1, #0
 8101b84:	4808      	ldr	r0, [pc, #32]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b86:	f00c f8ec 	bl	810dd62 <HAL_UARTEx_SetRxFifoThreshold>
 8101b8a:	4603      	mov	r3, r0
 8101b8c:	2b00      	cmp	r3, #0
 8101b8e:	d001      	beq.n	8101b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101b90:	f000 f8cf 	bl	8101d32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101b94:	4804      	ldr	r0, [pc, #16]	@ (8101ba8 <MX_USART3_UART_Init+0x90>)
 8101b96:	f00c f86d 	bl	810dc74 <HAL_UARTEx_DisableFifoMode>
 8101b9a:	4603      	mov	r3, r0
 8101b9c:	2b00      	cmp	r3, #0
 8101b9e:	d001      	beq.n	8101ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101ba0:	f000 f8c7 	bl	8101d32 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101ba4:	bf00      	nop
 8101ba6:	bd80      	pop	{r7, pc}
 8101ba8:	1000020c 	.word	0x1000020c
 8101bac:	40004800 	.word	0x40004800

08101bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101bb0:	b580      	push	{r7, lr}
 8101bb2:	b082      	sub	sp, #8
 8101bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8101bec <MX_DMA_Init+0x3c>)
 8101bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8101bec <MX_DMA_Init+0x3c>)
 8101bbe:	f043 0301 	orr.w	r3, r3, #1
 8101bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101bc6:	4b09      	ldr	r3, [pc, #36]	@ (8101bec <MX_DMA_Init+0x3c>)
 8101bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101bcc:	f003 0301 	and.w	r3, r3, #1
 8101bd0:	607b      	str	r3, [r7, #4]
 8101bd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101bd4:	2200      	movs	r2, #0
 8101bd6:	2105      	movs	r1, #5
 8101bd8:	200b      	movs	r0, #11
 8101bda:	f003 f818 	bl	8104c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101bde:	200b      	movs	r0, #11
 8101be0:	f003 f82f 	bl	8104c42 <HAL_NVIC_EnableIRQ>

}
 8101be4:	bf00      	nop
 8101be6:	3708      	adds	r7, #8
 8101be8:	46bd      	mov	sp, r7
 8101bea:	bd80      	pop	{r7, pc}
 8101bec:	58024400 	.word	0x58024400

08101bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101bf0:	b580      	push	{r7, lr}
 8101bf2:	b088      	sub	sp, #32
 8101bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101bf6:	4b27      	ldr	r3, [pc, #156]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101bfc:	4a25      	ldr	r2, [pc, #148]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101bfe:	f043 0304 	orr.w	r3, r3, #4
 8101c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c06:	4b23      	ldr	r3, [pc, #140]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c0c:	f003 0304 	and.w	r3, r3, #4
 8101c10:	60bb      	str	r3, [r7, #8]
 8101c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c14:	4b1f      	ldr	r3, [pc, #124]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c1c:	f043 0308 	orr.w	r3, r3, #8
 8101c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c24:	4b1b      	ldr	r3, [pc, #108]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c2a:	f003 0308 	and.w	r3, r3, #8
 8101c2e:	607b      	str	r3, [r7, #4]
 8101c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c32:	4b18      	ldr	r3, [pc, #96]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c38:	4a16      	ldr	r2, [pc, #88]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c3a:	f043 0302 	orr.w	r3, r3, #2
 8101c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c42:	4b14      	ldr	r3, [pc, #80]	@ (8101c94 <MX_GPIO_Init+0xa4>)
 8101c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c48:	f003 0302 	and.w	r3, r3, #2
 8101c4c:	603b      	str	r3, [r7, #0]
 8101c4e:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Configure MAX30100 INT pin on PB5 as EXTI rising edge (adjust if wired differently)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c50:	f107 030c 	add.w	r3, r7, #12
 8101c54:	2200      	movs	r2, #0
 8101c56:	601a      	str	r2, [r3, #0]
 8101c58:	605a      	str	r2, [r3, #4]
 8101c5a:	609a      	str	r2, [r3, #8]
 8101c5c:	60da      	str	r2, [r3, #12]
 8101c5e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101c60:	2320      	movs	r3, #32
 8101c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101c64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8101c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c6a:	2300      	movs	r3, #0
 8101c6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101c6e:	f107 030c 	add.w	r3, r7, #12
 8101c72:	4619      	mov	r1, r3
 8101c74:	4808      	ldr	r0, [pc, #32]	@ (8101c98 <MX_GPIO_Init+0xa8>)
 8101c76:	f005 fa43 	bl	8107100 <HAL_GPIO_Init>

  // Enable EXTI line interrupt for PB5
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8101c7a:	2200      	movs	r2, #0
 8101c7c:	2105      	movs	r1, #5
 8101c7e:	2017      	movs	r0, #23
 8101c80:	f002 ffc5 	bl	8104c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8101c84:	2017      	movs	r0, #23
 8101c86:	f002 ffdc 	bl	8104c42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8101c8a:	bf00      	nop
 8101c8c:	3720      	adds	r7, #32
 8101c8e:	46bd      	mov	sp, r7
 8101c90:	bd80      	pop	{r7, pc}
 8101c92:	bf00      	nop
 8101c94:	58024400 	.word	0x58024400
 8101c98:	58020400 	.word	0x58020400

08101c9c <ITM_SendChar0>:
#include <stdint.h>
#include <stdio.h>
#include "core_cm4.h"

static uint32_t ITM_SendChar0(uint32_t ch)
{
 8101c9c:	b480      	push	{r7}
 8101c9e:	b083      	sub	sp, #12
 8101ca0:	af00      	add	r7, sp, #0
 8101ca2:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) {
 8101ca4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8101ca8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8101cac:	f003 0301 	and.w	r3, r3, #1
 8101cb0:	2b00      	cmp	r3, #0
 8101cb2:	d013      	beq.n	8101cdc <ITM_SendChar0+0x40>
    if ((ITM->TER & 1UL) != 0UL) {
 8101cb4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8101cb8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8101cbc:	f003 0301 	and.w	r3, r3, #1
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	d00b      	beq.n	8101cdc <ITM_SendChar0+0x40>
      /* Port 0 ready when u32 write does not stall; write via 8-bit alias */
      while (ITM->PORT[0].u8 == 0UL) { }
 8101cc4:	bf00      	nop
 8101cc6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8101cca:	781b      	ldrb	r3, [r3, #0]
 8101ccc:	b2db      	uxtb	r3, r3
 8101cce:	2b00      	cmp	r3, #0
 8101cd0:	d0f9      	beq.n	8101cc6 <ITM_SendChar0+0x2a>
      ITM->PORT[0].u8 = (uint8_t)ch;
 8101cd2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8101cd6:	687a      	ldr	r2, [r7, #4]
 8101cd8:	b2d2      	uxtb	r2, r2
 8101cda:	701a      	strb	r2, [r3, #0]
    }
  }
  return ch;
 8101cdc:	687b      	ldr	r3, [r7, #4]
}
 8101cde:	4618      	mov	r0, r3
 8101ce0:	370c      	adds	r7, #12
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce8:	4770      	bx	lr

08101cea <_write>:

int _write(int file, char *ptr, int len)
{
 8101cea:	b580      	push	{r7, lr}
 8101cec:	b086      	sub	sp, #24
 8101cee:	af00      	add	r7, sp, #0
 8101cf0:	60f8      	str	r0, [r7, #12]
 8101cf2:	60b9      	str	r1, [r7, #8]
 8101cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  for (int i = 0; i < len; i++) {
 8101cf6:	2300      	movs	r3, #0
 8101cf8:	617b      	str	r3, [r7, #20]
 8101cfa:	e009      	b.n	8101d10 <_write+0x26>
    ITM_SendChar0((uint32_t)*ptr++);
 8101cfc:	68bb      	ldr	r3, [r7, #8]
 8101cfe:	1c5a      	adds	r2, r3, #1
 8101d00:	60ba      	str	r2, [r7, #8]
 8101d02:	781b      	ldrb	r3, [r3, #0]
 8101d04:	4618      	mov	r0, r3
 8101d06:	f7ff ffc9 	bl	8101c9c <ITM_SendChar0>
  for (int i = 0; i < len; i++) {
 8101d0a:	697b      	ldr	r3, [r7, #20]
 8101d0c:	3301      	adds	r3, #1
 8101d0e:	617b      	str	r3, [r7, #20]
 8101d10:	697a      	ldr	r2, [r7, #20]
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	429a      	cmp	r2, r3
 8101d16:	dbf1      	blt.n	8101cfc <_write+0x12>
  }
  return len;
 8101d18:	687b      	ldr	r3, [r7, #4]
}
 8101d1a:	4618      	mov	r0, r3
 8101d1c:	3718      	adds	r7, #24
 8101d1e:	46bd      	mov	sp, r7
 8101d20:	bd80      	pop	{r7, pc}

08101d22 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8101d22:	b580      	push	{r7, lr}
 8101d24:	b082      	sub	sp, #8
 8101d26:	af00      	add	r7, sp, #0
 8101d28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8101d2a:	2001      	movs	r0, #1
 8101d2c:	f00c f9b6 	bl	810e09c <osDelay>
 8101d30:	e7fb      	b.n	8101d2a <StartDefaultTask+0x8>

08101d32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101d32:	b480      	push	{r7}
 8101d34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101d36:	b672      	cpsid	i
}
 8101d38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101d3a:	bf00      	nop
 8101d3c:	e7fd      	b.n	8101d3a <Error_Handler+0x8>

08101d3e <MAX30100_ReadTemperatureRegisters>:

// Global flag set by ISR, cleared by application
volatile uint8_t max30100_new_data_available = 0;

// Internal helper to read temperature registers
static HAL_StatusTypeDef MAX30100_ReadTemperatureRegisters(int8_t *temp_int, uint8_t *temp_frac) {
 8101d3e:	b580      	push	{r7, lr}
 8101d40:	b082      	sub	sp, #8
 8101d42:	af00      	add	r7, sp, #0
 8101d44:	6078      	str	r0, [r7, #4]
 8101d46:	6039      	str	r1, [r7, #0]
    if (MAX30100_ReadReg(MAX30100_TEMP_INTEGER, (uint8_t*)temp_int) != HAL_OK) return HAL_ERROR;
 8101d48:	6879      	ldr	r1, [r7, #4]
 8101d4a:	2016      	movs	r0, #22
 8101d4c:	f000 f814 	bl	8101d78 <MAX30100_ReadReg>
 8101d50:	4603      	mov	r3, r0
 8101d52:	2b00      	cmp	r3, #0
 8101d54:	d001      	beq.n	8101d5a <MAX30100_ReadTemperatureRegisters+0x1c>
 8101d56:	2301      	movs	r3, #1
 8101d58:	e009      	b.n	8101d6e <MAX30100_ReadTemperatureRegisters+0x30>
    if (MAX30100_ReadReg(MAX30100_TEMP_FRACTION, temp_frac) != HAL_OK) return HAL_ERROR;
 8101d5a:	6839      	ldr	r1, [r7, #0]
 8101d5c:	2017      	movs	r0, #23
 8101d5e:	f000 f80b 	bl	8101d78 <MAX30100_ReadReg>
 8101d62:	4603      	mov	r3, r0
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	d001      	beq.n	8101d6c <MAX30100_ReadTemperatureRegisters+0x2e>
 8101d68:	2301      	movs	r3, #1
 8101d6a:	e000      	b.n	8101d6e <MAX30100_ReadTemperatureRegisters+0x30>
    return HAL_OK;
 8101d6c:	2300      	movs	r3, #0
}
 8101d6e:	4618      	mov	r0, r3
 8101d70:	3708      	adds	r7, #8
 8101d72:	46bd      	mov	sp, r7
 8101d74:	bd80      	pop	{r7, pc}
	...

08101d78 <MAX30100_ReadReg>:

HAL_StatusTypeDef MAX30100_ReadReg(uint8_t regAddr, uint8_t *pData) {
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	b088      	sub	sp, #32
 8101d7c:	af04      	add	r7, sp, #16
 8101d7e:	4603      	mov	r3, r0
 8101d80:	6039      	str	r1, [r7, #0]
 8101d82:	71fb      	strb	r3, [r7, #7]
    if (_max30100_i2c_handle == NULL) return HAL_ERROR;
 8101d84:	4b11      	ldr	r3, [pc, #68]	@ (8101dcc <MAX30100_ReadReg+0x54>)
 8101d86:	681b      	ldr	r3, [r3, #0]
 8101d88:	2b00      	cmp	r3, #0
 8101d8a:	d101      	bne.n	8101d90 <MAX30100_ReadReg+0x18>
 8101d8c:	2301      	movs	r3, #1
 8101d8e:	e019      	b.n	8101dc4 <MAX30100_ReadReg+0x4c>
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(_max30100_i2c_handle, MAX30100_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, pData, 1, MAX30100_I2C_TIMEOUT);
 8101d90:	4b0e      	ldr	r3, [pc, #56]	@ (8101dcc <MAX30100_ReadReg+0x54>)
 8101d92:	6818      	ldr	r0, [r3, #0]
 8101d94:	79fb      	ldrb	r3, [r7, #7]
 8101d96:	b29a      	uxth	r2, r3
 8101d98:	2364      	movs	r3, #100	@ 0x64
 8101d9a:	9302      	str	r3, [sp, #8]
 8101d9c:	2301      	movs	r3, #1
 8101d9e:	9301      	str	r3, [sp, #4]
 8101da0:	683b      	ldr	r3, [r7, #0]
 8101da2:	9300      	str	r3, [sp, #0]
 8101da4:	2301      	movs	r3, #1
 8101da6:	21ae      	movs	r1, #174	@ 0xae
 8101da8:	f005 fd1c 	bl	81077e4 <HAL_I2C_Mem_Read>
 8101dac:	4603      	mov	r3, r0
 8101dae:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8101db0:	7bfb      	ldrb	r3, [r7, #15]
 8101db2:	2b00      	cmp	r3, #0
 8101db4:	d005      	beq.n	8101dc2 <MAX30100_ReadReg+0x4a>
        printf("MAX30100 I2C Read Error Reg:0x%02X, Status:%d\n", regAddr, status);
 8101db6:	79fb      	ldrb	r3, [r7, #7]
 8101db8:	7bfa      	ldrb	r2, [r7, #15]
 8101dba:	4619      	mov	r1, r3
 8101dbc:	4804      	ldr	r0, [pc, #16]	@ (8101dd0 <MAX30100_ReadReg+0x58>)
 8101dbe:	f00e fed7 	bl	8110b70 <iprintf>
    }
    return status;
 8101dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8101dc4:	4618      	mov	r0, r3
 8101dc6:	3710      	adds	r7, #16
 8101dc8:	46bd      	mov	sp, r7
 8101dca:	bd80      	pop	{r7, pc}
 8101dcc:	100004a8 	.word	0x100004a8
 8101dd0:	08111f44 	.word	0x08111f44

08101dd4 <MAX30100_WriteReg>:

HAL_StatusTypeDef MAX30100_WriteReg(uint8_t regAddr, uint8_t data) {
 8101dd4:	b580      	push	{r7, lr}
 8101dd6:	b088      	sub	sp, #32
 8101dd8:	af04      	add	r7, sp, #16
 8101dda:	4603      	mov	r3, r0
 8101ddc:	460a      	mov	r2, r1
 8101dde:	71fb      	strb	r3, [r7, #7]
 8101de0:	4613      	mov	r3, r2
 8101de2:	71bb      	strb	r3, [r7, #6]
    if (_max30100_i2c_handle == NULL) return HAL_ERROR;
 8101de4:	4b12      	ldr	r3, [pc, #72]	@ (8101e30 <MAX30100_WriteReg+0x5c>)
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	2b00      	cmp	r3, #0
 8101dea:	d101      	bne.n	8101df0 <MAX30100_WriteReg+0x1c>
 8101dec:	2301      	movs	r3, #1
 8101dee:	e01a      	b.n	8101e26 <MAX30100_WriteReg+0x52>
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(_max30100_i2c_handle, MAX30100_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, MAX30100_I2C_TIMEOUT);
 8101df0:	4b0f      	ldr	r3, [pc, #60]	@ (8101e30 <MAX30100_WriteReg+0x5c>)
 8101df2:	6818      	ldr	r0, [r3, #0]
 8101df4:	79fb      	ldrb	r3, [r7, #7]
 8101df6:	b29a      	uxth	r2, r3
 8101df8:	2364      	movs	r3, #100	@ 0x64
 8101dfa:	9302      	str	r3, [sp, #8]
 8101dfc:	2301      	movs	r3, #1
 8101dfe:	9301      	str	r3, [sp, #4]
 8101e00:	1dbb      	adds	r3, r7, #6
 8101e02:	9300      	str	r3, [sp, #0]
 8101e04:	2301      	movs	r3, #1
 8101e06:	21ae      	movs	r1, #174	@ 0xae
 8101e08:	f005 fbd8 	bl	81075bc <HAL_I2C_Mem_Write>
 8101e0c:	4603      	mov	r3, r0
 8101e0e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8101e10:	7bfb      	ldrb	r3, [r7, #15]
 8101e12:	2b00      	cmp	r3, #0
 8101e14:	d006      	beq.n	8101e24 <MAX30100_WriteReg+0x50>
         printf("MAX30100 I2C Write Error Reg:0x%02X, Data:0x%02X, Status:%d\n", regAddr, data, status);
 8101e16:	79f9      	ldrb	r1, [r7, #7]
 8101e18:	79bb      	ldrb	r3, [r7, #6]
 8101e1a:	461a      	mov	r2, r3
 8101e1c:	7bfb      	ldrb	r3, [r7, #15]
 8101e1e:	4805      	ldr	r0, [pc, #20]	@ (8101e34 <MAX30100_WriteReg+0x60>)
 8101e20:	f00e fea6 	bl	8110b70 <iprintf>
    }
    return status;
 8101e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8101e26:	4618      	mov	r0, r3
 8101e28:	3710      	adds	r7, #16
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	bd80      	pop	{r7, pc}
 8101e2e:	bf00      	nop
 8101e30:	100004a8 	.word	0x100004a8
 8101e34:	08111f74 	.word	0x08111f74

08101e38 <MAX30100_Reset>:

HAL_StatusTypeDef MAX30100_Reset(void) {
 8101e38:	b580      	push	{r7, lr}
 8101e3a:	b082      	sub	sp, #8
 8101e3c:	af00      	add	r7, sp, #0
    uint8_t mode_cfg;
    if (MAX30100_ReadReg(MAX30100_MODE_CONFIG, &mode_cfg) != HAL_OK) return HAL_ERROR;
 8101e3e:	1dbb      	adds	r3, r7, #6
 8101e40:	4619      	mov	r1, r3
 8101e42:	2006      	movs	r0, #6
 8101e44:	f7ff ff98 	bl	8101d78 <MAX30100_ReadReg>
 8101e48:	4603      	mov	r3, r0
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d001      	beq.n	8101e52 <MAX30100_Reset+0x1a>
 8101e4e:	2301      	movs	r3, #1
 8101e50:	e034      	b.n	8101ebc <MAX30100_Reset+0x84>
    if (MAX30100_WriteReg(MAX30100_MODE_CONFIG, mode_cfg | MAX30100_MODE_RESET_MASK) != HAL_OK) return HAL_ERROR;
 8101e52:	79bb      	ldrb	r3, [r7, #6]
 8101e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101e58:	b2db      	uxtb	r3, r3
 8101e5a:	4619      	mov	r1, r3
 8101e5c:	2006      	movs	r0, #6
 8101e5e:	f7ff ffb9 	bl	8101dd4 <MAX30100_WriteReg>
 8101e62:	4603      	mov	r3, r0
 8101e64:	2b00      	cmp	r3, #0
 8101e66:	d001      	beq.n	8101e6c <MAX30100_Reset+0x34>
 8101e68:	2301      	movs	r3, #1
 8101e6a:	e027      	b.n	8101ebc <MAX30100_Reset+0x84>

    HAL_Delay(10); // Allow time for reset
 8101e6c:	200a      	movs	r0, #10
 8101e6e:	f000 fe77 	bl	8102b60 <HAL_Delay>

    // Poll RESET bit to ensure it clears, or wait fixed time
    uint8_t retry = 0;
 8101e72:	2300      	movs	r3, #0
 8101e74:	71fb      	strb	r3, [r7, #7]
    do {
        if (MAX30100_ReadReg(MAX30100_MODE_CONFIG, &mode_cfg) != HAL_OK) return HAL_ERROR;
 8101e76:	1dbb      	adds	r3, r7, #6
 8101e78:	4619      	mov	r1, r3
 8101e7a:	2006      	movs	r0, #6
 8101e7c:	f7ff ff7c 	bl	8101d78 <MAX30100_ReadReg>
 8101e80:	4603      	mov	r3, r0
 8101e82:	2b00      	cmp	r3, #0
 8101e84:	d001      	beq.n	8101e8a <MAX30100_Reset+0x52>
 8101e86:	2301      	movs	r3, #1
 8101e88:	e018      	b.n	8101ebc <MAX30100_Reset+0x84>
        if (!(mode_cfg & MAX30100_MODE_RESET_MASK)) break;
 8101e8a:	79bb      	ldrb	r3, [r7, #6]
 8101e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101e90:	2b00      	cmp	r3, #0
 8101e92:	d009      	beq.n	8101ea8 <MAX30100_Reset+0x70>
        HAL_Delay(10);
 8101e94:	200a      	movs	r0, #10
 8101e96:	f000 fe63 	bl	8102b60 <HAL_Delay>
        retry++;
 8101e9a:	79fb      	ldrb	r3, [r7, #7]
 8101e9c:	3301      	adds	r3, #1
 8101e9e:	71fb      	strb	r3, [r7, #7]
    } while (retry < 10);
 8101ea0:	79fb      	ldrb	r3, [r7, #7]
 8101ea2:	2b09      	cmp	r3, #9
 8101ea4:	d9e7      	bls.n	8101e76 <MAX30100_Reset+0x3e>
 8101ea6:	e000      	b.n	8101eaa <MAX30100_Reset+0x72>
        if (!(mode_cfg & MAX30100_MODE_RESET_MASK)) break;
 8101ea8:	bf00      	nop

    if (retry == 10) {
 8101eaa:	79fb      	ldrb	r3, [r7, #7]
 8101eac:	2b0a      	cmp	r3, #10
 8101eae:	d104      	bne.n	8101eba <MAX30100_Reset+0x82>
        printf("MAX30100 Reset bit did not clear.\n");
 8101eb0:	4804      	ldr	r0, [pc, #16]	@ (8101ec4 <MAX30100_Reset+0x8c>)
 8101eb2:	f00e fec5 	bl	8110c40 <puts>
        return HAL_ERROR;
 8101eb6:	2301      	movs	r3, #1
 8101eb8:	e000      	b.n	8101ebc <MAX30100_Reset+0x84>
    }
    return HAL_OK;
 8101eba:	2300      	movs	r3, #0
}
 8101ebc:	4618      	mov	r0, r3
 8101ebe:	3708      	adds	r7, #8
 8101ec0:	46bd      	mov	sp, r7
 8101ec2:	bd80      	pop	{r7, pc}
 8101ec4:	08111fb4 	.word	0x08111fb4

08101ec8 <MAX30100_Init>:

HAL_StatusTypeDef MAX30100_Init(I2C_HandleTypeDef *hi2c) {
 8101ec8:	b580      	push	{r7, lr}
 8101eca:	b084      	sub	sp, #16
 8101ecc:	af00      	add	r7, sp, #0
 8101ece:	6078      	str	r0, [r7, #4]
    _max30100_i2c_handle = hi2c;
 8101ed0:	4a38      	ldr	r2, [pc, #224]	@ (8101fb4 <MAX30100_Init+0xec>)
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	6013      	str	r3, [r2, #0]
    max30100_new_data_available = 0;
 8101ed6:	4b38      	ldr	r3, [pc, #224]	@ (8101fb8 <MAX30100_Init+0xf0>)
 8101ed8:	2200      	movs	r2, #0
 8101eda:	701a      	strb	r2, [r3, #0]

    if (MAX30100_Reset() != HAL_OK) {
 8101edc:	f7ff ffac 	bl	8101e38 <MAX30100_Reset>
 8101ee0:	4603      	mov	r3, r0
 8101ee2:	2b00      	cmp	r3, #0
 8101ee4:	d004      	beq.n	8101ef0 <MAX30100_Init+0x28>
        printf("MAX30100 Reset failed.\n");
 8101ee6:	4835      	ldr	r0, [pc, #212]	@ (8101fbc <MAX30100_Init+0xf4>)
 8101ee8:	f00e feaa 	bl	8110c40 <puts>
        return HAL_ERROR;
 8101eec:	2301      	movs	r3, #1
 8101eee:	e05d      	b.n	8101fac <MAX30100_Init+0xe4>
    }

    // Verify Part ID
    uint8_t part_id;
    if (MAX30100_ReadReg(MAX30100_PART_ID, &part_id) != HAL_OK || part_id != 0x11) {
 8101ef0:	f107 030f 	add.w	r3, r7, #15
 8101ef4:	4619      	mov	r1, r3
 8101ef6:	20ff      	movs	r0, #255	@ 0xff
 8101ef8:	f7ff ff3e 	bl	8101d78 <MAX30100_ReadReg>
 8101efc:	4603      	mov	r3, r0
 8101efe:	2b00      	cmp	r3, #0
 8101f00:	d102      	bne.n	8101f08 <MAX30100_Init+0x40>
 8101f02:	7bfb      	ldrb	r3, [r7, #15]
 8101f04:	2b11      	cmp	r3, #17
 8101f06:	d004      	beq.n	8101f12 <MAX30100_Init+0x4a>
         printf("MAX30100 Part ID mismatch or read error. Expected 0x11, got 0x%02X\n", part_id);
 8101f08:	7bfb      	ldrb	r3, [r7, #15]
 8101f0a:	4619      	mov	r1, r3
 8101f0c:	482c      	ldr	r0, [pc, #176]	@ (8101fc0 <MAX30100_Init+0xf8>)
 8101f0e:	f00e fe2f 	bl	8110b70 <iprintf>
        // return HAL_ERROR; // Continue for now, could be an issue with some modules/clones
    }


    // Default configurations
    if (MAX30100_WriteReg(MAX30100_INTERRUPT_ENABLE, 0x00) != HAL_OK) return HAL_ERROR; // Disable all interrupts initially
 8101f12:	2100      	movs	r1, #0
 8101f14:	2001      	movs	r0, #1
 8101f16:	f7ff ff5d 	bl	8101dd4 <MAX30100_WriteReg>
 8101f1a:	4603      	mov	r3, r0
 8101f1c:	2b00      	cmp	r3, #0
 8101f1e:	d001      	beq.n	8101f24 <MAX30100_Init+0x5c>
 8101f20:	2301      	movs	r3, #1
 8101f22:	e043      	b.n	8101fac <MAX30100_Init+0xe4>
    if (MAX30100_ClearFIFO() != HAL_OK) return HAL_ERROR;
 8101f24:	f000 f94b 	bl	81021be <MAX30100_ClearFIFO>
 8101f28:	4603      	mov	r3, r0
 8101f2a:	2b00      	cmp	r3, #0
 8101f2c:	d001      	beq.n	8101f32 <MAX30100_Init+0x6a>
 8101f2e:	2301      	movs	r3, #1
 8101f30:	e03c      	b.n	8101fac <MAX30100_Init+0xe4>
    if (MAX30100_SetLedPulseWidth(MAX30100_PULSEWIDTH_DEFAULT) != HAL_OK) return HAL_ERROR;
 8101f32:	2003      	movs	r0, #3
 8101f34:	f000 f901 	bl	810213a <MAX30100_SetLedPulseWidth>
 8101f38:	4603      	mov	r3, r0
 8101f3a:	2b00      	cmp	r3, #0
 8101f3c:	d001      	beq.n	8101f42 <MAX30100_Init+0x7a>
 8101f3e:	2301      	movs	r3, #1
 8101f40:	e034      	b.n	8101fac <MAX30100_Init+0xe4>
    if (MAX30100_SetSpO2SampleRate(MAX30100_SPO2_SAMPLERATE_DEFAULT) != HAL_OK) return HAL_ERROR;
 8101f42:	2001      	movs	r0, #1
 8101f44:	f000 f8d0 	bl	81020e8 <MAX30100_SetSpO2SampleRate>
 8101f48:	4603      	mov	r3, r0
 8101f4a:	2b00      	cmp	r3, #0
 8101f4c:	d001      	beq.n	8101f52 <MAX30100_Init+0x8a>
 8101f4e:	2301      	movs	r3, #1
 8101f50:	e02c      	b.n	8101fac <MAX30100_Init+0xe4>
    if (MAX30100_SetLedCurrents(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT) != HAL_OK) return HAL_ERROR;
 8101f52:	2106      	movs	r1, #6
 8101f54:	2006      	movs	r0, #6
 8101f56:	f000 f914 	bl	8102182 <MAX30100_SetLedCurrents>
 8101f5a:	4603      	mov	r3, r0
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d001      	beq.n	8101f64 <MAX30100_Init+0x9c>
 8101f60:	2301      	movs	r3, #1
 8101f62:	e023      	b.n	8101fac <MAX30100_Init+0xe4>

    // Configure SpO2 mode specific register settings
    uint8_t spo2_config_val;
    if(MAX30100_ReadReg(MAX30100_SPO2_CONFIG, &spo2_config_val) != HAL_OK) return HAL_ERROR;
 8101f64:	f107 030e 	add.w	r3, r7, #14
 8101f68:	4619      	mov	r1, r3
 8101f6a:	2007      	movs	r0, #7
 8101f6c:	f7ff ff04 	bl	8101d78 <MAX30100_ReadReg>
 8101f70:	4603      	mov	r3, r0
 8101f72:	2b00      	cmp	r3, #0
 8101f74:	d001      	beq.n	8101f7a <MAX30100_Init+0xb2>
 8101f76:	2301      	movs	r3, #1
 8101f78:	e018      	b.n	8101fac <MAX30100_Init+0xe4>
    spo2_config_val |= MAX30100_SPO2_HI_RES_EN_MASK; // Enable HI-RES for SpO2 mode
 8101f7a:	7bbb      	ldrb	r3, [r7, #14]
 8101f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101f80:	b2db      	uxtb	r3, r3
 8101f82:	73bb      	strb	r3, [r7, #14]
    if(MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2_config_val) != HAL_OK) return HAL_ERROR;
 8101f84:	7bbb      	ldrb	r3, [r7, #14]
 8101f86:	4619      	mov	r1, r3
 8101f88:	2007      	movs	r0, #7
 8101f8a:	f7ff ff23 	bl	8101dd4 <MAX30100_WriteReg>
 8101f8e:	4603      	mov	r3, r0
 8101f90:	2b00      	cmp	r3, #0
 8101f92:	d001      	beq.n	8101f98 <MAX30100_Init+0xd0>
 8101f94:	2301      	movs	r3, #1
 8101f96:	e009      	b.n	8101fac <MAX30100_Init+0xe4>

    // Enable A_FULL interrupt to start (temp can be enabled on demand)
    if (MAX30100_ConfigInterrupts(1, 0) != HAL_OK) return HAL_ERROR;
 8101f98:	2100      	movs	r1, #0
 8101f9a:	2001      	movs	r0, #1
 8101f9c:	f000 f812 	bl	8101fc4 <MAX30100_ConfigInterrupts>
 8101fa0:	4603      	mov	r3, r0
 8101fa2:	2b00      	cmp	r3, #0
 8101fa4:	d001      	beq.n	8101faa <MAX30100_Init+0xe2>
 8101fa6:	2301      	movs	r3, #1
 8101fa8:	e000      	b.n	8101fac <MAX30100_Init+0xe4>

    return HAL_OK;
 8101faa:	2300      	movs	r3, #0
}
 8101fac:	4618      	mov	r0, r3
 8101fae:	3710      	adds	r7, #16
 8101fb0:	46bd      	mov	sp, r7
 8101fb2:	bd80      	pop	{r7, pc}
 8101fb4:	100004a8 	.word	0x100004a8
 8101fb8:	100004f0 	.word	0x100004f0
 8101fbc:	08111fd8 	.word	0x08111fd8
 8101fc0:	08111ff0 	.word	0x08111ff0

08101fc4 <MAX30100_ConfigInterrupts>:

HAL_StatusTypeDef MAX30100_ConfigInterrupts(uint8_t enable_a_full, uint8_t enable_temp_rdy) {
 8101fc4:	b580      	push	{r7, lr}
 8101fc6:	b084      	sub	sp, #16
 8101fc8:	af00      	add	r7, sp, #0
 8101fca:	4603      	mov	r3, r0
 8101fcc:	460a      	mov	r2, r1
 8101fce:	71fb      	strb	r3, [r7, #7]
 8101fd0:	4613      	mov	r3, r2
 8101fd2:	71bb      	strb	r3, [r7, #6]
    uint8_t int_enable_val = 0x00;
 8101fd4:	2300      	movs	r3, #0
 8101fd6:	73fb      	strb	r3, [r7, #15]
    if (enable_a_full) int_enable_val |= MAX30100_INT_A_FULL_MASK;
 8101fd8:	79fb      	ldrb	r3, [r7, #7]
 8101fda:	2b00      	cmp	r3, #0
 8101fdc:	d003      	beq.n	8101fe6 <MAX30100_ConfigInterrupts+0x22>
 8101fde:	7bfb      	ldrb	r3, [r7, #15]
 8101fe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8101fe4:	73fb      	strb	r3, [r7, #15]
    if (enable_temp_rdy) int_enable_val |= MAX30100_INT_TEMP_RDY_MASK;
 8101fe6:	79bb      	ldrb	r3, [r7, #6]
 8101fe8:	2b00      	cmp	r3, #0
 8101fea:	d003      	beq.n	8101ff4 <MAX30100_ConfigInterrupts+0x30>
 8101fec:	7bfb      	ldrb	r3, [r7, #15]
 8101fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101ff2:	73fb      	strb	r3, [r7, #15]
    return MAX30100_WriteReg(MAX30100_INTERRUPT_ENABLE, int_enable_val);
 8101ff4:	7bfb      	ldrb	r3, [r7, #15]
 8101ff6:	4619      	mov	r1, r3
 8101ff8:	2001      	movs	r0, #1
 8101ffa:	f7ff feeb 	bl	8101dd4 <MAX30100_WriteReg>
 8101ffe:	4603      	mov	r3, r0
}
 8102000:	4618      	mov	r0, r3
 8102002:	3710      	adds	r7, #16
 8102004:	46bd      	mov	sp, r7
 8102006:	bd80      	pop	{r7, pc}

08102008 <MAX30100_InterruptHandler>:

void MAX30100_InterruptHandler(void) {
 8102008:	b580      	push	{r7, lr}
 810200a:	b082      	sub	sp, #8
 810200c:	af00      	add	r7, sp, #0
    uint8_t int_status;
    if (MAX30100_ReadReg(MAX30100_INTERRUPT_STATUS, &int_status) != HAL_OK) {
 810200e:	1dfb      	adds	r3, r7, #7
 8102010:	4619      	mov	r1, r3
 8102012:	2000      	movs	r0, #0
 8102014:	f7ff feb0 	bl	8101d78 <MAX30100_ReadReg>
 8102018:	4603      	mov	r3, r0
 810201a:	2b00      	cmp	r3, #0
 810201c:	d131      	bne.n	8102082 <MAX30100_InterruptHandler+0x7a>
        // Error reading interrupt status, cannot proceed
        return;
    }

    if (int_status & MAX30100_INT_A_FULL_MASK) {
 810201e:	79fb      	ldrb	r3, [r7, #7]
 8102020:	b25b      	sxtb	r3, r3
 8102022:	2b00      	cmp	r3, #0
 8102024:	da0a      	bge.n	810203c <MAX30100_InterruptHandler+0x34>
        if (MAX30100_ReadFifoData(max30100_ir_buffer, max30100_red_buffer, MAX30100_SAMPLES_PER_READ) == HAL_OK) {
 8102026:	2210      	movs	r2, #16
 8102028:	4918      	ldr	r1, [pc, #96]	@ (810208c <MAX30100_InterruptHandler+0x84>)
 810202a:	4819      	ldr	r0, [pc, #100]	@ (8102090 <MAX30100_InterruptHandler+0x88>)
 810202c:	f000 f8e8 	bl	8102200 <MAX30100_ReadFifoData>
 8102030:	4603      	mov	r3, r0
 8102032:	2b00      	cmp	r3, #0
 8102034:	d102      	bne.n	810203c <MAX30100_InterruptHandler+0x34>
            max30100_new_data_available = 1;
 8102036:	4b17      	ldr	r3, [pc, #92]	@ (8102094 <MAX30100_InterruptHandler+0x8c>)
 8102038:	2201      	movs	r2, #1
 810203a:	701a      	strb	r2, [r3, #0]
        }
    }

    if (int_status & MAX30100_INT_TEMP_RDY_MASK) {
 810203c:	79fb      	ldrb	r3, [r7, #7]
 810203e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102042:	2b00      	cmp	r3, #0
 8102044:	d01e      	beq.n	8102084 <MAX30100_InterruptHandler+0x7c>
        int8_t temp_int;
        uint8_t temp_frac;
        if (MAX30100_ReadTemperatureRegisters(&temp_int, &temp_frac) == HAL_OK) {
 8102046:	1d7a      	adds	r2, r7, #5
 8102048:	1dbb      	adds	r3, r7, #6
 810204a:	4611      	mov	r1, r2
 810204c:	4618      	mov	r0, r3
 810204e:	f7ff fe76 	bl	8101d3e <MAX30100_ReadTemperatureRegisters>
 8102052:	4603      	mov	r3, r0
 8102054:	2b00      	cmp	r3, #0
 8102056:	d115      	bne.n	8102084 <MAX30100_InterruptHandler+0x7c>
            max30100_last_temperature = (float)temp_int + ((float)temp_frac * 0.0625f);
 8102058:	f997 3006 	ldrsb.w	r3, [r7, #6]
 810205c:	ee07 3a90 	vmov	s15, r3
 8102060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102064:	797b      	ldrb	r3, [r7, #5]
 8102066:	ee07 3a90 	vmov	s15, r3
 810206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810206e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8102098 <MAX30100_InterruptHandler+0x90>
 8102072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8102076:	ee77 7a27 	vadd.f32	s15, s14, s15
 810207a:	4b08      	ldr	r3, [pc, #32]	@ (810209c <MAX30100_InterruptHandler+0x94>)
 810207c:	edc3 7a00 	vstr	s15, [r3]
 8102080:	e000      	b.n	8102084 <MAX30100_InterruptHandler+0x7c>
        return;
 8102082:	bf00      	nop
        // Or simply ensure A_FULL interrupt enable wasn't cleared by temp reading logic.
        // The current design expects MAX30100_ReadTemperature to manage enabling/disabling temp int if needed.
        // If temp reading is always followed by A_FULL, ensure A_FULL_EN is still set.
        // For simplicity, we assume MAX30100_ConfigInterrupts is called correctly externally.
    }
}
 8102084:	3708      	adds	r7, #8
 8102086:	46bd      	mov	sp, r7
 8102088:	bd80      	pop	{r7, pc}
 810208a:	bf00      	nop
 810208c:	100004cc 	.word	0x100004cc
 8102090:	100004ac 	.word	0x100004ac
 8102094:	100004f0 	.word	0x100004f0
 8102098:	3d800000 	.word	0x3d800000
 810209c:	100004ec 	.word	0x100004ec

081020a0 <MAX30100_SetMode>:

HAL_StatusTypeDef MAX30100_SetMode(MAX30100_OperatingMode mode) {
 81020a0:	b580      	push	{r7, lr}
 81020a2:	b084      	sub	sp, #16
 81020a4:	af00      	add	r7, sp, #0
 81020a6:	4603      	mov	r3, r0
 81020a8:	71fb      	strb	r3, [r7, #7]
    uint8_t mode_cfg_val;
    if (MAX30100_ReadReg(MAX30100_MODE_CONFIG, &mode_cfg_val) != HAL_OK) return HAL_ERROR;
 81020aa:	f107 030f 	add.w	r3, r7, #15
 81020ae:	4619      	mov	r1, r3
 81020b0:	2006      	movs	r0, #6
 81020b2:	f7ff fe61 	bl	8101d78 <MAX30100_ReadReg>
 81020b6:	4603      	mov	r3, r0
 81020b8:	2b00      	cmp	r3, #0
 81020ba:	d001      	beq.n	81020c0 <MAX30100_SetMode+0x20>
 81020bc:	2301      	movs	r3, #1
 81020be:	e00f      	b.n	81020e0 <MAX30100_SetMode+0x40>
    mode_cfg_val &= ~(MAX30100_MODE_MASK); // Clear mode bits
 81020c0:	7bfb      	ldrb	r3, [r7, #15]
 81020c2:	f023 0307 	bic.w	r3, r3, #7
 81020c6:	b2db      	uxtb	r3, r3
 81020c8:	73fb      	strb	r3, [r7, #15]
    mode_cfg_val |= (uint8_t)mode;
 81020ca:	7bfa      	ldrb	r2, [r7, #15]
 81020cc:	79fb      	ldrb	r3, [r7, #7]
 81020ce:	4313      	orrs	r3, r2
 81020d0:	b2db      	uxtb	r3, r3
 81020d2:	73fb      	strb	r3, [r7, #15]
    return MAX30100_WriteReg(MAX30100_MODE_CONFIG, mode_cfg_val);
 81020d4:	7bfb      	ldrb	r3, [r7, #15]
 81020d6:	4619      	mov	r1, r3
 81020d8:	2006      	movs	r0, #6
 81020da:	f7ff fe7b 	bl	8101dd4 <MAX30100_WriteReg>
 81020de:	4603      	mov	r3, r0
}
 81020e0:	4618      	mov	r0, r3
 81020e2:	3710      	adds	r7, #16
 81020e4:	46bd      	mov	sp, r7
 81020e6:	bd80      	pop	{r7, pc}

081020e8 <MAX30100_SetSpO2SampleRate>:

HAL_StatusTypeDef MAX30100_SetSpO2SampleRate(MAX30100_SpO2SampleRate sr) {
 81020e8:	b580      	push	{r7, lr}
 81020ea:	b084      	sub	sp, #16
 81020ec:	af00      	add	r7, sp, #0
 81020ee:	4603      	mov	r3, r0
 81020f0:	71fb      	strb	r3, [r7, #7]
    uint8_t spo2_cfg_val;
    if (MAX30100_ReadReg(MAX30100_SPO2_CONFIG, &spo2_cfg_val) != HAL_OK) return HAL_ERROR;
 81020f2:	f107 030f 	add.w	r3, r7, #15
 81020f6:	4619      	mov	r1, r3
 81020f8:	2007      	movs	r0, #7
 81020fa:	f7ff fe3d 	bl	8101d78 <MAX30100_ReadReg>
 81020fe:	4603      	mov	r3, r0
 8102100:	2b00      	cmp	r3, #0
 8102102:	d001      	beq.n	8102108 <MAX30100_SetSpO2SampleRate+0x20>
 8102104:	2301      	movs	r3, #1
 8102106:	e014      	b.n	8102132 <MAX30100_SetSpO2SampleRate+0x4a>
    spo2_cfg_val &= ~(MAX30100_SPO2_SR_MASK); // Clear sample rate bits
 8102108:	7bfb      	ldrb	r3, [r7, #15]
 810210a:	f023 031c 	bic.w	r3, r3, #28
 810210e:	b2db      	uxtb	r3, r3
 8102110:	73fb      	strb	r3, [r7, #15]
    spo2_cfg_val |= ((uint8_t)sr << 2); // SR bits are [4:2]
 8102112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8102116:	009b      	lsls	r3, r3, #2
 8102118:	b25a      	sxtb	r2, r3
 810211a:	7bfb      	ldrb	r3, [r7, #15]
 810211c:	b25b      	sxtb	r3, r3
 810211e:	4313      	orrs	r3, r2
 8102120:	b25b      	sxtb	r3, r3
 8102122:	b2db      	uxtb	r3, r3
 8102124:	73fb      	strb	r3, [r7, #15]
    return MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2_cfg_val);
 8102126:	7bfb      	ldrb	r3, [r7, #15]
 8102128:	4619      	mov	r1, r3
 810212a:	2007      	movs	r0, #7
 810212c:	f7ff fe52 	bl	8101dd4 <MAX30100_WriteReg>
 8102130:	4603      	mov	r3, r0
}
 8102132:	4618      	mov	r0, r3
 8102134:	3710      	adds	r7, #16
 8102136:	46bd      	mov	sp, r7
 8102138:	bd80      	pop	{r7, pc}

0810213a <MAX30100_SetLedPulseWidth>:

HAL_StatusTypeDef MAX30100_SetLedPulseWidth(MAX30100_LedPulseWidth pw) {
 810213a:	b580      	push	{r7, lr}
 810213c:	b084      	sub	sp, #16
 810213e:	af00      	add	r7, sp, #0
 8102140:	4603      	mov	r3, r0
 8102142:	71fb      	strb	r3, [r7, #7]
    uint8_t spo2_cfg_val;
    if (MAX30100_ReadReg(MAX30100_SPO2_CONFIG, &spo2_cfg_val) != HAL_OK) return HAL_ERROR;
 8102144:	f107 030f 	add.w	r3, r7, #15
 8102148:	4619      	mov	r1, r3
 810214a:	2007      	movs	r0, #7
 810214c:	f7ff fe14 	bl	8101d78 <MAX30100_ReadReg>
 8102150:	4603      	mov	r3, r0
 8102152:	2b00      	cmp	r3, #0
 8102154:	d001      	beq.n	810215a <MAX30100_SetLedPulseWidth+0x20>
 8102156:	2301      	movs	r3, #1
 8102158:	e00f      	b.n	810217a <MAX30100_SetLedPulseWidth+0x40>
    spo2_cfg_val &= ~(MAX30100_SPO2_PW_MASK); // Clear pulse width bits
 810215a:	7bfb      	ldrb	r3, [r7, #15]
 810215c:	f023 0303 	bic.w	r3, r3, #3
 8102160:	b2db      	uxtb	r3, r3
 8102162:	73fb      	strb	r3, [r7, #15]
    spo2_cfg_val |= (uint8_t)pw; // PW bits are [1:0]
 8102164:	7bfa      	ldrb	r2, [r7, #15]
 8102166:	79fb      	ldrb	r3, [r7, #7]
 8102168:	4313      	orrs	r3, r2
 810216a:	b2db      	uxtb	r3, r3
 810216c:	73fb      	strb	r3, [r7, #15]
    return MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2_cfg_val);
 810216e:	7bfb      	ldrb	r3, [r7, #15]
 8102170:	4619      	mov	r1, r3
 8102172:	2007      	movs	r0, #7
 8102174:	f7ff fe2e 	bl	8101dd4 <MAX30100_WriteReg>
 8102178:	4603      	mov	r3, r0
}
 810217a:	4618      	mov	r0, r3
 810217c:	3710      	adds	r7, #16
 810217e:	46bd      	mov	sp, r7
 8102180:	bd80      	pop	{r7, pc}

08102182 <MAX30100_SetLedCurrents>:

HAL_StatusTypeDef MAX30100_SetLedCurrents(MAX30100_LedCurrent redCurrent, MAX30100_LedCurrent irCurrent) {
 8102182:	b580      	push	{r7, lr}
 8102184:	b084      	sub	sp, #16
 8102186:	af00      	add	r7, sp, #0
 8102188:	4603      	mov	r3, r0
 810218a:	460a      	mov	r2, r1
 810218c:	71fb      	strb	r3, [r7, #7]
 810218e:	4613      	mov	r3, r2
 8102190:	71bb      	strb	r3, [r7, #6]
    uint8_t led_cfg_val = (((uint8_t)redCurrent & 0x0F) << 4) | ((uint8_t)irCurrent & 0x0F);
 8102192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8102196:	011b      	lsls	r3, r3, #4
 8102198:	b25a      	sxtb	r2, r3
 810219a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 810219e:	f003 030f 	and.w	r3, r3, #15
 81021a2:	b25b      	sxtb	r3, r3
 81021a4:	4313      	orrs	r3, r2
 81021a6:	b25b      	sxtb	r3, r3
 81021a8:	73fb      	strb	r3, [r7, #15]
    return MAX30100_WriteReg(MAX30100_LED_CONFIG, led_cfg_val);
 81021aa:	7bfb      	ldrb	r3, [r7, #15]
 81021ac:	4619      	mov	r1, r3
 81021ae:	2009      	movs	r0, #9
 81021b0:	f7ff fe10 	bl	8101dd4 <MAX30100_WriteReg>
 81021b4:	4603      	mov	r3, r0
}
 81021b6:	4618      	mov	r0, r3
 81021b8:	3710      	adds	r7, #16
 81021ba:	46bd      	mov	sp, r7
 81021bc:	bd80      	pop	{r7, pc}

081021be <MAX30100_ClearFIFO>:

HAL_StatusTypeDef MAX30100_ClearFIFO(void) {
 81021be:	b580      	push	{r7, lr}
 81021c0:	af00      	add	r7, sp, #0
    if (MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00) != HAL_OK) return HAL_ERROR;
 81021c2:	2100      	movs	r1, #0
 81021c4:	2002      	movs	r0, #2
 81021c6:	f7ff fe05 	bl	8101dd4 <MAX30100_WriteReg>
 81021ca:	4603      	mov	r3, r0
 81021cc:	2b00      	cmp	r3, #0
 81021ce:	d001      	beq.n	81021d4 <MAX30100_ClearFIFO+0x16>
 81021d0:	2301      	movs	r3, #1
 81021d2:	e012      	b.n	81021fa <MAX30100_ClearFIFO+0x3c>
    if (MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00) != HAL_OK) return HAL_ERROR;
 81021d4:	2100      	movs	r1, #0
 81021d6:	2004      	movs	r0, #4
 81021d8:	f7ff fdfc 	bl	8101dd4 <MAX30100_WriteReg>
 81021dc:	4603      	mov	r3, r0
 81021de:	2b00      	cmp	r3, #0
 81021e0:	d001      	beq.n	81021e6 <MAX30100_ClearFIFO+0x28>
 81021e2:	2301      	movs	r3, #1
 81021e4:	e009      	b.n	81021fa <MAX30100_ClearFIFO+0x3c>
    if (MAX30100_WriteReg(MAX30100_OVF_COUNTER, 0x00) != HAL_OK) return HAL_ERROR;
 81021e6:	2100      	movs	r1, #0
 81021e8:	2003      	movs	r0, #3
 81021ea:	f7ff fdf3 	bl	8101dd4 <MAX30100_WriteReg>
 81021ee:	4603      	mov	r3, r0
 81021f0:	2b00      	cmp	r3, #0
 81021f2:	d001      	beq.n	81021f8 <MAX30100_ClearFIFO+0x3a>
 81021f4:	2301      	movs	r3, #1
 81021f6:	e000      	b.n	81021fa <MAX30100_ClearFIFO+0x3c>
    return HAL_OK;
 81021f8:	2300      	movs	r3, #0
}
 81021fa:	4618      	mov	r0, r3
 81021fc:	bd80      	pop	{r7, pc}
	...

08102200 <MAX30100_ReadFifoData>:

HAL_StatusTypeDef MAX30100_ReadFifoData(uint16_t* ir_data, uint16_t* red_data, uint8_t num_samples) {
 8102200:	b580      	push	{r7, lr}
 8102202:	b09c      	sub	sp, #112	@ 0x70
 8102204:	af04      	add	r7, sp, #16
 8102206:	60f8      	str	r0, [r7, #12]
 8102208:	60b9      	str	r1, [r7, #8]
 810220a:	4613      	mov	r3, r2
 810220c:	71fb      	strb	r3, [r7, #7]
    if (num_samples == 0 || num_samples > MAX30100_SAMPLES_PER_READ) return HAL_ERROR;
 810220e:	79fb      	ldrb	r3, [r7, #7]
 8102210:	2b00      	cmp	r3, #0
 8102212:	d002      	beq.n	810221a <MAX30100_ReadFifoData+0x1a>
 8102214:	79fb      	ldrb	r3, [r7, #7]
 8102216:	2b10      	cmp	r3, #16
 8102218:	d901      	bls.n	810221e <MAX30100_ReadFifoData+0x1e>
 810221a:	2301      	movs	r3, #1
 810221c:	e070      	b.n	8102300 <MAX30100_ReadFifoData+0x100>

    uint8_t raw_fifo_data[MAX30100_BUFFER_SIZE_BYTES]; // Max 64 bytes for 16 samples
    uint16_t bytes_to_read = num_samples * MAX30100_BYTES_PER_SAMPLE;
 810221e:	79fb      	ldrb	r3, [r7, #7]
 8102220:	b29b      	uxth	r3, r3
 8102222:	009b      	lsls	r3, r3, #2
 8102224:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(_max30100_i2c_handle, MAX30100_I2C_ADDR, MAX30100_FIFO_DATA,
 8102228:	4b37      	ldr	r3, [pc, #220]	@ (8102308 <MAX30100_ReadFifoData+0x108>)
 810222a:	6818      	ldr	r0, [r3, #0]
 810222c:	2364      	movs	r3, #100	@ 0x64
 810222e:	9302      	str	r3, [sp, #8]
 8102230:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8102234:	9301      	str	r3, [sp, #4]
 8102236:	f107 0314 	add.w	r3, r7, #20
 810223a:	9300      	str	r3, [sp, #0]
 810223c:	2301      	movs	r3, #1
 810223e:	2205      	movs	r2, #5
 8102240:	21ae      	movs	r1, #174	@ 0xae
 8102242:	f005 facf 	bl	81077e4 <HAL_I2C_Mem_Read>
 8102246:	4603      	mov	r3, r0
 8102248:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                                           I2C_MEMADD_SIZE_8BIT, raw_fifo_data, bytes_to_read, MAX30100_I2C_TIMEOUT);

    if (status == HAL_OK) {
 810224c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8102250:	2b00      	cmp	r3, #0
 8102252:	d14d      	bne.n	81022f0 <MAX30100_ReadFifoData+0xf0>
        for (uint8_t i = 0; i < num_samples; i++) {
 8102254:	2300      	movs	r3, #0
 8102256:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 810225a:	e043      	b.n	81022e4 <MAX30100_ReadFifoData+0xe4>
            uint16_t ir_sample_raw  = ((uint16_t)raw_fifo_data[i * MAX30100_BYTES_PER_SAMPLE + 0] << 8) | raw_fifo_data[i * MAX30100_BYTES_PER_SAMPLE + 1];
 810225c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8102260:	009b      	lsls	r3, r3, #2
 8102262:	3360      	adds	r3, #96	@ 0x60
 8102264:	443b      	add	r3, r7
 8102266:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 810226a:	b21b      	sxth	r3, r3
 810226c:	021b      	lsls	r3, r3, #8
 810226e:	b21a      	sxth	r2, r3
 8102270:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8102274:	009b      	lsls	r3, r3, #2
 8102276:	3301      	adds	r3, #1
 8102278:	3360      	adds	r3, #96	@ 0x60
 810227a:	443b      	add	r3, r7
 810227c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8102280:	b21b      	sxth	r3, r3
 8102282:	4313      	orrs	r3, r2
 8102284:	b21b      	sxth	r3, r3
 8102286:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            uint16_t red_sample_raw = ((uint16_t)raw_fifo_data[i * MAX30100_BYTES_PER_SAMPLE + 2] << 8) | raw_fifo_data[i * MAX30100_BYTES_PER_SAMPLE + 3];
 810228a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 810228e:	009b      	lsls	r3, r3, #2
 8102290:	3302      	adds	r3, #2
 8102292:	3360      	adds	r3, #96	@ 0x60
 8102294:	443b      	add	r3, r7
 8102296:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 810229a:	b21b      	sxth	r3, r3
 810229c:	021b      	lsls	r3, r3, #8
 810229e:	b21a      	sxth	r2, r3
 81022a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 81022a4:	009b      	lsls	r3, r3, #2
 81022a6:	3303      	adds	r3, #3
 81022a8:	3360      	adds	r3, #96	@ 0x60
 81022aa:	443b      	add	r3, r7
 81022ac:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 81022b0:	b21b      	sxth	r3, r3
 81022b2:	4313      	orrs	r3, r2
 81022b4:	b21b      	sxth	r3, r3
 81022b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            // Depending on pulse width, samples might not use full 16 bits.
            // For 1600us pulse width (16-bit), this direct assignment is fine.
            // For shorter pulse widths, the MSBs might be zero.
            ir_data[i] = ir_sample_raw;
 81022ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 81022be:	005b      	lsls	r3, r3, #1
 81022c0:	68fa      	ldr	r2, [r7, #12]
 81022c2:	4413      	add	r3, r2
 81022c4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 81022c8:	801a      	strh	r2, [r3, #0]
            red_data[i] = red_sample_raw;
 81022ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 81022ce:	005b      	lsls	r3, r3, #1
 81022d0:	68ba      	ldr	r2, [r7, #8]
 81022d2:	4413      	add	r3, r2
 81022d4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 81022d8:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < num_samples; i++) {
 81022da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 81022de:	3301      	adds	r3, #1
 81022e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 81022e4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 81022e8:	79fb      	ldrb	r3, [r7, #7]
 81022ea:	429a      	cmp	r2, r3
 81022ec:	d3b6      	bcc.n	810225c <MAX30100_ReadFifoData+0x5c>
 81022ee:	e005      	b.n	81022fc <MAX30100_ReadFifoData+0xfc>
        }
    } else {
         printf("MAX30100 FIFO Read Error: %d\n", status);
 81022f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 81022f4:	4619      	mov	r1, r3
 81022f6:	4805      	ldr	r0, [pc, #20]	@ (810230c <MAX30100_ReadFifoData+0x10c>)
 81022f8:	f00e fc3a 	bl	8110b70 <iprintf>
    }
    return status;
 81022fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8102300:	4618      	mov	r0, r3
 8102302:	3760      	adds	r7, #96	@ 0x60
 8102304:	46bd      	mov	sp, r7
 8102306:	bd80      	pop	{r7, pc}
 8102308:	100004a8 	.word	0x100004a8
 810230c:	08112034 	.word	0x08112034

08102310 <MAX30100_ReadTemperature>:

HAL_StatusTypeDef MAX30100_ReadTemperature(float *pTemperature) {
 8102310:	b580      	push	{r7, lr}
 8102312:	b084      	sub	sp, #16
 8102314:	af00      	add	r7, sp, #0
 8102316:	6078      	str	r0, [r7, #4]
    uint8_t original_mode_cfg, current_int_enable;

    // Save current mode and interrupt config
    if (MAX30100_ReadReg(MAX30100_MODE_CONFIG, &original_mode_cfg) != HAL_OK) return HAL_ERROR;
 8102318:	f107 030d 	add.w	r3, r7, #13
 810231c:	4619      	mov	r1, r3
 810231e:	2006      	movs	r0, #6
 8102320:	f7ff fd2a 	bl	8101d78 <MAX30100_ReadReg>
 8102324:	4603      	mov	r3, r0
 8102326:	2b00      	cmp	r3, #0
 8102328:	d001      	beq.n	810232e <MAX30100_ReadTemperature+0x1e>
 810232a:	2301      	movs	r3, #1
 810232c:	e083      	b.n	8102436 <MAX30100_ReadTemperature+0x126>
    if (MAX30100_ReadReg(MAX30100_INTERRUPT_ENABLE, &current_int_enable) != HAL_OK) return HAL_ERROR;
 810232e:	f107 030c 	add.w	r3, r7, #12
 8102332:	4619      	mov	r1, r3
 8102334:	2001      	movs	r0, #1
 8102336:	f7ff fd1f 	bl	8101d78 <MAX30100_ReadReg>
 810233a:	4603      	mov	r3, r0
 810233c:	2b00      	cmp	r3, #0
 810233e:	d001      	beq.n	8102344 <MAX30100_ReadTemperature+0x34>
 8102340:	2301      	movs	r3, #1
 8102342:	e078      	b.n	8102436 <MAX30100_ReadTemperature+0x126>

    // Enable temperature measurement and Temp Ready Interrupt
    uint8_t temp_mode_cfg = (original_mode_cfg & ~MAX30100_MODE_SHDN_MASK & ~MAX30100_MODE_RESET_MASK); // Preserve current mode, ensure not shutdown/reset
 8102344:	7b7b      	ldrb	r3, [r7, #13]
 8102346:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810234a:	73bb      	strb	r3, [r7, #14]
    temp_mode_cfg |= MAX30100_MODE_TEMP_EN_MASK;
 810234c:	7bbb      	ldrb	r3, [r7, #14]
 810234e:	f043 0308 	orr.w	r3, r3, #8
 8102352:	73bb      	strb	r3, [r7, #14]
    if (MAX30100_WriteReg(MAX30100_MODE_CONFIG, temp_mode_cfg) != HAL_OK) return HAL_ERROR;
 8102354:	7bbb      	ldrb	r3, [r7, #14]
 8102356:	4619      	mov	r1, r3
 8102358:	2006      	movs	r0, #6
 810235a:	f7ff fd3b 	bl	8101dd4 <MAX30100_WriteReg>
 810235e:	4603      	mov	r3, r0
 8102360:	2b00      	cmp	r3, #0
 8102362:	d001      	beq.n	8102368 <MAX30100_ReadTemperature+0x58>
 8102364:	2301      	movs	r3, #1
 8102366:	e066      	b.n	8102436 <MAX30100_ReadTemperature+0x126>
    if (MAX30100_ConfigInterrupts(0, 1) != HAL_OK) { // Disable A_FULL, Enable TEMP_RDY for this op
 8102368:	2101      	movs	r1, #1
 810236a:	2000      	movs	r0, #0
 810236c:	f7ff fe2a 	bl	8101fc4 <MAX30100_ConfigInterrupts>
 8102370:	4603      	mov	r3, r0
 8102372:	2b00      	cmp	r3, #0
 8102374:	d006      	beq.n	8102384 <MAX30100_ReadTemperature+0x74>
         MAX30100_WriteReg(MAX30100_MODE_CONFIG, original_mode_cfg); // Try to restore
 8102376:	7b7b      	ldrb	r3, [r7, #13]
 8102378:	4619      	mov	r1, r3
 810237a:	2006      	movs	r0, #6
 810237c:	f7ff fd2a 	bl	8101dd4 <MAX30100_WriteReg>
        return HAL_ERROR;
 8102380:	2301      	movs	r3, #1
 8102382:	e058      	b.n	8102436 <MAX30100_ReadTemperature+0x126>
    }

    // Wait for TEMP_RDY interrupt (or poll if not using ISR for this one-shot)
    // This example assumes ISR sets max30100_last_temperature or a specific flag
    // For a blocking call, you might poll the interrupt status register:
    uint8_t temp_int_status = 0;
 8102384:	2300      	movs	r3, #0
 8102386:	72fb      	strb	r3, [r7, #11]
    uint8_t retries = 50; // Approx 50 * 10ms = 500ms timeout
 8102388:	2332      	movs	r3, #50	@ 0x32
 810238a:	73fb      	strb	r3, [r7, #15]
    while (retries--) {
 810238c:	e037      	b.n	81023fe <MAX30100_ReadTemperature+0xee>
        HAL_Delay(10); // Temp conversion is ~33ms
 810238e:	200a      	movs	r0, #10
 8102390:	f000 fbe6 	bl	8102b60 <HAL_Delay>
        if (MAX30100_ReadReg(MAX30100_INTERRUPT_STATUS, &temp_int_status) != HAL_OK) break; // I2C error
 8102394:	f107 030b 	add.w	r3, r7, #11
 8102398:	4619      	mov	r1, r3
 810239a:	2000      	movs	r0, #0
 810239c:	f7ff fcec 	bl	8101d78 <MAX30100_ReadReg>
 81023a0:	4603      	mov	r3, r0
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	d131      	bne.n	810240a <MAX30100_ReadTemperature+0xfa>
        if (temp_int_status & MAX30100_INT_TEMP_RDY_MASK) {
 81023a6:	7afb      	ldrb	r3, [r7, #11]
 81023a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d026      	beq.n	81023fe <MAX30100_ReadTemperature+0xee>
            int8_t temp_int_val;
            uint8_t temp_frac_val;
            if (MAX30100_ReadTemperatureRegisters(&temp_int_val, &temp_frac_val) == HAL_OK) {
 81023b0:	f107 0209 	add.w	r2, r7, #9
 81023b4:	f107 030a 	add.w	r3, r7, #10
 81023b8:	4611      	mov	r1, r2
 81023ba:	4618      	mov	r0, r3
 81023bc:	f7ff fcbf 	bl	8101d3e <MAX30100_ReadTemperatureRegisters>
 81023c0:	4603      	mov	r3, r0
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d118      	bne.n	81023f8 <MAX30100_ReadTemperature+0xe8>
                *pTemperature = (float)temp_int_val + ((float)temp_frac_val * 0.0625f);
 81023c6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 81023ca:	ee07 3a90 	vmov	s15, r3
 81023ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81023d2:	7a7b      	ldrb	r3, [r7, #9]
 81023d4:	ee07 3a90 	vmov	s15, r3
 81023d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81023dc:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8102440 <MAX30100_ReadTemperature+0x130>
 81023e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 81023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	edc3 7a00 	vstr	s15, [r3]
                max30100_last_temperature = *pTemperature; // Update global too
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	4a14      	ldr	r2, [pc, #80]	@ (8102444 <MAX30100_ReadTemperature+0x134>)
 81023f4:	6013      	str	r3, [r2, #0]
            } else {
                temp_int_status = 0; // Mark as failed to read temp
                break;
            }
            break;
 81023f6:	e009      	b.n	810240c <MAX30100_ReadTemperature+0xfc>
                temp_int_status = 0; // Mark as failed to read temp
 81023f8:	2300      	movs	r3, #0
 81023fa:	72fb      	strb	r3, [r7, #11]
                break;
 81023fc:	e006      	b.n	810240c <MAX30100_ReadTemperature+0xfc>
    while (retries--) {
 81023fe:	7bfb      	ldrb	r3, [r7, #15]
 8102400:	1e5a      	subs	r2, r3, #1
 8102402:	73fa      	strb	r2, [r7, #15]
 8102404:	2b00      	cmp	r3, #0
 8102406:	d1c2      	bne.n	810238e <MAX30100_ReadTemperature+0x7e>
 8102408:	e000      	b.n	810240c <MAX30100_ReadTemperature+0xfc>
        if (MAX30100_ReadReg(MAX30100_INTERRUPT_STATUS, &temp_int_status) != HAL_OK) break; // I2C error
 810240a:	bf00      	nop
        }
    }

    // Restore original mode and interrupt configuration
    MAX30100_WriteReg(MAX30100_MODE_CONFIG, original_mode_cfg);
 810240c:	7b7b      	ldrb	r3, [r7, #13]
 810240e:	4619      	mov	r1, r3
 8102410:	2006      	movs	r0, #6
 8102412:	f7ff fcdf 	bl	8101dd4 <MAX30100_WriteReg>
    MAX30100_WriteReg(MAX30100_INTERRUPT_ENABLE, current_int_enable);
 8102416:	7b3b      	ldrb	r3, [r7, #12]
 8102418:	4619      	mov	r1, r3
 810241a:	2001      	movs	r0, #1
 810241c:	f7ff fcda 	bl	8101dd4 <MAX30100_WriteReg>


    if (!(temp_int_status & MAX30100_INT_TEMP_RDY_MASK)) {
 8102420:	7afb      	ldrb	r3, [r7, #11]
 8102422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102426:	2b00      	cmp	r3, #0
 8102428:	d104      	bne.n	8102434 <MAX30100_ReadTemperature+0x124>
        printf("MAX30100 Temp Read Timeout or Error.\n");
 810242a:	4807      	ldr	r0, [pc, #28]	@ (8102448 <MAX30100_ReadTemperature+0x138>)
 810242c:	f00e fc08 	bl	8110c40 <puts>
        return HAL_TIMEOUT;
 8102430:	2303      	movs	r3, #3
 8102432:	e000      	b.n	8102436 <MAX30100_ReadTemperature+0x126>
    }

    return HAL_OK;
 8102434:	2300      	movs	r3, #0
}
 8102436:	4618      	mov	r0, r3
 8102438:	3710      	adds	r7, #16
 810243a:	46bd      	mov	sp, r7
 810243c:	bd80      	pop	{r7, pc}
 810243e:	bf00      	nop
 8102440:	3d800000 	.word	0x3d800000
 8102444:	100004ec 	.word	0x100004ec
 8102448:	08112054 	.word	0x08112054

0810244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810244c:	b580      	push	{r7, lr}
 810244e:	b082      	sub	sp, #8
 8102450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102452:	4b14      	ldr	r3, [pc, #80]	@ (81024a4 <HAL_MspInit+0x58>)
 8102454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102458:	4a12      	ldr	r2, [pc, #72]	@ (81024a4 <HAL_MspInit+0x58>)
 810245a:	f043 0302 	orr.w	r3, r3, #2
 810245e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102462:	4b10      	ldr	r3, [pc, #64]	@ (81024a4 <HAL_MspInit+0x58>)
 8102464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102468:	f003 0302 	and.w	r3, r3, #2
 810246c:	607b      	str	r3, [r7, #4]
 810246e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8102470:	2200      	movs	r2, #0
 8102472:	210f      	movs	r1, #15
 8102474:	f06f 0001 	mvn.w	r0, #1
 8102478:	f002 fbc9 	bl	8104c0e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 810247c:	2200      	movs	r2, #0
 810247e:	2105      	movs	r1, #5
 8102480:	2040      	movs	r0, #64	@ 0x40
 8102482:	f002 fbc4 	bl	8104c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8102486:	2040      	movs	r0, #64	@ 0x40
 8102488:	f002 fbdb 	bl	8104c42 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 810248c:	2200      	movs	r2, #0
 810248e:	2105      	movs	r1, #5
 8102490:	2051      	movs	r0, #81	@ 0x51
 8102492:	f002 fbbc 	bl	8104c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8102496:	2051      	movs	r0, #81	@ 0x51
 8102498:	f002 fbd3 	bl	8104c42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810249c:	bf00      	nop
 810249e:	3708      	adds	r7, #8
 81024a0:	46bd      	mov	sp, r7
 81024a2:	bd80      	pop	{r7, pc}
 81024a4:	58024400 	.word	0x58024400

081024a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81024a8:	b580      	push	{r7, lr}
 81024aa:	b0ba      	sub	sp, #232	@ 0xe8
 81024ac:	af00      	add	r7, sp, #0
 81024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81024b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81024b4:	2200      	movs	r2, #0
 81024b6:	601a      	str	r2, [r3, #0]
 81024b8:	605a      	str	r2, [r3, #4]
 81024ba:	609a      	str	r2, [r3, #8]
 81024bc:	60da      	str	r2, [r3, #12]
 81024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81024c0:	f107 0310 	add.w	r3, r7, #16
 81024c4:	22c0      	movs	r2, #192	@ 0xc0
 81024c6:	2100      	movs	r1, #0
 81024c8:	4618      	mov	r0, r3
 81024ca:	f00e fcbb 	bl	8110e44 <memset>
  if(hadc->Instance==ADC1)
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	4a2f      	ldr	r2, [pc, #188]	@ (8102590 <HAL_ADC_MspInit+0xe8>)
 81024d4:	4293      	cmp	r3, r2
 81024d6:	d157      	bne.n	8102588 <HAL_ADC_MspInit+0xe0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 81024d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81024dc:	f04f 0300 	mov.w	r3, #0
 81024e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 81024e4:	2304      	movs	r3, #4
 81024e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 81024e8:	230a      	movs	r3, #10
 81024ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 81024ec:	2302      	movs	r3, #2
 81024ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 81024f0:	2302      	movs	r3, #2
 81024f2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 81024f4:	2302      	movs	r3, #2
 81024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 81024f8:	23c0      	movs	r3, #192	@ 0xc0
 81024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 81024fc:	2320      	movs	r3, #32
 81024fe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8102500:	2300      	movs	r3, #0
 8102502:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8102504:	2300      	movs	r3, #0
 8102506:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810250a:	f107 0310 	add.w	r3, r7, #16
 810250e:	4618      	mov	r0, r3
 8102510:	f006 ff20 	bl	8109354 <HAL_RCCEx_PeriphCLKConfig>
 8102514:	4603      	mov	r3, r0
 8102516:	2b00      	cmp	r3, #0
 8102518:	d001      	beq.n	810251e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 810251a:	f7ff fc0a 	bl	8101d32 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810251e:	4b1d      	ldr	r3, [pc, #116]	@ (8102594 <HAL_ADC_MspInit+0xec>)
 8102520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102524:	4a1b      	ldr	r2, [pc, #108]	@ (8102594 <HAL_ADC_MspInit+0xec>)
 8102526:	f043 0320 	orr.w	r3, r3, #32
 810252a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810252e:	4b19      	ldr	r3, [pc, #100]	@ (8102594 <HAL_ADC_MspInit+0xec>)
 8102530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102534:	f003 0320 	and.w	r3, r3, #32
 8102538:	60fb      	str	r3, [r7, #12]
 810253a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 810253c:	4b15      	ldr	r3, [pc, #84]	@ (8102594 <HAL_ADC_MspInit+0xec>)
 810253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102542:	4a14      	ldr	r2, [pc, #80]	@ (8102594 <HAL_ADC_MspInit+0xec>)
 8102544:	f043 0304 	orr.w	r3, r3, #4
 8102548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810254c:	4b11      	ldr	r3, [pc, #68]	@ (8102594 <HAL_ADC_MspInit+0xec>)
 810254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102552:	f003 0304 	and.w	r3, r3, #4
 8102556:	60bb      	str	r3, [r7, #8]
 8102558:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 810255a:	2301      	movs	r3, #1
 810255c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8102560:	2303      	movs	r3, #3
 8102562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102566:	2300      	movs	r3, #0
 8102568:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810256c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102570:	4619      	mov	r1, r3
 8102572:	4809      	ldr	r0, [pc, #36]	@ (8102598 <HAL_ADC_MspInit+0xf0>)
 8102574:	f004 fdc4 	bl	8107100 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8102578:	2200      	movs	r2, #0
 810257a:	2105      	movs	r1, #5
 810257c:	2012      	movs	r0, #18
 810257e:	f002 fb46 	bl	8104c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8102582:	2012      	movs	r0, #18
 8102584:	f002 fb5d 	bl	8104c42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8102588:	bf00      	nop
 810258a:	37e8      	adds	r7, #232	@ 0xe8
 810258c:	46bd      	mov	sp, r7
 810258e:	bd80      	pop	{r7, pc}
 8102590:	40022000 	.word	0x40022000
 8102594:	58024400 	.word	0x58024400
 8102598:	58020800 	.word	0x58020800

0810259c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810259c:	b580      	push	{r7, lr}
 810259e:	b0ba      	sub	sp, #232	@ 0xe8
 81025a0:	af00      	add	r7, sp, #0
 81025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81025a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81025a8:	2200      	movs	r2, #0
 81025aa:	601a      	str	r2, [r3, #0]
 81025ac:	605a      	str	r2, [r3, #4]
 81025ae:	609a      	str	r2, [r3, #8]
 81025b0:	60da      	str	r2, [r3, #12]
 81025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81025b4:	f107 0310 	add.w	r3, r7, #16
 81025b8:	22c0      	movs	r2, #192	@ 0xc0
 81025ba:	2100      	movs	r1, #0
 81025bc:	4618      	mov	r0, r3
 81025be:	f00e fc41 	bl	8110e44 <memset>
  if(hi2c->Instance==I2C1)
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	4a46      	ldr	r2, [pc, #280]	@ (81026e0 <HAL_I2C_MspInit+0x144>)
 81025c8:	4293      	cmp	r3, r2
 81025ca:	f040 8084 	bne.w	81026d6 <HAL_I2C_MspInit+0x13a>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81025ce:	f04f 0208 	mov.w	r2, #8
 81025d2:	f04f 0300 	mov.w	r3, #0
 81025d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81025da:	2300      	movs	r3, #0
 81025dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81025e0:	f107 0310 	add.w	r3, r7, #16
 81025e4:	4618      	mov	r0, r3
 81025e6:	f006 feb5 	bl	8109354 <HAL_RCCEx_PeriphCLKConfig>
 81025ea:	4603      	mov	r3, r0
 81025ec:	2b00      	cmp	r3, #0
 81025ee:	d001      	beq.n	81025f4 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 81025f0:	f7ff fb9f 	bl	8101d32 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81025f4:	4b3b      	ldr	r3, [pc, #236]	@ (81026e4 <HAL_I2C_MspInit+0x148>)
 81025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025fa:	4a3a      	ldr	r2, [pc, #232]	@ (81026e4 <HAL_I2C_MspInit+0x148>)
 81025fc:	f043 0302 	orr.w	r3, r3, #2
 8102600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102604:	4b37      	ldr	r3, [pc, #220]	@ (81026e4 <HAL_I2C_MspInit+0x148>)
 8102606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810260a:	f003 0302 	and.w	r3, r3, #2
 810260e:	60fb      	str	r3, [r7, #12]
 8102610:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810261a:	2312      	movs	r3, #18
 810261c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102620:	2300      	movs	r3, #0
 8102622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102626:	2300      	movs	r3, #0
 8102628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810262c:	2304      	movs	r3, #4
 810262e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102632:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102636:	4619      	mov	r1, r3
 8102638:	482b      	ldr	r0, [pc, #172]	@ (81026e8 <HAL_I2C_MspInit+0x14c>)
 810263a:	f004 fd61 	bl	8107100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810263e:	4b29      	ldr	r3, [pc, #164]	@ (81026e4 <HAL_I2C_MspInit+0x148>)
 8102640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102644:	4a27      	ldr	r2, [pc, #156]	@ (81026e4 <HAL_I2C_MspInit+0x148>)
 8102646:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810264a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810264e:	4b25      	ldr	r3, [pc, #148]	@ (81026e4 <HAL_I2C_MspInit+0x148>)
 8102650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102658:	60bb      	str	r3, [r7, #8]
 810265a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 810265c:	4b23      	ldr	r3, [pc, #140]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 810265e:	4a24      	ldr	r2, [pc, #144]	@ (81026f0 <HAL_I2C_MspInit+0x154>)
 8102660:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8102662:	4b22      	ldr	r3, [pc, #136]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 8102664:	2221      	movs	r2, #33	@ 0x21
 8102666:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102668:	4b20      	ldr	r3, [pc, #128]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 810266a:	2200      	movs	r2, #0
 810266c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810266e:	4b1f      	ldr	r3, [pc, #124]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 8102670:	2200      	movs	r2, #0
 8102672:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102674:	4b1d      	ldr	r3, [pc, #116]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 8102676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810267a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810267c:	4b1b      	ldr	r3, [pc, #108]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 810267e:	2200      	movs	r2, #0
 8102680:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102682:	4b1a      	ldr	r3, [pc, #104]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 8102684:	2200      	movs	r2, #0
 8102686:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8102688:	4b18      	ldr	r3, [pc, #96]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 810268a:	2200      	movs	r2, #0
 810268c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 810268e:	4b17      	ldr	r3, [pc, #92]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 8102690:	2200      	movs	r2, #0
 8102692:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102694:	4b15      	ldr	r3, [pc, #84]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 8102696:	2200      	movs	r2, #0
 8102698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 810269a:	4814      	ldr	r0, [pc, #80]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 810269c:	f002 fafe 	bl	8104c9c <HAL_DMA_Init>
 81026a0:	4603      	mov	r3, r0
 81026a2:	2b00      	cmp	r3, #0
 81026a4:	d001      	beq.n	81026aa <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 81026a6:	f7ff fb44 	bl	8101d32 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	4a0f      	ldr	r2, [pc, #60]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 81026ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 81026b0:	4a0e      	ldr	r2, [pc, #56]	@ (81026ec <HAL_I2C_MspInit+0x150>)
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 81026b6:	2200      	movs	r2, #0
 81026b8:	2105      	movs	r1, #5
 81026ba:	201f      	movs	r0, #31
 81026bc:	f002 faa7 	bl	8104c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 81026c0:	201f      	movs	r0, #31
 81026c2:	f002 fabe 	bl	8104c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 81026c6:	2200      	movs	r2, #0
 81026c8:	2105      	movs	r1, #5
 81026ca:	2020      	movs	r0, #32
 81026cc:	f002 fa9f 	bl	8104c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 81026d0:	2020      	movs	r0, #32
 81026d2:	f002 fab6 	bl	8104c42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 81026d6:	bf00      	nop
 81026d8:	37e8      	adds	r7, #232	@ 0xe8
 81026da:	46bd      	mov	sp, r7
 81026dc:	bd80      	pop	{r7, pc}
 81026de:	bf00      	nop
 81026e0:	40005400 	.word	0x40005400
 81026e4:	58024400 	.word	0x58024400
 81026e8:	58020400 	.word	0x58020400
 81026ec:	10000148 	.word	0x10000148
 81026f0:	40020010 	.word	0x40020010

081026f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81026f4:	b580      	push	{r7, lr}
 81026f6:	b084      	sub	sp, #16
 81026f8:	af00      	add	r7, sp, #0
 81026fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	4a0e      	ldr	r2, [pc, #56]	@ (810273c <HAL_TIM_Base_MspInit+0x48>)
 8102702:	4293      	cmp	r3, r2
 8102704:	d116      	bne.n	8102734 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8102706:	4b0e      	ldr	r3, [pc, #56]	@ (8102740 <HAL_TIM_Base_MspInit+0x4c>)
 8102708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810270c:	4a0c      	ldr	r2, [pc, #48]	@ (8102740 <HAL_TIM_Base_MspInit+0x4c>)
 810270e:	f043 0310 	orr.w	r3, r3, #16
 8102712:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102716:	4b0a      	ldr	r3, [pc, #40]	@ (8102740 <HAL_TIM_Base_MspInit+0x4c>)
 8102718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810271c:	f003 0310 	and.w	r3, r3, #16
 8102720:	60fb      	str	r3, [r7, #12]
 8102722:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8102724:	2200      	movs	r2, #0
 8102726:	2105      	movs	r1, #5
 8102728:	2036      	movs	r0, #54	@ 0x36
 810272a:	f002 fa70 	bl	8104c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 810272e:	2036      	movs	r0, #54	@ 0x36
 8102730:	f002 fa87 	bl	8104c42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8102734:	bf00      	nop
 8102736:	3710      	adds	r7, #16
 8102738:	46bd      	mov	sp, r7
 810273a:	bd80      	pop	{r7, pc}
 810273c:	40001000 	.word	0x40001000
 8102740:	58024400 	.word	0x58024400

08102744 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102744:	b580      	push	{r7, lr}
 8102746:	b0ba      	sub	sp, #232	@ 0xe8
 8102748:	af00      	add	r7, sp, #0
 810274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810274c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102750:	2200      	movs	r2, #0
 8102752:	601a      	str	r2, [r3, #0]
 8102754:	605a      	str	r2, [r3, #4]
 8102756:	609a      	str	r2, [r3, #8]
 8102758:	60da      	str	r2, [r3, #12]
 810275a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810275c:	f107 0310 	add.w	r3, r7, #16
 8102760:	22c0      	movs	r2, #192	@ 0xc0
 8102762:	2100      	movs	r1, #0
 8102764:	4618      	mov	r0, r3
 8102766:	f00e fb6d 	bl	8110e44 <memset>
  if(huart->Instance==USART3)
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	4a2b      	ldr	r2, [pc, #172]	@ (810281c <HAL_UART_MspInit+0xd8>)
 8102770:	4293      	cmp	r3, r2
 8102772:	d14e      	bne.n	8102812 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102774:	f04f 0202 	mov.w	r2, #2
 8102778:	f04f 0300 	mov.w	r3, #0
 810277c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102780:	2300      	movs	r3, #0
 8102782:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102786:	f107 0310 	add.w	r3, r7, #16
 810278a:	4618      	mov	r0, r3
 810278c:	f006 fde2 	bl	8109354 <HAL_RCCEx_PeriphCLKConfig>
 8102790:	4603      	mov	r3, r0
 8102792:	2b00      	cmp	r3, #0
 8102794:	d001      	beq.n	810279a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102796:	f7ff facc 	bl	8101d32 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810279a:	4b21      	ldr	r3, [pc, #132]	@ (8102820 <HAL_UART_MspInit+0xdc>)
 810279c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81027a0:	4a1f      	ldr	r2, [pc, #124]	@ (8102820 <HAL_UART_MspInit+0xdc>)
 81027a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81027a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8102820 <HAL_UART_MspInit+0xdc>)
 81027ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81027b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81027b4:	60fb      	str	r3, [r7, #12]
 81027b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81027b8:	4b19      	ldr	r3, [pc, #100]	@ (8102820 <HAL_UART_MspInit+0xdc>)
 81027ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81027be:	4a18      	ldr	r2, [pc, #96]	@ (8102820 <HAL_UART_MspInit+0xdc>)
 81027c0:	f043 0308 	orr.w	r3, r3, #8
 81027c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81027c8:	4b15      	ldr	r3, [pc, #84]	@ (8102820 <HAL_UART_MspInit+0xdc>)
 81027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81027ce:	f003 0308 	and.w	r3, r3, #8
 81027d2:	60bb      	str	r3, [r7, #8]
 81027d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81027d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81027da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027de:	2302      	movs	r3, #2
 81027e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027e4:	2300      	movs	r3, #0
 81027e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027ea:	2300      	movs	r3, #0
 81027ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81027f0:	2307      	movs	r3, #7
 81027f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81027f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81027fa:	4619      	mov	r1, r3
 81027fc:	4809      	ldr	r0, [pc, #36]	@ (8102824 <HAL_UART_MspInit+0xe0>)
 81027fe:	f004 fc7f 	bl	8107100 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102802:	2200      	movs	r2, #0
 8102804:	2105      	movs	r1, #5
 8102806:	2027      	movs	r0, #39	@ 0x27
 8102808:	f002 fa01 	bl	8104c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810280c:	2027      	movs	r0, #39	@ 0x27
 810280e:	f002 fa18 	bl	8104c42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8102812:	bf00      	nop
 8102814:	37e8      	adds	r7, #232	@ 0xe8
 8102816:	46bd      	mov	sp, r7
 8102818:	bd80      	pop	{r7, pc}
 810281a:	bf00      	nop
 810281c:	40004800 	.word	0x40004800
 8102820:	58024400 	.word	0x58024400
 8102824:	58020c00 	.word	0x58020c00

08102828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102828:	b480      	push	{r7}
 810282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 810282c:	bf00      	nop
 810282e:	e7fd      	b.n	810282c <NMI_Handler+0x4>

08102830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102830:	b480      	push	{r7}
 8102832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102834:	bf00      	nop
 8102836:	e7fd      	b.n	8102834 <HardFault_Handler+0x4>

08102838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102838:	b480      	push	{r7}
 810283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810283c:	bf00      	nop
 810283e:	e7fd      	b.n	810283c <MemManage_Handler+0x4>

08102840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102840:	b480      	push	{r7}
 8102842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102844:	bf00      	nop
 8102846:	e7fd      	b.n	8102844 <BusFault_Handler+0x4>

08102848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102848:	b480      	push	{r7}
 810284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810284c:	bf00      	nop
 810284e:	e7fd      	b.n	810284c <UsageFault_Handler+0x4>

08102850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102850:	b480      	push	{r7}
 8102852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102854:	bf00      	nop
 8102856:	46bd      	mov	sp, r7
 8102858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810285c:	4770      	bx	lr

0810285e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810285e:	b580      	push	{r7, lr}
 8102860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102862:	f000 f95d 	bl	8102b20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8102866:	f00d fc85 	bl	8110174 <xTaskGetSchedulerState>
 810286a:	4603      	mov	r3, r0
 810286c:	2b01      	cmp	r3, #1
 810286e:	d001      	beq.n	8102874 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8102870:	f00c f8ca 	bl	810ea08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102874:	bf00      	nop
 8102876:	bd80      	pop	{r7, pc}

08102878 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102878:	b580      	push	{r7, lr}
 810287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 810287c:	4802      	ldr	r0, [pc, #8]	@ (8102888 <DMA1_Stream0_IRQHandler+0x10>)
 810287e:	f003 facb 	bl	8105e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102882:	bf00      	nop
 8102884:	bd80      	pop	{r7, pc}
 8102886:	bf00      	nop
 8102888:	10000148 	.word	0x10000148

0810288c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 810288c:	b580      	push	{r7, lr}
 810288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102890:	4802      	ldr	r0, [pc, #8]	@ (810289c <ADC_IRQHandler+0x10>)
 8102892:	f000 ffad 	bl	81037f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8102896:	bf00      	nop
 8102898:	bd80      	pop	{r7, pc}
 810289a:	bf00      	nop
 810289c:	10000090 	.word	0x10000090

081028a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 81028a0:	b580      	push	{r7, lr}
 81028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 81028a4:	4802      	ldr	r0, [pc, #8]	@ (81028b0 <I2C1_EV_IRQHandler+0x10>)
 81028a6:	f005 f8b7 	bl	8107a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 81028aa:	bf00      	nop
 81028ac:	bd80      	pop	{r7, pc}
 81028ae:	bf00      	nop
 81028b0:	100000f4 	.word	0x100000f4

081028b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 81028b4:	b580      	push	{r7, lr}
 81028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 81028b8:	4802      	ldr	r0, [pc, #8]	@ (81028c4 <I2C1_ER_IRQHandler+0x10>)
 81028ba:	f005 f8c7 	bl	8107a4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 81028be:	bf00      	nop
 81028c0:	bd80      	pop	{r7, pc}
 81028c2:	bf00      	nop
 81028c4:	100000f4 	.word	0x100000f4

081028c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 81028c8:	b580      	push	{r7, lr}
 81028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 81028cc:	4802      	ldr	r0, [pc, #8]	@ (81028d8 <USART3_IRQHandler+0x10>)
 81028ce:	f009 fdf9 	bl	810c4c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 81028d2:	bf00      	nop
 81028d4:	bd80      	pop	{r7, pc}
 81028d6:	bf00      	nop
 81028d8:	1000020c 	.word	0x1000020c

081028dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81028dc:	b580      	push	{r7, lr}
 81028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81028e0:	4802      	ldr	r0, [pc, #8]	@ (81028ec <TIM6_DAC_IRQHandler+0x10>)
 81028e2:	f009 fa8c 	bl	810bdfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81028e6:	bf00      	nop
 81028e8:	bd80      	pop	{r7, pc}
 81028ea:	bf00      	nop
 81028ec:	100001c0 	.word	0x100001c0

081028f0 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 81028f0:	b480      	push	{r7}
 81028f2:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 81028f4:	bf00      	nop
 81028f6:	46bd      	mov	sp, r7
 81028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028fc:	4770      	bx	lr

081028fe <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 81028fe:	b480      	push	{r7}
 8102900:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8102902:	bf00      	nop
 8102904:	46bd      	mov	sp, r7
 8102906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810290a:	4770      	bx	lr

0810290c <EXTI9_5_IRQHandler>:
/* USER CODE BEGIN 1 */

// Adjust the EXTI handler depending on which pin the MAX30100 INT is wired to.
// Example assumes INT on PB5 (EXTI5). If different, update GPIO and IRQ.
void EXTI9_5_IRQHandler(void)
{
 810290c:	b580      	push	{r7, lr}
 810290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)
 8102910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102918:	f003 0320 	and.w	r3, r3, #32
 810291c:	2b00      	cmp	r3, #0
 810291e:	d006      	beq.n	810292e <EXTI9_5_IRQHandler+0x22>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8102920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102924:	2220      	movs	r2, #32
 8102926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    MAX30100_InterruptHandler();
 810292a:	f7ff fb6d 	bl	8102008 <MAX30100_InterruptHandler>
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
}
 810292e:	bf00      	nop
 8102930:	bd80      	pop	{r7, pc}
	...

08102934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102934:	b580      	push	{r7, lr}
 8102936:	b086      	sub	sp, #24
 8102938:	af00      	add	r7, sp, #0
 810293a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810293c:	4a14      	ldr	r2, [pc, #80]	@ (8102990 <_sbrk+0x5c>)
 810293e:	4b15      	ldr	r3, [pc, #84]	@ (8102994 <_sbrk+0x60>)
 8102940:	1ad3      	subs	r3, r2, r3
 8102942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102944:	697b      	ldr	r3, [r7, #20]
 8102946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102948:	4b13      	ldr	r3, [pc, #76]	@ (8102998 <_sbrk+0x64>)
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	2b00      	cmp	r3, #0
 810294e:	d102      	bne.n	8102956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102950:	4b11      	ldr	r3, [pc, #68]	@ (8102998 <_sbrk+0x64>)
 8102952:	4a12      	ldr	r2, [pc, #72]	@ (810299c <_sbrk+0x68>)
 8102954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102956:	4b10      	ldr	r3, [pc, #64]	@ (8102998 <_sbrk+0x64>)
 8102958:	681a      	ldr	r2, [r3, #0]
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	4413      	add	r3, r2
 810295e:	693a      	ldr	r2, [r7, #16]
 8102960:	429a      	cmp	r2, r3
 8102962:	d207      	bcs.n	8102974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102964:	f00e fabc 	bl	8110ee0 <__errno>
 8102968:	4603      	mov	r3, r0
 810296a:	220c      	movs	r2, #12
 810296c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810296e:	f04f 33ff 	mov.w	r3, #4294967295
 8102972:	e009      	b.n	8102988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102974:	4b08      	ldr	r3, [pc, #32]	@ (8102998 <_sbrk+0x64>)
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810297a:	4b07      	ldr	r3, [pc, #28]	@ (8102998 <_sbrk+0x64>)
 810297c:	681a      	ldr	r2, [r3, #0]
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	4413      	add	r3, r2
 8102982:	4a05      	ldr	r2, [pc, #20]	@ (8102998 <_sbrk+0x64>)
 8102984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102986:	68fb      	ldr	r3, [r7, #12]
}
 8102988:	4618      	mov	r0, r3
 810298a:	3718      	adds	r7, #24
 810298c:	46bd      	mov	sp, r7
 810298e:	bd80      	pop	{r7, pc}
 8102990:	10048000 	.word	0x10048000
 8102994:	00000400 	.word	0x00000400
 8102998:	100004f4 	.word	0x100004f4
 810299c:	10004f98 	.word	0x10004f98

081029a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81029a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81029dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81029a4:	f7fe f85e 	bl	8100a64 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81029a8:	f7fe f844 	bl	8100a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81029ac:	480c      	ldr	r0, [pc, #48]	@ (81029e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81029ae:	490d      	ldr	r1, [pc, #52]	@ (81029e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81029b0:	4a0d      	ldr	r2, [pc, #52]	@ (81029e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81029b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81029b4:	e002      	b.n	81029bc <LoopCopyDataInit>

081029b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81029b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81029b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81029ba:	3304      	adds	r3, #4

081029bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81029bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81029be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81029c0:	d3f9      	bcc.n	81029b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81029c2:	4a0a      	ldr	r2, [pc, #40]	@ (81029ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81029c4:	4c0a      	ldr	r4, [pc, #40]	@ (81029f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81029c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81029c8:	e001      	b.n	81029ce <LoopFillZerobss>

081029ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81029ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81029cc:	3204      	adds	r2, #4

081029ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81029ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81029d0:	d3fb      	bcc.n	81029ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81029d2:	f00e fa8b 	bl	8110eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81029d6:	f7fe fbf3 	bl	81011c0 <main>
  bx  lr
 81029da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81029dc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81029e0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81029e4:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 81029e8:	08112258 	.word	0x08112258
  ldr r2, =_sbss
 81029ec:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 81029f0:	10004f98 	.word	0x10004f98

081029f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81029f4:	e7fe      	b.n	81029f4 <ADC3_IRQHandler>
	...

081029f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81029f8:	b580      	push	{r7, lr}
 81029fa:	b082      	sub	sp, #8
 81029fc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81029fe:	4b28      	ldr	r3, [pc, #160]	@ (8102aa0 <HAL_Init+0xa8>)
 8102a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102a04:	4a26      	ldr	r2, [pc, #152]	@ (8102aa0 <HAL_Init+0xa8>)
 8102a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102a0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102a0e:	4b24      	ldr	r3, [pc, #144]	@ (8102aa0 <HAL_Init+0xa8>)
 8102a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102a18:	603b      	str	r3, [r7, #0]
 8102a1a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102a1c:	4b21      	ldr	r3, [pc, #132]	@ (8102aa4 <HAL_Init+0xac>)
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102a24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102a28:	4a1e      	ldr	r2, [pc, #120]	@ (8102aa4 <HAL_Init+0xac>)
 8102a2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102a2e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102a30:	4b1c      	ldr	r3, [pc, #112]	@ (8102aa4 <HAL_Init+0xac>)
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	4a1b      	ldr	r2, [pc, #108]	@ (8102aa4 <HAL_Init+0xac>)
 8102a36:	f043 0301 	orr.w	r3, r3, #1
 8102a3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102a3c:	2003      	movs	r0, #3
 8102a3e:	f002 f8db 	bl	8104bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a42:	f006 faaf 	bl	8108fa4 <HAL_RCC_GetSysClockFreq>
 8102a46:	4602      	mov	r2, r0
 8102a48:	4b15      	ldr	r3, [pc, #84]	@ (8102aa0 <HAL_Init+0xa8>)
 8102a4a:	699b      	ldr	r3, [r3, #24]
 8102a4c:	0a1b      	lsrs	r3, r3, #8
 8102a4e:	f003 030f 	and.w	r3, r3, #15
 8102a52:	4915      	ldr	r1, [pc, #84]	@ (8102aa8 <HAL_Init+0xb0>)
 8102a54:	5ccb      	ldrb	r3, [r1, r3]
 8102a56:	f003 031f 	and.w	r3, r3, #31
 8102a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8102a5e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a60:	4b0f      	ldr	r3, [pc, #60]	@ (8102aa0 <HAL_Init+0xa8>)
 8102a62:	699b      	ldr	r3, [r3, #24]
 8102a64:	f003 030f 	and.w	r3, r3, #15
 8102a68:	4a0f      	ldr	r2, [pc, #60]	@ (8102aa8 <HAL_Init+0xb0>)
 8102a6a:	5cd3      	ldrb	r3, [r2, r3]
 8102a6c:	f003 031f 	and.w	r3, r3, #31
 8102a70:	687a      	ldr	r2, [r7, #4]
 8102a72:	fa22 f303 	lsr.w	r3, r2, r3
 8102a76:	4a0d      	ldr	r2, [pc, #52]	@ (8102aac <HAL_Init+0xb4>)
 8102a78:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8102aac <HAL_Init+0xb4>)
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8102ab0 <HAL_Init+0xb8>)
 8102a80:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102a82:	200f      	movs	r0, #15
 8102a84:	f000 f816 	bl	8102ab4 <HAL_InitTick>
 8102a88:	4603      	mov	r3, r0
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d001      	beq.n	8102a92 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102a8e:	2301      	movs	r3, #1
 8102a90:	e002      	b.n	8102a98 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102a92:	f7ff fcdb 	bl	810244c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102a96:	2300      	movs	r3, #0
}
 8102a98:	4618      	mov	r0, r3
 8102a9a:	3708      	adds	r7, #8
 8102a9c:	46bd      	mov	sp, r7
 8102a9e:	bd80      	pop	{r7, pc}
 8102aa0:	58024400 	.word	0x58024400
 8102aa4:	40024400 	.word	0x40024400
 8102aa8:	08112094 	.word	0x08112094
 8102aac:	10000004 	.word	0x10000004
 8102ab0:	10000000 	.word	0x10000000

08102ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102ab4:	b580      	push	{r7, lr}
 8102ab6:	b082      	sub	sp, #8
 8102ab8:	af00      	add	r7, sp, #0
 8102aba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102abc:	4b15      	ldr	r3, [pc, #84]	@ (8102b14 <HAL_InitTick+0x60>)
 8102abe:	781b      	ldrb	r3, [r3, #0]
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d101      	bne.n	8102ac8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102ac4:	2301      	movs	r3, #1
 8102ac6:	e021      	b.n	8102b0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102ac8:	4b13      	ldr	r3, [pc, #76]	@ (8102b18 <HAL_InitTick+0x64>)
 8102aca:	681a      	ldr	r2, [r3, #0]
 8102acc:	4b11      	ldr	r3, [pc, #68]	@ (8102b14 <HAL_InitTick+0x60>)
 8102ace:	781b      	ldrb	r3, [r3, #0]
 8102ad0:	4619      	mov	r1, r3
 8102ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8102ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8102ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8102ade:	4618      	mov	r0, r3
 8102ae0:	f002 f8bd 	bl	8104c5e <HAL_SYSTICK_Config>
 8102ae4:	4603      	mov	r3, r0
 8102ae6:	2b00      	cmp	r3, #0
 8102ae8:	d001      	beq.n	8102aee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102aea:	2301      	movs	r3, #1
 8102aec:	e00e      	b.n	8102b0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	2b0f      	cmp	r3, #15
 8102af2:	d80a      	bhi.n	8102b0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102af4:	2200      	movs	r2, #0
 8102af6:	6879      	ldr	r1, [r7, #4]
 8102af8:	f04f 30ff 	mov.w	r0, #4294967295
 8102afc:	f002 f887 	bl	8104c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102b00:	4a06      	ldr	r2, [pc, #24]	@ (8102b1c <HAL_InitTick+0x68>)
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102b06:	2300      	movs	r3, #0
 8102b08:	e000      	b.n	8102b0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102b0a:	2301      	movs	r3, #1
}
 8102b0c:	4618      	mov	r0, r3
 8102b0e:	3708      	adds	r7, #8
 8102b10:	46bd      	mov	sp, r7
 8102b12:	bd80      	pop	{r7, pc}
 8102b14:	10000010 	.word	0x10000010
 8102b18:	10000000 	.word	0x10000000
 8102b1c:	1000000c 	.word	0x1000000c

08102b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102b20:	b480      	push	{r7}
 8102b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102b24:	4b06      	ldr	r3, [pc, #24]	@ (8102b40 <HAL_IncTick+0x20>)
 8102b26:	781b      	ldrb	r3, [r3, #0]
 8102b28:	461a      	mov	r2, r3
 8102b2a:	4b06      	ldr	r3, [pc, #24]	@ (8102b44 <HAL_IncTick+0x24>)
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	4413      	add	r3, r2
 8102b30:	4a04      	ldr	r2, [pc, #16]	@ (8102b44 <HAL_IncTick+0x24>)
 8102b32:	6013      	str	r3, [r2, #0]
}
 8102b34:	bf00      	nop
 8102b36:	46bd      	mov	sp, r7
 8102b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b3c:	4770      	bx	lr
 8102b3e:	bf00      	nop
 8102b40:	10000010 	.word	0x10000010
 8102b44:	100004f8 	.word	0x100004f8

08102b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102b48:	b480      	push	{r7}
 8102b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8102b4c:	4b03      	ldr	r3, [pc, #12]	@ (8102b5c <HAL_GetTick+0x14>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
}
 8102b50:	4618      	mov	r0, r3
 8102b52:	46bd      	mov	sp, r7
 8102b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b58:	4770      	bx	lr
 8102b5a:	bf00      	nop
 8102b5c:	100004f8 	.word	0x100004f8

08102b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102b60:	b580      	push	{r7, lr}
 8102b62:	b084      	sub	sp, #16
 8102b64:	af00      	add	r7, sp, #0
 8102b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102b68:	f7ff ffee 	bl	8102b48 <HAL_GetTick>
 8102b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b78:	d005      	beq.n	8102b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8102ba4 <HAL_Delay+0x44>)
 8102b7c:	781b      	ldrb	r3, [r3, #0]
 8102b7e:	461a      	mov	r2, r3
 8102b80:	68fb      	ldr	r3, [r7, #12]
 8102b82:	4413      	add	r3, r2
 8102b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102b86:	bf00      	nop
 8102b88:	f7ff ffde 	bl	8102b48 <HAL_GetTick>
 8102b8c:	4602      	mov	r2, r0
 8102b8e:	68bb      	ldr	r3, [r7, #8]
 8102b90:	1ad3      	subs	r3, r2, r3
 8102b92:	68fa      	ldr	r2, [r7, #12]
 8102b94:	429a      	cmp	r2, r3
 8102b96:	d8f7      	bhi.n	8102b88 <HAL_Delay+0x28>
  {
  }
}
 8102b98:	bf00      	nop
 8102b9a:	bf00      	nop
 8102b9c:	3710      	adds	r7, #16
 8102b9e:	46bd      	mov	sp, r7
 8102ba0:	bd80      	pop	{r7, pc}
 8102ba2:	bf00      	nop
 8102ba4:	10000010 	.word	0x10000010

08102ba8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102ba8:	b480      	push	{r7}
 8102baa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102bac:	4b03      	ldr	r3, [pc, #12]	@ (8102bbc <HAL_GetREVID+0x14>)
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	0c1b      	lsrs	r3, r3, #16
}
 8102bb2:	4618      	mov	r0, r3
 8102bb4:	46bd      	mov	sp, r7
 8102bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bba:	4770      	bx	lr
 8102bbc:	5c001000 	.word	0x5c001000

08102bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102bc0:	b480      	push	{r7}
 8102bc2:	b083      	sub	sp, #12
 8102bc4:	af00      	add	r7, sp, #0
 8102bc6:	6078      	str	r0, [r7, #4]
 8102bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	689b      	ldr	r3, [r3, #8]
 8102bce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8102bd2:	683b      	ldr	r3, [r7, #0]
 8102bd4:	431a      	orrs	r2, r3
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	609a      	str	r2, [r3, #8]
}
 8102bda:	bf00      	nop
 8102bdc:	370c      	adds	r7, #12
 8102bde:	46bd      	mov	sp, r7
 8102be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be4:	4770      	bx	lr

08102be6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102be6:	b480      	push	{r7}
 8102be8:	b083      	sub	sp, #12
 8102bea:	af00      	add	r7, sp, #0
 8102bec:	6078      	str	r0, [r7, #4]
 8102bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	689b      	ldr	r3, [r3, #8]
 8102bf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8102bf8:	683b      	ldr	r3, [r7, #0]
 8102bfa:	431a      	orrs	r2, r3
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	609a      	str	r2, [r3, #8]
}
 8102c00:	bf00      	nop
 8102c02:	370c      	adds	r7, #12
 8102c04:	46bd      	mov	sp, r7
 8102c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c0a:	4770      	bx	lr

08102c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102c0c:	b480      	push	{r7}
 8102c0e:	b083      	sub	sp, #12
 8102c10:	af00      	add	r7, sp, #0
 8102c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	689b      	ldr	r3, [r3, #8]
 8102c18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102c1c:	4618      	mov	r0, r3
 8102c1e:	370c      	adds	r7, #12
 8102c20:	46bd      	mov	sp, r7
 8102c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c26:	4770      	bx	lr

08102c28 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8102c28:	b480      	push	{r7}
 8102c2a:	b087      	sub	sp, #28
 8102c2c:	af00      	add	r7, sp, #0
 8102c2e:	6078      	str	r0, [r7, #4]
 8102c30:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8102c32:	683b      	ldr	r3, [r7, #0]
 8102c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c38:	2b00      	cmp	r3, #0
 8102c3a:	d107      	bne.n	8102c4c <LL_ADC_SetChannelPreselection+0x24>
 8102c3c:	683b      	ldr	r3, [r7, #0]
 8102c3e:	0e9b      	lsrs	r3, r3, #26
 8102c40:	f003 031f 	and.w	r3, r3, #31
 8102c44:	2201      	movs	r2, #1
 8102c46:	fa02 f303 	lsl.w	r3, r2, r3
 8102c4a:	e015      	b.n	8102c78 <LL_ADC_SetChannelPreselection+0x50>
 8102c4c:	683b      	ldr	r3, [r7, #0]
 8102c4e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c50:	693b      	ldr	r3, [r7, #16]
 8102c52:	fa93 f3a3 	rbit	r3, r3
 8102c56:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102c5c:	697b      	ldr	r3, [r7, #20]
 8102c5e:	2b00      	cmp	r3, #0
 8102c60:	d101      	bne.n	8102c66 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8102c62:	2320      	movs	r3, #32
 8102c64:	e003      	b.n	8102c6e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8102c66:	697b      	ldr	r3, [r7, #20]
 8102c68:	fab3 f383 	clz	r3, r3
 8102c6c:	b2db      	uxtb	r3, r3
 8102c6e:	f003 031f 	and.w	r3, r3, #31
 8102c72:	2201      	movs	r2, #1
 8102c74:	fa02 f303 	lsl.w	r3, r2, r3
 8102c78:	687a      	ldr	r2, [r7, #4]
 8102c7a:	69d2      	ldr	r2, [r2, #28]
 8102c7c:	431a      	orrs	r2, r3
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8102c82:	bf00      	nop
 8102c84:	371c      	adds	r7, #28
 8102c86:	46bd      	mov	sp, r7
 8102c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c8c:	4770      	bx	lr

08102c8e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102c8e:	b480      	push	{r7}
 8102c90:	b087      	sub	sp, #28
 8102c92:	af00      	add	r7, sp, #0
 8102c94:	60f8      	str	r0, [r7, #12]
 8102c96:	60b9      	str	r1, [r7, #8]
 8102c98:	607a      	str	r2, [r7, #4]
 8102c9a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	3360      	adds	r3, #96	@ 0x60
 8102ca0:	461a      	mov	r2, r3
 8102ca2:	68bb      	ldr	r3, [r7, #8]
 8102ca4:	009b      	lsls	r3, r3, #2
 8102ca6:	4413      	add	r3, r2
 8102ca8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102caa:	697b      	ldr	r3, [r7, #20]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102cb8:	683b      	ldr	r3, [r7, #0]
 8102cba:	430b      	orrs	r3, r1
 8102cbc:	431a      	orrs	r2, r3
 8102cbe:	697b      	ldr	r3, [r7, #20]
 8102cc0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102cc2:	bf00      	nop
 8102cc4:	371c      	adds	r7, #28
 8102cc6:	46bd      	mov	sp, r7
 8102cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ccc:	4770      	bx	lr

08102cce <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102cce:	b480      	push	{r7}
 8102cd0:	b085      	sub	sp, #20
 8102cd2:	af00      	add	r7, sp, #0
 8102cd4:	60f8      	str	r0, [r7, #12]
 8102cd6:	60b9      	str	r1, [r7, #8]
 8102cd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102cda:	68fb      	ldr	r3, [r7, #12]
 8102cdc:	691b      	ldr	r3, [r3, #16]
 8102cde:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102ce2:	68bb      	ldr	r3, [r7, #8]
 8102ce4:	f003 031f 	and.w	r3, r3, #31
 8102ce8:	6879      	ldr	r1, [r7, #4]
 8102cea:	fa01 f303 	lsl.w	r3, r1, r3
 8102cee:	431a      	orrs	r2, r3
 8102cf0:	68fb      	ldr	r3, [r7, #12]
 8102cf2:	611a      	str	r2, [r3, #16]
}
 8102cf4:	bf00      	nop
 8102cf6:	3714      	adds	r7, #20
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfe:	4770      	bx	lr

08102d00 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102d00:	b480      	push	{r7}
 8102d02:	b087      	sub	sp, #28
 8102d04:	af00      	add	r7, sp, #0
 8102d06:	60f8      	str	r0, [r7, #12]
 8102d08:	60b9      	str	r1, [r7, #8]
 8102d0a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d0c:	68fb      	ldr	r3, [r7, #12]
 8102d0e:	3360      	adds	r3, #96	@ 0x60
 8102d10:	461a      	mov	r2, r3
 8102d12:	68bb      	ldr	r3, [r7, #8]
 8102d14:	009b      	lsls	r3, r3, #2
 8102d16:	4413      	add	r3, r2
 8102d18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102d1a:	697b      	ldr	r3, [r7, #20]
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	431a      	orrs	r2, r3
 8102d26:	697b      	ldr	r3, [r7, #20]
 8102d28:	601a      	str	r2, [r3, #0]
  }
}
 8102d2a:	bf00      	nop
 8102d2c:	371c      	adds	r7, #28
 8102d2e:	46bd      	mov	sp, r7
 8102d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d34:	4770      	bx	lr

08102d36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8102d36:	b480      	push	{r7}
 8102d38:	b083      	sub	sp, #12
 8102d3a:	af00      	add	r7, sp, #0
 8102d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	68db      	ldr	r3, [r3, #12]
 8102d42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8102d46:	2b00      	cmp	r3, #0
 8102d48:	d101      	bne.n	8102d4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102d4a:	2301      	movs	r3, #1
 8102d4c:	e000      	b.n	8102d50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102d4e:	2300      	movs	r3, #0
}
 8102d50:	4618      	mov	r0, r3
 8102d52:	370c      	adds	r7, #12
 8102d54:	46bd      	mov	sp, r7
 8102d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d5a:	4770      	bx	lr

08102d5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102d5c:	b480      	push	{r7}
 8102d5e:	b087      	sub	sp, #28
 8102d60:	af00      	add	r7, sp, #0
 8102d62:	60f8      	str	r0, [r7, #12]
 8102d64:	60b9      	str	r1, [r7, #8]
 8102d66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	3330      	adds	r3, #48	@ 0x30
 8102d6c:	461a      	mov	r2, r3
 8102d6e:	68bb      	ldr	r3, [r7, #8]
 8102d70:	0a1b      	lsrs	r3, r3, #8
 8102d72:	009b      	lsls	r3, r3, #2
 8102d74:	f003 030c 	and.w	r3, r3, #12
 8102d78:	4413      	add	r3, r2
 8102d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102d7c:	697b      	ldr	r3, [r7, #20]
 8102d7e:	681a      	ldr	r2, [r3, #0]
 8102d80:	68bb      	ldr	r3, [r7, #8]
 8102d82:	f003 031f 	and.w	r3, r3, #31
 8102d86:	211f      	movs	r1, #31
 8102d88:	fa01 f303 	lsl.w	r3, r1, r3
 8102d8c:	43db      	mvns	r3, r3
 8102d8e:	401a      	ands	r2, r3
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	0e9b      	lsrs	r3, r3, #26
 8102d94:	f003 011f 	and.w	r1, r3, #31
 8102d98:	68bb      	ldr	r3, [r7, #8]
 8102d9a:	f003 031f 	and.w	r3, r3, #31
 8102d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8102da2:	431a      	orrs	r2, r3
 8102da4:	697b      	ldr	r3, [r7, #20]
 8102da6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102da8:	bf00      	nop
 8102daa:	371c      	adds	r7, #28
 8102dac:	46bd      	mov	sp, r7
 8102dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102db2:	4770      	bx	lr

08102db4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8102db4:	b480      	push	{r7}
 8102db6:	b083      	sub	sp, #12
 8102db8:	af00      	add	r7, sp, #0
 8102dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102dc0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	d101      	bne.n	8102dcc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8102dc8:	2301      	movs	r3, #1
 8102dca:	e000      	b.n	8102dce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8102dcc:	2300      	movs	r3, #0
}
 8102dce:	4618      	mov	r0, r3
 8102dd0:	370c      	adds	r7, #12
 8102dd2:	46bd      	mov	sp, r7
 8102dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd8:	4770      	bx	lr

08102dda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102dda:	b480      	push	{r7}
 8102ddc:	b087      	sub	sp, #28
 8102dde:	af00      	add	r7, sp, #0
 8102de0:	60f8      	str	r0, [r7, #12]
 8102de2:	60b9      	str	r1, [r7, #8]
 8102de4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102de6:	68fb      	ldr	r3, [r7, #12]
 8102de8:	3314      	adds	r3, #20
 8102dea:	461a      	mov	r2, r3
 8102dec:	68bb      	ldr	r3, [r7, #8]
 8102dee:	0e5b      	lsrs	r3, r3, #25
 8102df0:	009b      	lsls	r3, r3, #2
 8102df2:	f003 0304 	and.w	r3, r3, #4
 8102df6:	4413      	add	r3, r2
 8102df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102dfa:	697b      	ldr	r3, [r7, #20]
 8102dfc:	681a      	ldr	r2, [r3, #0]
 8102dfe:	68bb      	ldr	r3, [r7, #8]
 8102e00:	0d1b      	lsrs	r3, r3, #20
 8102e02:	f003 031f 	and.w	r3, r3, #31
 8102e06:	2107      	movs	r1, #7
 8102e08:	fa01 f303 	lsl.w	r3, r1, r3
 8102e0c:	43db      	mvns	r3, r3
 8102e0e:	401a      	ands	r2, r3
 8102e10:	68bb      	ldr	r3, [r7, #8]
 8102e12:	0d1b      	lsrs	r3, r3, #20
 8102e14:	f003 031f 	and.w	r3, r3, #31
 8102e18:	6879      	ldr	r1, [r7, #4]
 8102e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8102e1e:	431a      	orrs	r2, r3
 8102e20:	697b      	ldr	r3, [r7, #20]
 8102e22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102e24:	bf00      	nop
 8102e26:	371c      	adds	r7, #28
 8102e28:	46bd      	mov	sp, r7
 8102e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2e:	4770      	bx	lr

08102e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102e30:	b480      	push	{r7}
 8102e32:	b085      	sub	sp, #20
 8102e34:	af00      	add	r7, sp, #0
 8102e36:	60f8      	str	r0, [r7, #12]
 8102e38:	60b9      	str	r1, [r7, #8]
 8102e3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102e42:	68bb      	ldr	r3, [r7, #8]
 8102e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e48:	43db      	mvns	r3, r3
 8102e4a:	401a      	ands	r2, r3
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	f003 0318 	and.w	r3, r3, #24
 8102e52:	4908      	ldr	r1, [pc, #32]	@ (8102e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102e54:	40d9      	lsrs	r1, r3
 8102e56:	68bb      	ldr	r3, [r7, #8]
 8102e58:	400b      	ands	r3, r1
 8102e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e5e:	431a      	orrs	r2, r3
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102e66:	bf00      	nop
 8102e68:	3714      	adds	r7, #20
 8102e6a:	46bd      	mov	sp, r7
 8102e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e70:	4770      	bx	lr
 8102e72:	bf00      	nop
 8102e74:	000fffff 	.word	0x000fffff

08102e78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102e78:	b480      	push	{r7}
 8102e7a:	b083      	sub	sp, #12
 8102e7c:	af00      	add	r7, sp, #0
 8102e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	689b      	ldr	r3, [r3, #8]
 8102e84:	f003 031f 	and.w	r3, r3, #31
}
 8102e88:	4618      	mov	r0, r3
 8102e8a:	370c      	adds	r7, #12
 8102e8c:	46bd      	mov	sp, r7
 8102e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e92:	4770      	bx	lr

08102e94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102e94:	b480      	push	{r7}
 8102e96:	b083      	sub	sp, #12
 8102e98:	af00      	add	r7, sp, #0
 8102e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	689b      	ldr	r3, [r3, #8]
 8102ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8102ea4:	4618      	mov	r0, r3
 8102ea6:	370c      	adds	r7, #12
 8102ea8:	46bd      	mov	sp, r7
 8102eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eae:	4770      	bx	lr

08102eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102eb0:	b480      	push	{r7}
 8102eb2:	b083      	sub	sp, #12
 8102eb4:	af00      	add	r7, sp, #0
 8102eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	689b      	ldr	r3, [r3, #8]
 8102ebc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8102ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102ec4:	687a      	ldr	r2, [r7, #4]
 8102ec6:	6093      	str	r3, [r2, #8]
}
 8102ec8:	bf00      	nop
 8102eca:	370c      	adds	r7, #12
 8102ecc:	46bd      	mov	sp, r7
 8102ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed2:	4770      	bx	lr

08102ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8102ed4:	b480      	push	{r7}
 8102ed6:	b083      	sub	sp, #12
 8102ed8:	af00      	add	r7, sp, #0
 8102eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	689b      	ldr	r3, [r3, #8]
 8102ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102ee8:	d101      	bne.n	8102eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102eea:	2301      	movs	r3, #1
 8102eec:	e000      	b.n	8102ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102eee:	2300      	movs	r3, #0
}
 8102ef0:	4618      	mov	r0, r3
 8102ef2:	370c      	adds	r7, #12
 8102ef4:	46bd      	mov	sp, r7
 8102ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102efa:	4770      	bx	lr

08102efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102efc:	b480      	push	{r7}
 8102efe:	b083      	sub	sp, #12
 8102f00:	af00      	add	r7, sp, #0
 8102f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	689b      	ldr	r3, [r3, #8]
 8102f08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102f10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102f18:	bf00      	nop
 8102f1a:	370c      	adds	r7, #12
 8102f1c:	46bd      	mov	sp, r7
 8102f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f22:	4770      	bx	lr

08102f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8102f24:	b480      	push	{r7}
 8102f26:	b083      	sub	sp, #12
 8102f28:	af00      	add	r7, sp, #0
 8102f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	689b      	ldr	r3, [r3, #8]
 8102f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102f38:	d101      	bne.n	8102f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102f3a:	2301      	movs	r3, #1
 8102f3c:	e000      	b.n	8102f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102f3e:	2300      	movs	r3, #0
}
 8102f40:	4618      	mov	r0, r3
 8102f42:	370c      	adds	r7, #12
 8102f44:	46bd      	mov	sp, r7
 8102f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f4a:	4770      	bx	lr

08102f4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8102f4c:	b480      	push	{r7}
 8102f4e:	b083      	sub	sp, #12
 8102f50:	af00      	add	r7, sp, #0
 8102f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	689b      	ldr	r3, [r3, #8]
 8102f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102f60:	f043 0201 	orr.w	r2, r3, #1
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102f68:	bf00      	nop
 8102f6a:	370c      	adds	r7, #12
 8102f6c:	46bd      	mov	sp, r7
 8102f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f72:	4770      	bx	lr

08102f74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8102f74:	b480      	push	{r7}
 8102f76:	b083      	sub	sp, #12
 8102f78:	af00      	add	r7, sp, #0
 8102f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	689b      	ldr	r3, [r3, #8]
 8102f80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102f88:	f043 0202 	orr.w	r2, r3, #2
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8102f90:	bf00      	nop
 8102f92:	370c      	adds	r7, #12
 8102f94:	46bd      	mov	sp, r7
 8102f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f9a:	4770      	bx	lr

08102f9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8102f9c:	b480      	push	{r7}
 8102f9e:	b083      	sub	sp, #12
 8102fa0:	af00      	add	r7, sp, #0
 8102fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	689b      	ldr	r3, [r3, #8]
 8102fa8:	f003 0301 	and.w	r3, r3, #1
 8102fac:	2b01      	cmp	r3, #1
 8102fae:	d101      	bne.n	8102fb4 <LL_ADC_IsEnabled+0x18>
 8102fb0:	2301      	movs	r3, #1
 8102fb2:	e000      	b.n	8102fb6 <LL_ADC_IsEnabled+0x1a>
 8102fb4:	2300      	movs	r3, #0
}
 8102fb6:	4618      	mov	r0, r3
 8102fb8:	370c      	adds	r7, #12
 8102fba:	46bd      	mov	sp, r7
 8102fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc0:	4770      	bx	lr

08102fc2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8102fc2:	b480      	push	{r7}
 8102fc4:	b083      	sub	sp, #12
 8102fc6:	af00      	add	r7, sp, #0
 8102fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	689b      	ldr	r3, [r3, #8]
 8102fce:	f003 0302 	and.w	r3, r3, #2
 8102fd2:	2b02      	cmp	r3, #2
 8102fd4:	d101      	bne.n	8102fda <LL_ADC_IsDisableOngoing+0x18>
 8102fd6:	2301      	movs	r3, #1
 8102fd8:	e000      	b.n	8102fdc <LL_ADC_IsDisableOngoing+0x1a>
 8102fda:	2300      	movs	r3, #0
}
 8102fdc:	4618      	mov	r0, r3
 8102fde:	370c      	adds	r7, #12
 8102fe0:	46bd      	mov	sp, r7
 8102fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fe6:	4770      	bx	lr

08102fe8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8102fe8:	b480      	push	{r7}
 8102fea:	b083      	sub	sp, #12
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	689b      	ldr	r3, [r3, #8]
 8102ff4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102ffc:	f043 0204 	orr.w	r2, r3, #4
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8103004:	bf00      	nop
 8103006:	370c      	adds	r7, #12
 8103008:	46bd      	mov	sp, r7
 810300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810300e:	4770      	bx	lr

08103010 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8103010:	b480      	push	{r7}
 8103012:	b083      	sub	sp, #12
 8103014:	af00      	add	r7, sp, #0
 8103016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	689b      	ldr	r3, [r3, #8]
 810301c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103020:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103024:	f043 0210 	orr.w	r2, r3, #16
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 810302c:	bf00      	nop
 810302e:	370c      	adds	r7, #12
 8103030:	46bd      	mov	sp, r7
 8103032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103036:	4770      	bx	lr

08103038 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8103038:	b480      	push	{r7}
 810303a:	b083      	sub	sp, #12
 810303c:	af00      	add	r7, sp, #0
 810303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	689b      	ldr	r3, [r3, #8]
 8103044:	f003 0304 	and.w	r3, r3, #4
 8103048:	2b04      	cmp	r3, #4
 810304a:	d101      	bne.n	8103050 <LL_ADC_REG_IsConversionOngoing+0x18>
 810304c:	2301      	movs	r3, #1
 810304e:	e000      	b.n	8103052 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103050:	2300      	movs	r3, #0
}
 8103052:	4618      	mov	r0, r3
 8103054:	370c      	adds	r7, #12
 8103056:	46bd      	mov	sp, r7
 8103058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810305c:	4770      	bx	lr

0810305e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 810305e:	b480      	push	{r7}
 8103060:	b083      	sub	sp, #12
 8103062:	af00      	add	r7, sp, #0
 8103064:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	689b      	ldr	r3, [r3, #8]
 810306a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810306e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103072:	f043 0220 	orr.w	r2, r3, #32
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 810307a:	bf00      	nop
 810307c:	370c      	adds	r7, #12
 810307e:	46bd      	mov	sp, r7
 8103080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103084:	4770      	bx	lr

08103086 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8103086:	b480      	push	{r7}
 8103088:	b083      	sub	sp, #12
 810308a:	af00      	add	r7, sp, #0
 810308c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	689b      	ldr	r3, [r3, #8]
 8103092:	f003 0308 	and.w	r3, r3, #8
 8103096:	2b08      	cmp	r3, #8
 8103098:	d101      	bne.n	810309e <LL_ADC_INJ_IsConversionOngoing+0x18>
 810309a:	2301      	movs	r3, #1
 810309c:	e000      	b.n	81030a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810309e:	2300      	movs	r3, #0
}
 81030a0:	4618      	mov	r0, r3
 81030a2:	370c      	adds	r7, #12
 81030a4:	46bd      	mov	sp, r7
 81030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030aa:	4770      	bx	lr

081030ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81030ac:	b590      	push	{r4, r7, lr}
 81030ae:	b089      	sub	sp, #36	@ 0x24
 81030b0:	af00      	add	r7, sp, #0
 81030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81030b4:	2300      	movs	r3, #0
 81030b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81030b8:	2300      	movs	r3, #0
 81030ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	2b00      	cmp	r3, #0
 81030c0:	d101      	bne.n	81030c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81030c2:	2301      	movs	r3, #1
 81030c4:	e18f      	b.n	81033e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	68db      	ldr	r3, [r3, #12]
 81030ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d109      	bne.n	81030e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81030d4:	6878      	ldr	r0, [r7, #4]
 81030d6:	f7ff f9e7 	bl	81024a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	2200      	movs	r2, #0
 81030de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	2200      	movs	r2, #0
 81030e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	4618      	mov	r0, r3
 81030ee:	f7ff fef1 	bl	8102ed4 <LL_ADC_IsDeepPowerDownEnabled>
 81030f2:	4603      	mov	r3, r0
 81030f4:	2b00      	cmp	r3, #0
 81030f6:	d004      	beq.n	8103102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	4618      	mov	r0, r3
 81030fe:	f7ff fed7 	bl	8102eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4618      	mov	r0, r3
 8103108:	f7ff ff0c 	bl	8102f24 <LL_ADC_IsInternalRegulatorEnabled>
 810310c:	4603      	mov	r3, r0
 810310e:	2b00      	cmp	r3, #0
 8103110:	d114      	bne.n	810313c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4618      	mov	r0, r3
 8103118:	f7ff fef0 	bl	8102efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810311c:	4b88      	ldr	r3, [pc, #544]	@ (8103340 <HAL_ADC_Init+0x294>)
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	099b      	lsrs	r3, r3, #6
 8103122:	4a88      	ldr	r2, [pc, #544]	@ (8103344 <HAL_ADC_Init+0x298>)
 8103124:	fba2 2303 	umull	r2, r3, r2, r3
 8103128:	099b      	lsrs	r3, r3, #6
 810312a:	3301      	adds	r3, #1
 810312c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810312e:	e002      	b.n	8103136 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103130:	68bb      	ldr	r3, [r7, #8]
 8103132:	3b01      	subs	r3, #1
 8103134:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103136:	68bb      	ldr	r3, [r7, #8]
 8103138:	2b00      	cmp	r3, #0
 810313a:	d1f9      	bne.n	8103130 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	4618      	mov	r0, r3
 8103142:	f7ff feef 	bl	8102f24 <LL_ADC_IsInternalRegulatorEnabled>
 8103146:	4603      	mov	r3, r0
 8103148:	2b00      	cmp	r3, #0
 810314a:	d10d      	bne.n	8103168 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103150:	f043 0210 	orr.w	r2, r3, #16
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810315c:	f043 0201 	orr.w	r2, r3, #1
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8103164:	2301      	movs	r3, #1
 8103166:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4618      	mov	r0, r3
 810316e:	f7ff ff63 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 8103172:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103178:	f003 0310 	and.w	r3, r3, #16
 810317c:	2b00      	cmp	r3, #0
 810317e:	f040 8129 	bne.w	81033d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103182:	697b      	ldr	r3, [r7, #20]
 8103184:	2b00      	cmp	r3, #0
 8103186:	f040 8125 	bne.w	81033d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810318e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8103192:	f043 0202 	orr.w	r2, r3, #2
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	4618      	mov	r0, r3
 81031a0:	f7ff fefc 	bl	8102f9c <LL_ADC_IsEnabled>
 81031a4:	4603      	mov	r3, r0
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d136      	bne.n	8103218 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	681b      	ldr	r3, [r3, #0]
 81031ae:	4a66      	ldr	r2, [pc, #408]	@ (8103348 <HAL_ADC_Init+0x29c>)
 81031b0:	4293      	cmp	r3, r2
 81031b2:	d004      	beq.n	81031be <HAL_ADC_Init+0x112>
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	681b      	ldr	r3, [r3, #0]
 81031b8:	4a64      	ldr	r2, [pc, #400]	@ (810334c <HAL_ADC_Init+0x2a0>)
 81031ba:	4293      	cmp	r3, r2
 81031bc:	d10e      	bne.n	81031dc <HAL_ADC_Init+0x130>
 81031be:	4862      	ldr	r0, [pc, #392]	@ (8103348 <HAL_ADC_Init+0x29c>)
 81031c0:	f7ff feec 	bl	8102f9c <LL_ADC_IsEnabled>
 81031c4:	4604      	mov	r4, r0
 81031c6:	4861      	ldr	r0, [pc, #388]	@ (810334c <HAL_ADC_Init+0x2a0>)
 81031c8:	f7ff fee8 	bl	8102f9c <LL_ADC_IsEnabled>
 81031cc:	4603      	mov	r3, r0
 81031ce:	4323      	orrs	r3, r4
 81031d0:	2b00      	cmp	r3, #0
 81031d2:	bf0c      	ite	eq
 81031d4:	2301      	moveq	r3, #1
 81031d6:	2300      	movne	r3, #0
 81031d8:	b2db      	uxtb	r3, r3
 81031da:	e008      	b.n	81031ee <HAL_ADC_Init+0x142>
 81031dc:	485c      	ldr	r0, [pc, #368]	@ (8103350 <HAL_ADC_Init+0x2a4>)
 81031de:	f7ff fedd 	bl	8102f9c <LL_ADC_IsEnabled>
 81031e2:	4603      	mov	r3, r0
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	bf0c      	ite	eq
 81031e8:	2301      	moveq	r3, #1
 81031ea:	2300      	movne	r3, #0
 81031ec:	b2db      	uxtb	r3, r3
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d012      	beq.n	8103218 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	4a54      	ldr	r2, [pc, #336]	@ (8103348 <HAL_ADC_Init+0x29c>)
 81031f8:	4293      	cmp	r3, r2
 81031fa:	d004      	beq.n	8103206 <HAL_ADC_Init+0x15a>
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	4a52      	ldr	r2, [pc, #328]	@ (810334c <HAL_ADC_Init+0x2a0>)
 8103202:	4293      	cmp	r3, r2
 8103204:	d101      	bne.n	810320a <HAL_ADC_Init+0x15e>
 8103206:	4a53      	ldr	r2, [pc, #332]	@ (8103354 <HAL_ADC_Init+0x2a8>)
 8103208:	e000      	b.n	810320c <HAL_ADC_Init+0x160>
 810320a:	4a53      	ldr	r2, [pc, #332]	@ (8103358 <HAL_ADC_Init+0x2ac>)
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	685b      	ldr	r3, [r3, #4]
 8103210:	4619      	mov	r1, r3
 8103212:	4610      	mov	r0, r2
 8103214:	f7ff fcd4 	bl	8102bc0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103218:	f7ff fcc6 	bl	8102ba8 <HAL_GetREVID>
 810321c:	4603      	mov	r3, r0
 810321e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103222:	4293      	cmp	r3, r2
 8103224:	d914      	bls.n	8103250 <HAL_ADC_Init+0x1a4>
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	689b      	ldr	r3, [r3, #8]
 810322a:	2b10      	cmp	r3, #16
 810322c:	d110      	bne.n	8103250 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	7d5b      	ldrb	r3, [r3, #21]
 8103232:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103238:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810323e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	7f1b      	ldrb	r3, [r3, #28]
 8103244:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103246:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103248:	f043 030c 	orr.w	r3, r3, #12
 810324c:	61bb      	str	r3, [r7, #24]
 810324e:	e00d      	b.n	810326c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	7d5b      	ldrb	r3, [r3, #21]
 8103254:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810325a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103260:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	7f1b      	ldrb	r3, [r3, #28]
 8103266:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103268:	4313      	orrs	r3, r2
 810326a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	7f1b      	ldrb	r3, [r3, #28]
 8103270:	2b01      	cmp	r3, #1
 8103272:	d106      	bne.n	8103282 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	6a1b      	ldr	r3, [r3, #32]
 8103278:	3b01      	subs	r3, #1
 810327a:	045b      	lsls	r3, r3, #17
 810327c:	69ba      	ldr	r2, [r7, #24]
 810327e:	4313      	orrs	r3, r2
 8103280:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103286:	2b00      	cmp	r3, #0
 8103288:	d009      	beq.n	810329e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810328e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103296:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103298:	69ba      	ldr	r2, [r7, #24]
 810329a:	4313      	orrs	r3, r2
 810329c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	68da      	ldr	r2, [r3, #12]
 81032a4:	4b2d      	ldr	r3, [pc, #180]	@ (810335c <HAL_ADC_Init+0x2b0>)
 81032a6:	4013      	ands	r3, r2
 81032a8:	687a      	ldr	r2, [r7, #4]
 81032aa:	6812      	ldr	r2, [r2, #0]
 81032ac:	69b9      	ldr	r1, [r7, #24]
 81032ae:	430b      	orrs	r3, r1
 81032b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4618      	mov	r0, r3
 81032b8:	f7ff febe 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 81032bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	4618      	mov	r0, r3
 81032c4:	f7ff fedf 	bl	8103086 <LL_ADC_INJ_IsConversionOngoing>
 81032c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81032ca:	693b      	ldr	r3, [r7, #16]
 81032cc:	2b00      	cmp	r3, #0
 81032ce:	d15f      	bne.n	8103390 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81032d0:	68fb      	ldr	r3, [r7, #12]
 81032d2:	2b00      	cmp	r3, #0
 81032d4:	d15c      	bne.n	8103390 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	7d1b      	ldrb	r3, [r3, #20]
 81032da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 81032e0:	4313      	orrs	r3, r2
 81032e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	68db      	ldr	r3, [r3, #12]
 81032ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81032ee:	f023 0303 	bic.w	r3, r3, #3
 81032f2:	687a      	ldr	r2, [r7, #4]
 81032f4:	6812      	ldr	r2, [r2, #0]
 81032f6:	69b9      	ldr	r1, [r7, #24]
 81032f8:	430b      	orrs	r3, r1
 81032fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8103302:	2b01      	cmp	r3, #1
 8103304:	d12e      	bne.n	8103364 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810330a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	691a      	ldr	r2, [r3, #16]
 8103312:	4b13      	ldr	r3, [pc, #76]	@ (8103360 <HAL_ADC_Init+0x2b4>)
 8103314:	4013      	ands	r3, r2
 8103316:	687a      	ldr	r2, [r7, #4]
 8103318:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 810331a:	3a01      	subs	r2, #1
 810331c:	0411      	lsls	r1, r2, #16
 810331e:	687a      	ldr	r2, [r7, #4]
 8103320:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8103322:	4311      	orrs	r1, r2
 8103324:	687a      	ldr	r2, [r7, #4]
 8103326:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103328:	4311      	orrs	r1, r2
 810332a:	687a      	ldr	r2, [r7, #4]
 810332c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810332e:	430a      	orrs	r2, r1
 8103330:	431a      	orrs	r2, r3
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	f042 0201 	orr.w	r2, r2, #1
 810333a:	611a      	str	r2, [r3, #16]
 810333c:	e01a      	b.n	8103374 <HAL_ADC_Init+0x2c8>
 810333e:	bf00      	nop
 8103340:	10000000 	.word	0x10000000
 8103344:	053e2d63 	.word	0x053e2d63
 8103348:	40022000 	.word	0x40022000
 810334c:	40022100 	.word	0x40022100
 8103350:	58026000 	.word	0x58026000
 8103354:	40022300 	.word	0x40022300
 8103358:	58026300 	.word	0x58026300
 810335c:	fff0c003 	.word	0xfff0c003
 8103360:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	691a      	ldr	r2, [r3, #16]
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	f022 0201 	bic.w	r2, r2, #1
 8103372:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	691b      	ldr	r3, [r3, #16]
 810337a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	430a      	orrs	r2, r1
 8103388:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810338a:	6878      	ldr	r0, [r7, #4]
 810338c:	f001 f91e 	bl	81045cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	68db      	ldr	r3, [r3, #12]
 8103394:	2b01      	cmp	r3, #1
 8103396:	d10c      	bne.n	81033b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810339e:	f023 010f 	bic.w	r1, r3, #15
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	699b      	ldr	r3, [r3, #24]
 81033a6:	1e5a      	subs	r2, r3, #1
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	430a      	orrs	r2, r1
 81033ae:	631a      	str	r2, [r3, #48]	@ 0x30
 81033b0:	e007      	b.n	81033c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	f022 020f 	bic.w	r2, r2, #15
 81033c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033c6:	f023 0303 	bic.w	r3, r3, #3
 81033ca:	f043 0201 	orr.w	r2, r3, #1
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	655a      	str	r2, [r3, #84]	@ 0x54
 81033d2:	e007      	b.n	81033e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033d8:	f043 0210 	orr.w	r2, r3, #16
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81033e0:	2301      	movs	r3, #1
 81033e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81033e4:	7ffb      	ldrb	r3, [r7, #31]
}
 81033e6:	4618      	mov	r0, r3
 81033e8:	3724      	adds	r7, #36	@ 0x24
 81033ea:	46bd      	mov	sp, r7
 81033ec:	bd90      	pop	{r4, r7, pc}
 81033ee:	bf00      	nop

081033f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81033f0:	b580      	push	{r7, lr}
 81033f2:	b086      	sub	sp, #24
 81033f4:	af00      	add	r7, sp, #0
 81033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	4a5d      	ldr	r2, [pc, #372]	@ (8103574 <HAL_ADC_Start+0x184>)
 81033fe:	4293      	cmp	r3, r2
 8103400:	d004      	beq.n	810340c <HAL_ADC_Start+0x1c>
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	4a5c      	ldr	r2, [pc, #368]	@ (8103578 <HAL_ADC_Start+0x188>)
 8103408:	4293      	cmp	r3, r2
 810340a:	d101      	bne.n	8103410 <HAL_ADC_Start+0x20>
 810340c:	4b5b      	ldr	r3, [pc, #364]	@ (810357c <HAL_ADC_Start+0x18c>)
 810340e:	e000      	b.n	8103412 <HAL_ADC_Start+0x22>
 8103410:	4b5b      	ldr	r3, [pc, #364]	@ (8103580 <HAL_ADC_Start+0x190>)
 8103412:	4618      	mov	r0, r3
 8103414:	f7ff fd30 	bl	8102e78 <LL_ADC_GetMultimode>
 8103418:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	4618      	mov	r0, r3
 8103420:	f7ff fe0a 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 8103424:	4603      	mov	r3, r0
 8103426:	2b00      	cmp	r3, #0
 8103428:	f040 809c 	bne.w	8103564 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103432:	2b01      	cmp	r3, #1
 8103434:	d101      	bne.n	810343a <HAL_ADC_Start+0x4a>
 8103436:	2302      	movs	r3, #2
 8103438:	e097      	b.n	810356a <HAL_ADC_Start+0x17a>
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	2201      	movs	r2, #1
 810343e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8103442:	6878      	ldr	r0, [r7, #4]
 8103444:	f000 ffd8 	bl	81043f8 <ADC_Enable>
 8103448:	4603      	mov	r3, r0
 810344a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 810344c:	7dfb      	ldrb	r3, [r7, #23]
 810344e:	2b00      	cmp	r3, #0
 8103450:	f040 8083 	bne.w	810355a <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103458:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810345c:	f023 0301 	bic.w	r3, r3, #1
 8103460:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	4a42      	ldr	r2, [pc, #264]	@ (8103578 <HAL_ADC_Start+0x188>)
 810346e:	4293      	cmp	r3, r2
 8103470:	d002      	beq.n	8103478 <HAL_ADC_Start+0x88>
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	e000      	b.n	810347a <HAL_ADC_Start+0x8a>
 8103478:	4b3e      	ldr	r3, [pc, #248]	@ (8103574 <HAL_ADC_Start+0x184>)
 810347a:	687a      	ldr	r2, [r7, #4]
 810347c:	6812      	ldr	r2, [r2, #0]
 810347e:	4293      	cmp	r3, r2
 8103480:	d002      	beq.n	8103488 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103482:	693b      	ldr	r3, [r7, #16]
 8103484:	2b00      	cmp	r3, #0
 8103486:	d105      	bne.n	8103494 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810348c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810349c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81034a0:	d106      	bne.n	81034b0 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034a6:	f023 0206 	bic.w	r2, r3, #6
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	659a      	str	r2, [r3, #88]	@ 0x58
 81034ae:	e002      	b.n	81034b6 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	2200      	movs	r2, #0
 81034b4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	681b      	ldr	r3, [r3, #0]
 81034ba:	221c      	movs	r2, #28
 81034bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	2200      	movs	r2, #0
 81034c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	681b      	ldr	r3, [r3, #0]
 81034ca:	4a2b      	ldr	r2, [pc, #172]	@ (8103578 <HAL_ADC_Start+0x188>)
 81034cc:	4293      	cmp	r3, r2
 81034ce:	d002      	beq.n	81034d6 <HAL_ADC_Start+0xe6>
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	e000      	b.n	81034d8 <HAL_ADC_Start+0xe8>
 81034d6:	4b27      	ldr	r3, [pc, #156]	@ (8103574 <HAL_ADC_Start+0x184>)
 81034d8:	687a      	ldr	r2, [r7, #4]
 81034da:	6812      	ldr	r2, [r2, #0]
 81034dc:	4293      	cmp	r3, r2
 81034de:	d008      	beq.n	81034f2 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81034e0:	693b      	ldr	r3, [r7, #16]
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d005      	beq.n	81034f2 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81034e6:	693b      	ldr	r3, [r7, #16]
 81034e8:	2b05      	cmp	r3, #5
 81034ea:	d002      	beq.n	81034f2 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81034ec:	693b      	ldr	r3, [r7, #16]
 81034ee:	2b09      	cmp	r3, #9
 81034f0:	d114      	bne.n	810351c <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	68db      	ldr	r3, [r3, #12]
 81034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81034fc:	2b00      	cmp	r3, #0
 81034fe:	d007      	beq.n	8103510 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103504:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103508:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	4618      	mov	r0, r3
 8103516:	f7ff fd67 	bl	8102fe8 <LL_ADC_REG_StartConversion>
 810351a:	e025      	b.n	8103568 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103520:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	4a12      	ldr	r2, [pc, #72]	@ (8103578 <HAL_ADC_Start+0x188>)
 810352e:	4293      	cmp	r3, r2
 8103530:	d002      	beq.n	8103538 <HAL_ADC_Start+0x148>
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	e000      	b.n	810353a <HAL_ADC_Start+0x14a>
 8103538:	4b0e      	ldr	r3, [pc, #56]	@ (8103574 <HAL_ADC_Start+0x184>)
 810353a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810353c:	68fb      	ldr	r3, [r7, #12]
 810353e:	68db      	ldr	r3, [r3, #12]
 8103540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103544:	2b00      	cmp	r3, #0
 8103546:	d00f      	beq.n	8103568 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810354c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103550:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	655a      	str	r2, [r3, #84]	@ 0x54
 8103558:	e006      	b.n	8103568 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	2200      	movs	r2, #0
 810355e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8103562:	e001      	b.n	8103568 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8103564:	2302      	movs	r3, #2
 8103566:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8103568:	7dfb      	ldrb	r3, [r7, #23]
}
 810356a:	4618      	mov	r0, r3
 810356c:	3718      	adds	r7, #24
 810356e:	46bd      	mov	sp, r7
 8103570:	bd80      	pop	{r7, pc}
 8103572:	bf00      	nop
 8103574:	40022000 	.word	0x40022000
 8103578:	40022100 	.word	0x40022100
 810357c:	40022300 	.word	0x40022300
 8103580:	58026300 	.word	0x58026300

08103584 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8103584:	b580      	push	{r7, lr}
 8103586:	b084      	sub	sp, #16
 8103588:	af00      	add	r7, sp, #0
 810358a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103592:	2b01      	cmp	r3, #1
 8103594:	d101      	bne.n	810359a <HAL_ADC_Stop+0x16>
 8103596:	2302      	movs	r3, #2
 8103598:	e023      	b.n	81035e2 <HAL_ADC_Stop+0x5e>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	2201      	movs	r2, #1
 810359e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 81035a2:	2103      	movs	r1, #3
 81035a4:	6878      	ldr	r0, [r7, #4]
 81035a6:	f000 fe6b 	bl	8104280 <ADC_ConversionStop>
 81035aa:	4603      	mov	r3, r0
 81035ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 81035ae:	7bfb      	ldrb	r3, [r7, #15]
 81035b0:	2b00      	cmp	r3, #0
 81035b2:	d111      	bne.n	81035d8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 81035b4:	6878      	ldr	r0, [r7, #4]
 81035b6:	f000 ffa9 	bl	810450c <ADC_Disable>
 81035ba:	4603      	mov	r3, r0
 81035bc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 81035be:	7bfb      	ldrb	r3, [r7, #15]
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d109      	bne.n	81035d8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 81035cc:	f023 0301 	bic.w	r3, r3, #1
 81035d0:	f043 0201 	orr.w	r2, r3, #1
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	2200      	movs	r2, #0
 81035dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 81035e2:	4618      	mov	r0, r3
 81035e4:	3710      	adds	r7, #16
 81035e6:	46bd      	mov	sp, r7
 81035e8:	bd80      	pop	{r7, pc}
	...

081035ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 81035ec:	b580      	push	{r7, lr}
 81035ee:	b088      	sub	sp, #32
 81035f0:	af00      	add	r7, sp, #0
 81035f2:	6078      	str	r0, [r7, #4]
 81035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4a72      	ldr	r2, [pc, #456]	@ (81037c4 <HAL_ADC_PollForConversion+0x1d8>)
 81035fc:	4293      	cmp	r3, r2
 81035fe:	d004      	beq.n	810360a <HAL_ADC_PollForConversion+0x1e>
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a70      	ldr	r2, [pc, #448]	@ (81037c8 <HAL_ADC_PollForConversion+0x1dc>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d101      	bne.n	810360e <HAL_ADC_PollForConversion+0x22>
 810360a:	4b70      	ldr	r3, [pc, #448]	@ (81037cc <HAL_ADC_PollForConversion+0x1e0>)
 810360c:	e000      	b.n	8103610 <HAL_ADC_PollForConversion+0x24>
 810360e:	4b70      	ldr	r3, [pc, #448]	@ (81037d0 <HAL_ADC_PollForConversion+0x1e4>)
 8103610:	4618      	mov	r0, r3
 8103612:	f7ff fc31 	bl	8102e78 <LL_ADC_GetMultimode>
 8103616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	691b      	ldr	r3, [r3, #16]
 810361c:	2b08      	cmp	r3, #8
 810361e:	d102      	bne.n	8103626 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8103620:	2308      	movs	r3, #8
 8103622:	61fb      	str	r3, [r7, #28]
 8103624:	e037      	b.n	8103696 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103626:	697b      	ldr	r3, [r7, #20]
 8103628:	2b00      	cmp	r3, #0
 810362a:	d005      	beq.n	8103638 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810362c:	697b      	ldr	r3, [r7, #20]
 810362e:	2b05      	cmp	r3, #5
 8103630:	d002      	beq.n	8103638 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103632:	697b      	ldr	r3, [r7, #20]
 8103634:	2b09      	cmp	r3, #9
 8103636:	d111      	bne.n	810365c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	68db      	ldr	r3, [r3, #12]
 810363e:	f003 0301 	and.w	r3, r3, #1
 8103642:	2b00      	cmp	r3, #0
 8103644:	d007      	beq.n	8103656 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810364a:	f043 0220 	orr.w	r2, r3, #32
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8103652:	2301      	movs	r3, #1
 8103654:	e0b1      	b.n	81037ba <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8103656:	2304      	movs	r3, #4
 8103658:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 810365a:	e01c      	b.n	8103696 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a58      	ldr	r2, [pc, #352]	@ (81037c4 <HAL_ADC_PollForConversion+0x1d8>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d004      	beq.n	8103670 <HAL_ADC_PollForConversion+0x84>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a57      	ldr	r2, [pc, #348]	@ (81037c8 <HAL_ADC_PollForConversion+0x1dc>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d101      	bne.n	8103674 <HAL_ADC_PollForConversion+0x88>
 8103670:	4b56      	ldr	r3, [pc, #344]	@ (81037cc <HAL_ADC_PollForConversion+0x1e0>)
 8103672:	e000      	b.n	8103676 <HAL_ADC_PollForConversion+0x8a>
 8103674:	4b56      	ldr	r3, [pc, #344]	@ (81037d0 <HAL_ADC_PollForConversion+0x1e4>)
 8103676:	4618      	mov	r0, r3
 8103678:	f7ff fc0c 	bl	8102e94 <LL_ADC_GetMultiDMATransfer>
 810367c:	4603      	mov	r3, r0
 810367e:	2b00      	cmp	r3, #0
 8103680:	d007      	beq.n	8103692 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103686:	f043 0220 	orr.w	r2, r3, #32
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 810368e:	2301      	movs	r3, #1
 8103690:	e093      	b.n	81037ba <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8103692:	2304      	movs	r3, #4
 8103694:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8103696:	f7ff fa57 	bl	8102b48 <HAL_GetTick>
 810369a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 810369c:	e021      	b.n	81036e2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 810369e:	683b      	ldr	r3, [r7, #0]
 81036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036a4:	d01d      	beq.n	81036e2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81036a6:	f7ff fa4f 	bl	8102b48 <HAL_GetTick>
 81036aa:	4602      	mov	r2, r0
 81036ac:	693b      	ldr	r3, [r7, #16]
 81036ae:	1ad3      	subs	r3, r2, r3
 81036b0:	683a      	ldr	r2, [r7, #0]
 81036b2:	429a      	cmp	r2, r3
 81036b4:	d302      	bcc.n	81036bc <HAL_ADC_PollForConversion+0xd0>
 81036b6:	683b      	ldr	r3, [r7, #0]
 81036b8:	2b00      	cmp	r3, #0
 81036ba:	d112      	bne.n	81036e2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	681a      	ldr	r2, [r3, #0]
 81036c2:	69fb      	ldr	r3, [r7, #28]
 81036c4:	4013      	ands	r3, r2
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	d10b      	bne.n	81036e2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036ce:	f043 0204 	orr.w	r2, r3, #4
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	2200      	movs	r2, #0
 81036da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 81036de:	2303      	movs	r3, #3
 81036e0:	e06b      	b.n	81037ba <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	681a      	ldr	r2, [r3, #0]
 81036e8:	69fb      	ldr	r3, [r7, #28]
 81036ea:	4013      	ands	r3, r2
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d0d6      	beq.n	810369e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4618      	mov	r0, r3
 8103702:	f7ff fb18 	bl	8102d36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103706:	4603      	mov	r3, r0
 8103708:	2b00      	cmp	r3, #0
 810370a:	d01c      	beq.n	8103746 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	7d5b      	ldrb	r3, [r3, #21]
 8103710:	2b00      	cmp	r3, #0
 8103712:	d118      	bne.n	8103746 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	681b      	ldr	r3, [r3, #0]
 8103718:	681b      	ldr	r3, [r3, #0]
 810371a:	f003 0308 	and.w	r3, r3, #8
 810371e:	2b08      	cmp	r3, #8
 8103720:	d111      	bne.n	8103746 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103736:	2b00      	cmp	r3, #0
 8103738:	d105      	bne.n	8103746 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810373e:	f043 0201 	orr.w	r2, r3, #1
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	4a1f      	ldr	r2, [pc, #124]	@ (81037c8 <HAL_ADC_PollForConversion+0x1dc>)
 810374c:	4293      	cmp	r3, r2
 810374e:	d002      	beq.n	8103756 <HAL_ADC_PollForConversion+0x16a>
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	e000      	b.n	8103758 <HAL_ADC_PollForConversion+0x16c>
 8103756:	4b1b      	ldr	r3, [pc, #108]	@ (81037c4 <HAL_ADC_PollForConversion+0x1d8>)
 8103758:	687a      	ldr	r2, [r7, #4]
 810375a:	6812      	ldr	r2, [r2, #0]
 810375c:	4293      	cmp	r3, r2
 810375e:	d008      	beq.n	8103772 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103760:	697b      	ldr	r3, [r7, #20]
 8103762:	2b00      	cmp	r3, #0
 8103764:	d005      	beq.n	8103772 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103766:	697b      	ldr	r3, [r7, #20]
 8103768:	2b05      	cmp	r3, #5
 810376a:	d002      	beq.n	8103772 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810376c:	697b      	ldr	r3, [r7, #20]
 810376e:	2b09      	cmp	r3, #9
 8103770:	d104      	bne.n	810377c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	68db      	ldr	r3, [r3, #12]
 8103778:	61bb      	str	r3, [r7, #24]
 810377a:	e00c      	b.n	8103796 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	4a11      	ldr	r2, [pc, #68]	@ (81037c8 <HAL_ADC_PollForConversion+0x1dc>)
 8103782:	4293      	cmp	r3, r2
 8103784:	d002      	beq.n	810378c <HAL_ADC_PollForConversion+0x1a0>
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	e000      	b.n	810378e <HAL_ADC_PollForConversion+0x1a2>
 810378c:	4b0d      	ldr	r3, [pc, #52]	@ (81037c4 <HAL_ADC_PollForConversion+0x1d8>)
 810378e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103790:	68fb      	ldr	r3, [r7, #12]
 8103792:	68db      	ldr	r3, [r3, #12]
 8103794:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8103796:	69fb      	ldr	r3, [r7, #28]
 8103798:	2b08      	cmp	r3, #8
 810379a:	d104      	bne.n	81037a6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	2208      	movs	r2, #8
 81037a2:	601a      	str	r2, [r3, #0]
 81037a4:	e008      	b.n	81037b8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81037a6:	69bb      	ldr	r3, [r7, #24]
 81037a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d103      	bne.n	81037b8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	220c      	movs	r2, #12
 81037b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 81037b8:	2300      	movs	r3, #0
}
 81037ba:	4618      	mov	r0, r3
 81037bc:	3720      	adds	r7, #32
 81037be:	46bd      	mov	sp, r7
 81037c0:	bd80      	pop	{r7, pc}
 81037c2:	bf00      	nop
 81037c4:	40022000 	.word	0x40022000
 81037c8:	40022100 	.word	0x40022100
 81037cc:	40022300 	.word	0x40022300
 81037d0:	58026300 	.word	0x58026300

081037d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 81037d4:	b480      	push	{r7}
 81037d6:	b083      	sub	sp, #12
 81037d8:	af00      	add	r7, sp, #0
 81037da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 81037e2:	4618      	mov	r0, r3
 81037e4:	370c      	adds	r7, #12
 81037e6:	46bd      	mov	sp, r7
 81037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ec:	4770      	bx	lr
	...

081037f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 81037f0:	b580      	push	{r7, lr}
 81037f2:	b08a      	sub	sp, #40	@ 0x28
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 81037f8:	2300      	movs	r3, #0
 81037fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	685b      	ldr	r3, [r3, #4]
 810380a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	681b      	ldr	r3, [r3, #0]
 8103810:	4a87      	ldr	r2, [pc, #540]	@ (8103a30 <HAL_ADC_IRQHandler+0x240>)
 8103812:	4293      	cmp	r3, r2
 8103814:	d004      	beq.n	8103820 <HAL_ADC_IRQHandler+0x30>
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	4a86      	ldr	r2, [pc, #536]	@ (8103a34 <HAL_ADC_IRQHandler+0x244>)
 810381c:	4293      	cmp	r3, r2
 810381e:	d101      	bne.n	8103824 <HAL_ADC_IRQHandler+0x34>
 8103820:	4b85      	ldr	r3, [pc, #532]	@ (8103a38 <HAL_ADC_IRQHandler+0x248>)
 8103822:	e000      	b.n	8103826 <HAL_ADC_IRQHandler+0x36>
 8103824:	4b85      	ldr	r3, [pc, #532]	@ (8103a3c <HAL_ADC_IRQHandler+0x24c>)
 8103826:	4618      	mov	r0, r3
 8103828:	f7ff fb26 	bl	8102e78 <LL_ADC_GetMultimode>
 810382c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810382e:	69fb      	ldr	r3, [r7, #28]
 8103830:	f003 0302 	and.w	r3, r3, #2
 8103834:	2b00      	cmp	r3, #0
 8103836:	d017      	beq.n	8103868 <HAL_ADC_IRQHandler+0x78>
 8103838:	69bb      	ldr	r3, [r7, #24]
 810383a:	f003 0302 	and.w	r3, r3, #2
 810383e:	2b00      	cmp	r3, #0
 8103840:	d012      	beq.n	8103868 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103846:	f003 0310 	and.w	r3, r3, #16
 810384a:	2b00      	cmp	r3, #0
 810384c:	d105      	bne.n	810385a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103852:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 810385a:	6878      	ldr	r0, [r7, #4]
 810385c:	f001 f810 	bl	8104880 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	2202      	movs	r2, #2
 8103866:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103868:	69fb      	ldr	r3, [r7, #28]
 810386a:	f003 0304 	and.w	r3, r3, #4
 810386e:	2b00      	cmp	r3, #0
 8103870:	d004      	beq.n	810387c <HAL_ADC_IRQHandler+0x8c>
 8103872:	69bb      	ldr	r3, [r7, #24]
 8103874:	f003 0304 	and.w	r3, r3, #4
 8103878:	2b00      	cmp	r3, #0
 810387a:	d10a      	bne.n	8103892 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 810387c:	69fb      	ldr	r3, [r7, #28]
 810387e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103882:	2b00      	cmp	r3, #0
 8103884:	f000 8083 	beq.w	810398e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103888:	69bb      	ldr	r3, [r7, #24]
 810388a:	f003 0308 	and.w	r3, r3, #8
 810388e:	2b00      	cmp	r3, #0
 8103890:	d07d      	beq.n	810398e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103896:	f003 0310 	and.w	r3, r3, #16
 810389a:	2b00      	cmp	r3, #0
 810389c:	d105      	bne.n	81038aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	4618      	mov	r0, r3
 81038b0:	f7ff fa41 	bl	8102d36 <LL_ADC_REG_IsTriggerSourceSWStart>
 81038b4:	4603      	mov	r3, r0
 81038b6:	2b00      	cmp	r3, #0
 81038b8:	d062      	beq.n	8103980 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	4a5d      	ldr	r2, [pc, #372]	@ (8103a34 <HAL_ADC_IRQHandler+0x244>)
 81038c0:	4293      	cmp	r3, r2
 81038c2:	d002      	beq.n	81038ca <HAL_ADC_IRQHandler+0xda>
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	e000      	b.n	81038cc <HAL_ADC_IRQHandler+0xdc>
 81038ca:	4b59      	ldr	r3, [pc, #356]	@ (8103a30 <HAL_ADC_IRQHandler+0x240>)
 81038cc:	687a      	ldr	r2, [r7, #4]
 81038ce:	6812      	ldr	r2, [r2, #0]
 81038d0:	4293      	cmp	r3, r2
 81038d2:	d008      	beq.n	81038e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81038d4:	697b      	ldr	r3, [r7, #20]
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	d005      	beq.n	81038e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81038da:	697b      	ldr	r3, [r7, #20]
 81038dc:	2b05      	cmp	r3, #5
 81038de:	d002      	beq.n	81038e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81038e0:	697b      	ldr	r3, [r7, #20]
 81038e2:	2b09      	cmp	r3, #9
 81038e4:	d104      	bne.n	81038f0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	681b      	ldr	r3, [r3, #0]
 81038ea:	68db      	ldr	r3, [r3, #12]
 81038ec:	623b      	str	r3, [r7, #32]
 81038ee:	e00c      	b.n	810390a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	4a4f      	ldr	r2, [pc, #316]	@ (8103a34 <HAL_ADC_IRQHandler+0x244>)
 81038f6:	4293      	cmp	r3, r2
 81038f8:	d002      	beq.n	8103900 <HAL_ADC_IRQHandler+0x110>
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	e000      	b.n	8103902 <HAL_ADC_IRQHandler+0x112>
 8103900:	4b4b      	ldr	r3, [pc, #300]	@ (8103a30 <HAL_ADC_IRQHandler+0x240>)
 8103902:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103904:	693b      	ldr	r3, [r7, #16]
 8103906:	68db      	ldr	r3, [r3, #12]
 8103908:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 810390a:	6a3b      	ldr	r3, [r7, #32]
 810390c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8103910:	2b00      	cmp	r3, #0
 8103912:	d135      	bne.n	8103980 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	f003 0308 	and.w	r3, r3, #8
 810391e:	2b08      	cmp	r3, #8
 8103920:	d12e      	bne.n	8103980 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	4618      	mov	r0, r3
 8103928:	f7ff fb86 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 810392c:	4603      	mov	r3, r0
 810392e:	2b00      	cmp	r3, #0
 8103930:	d11a      	bne.n	8103968 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	685a      	ldr	r2, [r3, #4]
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	f022 020c 	bic.w	r2, r2, #12
 8103940:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103946:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103952:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103956:	2b00      	cmp	r3, #0
 8103958:	d112      	bne.n	8103980 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810395e:	f043 0201 	orr.w	r2, r3, #1
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	655a      	str	r2, [r3, #84]	@ 0x54
 8103966:	e00b      	b.n	8103980 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810396c:	f043 0210 	orr.w	r2, r3, #16
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103978:	f043 0201 	orr.w	r2, r3, #1
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8103980:	6878      	ldr	r0, [r7, #4]
 8103982:	f000 f96f 	bl	8103c64 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	681b      	ldr	r3, [r3, #0]
 810398a:	220c      	movs	r2, #12
 810398c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810398e:	69fb      	ldr	r3, [r7, #28]
 8103990:	f003 0320 	and.w	r3, r3, #32
 8103994:	2b00      	cmp	r3, #0
 8103996:	d004      	beq.n	81039a2 <HAL_ADC_IRQHandler+0x1b2>
 8103998:	69bb      	ldr	r3, [r7, #24]
 810399a:	f003 0320 	and.w	r3, r3, #32
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d10b      	bne.n	81039ba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81039a2:	69fb      	ldr	r3, [r7, #28]
 81039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81039a8:	2b00      	cmp	r3, #0
 81039aa:	f000 80a0 	beq.w	8103aee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81039ae:	69bb      	ldr	r3, [r7, #24]
 81039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81039b4:	2b00      	cmp	r3, #0
 81039b6:	f000 809a 	beq.w	8103aee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039be:	f003 0310 	and.w	r3, r3, #16
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	d105      	bne.n	81039d2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4618      	mov	r0, r3
 81039d8:	f7ff f9ec 	bl	8102db4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 81039dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	4618      	mov	r0, r3
 81039e4:	f7ff f9a7 	bl	8102d36 <LL_ADC_REG_IsTriggerSourceSWStart>
 81039e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a11      	ldr	r2, [pc, #68]	@ (8103a34 <HAL_ADC_IRQHandler+0x244>)
 81039f0:	4293      	cmp	r3, r2
 81039f2:	d002      	beq.n	81039fa <HAL_ADC_IRQHandler+0x20a>
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	e000      	b.n	81039fc <HAL_ADC_IRQHandler+0x20c>
 81039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8103a30 <HAL_ADC_IRQHandler+0x240>)
 81039fc:	687a      	ldr	r2, [r7, #4]
 81039fe:	6812      	ldr	r2, [r2, #0]
 8103a00:	4293      	cmp	r3, r2
 8103a02:	d008      	beq.n	8103a16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103a04:	697b      	ldr	r3, [r7, #20]
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	d005      	beq.n	8103a16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8103a0a:	697b      	ldr	r3, [r7, #20]
 8103a0c:	2b06      	cmp	r3, #6
 8103a0e:	d002      	beq.n	8103a16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8103a10:	697b      	ldr	r3, [r7, #20]
 8103a12:	2b07      	cmp	r3, #7
 8103a14:	d104      	bne.n	8103a20 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	68db      	ldr	r3, [r3, #12]
 8103a1c:	623b      	str	r3, [r7, #32]
 8103a1e:	e014      	b.n	8103a4a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	4a03      	ldr	r2, [pc, #12]	@ (8103a34 <HAL_ADC_IRQHandler+0x244>)
 8103a26:	4293      	cmp	r3, r2
 8103a28:	d00a      	beq.n	8103a40 <HAL_ADC_IRQHandler+0x250>
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	e008      	b.n	8103a42 <HAL_ADC_IRQHandler+0x252>
 8103a30:	40022000 	.word	0x40022000
 8103a34:	40022100 	.word	0x40022100
 8103a38:	40022300 	.word	0x40022300
 8103a3c:	58026300 	.word	0x58026300
 8103a40:	4b84      	ldr	r3, [pc, #528]	@ (8103c54 <HAL_ADC_IRQHandler+0x464>)
 8103a42:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103a44:	693b      	ldr	r3, [r7, #16]
 8103a46:	68db      	ldr	r3, [r3, #12]
 8103a48:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8103a4a:	68fb      	ldr	r3, [r7, #12]
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	d047      	beq.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8103a50:	6a3b      	ldr	r3, [r7, #32]
 8103a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d007      	beq.n	8103a6a <HAL_ADC_IRQHandler+0x27a>
 8103a5a:	68bb      	ldr	r3, [r7, #8]
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d03f      	beq.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8103a60:	6a3b      	ldr	r3, [r7, #32]
 8103a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	d13a      	bne.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103a74:	2b40      	cmp	r3, #64	@ 0x40
 8103a76:	d133      	bne.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103a78:	6a3b      	ldr	r3, [r7, #32]
 8103a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	d12e      	bne.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4618      	mov	r0, r3
 8103a88:	f7ff fafd 	bl	8103086 <LL_ADC_INJ_IsConversionOngoing>
 8103a8c:	4603      	mov	r3, r0
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d11a      	bne.n	8103ac8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	681b      	ldr	r3, [r3, #0]
 8103a96:	685a      	ldr	r2, [r3, #4]
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8103aa0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103aa6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d112      	bne.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103abe:	f043 0201 	orr.w	r2, r3, #1
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	655a      	str	r2, [r3, #84]	@ 0x54
 8103ac6:	e00b      	b.n	8103ae0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103acc:	f043 0210 	orr.w	r2, r3, #16
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ad8:	f043 0201 	orr.w	r2, r3, #1
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8103ae0:	6878      	ldr	r0, [r7, #4]
 8103ae2:	f000 fea5 	bl	8104830 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	2260      	movs	r2, #96	@ 0x60
 8103aec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8103aee:	69fb      	ldr	r3, [r7, #28]
 8103af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d011      	beq.n	8103b1c <HAL_ADC_IRQHandler+0x32c>
 8103af8:	69bb      	ldr	r3, [r7, #24]
 8103afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103afe:	2b00      	cmp	r3, #0
 8103b00:	d00c      	beq.n	8103b1c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b06:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8103b0e:	6878      	ldr	r0, [r7, #4]
 8103b10:	f000 f8b2 	bl	8103c78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	2280      	movs	r2, #128	@ 0x80
 8103b1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8103b1c:	69fb      	ldr	r3, [r7, #28]
 8103b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d012      	beq.n	8103b4c <HAL_ADC_IRQHandler+0x35c>
 8103b26:	69bb      	ldr	r3, [r7, #24]
 8103b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d00d      	beq.n	8103b4c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b34:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8103b3c:	6878      	ldr	r0, [r7, #4]
 8103b3e:	f000 fe8b 	bl	8104858 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8103b4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8103b4c:	69fb      	ldr	r3, [r7, #28]
 8103b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103b52:	2b00      	cmp	r3, #0
 8103b54:	d012      	beq.n	8103b7c <HAL_ADC_IRQHandler+0x38c>
 8103b56:	69bb      	ldr	r3, [r7, #24]
 8103b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	d00d      	beq.n	8103b7c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8103b6c:	6878      	ldr	r0, [r7, #4]
 8103b6e:	f000 fe7d 	bl	810486c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	681b      	ldr	r3, [r3, #0]
 8103b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103b7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8103b7c:	69fb      	ldr	r3, [r7, #28]
 8103b7e:	f003 0310 	and.w	r3, r3, #16
 8103b82:	2b00      	cmp	r3, #0
 8103b84:	d043      	beq.n	8103c0e <HAL_ADC_IRQHandler+0x41e>
 8103b86:	69bb      	ldr	r3, [r7, #24]
 8103b88:	f003 0310 	and.w	r3, r3, #16
 8103b8c:	2b00      	cmp	r3, #0
 8103b8e:	d03e      	beq.n	8103c0e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103b94:	2b00      	cmp	r3, #0
 8103b96:	d102      	bne.n	8103b9e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8103b98:	2301      	movs	r3, #1
 8103b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8103b9c:	e021      	b.n	8103be2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8103b9e:	697b      	ldr	r3, [r7, #20]
 8103ba0:	2b00      	cmp	r3, #0
 8103ba2:	d015      	beq.n	8103bd0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	681b      	ldr	r3, [r3, #0]
 8103ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8103c54 <HAL_ADC_IRQHandler+0x464>)
 8103baa:	4293      	cmp	r3, r2
 8103bac:	d004      	beq.n	8103bb8 <HAL_ADC_IRQHandler+0x3c8>
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	4a29      	ldr	r2, [pc, #164]	@ (8103c58 <HAL_ADC_IRQHandler+0x468>)
 8103bb4:	4293      	cmp	r3, r2
 8103bb6:	d101      	bne.n	8103bbc <HAL_ADC_IRQHandler+0x3cc>
 8103bb8:	4b28      	ldr	r3, [pc, #160]	@ (8103c5c <HAL_ADC_IRQHandler+0x46c>)
 8103bba:	e000      	b.n	8103bbe <HAL_ADC_IRQHandler+0x3ce>
 8103bbc:	4b28      	ldr	r3, [pc, #160]	@ (8103c60 <HAL_ADC_IRQHandler+0x470>)
 8103bbe:	4618      	mov	r0, r3
 8103bc0:	f7ff f968 	bl	8102e94 <LL_ADC_GetMultiDMATransfer>
 8103bc4:	4603      	mov	r3, r0
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d00b      	beq.n	8103be2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103bca:	2301      	movs	r3, #1
 8103bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8103bce:	e008      	b.n	8103be2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	68db      	ldr	r3, [r3, #12]
 8103bd6:	f003 0303 	and.w	r3, r3, #3
 8103bda:	2b00      	cmp	r3, #0
 8103bdc:	d001      	beq.n	8103be2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103bde:	2301      	movs	r3, #1
 8103be0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8103be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103be4:	2b01      	cmp	r3, #1
 8103be6:	d10e      	bne.n	8103c06 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103bec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103bf8:	f043 0202 	orr.w	r2, r3, #2
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103c00:	6878      	ldr	r0, [r7, #4]
 8103c02:	f000 f843 	bl	8103c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	2210      	movs	r2, #16
 8103c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8103c0e:	69fb      	ldr	r3, [r7, #28]
 8103c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8103c14:	2b00      	cmp	r3, #0
 8103c16:	d018      	beq.n	8103c4a <HAL_ADC_IRQHandler+0x45a>
 8103c18:	69bb      	ldr	r3, [r7, #24]
 8103c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8103c1e:	2b00      	cmp	r3, #0
 8103c20:	d013      	beq.n	8103c4a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c26:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103c32:	f043 0208 	orr.w	r2, r3, #8
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103c42:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103c44:	6878      	ldr	r0, [r7, #4]
 8103c46:	f000 fdfd 	bl	8104844 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8103c4a:	bf00      	nop
 8103c4c:	3728      	adds	r7, #40	@ 0x28
 8103c4e:	46bd      	mov	sp, r7
 8103c50:	bd80      	pop	{r7, pc}
 8103c52:	bf00      	nop
 8103c54:	40022000 	.word	0x40022000
 8103c58:	40022100 	.word	0x40022100
 8103c5c:	40022300 	.word	0x40022300
 8103c60:	58026300 	.word	0x58026300

08103c64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103c64:	b480      	push	{r7}
 8103c66:	b083      	sub	sp, #12
 8103c68:	af00      	add	r7, sp, #0
 8103c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8103c6c:	bf00      	nop
 8103c6e:	370c      	adds	r7, #12
 8103c70:	46bd      	mov	sp, r7
 8103c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c76:	4770      	bx	lr

08103c78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103c78:	b480      	push	{r7}
 8103c7a:	b083      	sub	sp, #12
 8103c7c:	af00      	add	r7, sp, #0
 8103c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8103c80:	bf00      	nop
 8103c82:	370c      	adds	r7, #12
 8103c84:	46bd      	mov	sp, r7
 8103c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c8a:	4770      	bx	lr

08103c8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8103c8c:	b480      	push	{r7}
 8103c8e:	b083      	sub	sp, #12
 8103c90:	af00      	add	r7, sp, #0
 8103c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8103c94:	bf00      	nop
 8103c96:	370c      	adds	r7, #12
 8103c98:	46bd      	mov	sp, r7
 8103c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9e:	4770      	bx	lr

08103ca0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103ca0:	b590      	push	{r4, r7, lr}
 8103ca2:	b08d      	sub	sp, #52	@ 0x34
 8103ca4:	af00      	add	r7, sp, #0
 8103ca6:	6078      	str	r0, [r7, #4]
 8103ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103caa:	2300      	movs	r3, #0
 8103cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103cb0:	2300      	movs	r3, #0
 8103cb2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103cb4:	683b      	ldr	r3, [r7, #0]
 8103cb6:	68db      	ldr	r3, [r3, #12]
 8103cb8:	4a65      	ldr	r2, [pc, #404]	@ (8103e50 <HAL_ADC_ConfigChannel+0x1b0>)
 8103cba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103cc2:	2b01      	cmp	r3, #1
 8103cc4:	d101      	bne.n	8103cca <HAL_ADC_ConfigChannel+0x2a>
 8103cc6:	2302      	movs	r3, #2
 8103cc8:	e2c7      	b.n	810425a <HAL_ADC_ConfigChannel+0x5ba>
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	2201      	movs	r2, #1
 8103cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4618      	mov	r0, r3
 8103cd8:	f7ff f9ae 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 8103cdc:	4603      	mov	r3, r0
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	f040 82ac 	bne.w	810423c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8103ce4:	683b      	ldr	r3, [r7, #0]
 8103ce6:	681b      	ldr	r3, [r3, #0]
 8103ce8:	2b00      	cmp	r3, #0
 8103cea:	db2c      	blt.n	8103d46 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103cec:	683b      	ldr	r3, [r7, #0]
 8103cee:	681b      	ldr	r3, [r3, #0]
 8103cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103cf4:	2b00      	cmp	r3, #0
 8103cf6:	d108      	bne.n	8103d0a <HAL_ADC_ConfigChannel+0x6a>
 8103cf8:	683b      	ldr	r3, [r7, #0]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	0e9b      	lsrs	r3, r3, #26
 8103cfe:	f003 031f 	and.w	r3, r3, #31
 8103d02:	2201      	movs	r2, #1
 8103d04:	fa02 f303 	lsl.w	r3, r2, r3
 8103d08:	e016      	b.n	8103d38 <HAL_ADC_ConfigChannel+0x98>
 8103d0a:	683b      	ldr	r3, [r7, #0]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103d10:	697b      	ldr	r3, [r7, #20]
 8103d12:	fa93 f3a3 	rbit	r3, r3
 8103d16:	613b      	str	r3, [r7, #16]
  return result;
 8103d18:	693b      	ldr	r3, [r7, #16]
 8103d1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8103d1c:	69bb      	ldr	r3, [r7, #24]
 8103d1e:	2b00      	cmp	r3, #0
 8103d20:	d101      	bne.n	8103d26 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8103d22:	2320      	movs	r3, #32
 8103d24:	e003      	b.n	8103d2e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8103d26:	69bb      	ldr	r3, [r7, #24]
 8103d28:	fab3 f383 	clz	r3, r3
 8103d2c:	b2db      	uxtb	r3, r3
 8103d2e:	f003 031f 	and.w	r3, r3, #31
 8103d32:	2201      	movs	r2, #1
 8103d34:	fa02 f303 	lsl.w	r3, r2, r3
 8103d38:	687a      	ldr	r2, [r7, #4]
 8103d3a:	6812      	ldr	r2, [r2, #0]
 8103d3c:	69d1      	ldr	r1, [r2, #28]
 8103d3e:	687a      	ldr	r2, [r7, #4]
 8103d40:	6812      	ldr	r2, [r2, #0]
 8103d42:	430b      	orrs	r3, r1
 8103d44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	6818      	ldr	r0, [r3, #0]
 8103d4a:	683b      	ldr	r3, [r7, #0]
 8103d4c:	6859      	ldr	r1, [r3, #4]
 8103d4e:	683b      	ldr	r3, [r7, #0]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	461a      	mov	r2, r3
 8103d54:	f7ff f802 	bl	8102d5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	4618      	mov	r0, r3
 8103d5e:	f7ff f96b 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 8103d62:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	681b      	ldr	r3, [r3, #0]
 8103d68:	4618      	mov	r0, r3
 8103d6a:	f7ff f98c 	bl	8103086 <LL_ADC_INJ_IsConversionOngoing>
 8103d6e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	f040 80b8 	bne.w	8103ee8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103d7a:	2b00      	cmp	r3, #0
 8103d7c:	f040 80b4 	bne.w	8103ee8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	6818      	ldr	r0, [r3, #0]
 8103d84:	683b      	ldr	r3, [r7, #0]
 8103d86:	6819      	ldr	r1, [r3, #0]
 8103d88:	683b      	ldr	r3, [r7, #0]
 8103d8a:	689b      	ldr	r3, [r3, #8]
 8103d8c:	461a      	mov	r2, r3
 8103d8e:	f7ff f824 	bl	8102dda <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103d92:	4b30      	ldr	r3, [pc, #192]	@ (8103e54 <HAL_ADC_ConfigChannel+0x1b4>)
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8103d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103d9e:	d10b      	bne.n	8103db8 <HAL_ADC_ConfigChannel+0x118>
 8103da0:	683b      	ldr	r3, [r7, #0]
 8103da2:	695a      	ldr	r2, [r3, #20]
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	681b      	ldr	r3, [r3, #0]
 8103da8:	68db      	ldr	r3, [r3, #12]
 8103daa:	089b      	lsrs	r3, r3, #2
 8103dac:	f003 0307 	and.w	r3, r3, #7
 8103db0:	005b      	lsls	r3, r3, #1
 8103db2:	fa02 f303 	lsl.w	r3, r2, r3
 8103db6:	e01d      	b.n	8103df4 <HAL_ADC_ConfigChannel+0x154>
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	68db      	ldr	r3, [r3, #12]
 8103dbe:	f003 0310 	and.w	r3, r3, #16
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	d10b      	bne.n	8103dde <HAL_ADC_ConfigChannel+0x13e>
 8103dc6:	683b      	ldr	r3, [r7, #0]
 8103dc8:	695a      	ldr	r2, [r3, #20]
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	68db      	ldr	r3, [r3, #12]
 8103dd0:	089b      	lsrs	r3, r3, #2
 8103dd2:	f003 0307 	and.w	r3, r3, #7
 8103dd6:	005b      	lsls	r3, r3, #1
 8103dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8103ddc:	e00a      	b.n	8103df4 <HAL_ADC_ConfigChannel+0x154>
 8103dde:	683b      	ldr	r3, [r7, #0]
 8103de0:	695a      	ldr	r2, [r3, #20]
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	68db      	ldr	r3, [r3, #12]
 8103de8:	089b      	lsrs	r3, r3, #2
 8103dea:	f003 0304 	and.w	r3, r3, #4
 8103dee:	005b      	lsls	r3, r3, #1
 8103df0:	fa02 f303 	lsl.w	r3, r2, r3
 8103df4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103df6:	683b      	ldr	r3, [r7, #0]
 8103df8:	691b      	ldr	r3, [r3, #16]
 8103dfa:	2b04      	cmp	r3, #4
 8103dfc:	d02c      	beq.n	8103e58 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	6818      	ldr	r0, [r3, #0]
 8103e02:	683b      	ldr	r3, [r7, #0]
 8103e04:	6919      	ldr	r1, [r3, #16]
 8103e06:	683b      	ldr	r3, [r7, #0]
 8103e08:	681a      	ldr	r2, [r3, #0]
 8103e0a:	6a3b      	ldr	r3, [r7, #32]
 8103e0c:	f7fe ff3f 	bl	8102c8e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	6818      	ldr	r0, [r3, #0]
 8103e14:	683b      	ldr	r3, [r7, #0]
 8103e16:	6919      	ldr	r1, [r3, #16]
 8103e18:	683b      	ldr	r3, [r7, #0]
 8103e1a:	7e5b      	ldrb	r3, [r3, #25]
 8103e1c:	2b01      	cmp	r3, #1
 8103e1e:	d102      	bne.n	8103e26 <HAL_ADC_ConfigChannel+0x186>
 8103e20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103e24:	e000      	b.n	8103e28 <HAL_ADC_ConfigChannel+0x188>
 8103e26:	2300      	movs	r3, #0
 8103e28:	461a      	mov	r2, r3
 8103e2a:	f7fe ff69 	bl	8102d00 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	6818      	ldr	r0, [r3, #0]
 8103e32:	683b      	ldr	r3, [r7, #0]
 8103e34:	6919      	ldr	r1, [r3, #16]
 8103e36:	683b      	ldr	r3, [r7, #0]
 8103e38:	7e1b      	ldrb	r3, [r3, #24]
 8103e3a:	2b01      	cmp	r3, #1
 8103e3c:	d102      	bne.n	8103e44 <HAL_ADC_ConfigChannel+0x1a4>
 8103e3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103e42:	e000      	b.n	8103e46 <HAL_ADC_ConfigChannel+0x1a6>
 8103e44:	2300      	movs	r3, #0
 8103e46:	461a      	mov	r2, r3
 8103e48:	f7fe ff41 	bl	8102cce <LL_ADC_SetDataRightShift>
 8103e4c:	e04c      	b.n	8103ee8 <HAL_ADC_ConfigChannel+0x248>
 8103e4e:	bf00      	nop
 8103e50:	47ff0000 	.word	0x47ff0000
 8103e54:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103e62:	683b      	ldr	r3, [r7, #0]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	069b      	lsls	r3, r3, #26
 8103e68:	429a      	cmp	r2, r3
 8103e6a:	d107      	bne.n	8103e7c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103e7a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103e86:	683b      	ldr	r3, [r7, #0]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	069b      	lsls	r3, r3, #26
 8103e8c:	429a      	cmp	r2, r3
 8103e8e:	d107      	bne.n	8103ea0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103e9e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103eaa:	683b      	ldr	r3, [r7, #0]
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	069b      	lsls	r3, r3, #26
 8103eb0:	429a      	cmp	r2, r3
 8103eb2:	d107      	bne.n	8103ec4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	681b      	ldr	r3, [r3, #0]
 8103eb8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103ec2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103eca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103ece:	683b      	ldr	r3, [r7, #0]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	069b      	lsls	r3, r3, #26
 8103ed4:	429a      	cmp	r2, r3
 8103ed6:	d107      	bne.n	8103ee8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103ee6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	4618      	mov	r0, r3
 8103eee:	f7ff f855 	bl	8102f9c <LL_ADC_IsEnabled>
 8103ef2:	4603      	mov	r3, r0
 8103ef4:	2b00      	cmp	r3, #0
 8103ef6:	f040 81aa 	bne.w	810424e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	6818      	ldr	r0, [r3, #0]
 8103efe:	683b      	ldr	r3, [r7, #0]
 8103f00:	6819      	ldr	r1, [r3, #0]
 8103f02:	683b      	ldr	r3, [r7, #0]
 8103f04:	68db      	ldr	r3, [r3, #12]
 8103f06:	461a      	mov	r2, r3
 8103f08:	f7fe ff92 	bl	8102e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103f0c:	683b      	ldr	r3, [r7, #0]
 8103f0e:	68db      	ldr	r3, [r3, #12]
 8103f10:	4a87      	ldr	r2, [pc, #540]	@ (8104130 <HAL_ADC_ConfigChannel+0x490>)
 8103f12:	4293      	cmp	r3, r2
 8103f14:	f040 809a 	bne.w	810404c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681a      	ldr	r2, [r3, #0]
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4984      	ldr	r1, [pc, #528]	@ (8104134 <HAL_ADC_ConfigChannel+0x494>)
 8103f22:	428b      	cmp	r3, r1
 8103f24:	d147      	bne.n	8103fb6 <HAL_ADC_ConfigChannel+0x316>
 8103f26:	683b      	ldr	r3, [r7, #0]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	4983      	ldr	r1, [pc, #524]	@ (8104138 <HAL_ADC_ConfigChannel+0x498>)
 8103f2c:	428b      	cmp	r3, r1
 8103f2e:	d040      	beq.n	8103fb2 <HAL_ADC_ConfigChannel+0x312>
 8103f30:	683b      	ldr	r3, [r7, #0]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4981      	ldr	r1, [pc, #516]	@ (810413c <HAL_ADC_ConfigChannel+0x49c>)
 8103f36:	428b      	cmp	r3, r1
 8103f38:	d039      	beq.n	8103fae <HAL_ADC_ConfigChannel+0x30e>
 8103f3a:	683b      	ldr	r3, [r7, #0]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4980      	ldr	r1, [pc, #512]	@ (8104140 <HAL_ADC_ConfigChannel+0x4a0>)
 8103f40:	428b      	cmp	r3, r1
 8103f42:	d032      	beq.n	8103faa <HAL_ADC_ConfigChannel+0x30a>
 8103f44:	683b      	ldr	r3, [r7, #0]
 8103f46:	681b      	ldr	r3, [r3, #0]
 8103f48:	497e      	ldr	r1, [pc, #504]	@ (8104144 <HAL_ADC_ConfigChannel+0x4a4>)
 8103f4a:	428b      	cmp	r3, r1
 8103f4c:	d02b      	beq.n	8103fa6 <HAL_ADC_ConfigChannel+0x306>
 8103f4e:	683b      	ldr	r3, [r7, #0]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	497d      	ldr	r1, [pc, #500]	@ (8104148 <HAL_ADC_ConfigChannel+0x4a8>)
 8103f54:	428b      	cmp	r3, r1
 8103f56:	d024      	beq.n	8103fa2 <HAL_ADC_ConfigChannel+0x302>
 8103f58:	683b      	ldr	r3, [r7, #0]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	497b      	ldr	r1, [pc, #492]	@ (810414c <HAL_ADC_ConfigChannel+0x4ac>)
 8103f5e:	428b      	cmp	r3, r1
 8103f60:	d01d      	beq.n	8103f9e <HAL_ADC_ConfigChannel+0x2fe>
 8103f62:	683b      	ldr	r3, [r7, #0]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	497a      	ldr	r1, [pc, #488]	@ (8104150 <HAL_ADC_ConfigChannel+0x4b0>)
 8103f68:	428b      	cmp	r3, r1
 8103f6a:	d016      	beq.n	8103f9a <HAL_ADC_ConfigChannel+0x2fa>
 8103f6c:	683b      	ldr	r3, [r7, #0]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	4978      	ldr	r1, [pc, #480]	@ (8104154 <HAL_ADC_ConfigChannel+0x4b4>)
 8103f72:	428b      	cmp	r3, r1
 8103f74:	d00f      	beq.n	8103f96 <HAL_ADC_ConfigChannel+0x2f6>
 8103f76:	683b      	ldr	r3, [r7, #0]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4977      	ldr	r1, [pc, #476]	@ (8104158 <HAL_ADC_ConfigChannel+0x4b8>)
 8103f7c:	428b      	cmp	r3, r1
 8103f7e:	d008      	beq.n	8103f92 <HAL_ADC_ConfigChannel+0x2f2>
 8103f80:	683b      	ldr	r3, [r7, #0]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	4975      	ldr	r1, [pc, #468]	@ (810415c <HAL_ADC_ConfigChannel+0x4bc>)
 8103f86:	428b      	cmp	r3, r1
 8103f88:	d101      	bne.n	8103f8e <HAL_ADC_ConfigChannel+0x2ee>
 8103f8a:	4b75      	ldr	r3, [pc, #468]	@ (8104160 <HAL_ADC_ConfigChannel+0x4c0>)
 8103f8c:	e05a      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103f8e:	2300      	movs	r3, #0
 8103f90:	e058      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103f92:	4b74      	ldr	r3, [pc, #464]	@ (8104164 <HAL_ADC_ConfigChannel+0x4c4>)
 8103f94:	e056      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103f96:	4b74      	ldr	r3, [pc, #464]	@ (8104168 <HAL_ADC_ConfigChannel+0x4c8>)
 8103f98:	e054      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8104154 <HAL_ADC_ConfigChannel+0x4b4>)
 8103f9c:	e052      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103f9e:	4b6c      	ldr	r3, [pc, #432]	@ (8104150 <HAL_ADC_ConfigChannel+0x4b0>)
 8103fa0:	e050      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103fa2:	4b72      	ldr	r3, [pc, #456]	@ (810416c <HAL_ADC_ConfigChannel+0x4cc>)
 8103fa4:	e04e      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103fa6:	4b72      	ldr	r3, [pc, #456]	@ (8104170 <HAL_ADC_ConfigChannel+0x4d0>)
 8103fa8:	e04c      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103faa:	4b72      	ldr	r3, [pc, #456]	@ (8104174 <HAL_ADC_ConfigChannel+0x4d4>)
 8103fac:	e04a      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103fae:	4b72      	ldr	r3, [pc, #456]	@ (8104178 <HAL_ADC_ConfigChannel+0x4d8>)
 8103fb0:	e048      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103fb2:	2301      	movs	r3, #1
 8103fb4:	e046      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	681b      	ldr	r3, [r3, #0]
 8103fba:	4970      	ldr	r1, [pc, #448]	@ (810417c <HAL_ADC_ConfigChannel+0x4dc>)
 8103fbc:	428b      	cmp	r3, r1
 8103fbe:	d140      	bne.n	8104042 <HAL_ADC_ConfigChannel+0x3a2>
 8103fc0:	683b      	ldr	r3, [r7, #0]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	495c      	ldr	r1, [pc, #368]	@ (8104138 <HAL_ADC_ConfigChannel+0x498>)
 8103fc6:	428b      	cmp	r3, r1
 8103fc8:	d039      	beq.n	810403e <HAL_ADC_ConfigChannel+0x39e>
 8103fca:	683b      	ldr	r3, [r7, #0]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	495b      	ldr	r1, [pc, #364]	@ (810413c <HAL_ADC_ConfigChannel+0x49c>)
 8103fd0:	428b      	cmp	r3, r1
 8103fd2:	d032      	beq.n	810403a <HAL_ADC_ConfigChannel+0x39a>
 8103fd4:	683b      	ldr	r3, [r7, #0]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	4959      	ldr	r1, [pc, #356]	@ (8104140 <HAL_ADC_ConfigChannel+0x4a0>)
 8103fda:	428b      	cmp	r3, r1
 8103fdc:	d02b      	beq.n	8104036 <HAL_ADC_ConfigChannel+0x396>
 8103fde:	683b      	ldr	r3, [r7, #0]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	4958      	ldr	r1, [pc, #352]	@ (8104144 <HAL_ADC_ConfigChannel+0x4a4>)
 8103fe4:	428b      	cmp	r3, r1
 8103fe6:	d024      	beq.n	8104032 <HAL_ADC_ConfigChannel+0x392>
 8103fe8:	683b      	ldr	r3, [r7, #0]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4956      	ldr	r1, [pc, #344]	@ (8104148 <HAL_ADC_ConfigChannel+0x4a8>)
 8103fee:	428b      	cmp	r3, r1
 8103ff0:	d01d      	beq.n	810402e <HAL_ADC_ConfigChannel+0x38e>
 8103ff2:	683b      	ldr	r3, [r7, #0]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4955      	ldr	r1, [pc, #340]	@ (810414c <HAL_ADC_ConfigChannel+0x4ac>)
 8103ff8:	428b      	cmp	r3, r1
 8103ffa:	d016      	beq.n	810402a <HAL_ADC_ConfigChannel+0x38a>
 8103ffc:	683b      	ldr	r3, [r7, #0]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4953      	ldr	r1, [pc, #332]	@ (8104150 <HAL_ADC_ConfigChannel+0x4b0>)
 8104002:	428b      	cmp	r3, r1
 8104004:	d00f      	beq.n	8104026 <HAL_ADC_ConfigChannel+0x386>
 8104006:	683b      	ldr	r3, [r7, #0]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4952      	ldr	r1, [pc, #328]	@ (8104154 <HAL_ADC_ConfigChannel+0x4b4>)
 810400c:	428b      	cmp	r3, r1
 810400e:	d008      	beq.n	8104022 <HAL_ADC_ConfigChannel+0x382>
 8104010:	683b      	ldr	r3, [r7, #0]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4951      	ldr	r1, [pc, #324]	@ (810415c <HAL_ADC_ConfigChannel+0x4bc>)
 8104016:	428b      	cmp	r3, r1
 8104018:	d101      	bne.n	810401e <HAL_ADC_ConfigChannel+0x37e>
 810401a:	4b51      	ldr	r3, [pc, #324]	@ (8104160 <HAL_ADC_ConfigChannel+0x4c0>)
 810401c:	e012      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 810401e:	2300      	movs	r3, #0
 8104020:	e010      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8104022:	4b51      	ldr	r3, [pc, #324]	@ (8104168 <HAL_ADC_ConfigChannel+0x4c8>)
 8104024:	e00e      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8104026:	4b4b      	ldr	r3, [pc, #300]	@ (8104154 <HAL_ADC_ConfigChannel+0x4b4>)
 8104028:	e00c      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 810402a:	4b49      	ldr	r3, [pc, #292]	@ (8104150 <HAL_ADC_ConfigChannel+0x4b0>)
 810402c:	e00a      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 810402e:	4b4f      	ldr	r3, [pc, #316]	@ (810416c <HAL_ADC_ConfigChannel+0x4cc>)
 8104030:	e008      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8104032:	4b4f      	ldr	r3, [pc, #316]	@ (8104170 <HAL_ADC_ConfigChannel+0x4d0>)
 8104034:	e006      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8104036:	4b4f      	ldr	r3, [pc, #316]	@ (8104174 <HAL_ADC_ConfigChannel+0x4d4>)
 8104038:	e004      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 810403a:	4b4f      	ldr	r3, [pc, #316]	@ (8104178 <HAL_ADC_ConfigChannel+0x4d8>)
 810403c:	e002      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 810403e:	2301      	movs	r3, #1
 8104040:	e000      	b.n	8104044 <HAL_ADC_ConfigChannel+0x3a4>
 8104042:	2300      	movs	r3, #0
 8104044:	4619      	mov	r1, r3
 8104046:	4610      	mov	r0, r2
 8104048:	f7fe fdee 	bl	8102c28 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810404c:	683b      	ldr	r3, [r7, #0]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	2b00      	cmp	r3, #0
 8104052:	f280 80fc 	bge.w	810424e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a36      	ldr	r2, [pc, #216]	@ (8104134 <HAL_ADC_ConfigChannel+0x494>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d004      	beq.n	810406a <HAL_ADC_ConfigChannel+0x3ca>
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a45      	ldr	r2, [pc, #276]	@ (810417c <HAL_ADC_ConfigChannel+0x4dc>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d101      	bne.n	810406e <HAL_ADC_ConfigChannel+0x3ce>
 810406a:	4b45      	ldr	r3, [pc, #276]	@ (8104180 <HAL_ADC_ConfigChannel+0x4e0>)
 810406c:	e000      	b.n	8104070 <HAL_ADC_ConfigChannel+0x3d0>
 810406e:	4b45      	ldr	r3, [pc, #276]	@ (8104184 <HAL_ADC_ConfigChannel+0x4e4>)
 8104070:	4618      	mov	r0, r3
 8104072:	f7fe fdcb 	bl	8102c0c <LL_ADC_GetCommonPathInternalCh>
 8104076:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	4a2d      	ldr	r2, [pc, #180]	@ (8104134 <HAL_ADC_ConfigChannel+0x494>)
 810407e:	4293      	cmp	r3, r2
 8104080:	d004      	beq.n	810408c <HAL_ADC_ConfigChannel+0x3ec>
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	4a3d      	ldr	r2, [pc, #244]	@ (810417c <HAL_ADC_ConfigChannel+0x4dc>)
 8104088:	4293      	cmp	r3, r2
 810408a:	d10e      	bne.n	81040aa <HAL_ADC_ConfigChannel+0x40a>
 810408c:	4829      	ldr	r0, [pc, #164]	@ (8104134 <HAL_ADC_ConfigChannel+0x494>)
 810408e:	f7fe ff85 	bl	8102f9c <LL_ADC_IsEnabled>
 8104092:	4604      	mov	r4, r0
 8104094:	4839      	ldr	r0, [pc, #228]	@ (810417c <HAL_ADC_ConfigChannel+0x4dc>)
 8104096:	f7fe ff81 	bl	8102f9c <LL_ADC_IsEnabled>
 810409a:	4603      	mov	r3, r0
 810409c:	4323      	orrs	r3, r4
 810409e:	2b00      	cmp	r3, #0
 81040a0:	bf0c      	ite	eq
 81040a2:	2301      	moveq	r3, #1
 81040a4:	2300      	movne	r3, #0
 81040a6:	b2db      	uxtb	r3, r3
 81040a8:	e008      	b.n	81040bc <HAL_ADC_ConfigChannel+0x41c>
 81040aa:	4837      	ldr	r0, [pc, #220]	@ (8104188 <HAL_ADC_ConfigChannel+0x4e8>)
 81040ac:	f7fe ff76 	bl	8102f9c <LL_ADC_IsEnabled>
 81040b0:	4603      	mov	r3, r0
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	bf0c      	ite	eq
 81040b6:	2301      	moveq	r3, #1
 81040b8:	2300      	movne	r3, #0
 81040ba:	b2db      	uxtb	r3, r3
 81040bc:	2b00      	cmp	r3, #0
 81040be:	f000 80b3 	beq.w	8104228 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81040c2:	683b      	ldr	r3, [r7, #0]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	4a31      	ldr	r2, [pc, #196]	@ (810418c <HAL_ADC_ConfigChannel+0x4ec>)
 81040c8:	4293      	cmp	r3, r2
 81040ca:	d165      	bne.n	8104198 <HAL_ADC_ConfigChannel+0x4f8>
 81040cc:	69fb      	ldr	r3, [r7, #28]
 81040ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81040d2:	2b00      	cmp	r3, #0
 81040d4:	d160      	bne.n	8104198 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	681b      	ldr	r3, [r3, #0]
 81040da:	4a2b      	ldr	r2, [pc, #172]	@ (8104188 <HAL_ADC_ConfigChannel+0x4e8>)
 81040dc:	4293      	cmp	r3, r2
 81040de:	f040 80b6 	bne.w	810424e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a13      	ldr	r2, [pc, #76]	@ (8104134 <HAL_ADC_ConfigChannel+0x494>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d004      	beq.n	81040f6 <HAL_ADC_ConfigChannel+0x456>
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a22      	ldr	r2, [pc, #136]	@ (810417c <HAL_ADC_ConfigChannel+0x4dc>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d101      	bne.n	81040fa <HAL_ADC_ConfigChannel+0x45a>
 81040f6:	4a22      	ldr	r2, [pc, #136]	@ (8104180 <HAL_ADC_ConfigChannel+0x4e0>)
 81040f8:	e000      	b.n	81040fc <HAL_ADC_ConfigChannel+0x45c>
 81040fa:	4a22      	ldr	r2, [pc, #136]	@ (8104184 <HAL_ADC_ConfigChannel+0x4e4>)
 81040fc:	69fb      	ldr	r3, [r7, #28]
 81040fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104102:	4619      	mov	r1, r3
 8104104:	4610      	mov	r0, r2
 8104106:	f7fe fd6e 	bl	8102be6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810410a:	4b21      	ldr	r3, [pc, #132]	@ (8104190 <HAL_ADC_ConfigChannel+0x4f0>)
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	099b      	lsrs	r3, r3, #6
 8104110:	4a20      	ldr	r2, [pc, #128]	@ (8104194 <HAL_ADC_ConfigChannel+0x4f4>)
 8104112:	fba2 2303 	umull	r2, r3, r2, r3
 8104116:	099b      	lsrs	r3, r3, #6
 8104118:	3301      	adds	r3, #1
 810411a:	005b      	lsls	r3, r3, #1
 810411c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 810411e:	e002      	b.n	8104126 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	3b01      	subs	r3, #1
 8104124:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	2b00      	cmp	r3, #0
 810412a:	d1f9      	bne.n	8104120 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810412c:	e08f      	b.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
 810412e:	bf00      	nop
 8104130:	47ff0000 	.word	0x47ff0000
 8104134:	40022000 	.word	0x40022000
 8104138:	04300002 	.word	0x04300002
 810413c:	08600004 	.word	0x08600004
 8104140:	0c900008 	.word	0x0c900008
 8104144:	10c00010 	.word	0x10c00010
 8104148:	14f00020 	.word	0x14f00020
 810414c:	2a000400 	.word	0x2a000400
 8104150:	2e300800 	.word	0x2e300800
 8104154:	32601000 	.word	0x32601000
 8104158:	43210000 	.word	0x43210000
 810415c:	4b840000 	.word	0x4b840000
 8104160:	4fb80000 	.word	0x4fb80000
 8104164:	47520000 	.word	0x47520000
 8104168:	36902000 	.word	0x36902000
 810416c:	25b00200 	.word	0x25b00200
 8104170:	21800100 	.word	0x21800100
 8104174:	1d500080 	.word	0x1d500080
 8104178:	19200040 	.word	0x19200040
 810417c:	40022100 	.word	0x40022100
 8104180:	40022300 	.word	0x40022300
 8104184:	58026300 	.word	0x58026300
 8104188:	58026000 	.word	0x58026000
 810418c:	cb840000 	.word	0xcb840000
 8104190:	10000000 	.word	0x10000000
 8104194:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8104198:	683b      	ldr	r3, [r7, #0]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	4a31      	ldr	r2, [pc, #196]	@ (8104264 <HAL_ADC_ConfigChannel+0x5c4>)
 810419e:	4293      	cmp	r3, r2
 81041a0:	d11e      	bne.n	81041e0 <HAL_ADC_ConfigChannel+0x540>
 81041a2:	69fb      	ldr	r3, [r7, #28]
 81041a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81041a8:	2b00      	cmp	r3, #0
 81041aa:	d119      	bne.n	81041e0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	4a2d      	ldr	r2, [pc, #180]	@ (8104268 <HAL_ADC_ConfigChannel+0x5c8>)
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d14b      	bne.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	4a2c      	ldr	r2, [pc, #176]	@ (810426c <HAL_ADC_ConfigChannel+0x5cc>)
 81041bc:	4293      	cmp	r3, r2
 81041be:	d004      	beq.n	81041ca <HAL_ADC_ConfigChannel+0x52a>
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8104270 <HAL_ADC_ConfigChannel+0x5d0>)
 81041c6:	4293      	cmp	r3, r2
 81041c8:	d101      	bne.n	81041ce <HAL_ADC_ConfigChannel+0x52e>
 81041ca:	4a2a      	ldr	r2, [pc, #168]	@ (8104274 <HAL_ADC_ConfigChannel+0x5d4>)
 81041cc:	e000      	b.n	81041d0 <HAL_ADC_ConfigChannel+0x530>
 81041ce:	4a2a      	ldr	r2, [pc, #168]	@ (8104278 <HAL_ADC_ConfigChannel+0x5d8>)
 81041d0:	69fb      	ldr	r3, [r7, #28]
 81041d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81041d6:	4619      	mov	r1, r3
 81041d8:	4610      	mov	r0, r2
 81041da:	f7fe fd04 	bl	8102be6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81041de:	e036      	b.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81041e0:	683b      	ldr	r3, [r7, #0]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a25      	ldr	r2, [pc, #148]	@ (810427c <HAL_ADC_ConfigChannel+0x5dc>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d131      	bne.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
 81041ea:	69fb      	ldr	r3, [r7, #28]
 81041ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d12c      	bne.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8104268 <HAL_ADC_ConfigChannel+0x5c8>)
 81041fa:	4293      	cmp	r3, r2
 81041fc:	d127      	bne.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	4a1a      	ldr	r2, [pc, #104]	@ (810426c <HAL_ADC_ConfigChannel+0x5cc>)
 8104204:	4293      	cmp	r3, r2
 8104206:	d004      	beq.n	8104212 <HAL_ADC_ConfigChannel+0x572>
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a18      	ldr	r2, [pc, #96]	@ (8104270 <HAL_ADC_ConfigChannel+0x5d0>)
 810420e:	4293      	cmp	r3, r2
 8104210:	d101      	bne.n	8104216 <HAL_ADC_ConfigChannel+0x576>
 8104212:	4a18      	ldr	r2, [pc, #96]	@ (8104274 <HAL_ADC_ConfigChannel+0x5d4>)
 8104214:	e000      	b.n	8104218 <HAL_ADC_ConfigChannel+0x578>
 8104216:	4a18      	ldr	r2, [pc, #96]	@ (8104278 <HAL_ADC_ConfigChannel+0x5d8>)
 8104218:	69fb      	ldr	r3, [r7, #28]
 810421a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810421e:	4619      	mov	r1, r3
 8104220:	4610      	mov	r0, r2
 8104222:	f7fe fce0 	bl	8102be6 <LL_ADC_SetCommonPathInternalCh>
 8104226:	e012      	b.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810422c:	f043 0220 	orr.w	r2, r3, #32
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8104234:	2301      	movs	r3, #1
 8104236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 810423a:	e008      	b.n	810424e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104240:	f043 0220 	orr.w	r2, r3, #32
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104248:	2301      	movs	r3, #1
 810424a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	2200      	movs	r2, #0
 8104252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104256:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 810425a:	4618      	mov	r0, r3
 810425c:	3734      	adds	r7, #52	@ 0x34
 810425e:	46bd      	mov	sp, r7
 8104260:	bd90      	pop	{r4, r7, pc}
 8104262:	bf00      	nop
 8104264:	c7520000 	.word	0xc7520000
 8104268:	58026000 	.word	0x58026000
 810426c:	40022000 	.word	0x40022000
 8104270:	40022100 	.word	0x40022100
 8104274:	40022300 	.word	0x40022300
 8104278:	58026300 	.word	0x58026300
 810427c:	cfb80000 	.word	0xcfb80000

08104280 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8104280:	b580      	push	{r7, lr}
 8104282:	b088      	sub	sp, #32
 8104284:	af00      	add	r7, sp, #0
 8104286:	6078      	str	r0, [r7, #4]
 8104288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 810428a:	2300      	movs	r3, #0
 810428c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 810428e:	683b      	ldr	r3, [r7, #0]
 8104290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4618      	mov	r0, r3
 8104298:	f7fe fece 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 810429c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	4618      	mov	r0, r3
 81042a4:	f7fe feef 	bl	8103086 <LL_ADC_INJ_IsConversionOngoing>
 81042a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 81042aa:	693b      	ldr	r3, [r7, #16]
 81042ac:	2b00      	cmp	r3, #0
 81042ae:	d103      	bne.n	81042b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 81042b0:	68fb      	ldr	r3, [r7, #12]
 81042b2:	2b00      	cmp	r3, #0
 81042b4:	f000 8098 	beq.w	81043e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	68db      	ldr	r3, [r3, #12]
 81042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81042c2:	2b00      	cmp	r3, #0
 81042c4:	d02a      	beq.n	810431c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	7d5b      	ldrb	r3, [r3, #21]
 81042ca:	2b01      	cmp	r3, #1
 81042cc:	d126      	bne.n	810431c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	7d1b      	ldrb	r3, [r3, #20]
 81042d2:	2b01      	cmp	r3, #1
 81042d4:	d122      	bne.n	810431c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 81042d6:	2301      	movs	r3, #1
 81042d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 81042da:	e014      	b.n	8104306 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 81042dc:	69fb      	ldr	r3, [r7, #28]
 81042de:	4a45      	ldr	r2, [pc, #276]	@ (81043f4 <ADC_ConversionStop+0x174>)
 81042e0:	4293      	cmp	r3, r2
 81042e2:	d90d      	bls.n	8104300 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81042e8:	f043 0210 	orr.w	r2, r3, #16
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81042f4:	f043 0201 	orr.w	r2, r3, #1
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81042fc:	2301      	movs	r3, #1
 81042fe:	e074      	b.n	81043ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8104300:	69fb      	ldr	r3, [r7, #28]
 8104302:	3301      	adds	r3, #1
 8104304:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104310:	2b40      	cmp	r3, #64	@ 0x40
 8104312:	d1e3      	bne.n	81042dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	2240      	movs	r2, #64	@ 0x40
 810431a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 810431c:	69bb      	ldr	r3, [r7, #24]
 810431e:	2b02      	cmp	r3, #2
 8104320:	d014      	beq.n	810434c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	4618      	mov	r0, r3
 8104328:	f7fe fe86 	bl	8103038 <LL_ADC_REG_IsConversionOngoing>
 810432c:	4603      	mov	r3, r0
 810432e:	2b00      	cmp	r3, #0
 8104330:	d00c      	beq.n	810434c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	4618      	mov	r0, r3
 8104338:	f7fe fe43 	bl	8102fc2 <LL_ADC_IsDisableOngoing>
 810433c:	4603      	mov	r3, r0
 810433e:	2b00      	cmp	r3, #0
 8104340:	d104      	bne.n	810434c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	4618      	mov	r0, r3
 8104348:	f7fe fe62 	bl	8103010 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 810434c:	69bb      	ldr	r3, [r7, #24]
 810434e:	2b01      	cmp	r3, #1
 8104350:	d014      	beq.n	810437c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	4618      	mov	r0, r3
 8104358:	f7fe fe95 	bl	8103086 <LL_ADC_INJ_IsConversionOngoing>
 810435c:	4603      	mov	r3, r0
 810435e:	2b00      	cmp	r3, #0
 8104360:	d00c      	beq.n	810437c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	681b      	ldr	r3, [r3, #0]
 8104366:	4618      	mov	r0, r3
 8104368:	f7fe fe2b 	bl	8102fc2 <LL_ADC_IsDisableOngoing>
 810436c:	4603      	mov	r3, r0
 810436e:	2b00      	cmp	r3, #0
 8104370:	d104      	bne.n	810437c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	4618      	mov	r0, r3
 8104378:	f7fe fe71 	bl	810305e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 810437c:	69bb      	ldr	r3, [r7, #24]
 810437e:	2b02      	cmp	r3, #2
 8104380:	d005      	beq.n	810438e <ADC_ConversionStop+0x10e>
 8104382:	69bb      	ldr	r3, [r7, #24]
 8104384:	2b03      	cmp	r3, #3
 8104386:	d105      	bne.n	8104394 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8104388:	230c      	movs	r3, #12
 810438a:	617b      	str	r3, [r7, #20]
        break;
 810438c:	e005      	b.n	810439a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 810438e:	2308      	movs	r3, #8
 8104390:	617b      	str	r3, [r7, #20]
        break;
 8104392:	e002      	b.n	810439a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8104394:	2304      	movs	r3, #4
 8104396:	617b      	str	r3, [r7, #20]
        break;
 8104398:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 810439a:	f7fe fbd5 	bl	8102b48 <HAL_GetTick>
 810439e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81043a0:	e01b      	b.n	81043da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 81043a2:	f7fe fbd1 	bl	8102b48 <HAL_GetTick>
 81043a6:	4602      	mov	r2, r0
 81043a8:	68bb      	ldr	r3, [r7, #8]
 81043aa:	1ad3      	subs	r3, r2, r3
 81043ac:	2b05      	cmp	r3, #5
 81043ae:	d914      	bls.n	81043da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	689a      	ldr	r2, [r3, #8]
 81043b6:	697b      	ldr	r3, [r7, #20]
 81043b8:	4013      	ands	r3, r2
 81043ba:	2b00      	cmp	r3, #0
 81043bc:	d00d      	beq.n	81043da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81043c2:	f043 0210 	orr.w	r2, r3, #16
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81043ce:	f043 0201 	orr.w	r2, r3, #1
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81043d6:	2301      	movs	r3, #1
 81043d8:	e007      	b.n	81043ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	689a      	ldr	r2, [r3, #8]
 81043e0:	697b      	ldr	r3, [r7, #20]
 81043e2:	4013      	ands	r3, r2
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d1dc      	bne.n	81043a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 81043e8:	2300      	movs	r3, #0
}
 81043ea:	4618      	mov	r0, r3
 81043ec:	3720      	adds	r7, #32
 81043ee:	46bd      	mov	sp, r7
 81043f0:	bd80      	pop	{r7, pc}
 81043f2:	bf00      	nop
 81043f4:	000cdbff 	.word	0x000cdbff

081043f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 81043f8:	b580      	push	{r7, lr}
 81043fa:	b084      	sub	sp, #16
 81043fc:	af00      	add	r7, sp, #0
 81043fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	4618      	mov	r0, r3
 8104406:	f7fe fdc9 	bl	8102f9c <LL_ADC_IsEnabled>
 810440a:	4603      	mov	r3, r0
 810440c:	2b00      	cmp	r3, #0
 810440e:	d16e      	bne.n	81044ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	689a      	ldr	r2, [r3, #8]
 8104416:	4b38      	ldr	r3, [pc, #224]	@ (81044f8 <ADC_Enable+0x100>)
 8104418:	4013      	ands	r3, r2
 810441a:	2b00      	cmp	r3, #0
 810441c:	d00d      	beq.n	810443a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104422:	f043 0210 	orr.w	r2, r3, #16
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810442e:	f043 0201 	orr.w	r2, r3, #1
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8104436:	2301      	movs	r3, #1
 8104438:	e05a      	b.n	81044f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4618      	mov	r0, r3
 8104440:	f7fe fd84 	bl	8102f4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8104444:	f7fe fb80 	bl	8102b48 <HAL_GetTick>
 8104448:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	4a2b      	ldr	r2, [pc, #172]	@ (81044fc <ADC_Enable+0x104>)
 8104450:	4293      	cmp	r3, r2
 8104452:	d004      	beq.n	810445e <ADC_Enable+0x66>
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	681b      	ldr	r3, [r3, #0]
 8104458:	4a29      	ldr	r2, [pc, #164]	@ (8104500 <ADC_Enable+0x108>)
 810445a:	4293      	cmp	r3, r2
 810445c:	d101      	bne.n	8104462 <ADC_Enable+0x6a>
 810445e:	4b29      	ldr	r3, [pc, #164]	@ (8104504 <ADC_Enable+0x10c>)
 8104460:	e000      	b.n	8104464 <ADC_Enable+0x6c>
 8104462:	4b29      	ldr	r3, [pc, #164]	@ (8104508 <ADC_Enable+0x110>)
 8104464:	4618      	mov	r0, r3
 8104466:	f7fe fd07 	bl	8102e78 <LL_ADC_GetMultimode>
 810446a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	4a23      	ldr	r2, [pc, #140]	@ (8104500 <ADC_Enable+0x108>)
 8104472:	4293      	cmp	r3, r2
 8104474:	d002      	beq.n	810447c <ADC_Enable+0x84>
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	e000      	b.n	810447e <ADC_Enable+0x86>
 810447c:	4b1f      	ldr	r3, [pc, #124]	@ (81044fc <ADC_Enable+0x104>)
 810447e:	687a      	ldr	r2, [r7, #4]
 8104480:	6812      	ldr	r2, [r2, #0]
 8104482:	4293      	cmp	r3, r2
 8104484:	d02c      	beq.n	81044e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104486:	68bb      	ldr	r3, [r7, #8]
 8104488:	2b00      	cmp	r3, #0
 810448a:	d130      	bne.n	81044ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810448c:	e028      	b.n	81044e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4618      	mov	r0, r3
 8104494:	f7fe fd82 	bl	8102f9c <LL_ADC_IsEnabled>
 8104498:	4603      	mov	r3, r0
 810449a:	2b00      	cmp	r3, #0
 810449c:	d104      	bne.n	81044a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	4618      	mov	r0, r3
 81044a4:	f7fe fd52 	bl	8102f4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81044a8:	f7fe fb4e 	bl	8102b48 <HAL_GetTick>
 81044ac:	4602      	mov	r2, r0
 81044ae:	68fb      	ldr	r3, [r7, #12]
 81044b0:	1ad3      	subs	r3, r2, r3
 81044b2:	2b02      	cmp	r3, #2
 81044b4:	d914      	bls.n	81044e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	f003 0301 	and.w	r3, r3, #1
 81044c0:	2b01      	cmp	r3, #1
 81044c2:	d00d      	beq.n	81044e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044c8:	f043 0210 	orr.w	r2, r3, #16
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81044d4:	f043 0201 	orr.w	r2, r3, #1
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 81044dc:	2301      	movs	r3, #1
 81044de:	e007      	b.n	81044f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	f003 0301 	and.w	r3, r3, #1
 81044ea:	2b01      	cmp	r3, #1
 81044ec:	d1cf      	bne.n	810448e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81044ee:	2300      	movs	r3, #0
}
 81044f0:	4618      	mov	r0, r3
 81044f2:	3710      	adds	r7, #16
 81044f4:	46bd      	mov	sp, r7
 81044f6:	bd80      	pop	{r7, pc}
 81044f8:	8000003f 	.word	0x8000003f
 81044fc:	40022000 	.word	0x40022000
 8104500:	40022100 	.word	0x40022100
 8104504:	40022300 	.word	0x40022300
 8104508:	58026300 	.word	0x58026300

0810450c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 810450c:	b580      	push	{r7, lr}
 810450e:	b084      	sub	sp, #16
 8104510:	af00      	add	r7, sp, #0
 8104512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	4618      	mov	r0, r3
 810451a:	f7fe fd52 	bl	8102fc2 <LL_ADC_IsDisableOngoing>
 810451e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4618      	mov	r0, r3
 8104526:	f7fe fd39 	bl	8102f9c <LL_ADC_IsEnabled>
 810452a:	4603      	mov	r3, r0
 810452c:	2b00      	cmp	r3, #0
 810452e:	d047      	beq.n	81045c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8104530:	68fb      	ldr	r3, [r7, #12]
 8104532:	2b00      	cmp	r3, #0
 8104534:	d144      	bne.n	81045c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	689b      	ldr	r3, [r3, #8]
 810453c:	f003 030d 	and.w	r3, r3, #13
 8104540:	2b01      	cmp	r3, #1
 8104542:	d10c      	bne.n	810455e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	4618      	mov	r0, r3
 810454a:	f7fe fd13 	bl	8102f74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	2203      	movs	r2, #3
 8104554:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8104556:	f7fe faf7 	bl	8102b48 <HAL_GetTick>
 810455a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 810455c:	e029      	b.n	81045b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104562:	f043 0210 	orr.w	r2, r3, #16
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810456e:	f043 0201 	orr.w	r2, r3, #1
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8104576:	2301      	movs	r3, #1
 8104578:	e023      	b.n	81045c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 810457a:	f7fe fae5 	bl	8102b48 <HAL_GetTick>
 810457e:	4602      	mov	r2, r0
 8104580:	68bb      	ldr	r3, [r7, #8]
 8104582:	1ad3      	subs	r3, r2, r3
 8104584:	2b02      	cmp	r3, #2
 8104586:	d914      	bls.n	81045b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	681b      	ldr	r3, [r3, #0]
 810458c:	689b      	ldr	r3, [r3, #8]
 810458e:	f003 0301 	and.w	r3, r3, #1
 8104592:	2b00      	cmp	r3, #0
 8104594:	d00d      	beq.n	81045b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810459a:	f043 0210 	orr.w	r2, r3, #16
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81045a6:	f043 0201 	orr.w	r2, r3, #1
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81045ae:	2301      	movs	r3, #1
 81045b0:	e007      	b.n	81045c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	689b      	ldr	r3, [r3, #8]
 81045b8:	f003 0301 	and.w	r3, r3, #1
 81045bc:	2b00      	cmp	r3, #0
 81045be:	d1dc      	bne.n	810457a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81045c0:	2300      	movs	r3, #0
}
 81045c2:	4618      	mov	r0, r3
 81045c4:	3710      	adds	r7, #16
 81045c6:	46bd      	mov	sp, r7
 81045c8:	bd80      	pop	{r7, pc}
	...

081045cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81045cc:	b580      	push	{r7, lr}
 81045ce:	b084      	sub	sp, #16
 81045d0:	af00      	add	r7, sp, #0
 81045d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	4a7a      	ldr	r2, [pc, #488]	@ (81047c4 <ADC_ConfigureBoostMode+0x1f8>)
 81045da:	4293      	cmp	r3, r2
 81045dc:	d004      	beq.n	81045e8 <ADC_ConfigureBoostMode+0x1c>
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	4a79      	ldr	r2, [pc, #484]	@ (81047c8 <ADC_ConfigureBoostMode+0x1fc>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d109      	bne.n	81045fc <ADC_ConfigureBoostMode+0x30>
 81045e8:	4b78      	ldr	r3, [pc, #480]	@ (81047cc <ADC_ConfigureBoostMode+0x200>)
 81045ea:	689b      	ldr	r3, [r3, #8]
 81045ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81045f0:	2b00      	cmp	r3, #0
 81045f2:	bf14      	ite	ne
 81045f4:	2301      	movne	r3, #1
 81045f6:	2300      	moveq	r3, #0
 81045f8:	b2db      	uxtb	r3, r3
 81045fa:	e008      	b.n	810460e <ADC_ConfigureBoostMode+0x42>
 81045fc:	4b74      	ldr	r3, [pc, #464]	@ (81047d0 <ADC_ConfigureBoostMode+0x204>)
 81045fe:	689b      	ldr	r3, [r3, #8]
 8104600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104604:	2b00      	cmp	r3, #0
 8104606:	bf14      	ite	ne
 8104608:	2301      	movne	r3, #1
 810460a:	2300      	moveq	r3, #0
 810460c:	b2db      	uxtb	r3, r3
 810460e:	2b00      	cmp	r3, #0
 8104610:	d01c      	beq.n	810464c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8104612:	f004 fe41 	bl	8109298 <HAL_RCC_GetHCLKFreq>
 8104616:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	685b      	ldr	r3, [r3, #4]
 810461c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104620:	d010      	beq.n	8104644 <ADC_ConfigureBoostMode+0x78>
 8104622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104626:	d873      	bhi.n	8104710 <ADC_ConfigureBoostMode+0x144>
 8104628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810462c:	d002      	beq.n	8104634 <ADC_ConfigureBoostMode+0x68>
 810462e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104632:	d16d      	bne.n	8104710 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	685b      	ldr	r3, [r3, #4]
 8104638:	0c1b      	lsrs	r3, r3, #16
 810463a:	68fa      	ldr	r2, [r7, #12]
 810463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8104640:	60fb      	str	r3, [r7, #12]
        break;
 8104642:	e068      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104644:	68fb      	ldr	r3, [r7, #12]
 8104646:	089b      	lsrs	r3, r3, #2
 8104648:	60fb      	str	r3, [r7, #12]
        break;
 810464a:	e064      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 810464c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8104650:	f04f 0100 	mov.w	r1, #0
 8104654:	f006 f888 	bl	810a768 <HAL_RCCEx_GetPeriphCLKFreq>
 8104658:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	685b      	ldr	r3, [r3, #4]
 810465e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8104662:	d051      	beq.n	8104708 <ADC_ConfigureBoostMode+0x13c>
 8104664:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8104668:	d854      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 810466a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 810466e:	d047      	beq.n	8104700 <ADC_ConfigureBoostMode+0x134>
 8104670:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8104674:	d84e      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 8104676:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 810467a:	d03d      	beq.n	81046f8 <ADC_ConfigureBoostMode+0x12c>
 810467c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8104680:	d848      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 8104682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104686:	d033      	beq.n	81046f0 <ADC_ConfigureBoostMode+0x124>
 8104688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810468c:	d842      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 810468e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8104692:	d029      	beq.n	81046e8 <ADC_ConfigureBoostMode+0x11c>
 8104694:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8104698:	d83c      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 810469a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 810469e:	d01a      	beq.n	81046d6 <ADC_ConfigureBoostMode+0x10a>
 81046a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81046a4:	d836      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 81046a6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81046aa:	d014      	beq.n	81046d6 <ADC_ConfigureBoostMode+0x10a>
 81046ac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81046b0:	d830      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 81046b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81046b6:	d00e      	beq.n	81046d6 <ADC_ConfigureBoostMode+0x10a>
 81046b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81046bc:	d82a      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 81046be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81046c2:	d008      	beq.n	81046d6 <ADC_ConfigureBoostMode+0x10a>
 81046c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81046c8:	d824      	bhi.n	8104714 <ADC_ConfigureBoostMode+0x148>
 81046ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81046ce:	d002      	beq.n	81046d6 <ADC_ConfigureBoostMode+0x10a>
 81046d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81046d4:	d11e      	bne.n	8104714 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	685b      	ldr	r3, [r3, #4]
 81046da:	0c9b      	lsrs	r3, r3, #18
 81046dc:	005b      	lsls	r3, r3, #1
 81046de:	68fa      	ldr	r2, [r7, #12]
 81046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 81046e4:	60fb      	str	r3, [r7, #12]
        break;
 81046e6:	e016      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81046e8:	68fb      	ldr	r3, [r7, #12]
 81046ea:	091b      	lsrs	r3, r3, #4
 81046ec:	60fb      	str	r3, [r7, #12]
        break;
 81046ee:	e012      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81046f0:	68fb      	ldr	r3, [r7, #12]
 81046f2:	095b      	lsrs	r3, r3, #5
 81046f4:	60fb      	str	r3, [r7, #12]
        break;
 81046f6:	e00e      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81046f8:	68fb      	ldr	r3, [r7, #12]
 81046fa:	099b      	lsrs	r3, r3, #6
 81046fc:	60fb      	str	r3, [r7, #12]
        break;
 81046fe:	e00a      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8104700:	68fb      	ldr	r3, [r7, #12]
 8104702:	09db      	lsrs	r3, r3, #7
 8104704:	60fb      	str	r3, [r7, #12]
        break;
 8104706:	e006      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	0a1b      	lsrs	r3, r3, #8
 810470c:	60fb      	str	r3, [r7, #12]
        break;
 810470e:	e002      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
        break;
 8104710:	bf00      	nop
 8104712:	e000      	b.n	8104716 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8104714:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8104716:	f7fe fa47 	bl	8102ba8 <HAL_GetREVID>
 810471a:	4603      	mov	r3, r0
 810471c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104720:	4293      	cmp	r3, r2
 8104722:	d815      	bhi.n	8104750 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8104724:	68fb      	ldr	r3, [r7, #12]
 8104726:	4a2b      	ldr	r2, [pc, #172]	@ (81047d4 <ADC_ConfigureBoostMode+0x208>)
 8104728:	4293      	cmp	r3, r2
 810472a:	d908      	bls.n	810473e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	689a      	ldr	r2, [r3, #8]
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810473a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810473c:	e03e      	b.n	81047bc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	689a      	ldr	r2, [r3, #8]
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810474c:	609a      	str	r2, [r3, #8]
}
 810474e:	e035      	b.n	81047bc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	085b      	lsrs	r3, r3, #1
 8104754:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8104756:	68fb      	ldr	r3, [r7, #12]
 8104758:	4a1f      	ldr	r2, [pc, #124]	@ (81047d8 <ADC_ConfigureBoostMode+0x20c>)
 810475a:	4293      	cmp	r3, r2
 810475c:	d808      	bhi.n	8104770 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	689a      	ldr	r2, [r3, #8]
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 810476c:	609a      	str	r2, [r3, #8]
}
 810476e:	e025      	b.n	81047bc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8104770:	68fb      	ldr	r3, [r7, #12]
 8104772:	4a1a      	ldr	r2, [pc, #104]	@ (81047dc <ADC_ConfigureBoostMode+0x210>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d80a      	bhi.n	810478e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	689b      	ldr	r3, [r3, #8]
 810477e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810478a:	609a      	str	r2, [r3, #8]
}
 810478c:	e016      	b.n	81047bc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 810478e:	68fb      	ldr	r3, [r7, #12]
 8104790:	4a13      	ldr	r2, [pc, #76]	@ (81047e0 <ADC_ConfigureBoostMode+0x214>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d80a      	bhi.n	81047ac <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	689b      	ldr	r3, [r3, #8]
 810479c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81047a8:	609a      	str	r2, [r3, #8]
}
 81047aa:	e007      	b.n	81047bc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	689a      	ldr	r2, [r3, #8]
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	681b      	ldr	r3, [r3, #0]
 81047b6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 81047ba:	609a      	str	r2, [r3, #8]
}
 81047bc:	bf00      	nop
 81047be:	3710      	adds	r7, #16
 81047c0:	46bd      	mov	sp, r7
 81047c2:	bd80      	pop	{r7, pc}
 81047c4:	40022000 	.word	0x40022000
 81047c8:	40022100 	.word	0x40022100
 81047cc:	40022300 	.word	0x40022300
 81047d0:	58026300 	.word	0x58026300
 81047d4:	01312d00 	.word	0x01312d00
 81047d8:	005f5e10 	.word	0x005f5e10
 81047dc:	00bebc20 	.word	0x00bebc20
 81047e0:	017d7840 	.word	0x017d7840

081047e4 <LL_ADC_IsEnabled>:
{
 81047e4:	b480      	push	{r7}
 81047e6:	b083      	sub	sp, #12
 81047e8:	af00      	add	r7, sp, #0
 81047ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	689b      	ldr	r3, [r3, #8]
 81047f0:	f003 0301 	and.w	r3, r3, #1
 81047f4:	2b01      	cmp	r3, #1
 81047f6:	d101      	bne.n	81047fc <LL_ADC_IsEnabled+0x18>
 81047f8:	2301      	movs	r3, #1
 81047fa:	e000      	b.n	81047fe <LL_ADC_IsEnabled+0x1a>
 81047fc:	2300      	movs	r3, #0
}
 81047fe:	4618      	mov	r0, r3
 8104800:	370c      	adds	r7, #12
 8104802:	46bd      	mov	sp, r7
 8104804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104808:	4770      	bx	lr

0810480a <LL_ADC_REG_IsConversionOngoing>:
{
 810480a:	b480      	push	{r7}
 810480c:	b083      	sub	sp, #12
 810480e:	af00      	add	r7, sp, #0
 8104810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	689b      	ldr	r3, [r3, #8]
 8104816:	f003 0304 	and.w	r3, r3, #4
 810481a:	2b04      	cmp	r3, #4
 810481c:	d101      	bne.n	8104822 <LL_ADC_REG_IsConversionOngoing+0x18>
 810481e:	2301      	movs	r3, #1
 8104820:	e000      	b.n	8104824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104822:	2300      	movs	r3, #0
}
 8104824:	4618      	mov	r0, r3
 8104826:	370c      	adds	r7, #12
 8104828:	46bd      	mov	sp, r7
 810482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810482e:	4770      	bx	lr

08104830 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8104830:	b480      	push	{r7}
 8104832:	b083      	sub	sp, #12
 8104834:	af00      	add	r7, sp, #0
 8104836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8104838:	bf00      	nop
 810483a:	370c      	adds	r7, #12
 810483c:	46bd      	mov	sp, r7
 810483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104842:	4770      	bx	lr

08104844 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8104844:	b480      	push	{r7}
 8104846:	b083      	sub	sp, #12
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 810484c:	bf00      	nop
 810484e:	370c      	adds	r7, #12
 8104850:	46bd      	mov	sp, r7
 8104852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104856:	4770      	bx	lr

08104858 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8104858:	b480      	push	{r7}
 810485a:	b083      	sub	sp, #12
 810485c:	af00      	add	r7, sp, #0
 810485e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8104860:	bf00      	nop
 8104862:	370c      	adds	r7, #12
 8104864:	46bd      	mov	sp, r7
 8104866:	f85d 7b04 	ldr.w	r7, [sp], #4
 810486a:	4770      	bx	lr

0810486c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 810486c:	b480      	push	{r7}
 810486e:	b083      	sub	sp, #12
 8104870:	af00      	add	r7, sp, #0
 8104872:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8104874:	bf00      	nop
 8104876:	370c      	adds	r7, #12
 8104878:	46bd      	mov	sp, r7
 810487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810487e:	4770      	bx	lr

08104880 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8104880:	b480      	push	{r7}
 8104882:	b083      	sub	sp, #12
 8104884:	af00      	add	r7, sp, #0
 8104886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8104888:	bf00      	nop
 810488a:	370c      	adds	r7, #12
 810488c:	46bd      	mov	sp, r7
 810488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104892:	4770      	bx	lr

08104894 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104894:	b590      	push	{r4, r7, lr}
 8104896:	b09f      	sub	sp, #124	@ 0x7c
 8104898:	af00      	add	r7, sp, #0
 810489a:	6078      	str	r0, [r7, #4]
 810489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810489e:	2300      	movs	r3, #0
 81048a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81048aa:	2b01      	cmp	r3, #1
 81048ac:	d101      	bne.n	81048b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81048ae:	2302      	movs	r3, #2
 81048b0:	e0c4      	b.n	8104a3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	2201      	movs	r2, #1
 81048b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81048ba:	2300      	movs	r3, #0
 81048bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81048be:	2300      	movs	r3, #0
 81048c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	4a5f      	ldr	r2, [pc, #380]	@ (8104a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81048c8:	4293      	cmp	r3, r2
 81048ca:	d102      	bne.n	81048d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81048cc:	4b5e      	ldr	r3, [pc, #376]	@ (8104a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81048ce:	60bb      	str	r3, [r7, #8]
 81048d0:	e001      	b.n	81048d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81048d2:	2300      	movs	r3, #0
 81048d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81048d6:	68bb      	ldr	r3, [r7, #8]
 81048d8:	2b00      	cmp	r3, #0
 81048da:	d10b      	bne.n	81048f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048e0:	f043 0220 	orr.w	r2, r3, #32
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	2200      	movs	r2, #0
 81048ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81048f0:	2301      	movs	r3, #1
 81048f2:	e0a3      	b.n	8104a3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81048f4:	68bb      	ldr	r3, [r7, #8]
 81048f6:	4618      	mov	r0, r3
 81048f8:	f7ff ff87 	bl	810480a <LL_ADC_REG_IsConversionOngoing>
 81048fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	4618      	mov	r0, r3
 8104904:	f7ff ff81 	bl	810480a <LL_ADC_REG_IsConversionOngoing>
 8104908:	4603      	mov	r3, r0
 810490a:	2b00      	cmp	r3, #0
 810490c:	f040 8085 	bne.w	8104a1a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8104910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104912:	2b00      	cmp	r3, #0
 8104914:	f040 8081 	bne.w	8104a1a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	4a49      	ldr	r2, [pc, #292]	@ (8104a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810491e:	4293      	cmp	r3, r2
 8104920:	d004      	beq.n	810492c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	681b      	ldr	r3, [r3, #0]
 8104926:	4a48      	ldr	r2, [pc, #288]	@ (8104a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104928:	4293      	cmp	r3, r2
 810492a:	d101      	bne.n	8104930 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 810492c:	4b47      	ldr	r3, [pc, #284]	@ (8104a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810492e:	e000      	b.n	8104932 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8104930:	4b47      	ldr	r3, [pc, #284]	@ (8104a50 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8104932:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104934:	683b      	ldr	r3, [r7, #0]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	2b00      	cmp	r3, #0
 810493a:	d03b      	beq.n	81049b4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 810493c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810493e:	689b      	ldr	r3, [r3, #8]
 8104940:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8104944:	683b      	ldr	r3, [r7, #0]
 8104946:	685b      	ldr	r3, [r3, #4]
 8104948:	431a      	orrs	r2, r3
 810494a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810494c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	681b      	ldr	r3, [r3, #0]
 8104952:	4a3c      	ldr	r2, [pc, #240]	@ (8104a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104954:	4293      	cmp	r3, r2
 8104956:	d004      	beq.n	8104962 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	4a3a      	ldr	r2, [pc, #232]	@ (8104a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810495e:	4293      	cmp	r3, r2
 8104960:	d10e      	bne.n	8104980 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104962:	4838      	ldr	r0, [pc, #224]	@ (8104a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104964:	f7ff ff3e 	bl	81047e4 <LL_ADC_IsEnabled>
 8104968:	4604      	mov	r4, r0
 810496a:	4837      	ldr	r0, [pc, #220]	@ (8104a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810496c:	f7ff ff3a 	bl	81047e4 <LL_ADC_IsEnabled>
 8104970:	4603      	mov	r3, r0
 8104972:	4323      	orrs	r3, r4
 8104974:	2b00      	cmp	r3, #0
 8104976:	bf0c      	ite	eq
 8104978:	2301      	moveq	r3, #1
 810497a:	2300      	movne	r3, #0
 810497c:	b2db      	uxtb	r3, r3
 810497e:	e008      	b.n	8104992 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104980:	4834      	ldr	r0, [pc, #208]	@ (8104a54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104982:	f7ff ff2f 	bl	81047e4 <LL_ADC_IsEnabled>
 8104986:	4603      	mov	r3, r0
 8104988:	2b00      	cmp	r3, #0
 810498a:	bf0c      	ite	eq
 810498c:	2301      	moveq	r3, #1
 810498e:	2300      	movne	r3, #0
 8104990:	b2db      	uxtb	r3, r3
 8104992:	2b00      	cmp	r3, #0
 8104994:	d04b      	beq.n	8104a2e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104998:	689b      	ldr	r3, [r3, #8]
 810499a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 810499e:	f023 030f 	bic.w	r3, r3, #15
 81049a2:	683a      	ldr	r2, [r7, #0]
 81049a4:	6811      	ldr	r1, [r2, #0]
 81049a6:	683a      	ldr	r2, [r7, #0]
 81049a8:	6892      	ldr	r2, [r2, #8]
 81049aa:	430a      	orrs	r2, r1
 81049ac:	431a      	orrs	r2, r3
 81049ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81049b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81049b2:	e03c      	b.n	8104a2e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81049b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81049b6:	689b      	ldr	r3, [r3, #8]
 81049b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81049bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81049be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	4a1f      	ldr	r2, [pc, #124]	@ (8104a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81049c6:	4293      	cmp	r3, r2
 81049c8:	d004      	beq.n	81049d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	681b      	ldr	r3, [r3, #0]
 81049ce:	4a1e      	ldr	r2, [pc, #120]	@ (8104a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d10e      	bne.n	81049f2 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81049d4:	481b      	ldr	r0, [pc, #108]	@ (8104a44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81049d6:	f7ff ff05 	bl	81047e4 <LL_ADC_IsEnabled>
 81049da:	4604      	mov	r4, r0
 81049dc:	481a      	ldr	r0, [pc, #104]	@ (8104a48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81049de:	f7ff ff01 	bl	81047e4 <LL_ADC_IsEnabled>
 81049e2:	4603      	mov	r3, r0
 81049e4:	4323      	orrs	r3, r4
 81049e6:	2b00      	cmp	r3, #0
 81049e8:	bf0c      	ite	eq
 81049ea:	2301      	moveq	r3, #1
 81049ec:	2300      	movne	r3, #0
 81049ee:	b2db      	uxtb	r3, r3
 81049f0:	e008      	b.n	8104a04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81049f2:	4818      	ldr	r0, [pc, #96]	@ (8104a54 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81049f4:	f7ff fef6 	bl	81047e4 <LL_ADC_IsEnabled>
 81049f8:	4603      	mov	r3, r0
 81049fa:	2b00      	cmp	r3, #0
 81049fc:	bf0c      	ite	eq
 81049fe:	2301      	moveq	r3, #1
 8104a00:	2300      	movne	r3, #0
 8104a02:	b2db      	uxtb	r3, r3
 8104a04:	2b00      	cmp	r3, #0
 8104a06:	d012      	beq.n	8104a2e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8104a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104a0a:	689b      	ldr	r3, [r3, #8]
 8104a0c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8104a10:	f023 030f 	bic.w	r3, r3, #15
 8104a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8104a16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104a18:	e009      	b.n	8104a2e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a1e:	f043 0220 	orr.w	r2, r3, #32
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104a26:	2301      	movs	r3, #1
 8104a28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8104a2c:	e000      	b.n	8104a30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104a2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	2200      	movs	r2, #0
 8104a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104a38:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8104a3c:	4618      	mov	r0, r3
 8104a3e:	377c      	adds	r7, #124	@ 0x7c
 8104a40:	46bd      	mov	sp, r7
 8104a42:	bd90      	pop	{r4, r7, pc}
 8104a44:	40022000 	.word	0x40022000
 8104a48:	40022100 	.word	0x40022100
 8104a4c:	40022300 	.word	0x40022300
 8104a50:	58026300 	.word	0x58026300
 8104a54:	58026000 	.word	0x58026000

08104a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104a58:	b480      	push	{r7}
 8104a5a:	b085      	sub	sp, #20
 8104a5c:	af00      	add	r7, sp, #0
 8104a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	f003 0307 	and.w	r3, r3, #7
 8104a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104a68:	4b0c      	ldr	r3, [pc, #48]	@ (8104a9c <__NVIC_SetPriorityGrouping+0x44>)
 8104a6a:	68db      	ldr	r3, [r3, #12]
 8104a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104a6e:	68ba      	ldr	r2, [r7, #8]
 8104a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8104a74:	4013      	ands	r3, r2
 8104a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104a7c:	68bb      	ldr	r3, [r7, #8]
 8104a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8104a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104a8a:	4a04      	ldr	r2, [pc, #16]	@ (8104a9c <__NVIC_SetPriorityGrouping+0x44>)
 8104a8c:	68bb      	ldr	r3, [r7, #8]
 8104a8e:	60d3      	str	r3, [r2, #12]
}
 8104a90:	bf00      	nop
 8104a92:	3714      	adds	r7, #20
 8104a94:	46bd      	mov	sp, r7
 8104a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a9a:	4770      	bx	lr
 8104a9c:	e000ed00 	.word	0xe000ed00

08104aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104aa0:	b480      	push	{r7}
 8104aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104aa4:	4b04      	ldr	r3, [pc, #16]	@ (8104ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8104aa6:	68db      	ldr	r3, [r3, #12]
 8104aa8:	0a1b      	lsrs	r3, r3, #8
 8104aaa:	f003 0307 	and.w	r3, r3, #7
}
 8104aae:	4618      	mov	r0, r3
 8104ab0:	46bd      	mov	sp, r7
 8104ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ab6:	4770      	bx	lr
 8104ab8:	e000ed00 	.word	0xe000ed00

08104abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104abc:	b480      	push	{r7}
 8104abe:	b083      	sub	sp, #12
 8104ac0:	af00      	add	r7, sp, #0
 8104ac2:	4603      	mov	r3, r0
 8104ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104aca:	2b00      	cmp	r3, #0
 8104acc:	db0b      	blt.n	8104ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104ace:	88fb      	ldrh	r3, [r7, #6]
 8104ad0:	f003 021f 	and.w	r2, r3, #31
 8104ad4:	4907      	ldr	r1, [pc, #28]	@ (8104af4 <__NVIC_EnableIRQ+0x38>)
 8104ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104ada:	095b      	lsrs	r3, r3, #5
 8104adc:	2001      	movs	r0, #1
 8104ade:	fa00 f202 	lsl.w	r2, r0, r2
 8104ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8104ae6:	bf00      	nop
 8104ae8:	370c      	adds	r7, #12
 8104aea:	46bd      	mov	sp, r7
 8104aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104af0:	4770      	bx	lr
 8104af2:	bf00      	nop
 8104af4:	e000e100 	.word	0xe000e100

08104af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104af8:	b480      	push	{r7}
 8104afa:	b083      	sub	sp, #12
 8104afc:	af00      	add	r7, sp, #0
 8104afe:	4603      	mov	r3, r0
 8104b00:	6039      	str	r1, [r7, #0]
 8104b02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104b08:	2b00      	cmp	r3, #0
 8104b0a:	db0a      	blt.n	8104b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104b0c:	683b      	ldr	r3, [r7, #0]
 8104b0e:	b2da      	uxtb	r2, r3
 8104b10:	490c      	ldr	r1, [pc, #48]	@ (8104b44 <__NVIC_SetPriority+0x4c>)
 8104b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104b16:	0112      	lsls	r2, r2, #4
 8104b18:	b2d2      	uxtb	r2, r2
 8104b1a:	440b      	add	r3, r1
 8104b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104b20:	e00a      	b.n	8104b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104b22:	683b      	ldr	r3, [r7, #0]
 8104b24:	b2da      	uxtb	r2, r3
 8104b26:	4908      	ldr	r1, [pc, #32]	@ (8104b48 <__NVIC_SetPriority+0x50>)
 8104b28:	88fb      	ldrh	r3, [r7, #6]
 8104b2a:	f003 030f 	and.w	r3, r3, #15
 8104b2e:	3b04      	subs	r3, #4
 8104b30:	0112      	lsls	r2, r2, #4
 8104b32:	b2d2      	uxtb	r2, r2
 8104b34:	440b      	add	r3, r1
 8104b36:	761a      	strb	r2, [r3, #24]
}
 8104b38:	bf00      	nop
 8104b3a:	370c      	adds	r7, #12
 8104b3c:	46bd      	mov	sp, r7
 8104b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b42:	4770      	bx	lr
 8104b44:	e000e100 	.word	0xe000e100
 8104b48:	e000ed00 	.word	0xe000ed00

08104b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104b4c:	b480      	push	{r7}
 8104b4e:	b089      	sub	sp, #36	@ 0x24
 8104b50:	af00      	add	r7, sp, #0
 8104b52:	60f8      	str	r0, [r7, #12]
 8104b54:	60b9      	str	r1, [r7, #8]
 8104b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104b58:	68fb      	ldr	r3, [r7, #12]
 8104b5a:	f003 0307 	and.w	r3, r3, #7
 8104b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104b60:	69fb      	ldr	r3, [r7, #28]
 8104b62:	f1c3 0307 	rsb	r3, r3, #7
 8104b66:	2b04      	cmp	r3, #4
 8104b68:	bf28      	it	cs
 8104b6a:	2304      	movcs	r3, #4
 8104b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104b6e:	69fb      	ldr	r3, [r7, #28]
 8104b70:	3304      	adds	r3, #4
 8104b72:	2b06      	cmp	r3, #6
 8104b74:	d902      	bls.n	8104b7c <NVIC_EncodePriority+0x30>
 8104b76:	69fb      	ldr	r3, [r7, #28]
 8104b78:	3b03      	subs	r3, #3
 8104b7a:	e000      	b.n	8104b7e <NVIC_EncodePriority+0x32>
 8104b7c:	2300      	movs	r3, #0
 8104b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104b80:	f04f 32ff 	mov.w	r2, #4294967295
 8104b84:	69bb      	ldr	r3, [r7, #24]
 8104b86:	fa02 f303 	lsl.w	r3, r2, r3
 8104b8a:	43da      	mvns	r2, r3
 8104b8c:	68bb      	ldr	r3, [r7, #8]
 8104b8e:	401a      	ands	r2, r3
 8104b90:	697b      	ldr	r3, [r7, #20]
 8104b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104b94:	f04f 31ff 	mov.w	r1, #4294967295
 8104b98:	697b      	ldr	r3, [r7, #20]
 8104b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8104b9e:	43d9      	mvns	r1, r3
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104ba4:	4313      	orrs	r3, r2
         );
}
 8104ba6:	4618      	mov	r0, r3
 8104ba8:	3724      	adds	r7, #36	@ 0x24
 8104baa:	46bd      	mov	sp, r7
 8104bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bb0:	4770      	bx	lr
	...

08104bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104bb4:	b580      	push	{r7, lr}
 8104bb6:	b082      	sub	sp, #8
 8104bb8:	af00      	add	r7, sp, #0
 8104bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	3b01      	subs	r3, #1
 8104bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104bc4:	d301      	bcc.n	8104bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104bc6:	2301      	movs	r3, #1
 8104bc8:	e00f      	b.n	8104bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104bca:	4a0a      	ldr	r2, [pc, #40]	@ (8104bf4 <SysTick_Config+0x40>)
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	3b01      	subs	r3, #1
 8104bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104bd2:	210f      	movs	r1, #15
 8104bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8104bd8:	f7ff ff8e 	bl	8104af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104bdc:	4b05      	ldr	r3, [pc, #20]	@ (8104bf4 <SysTick_Config+0x40>)
 8104bde:	2200      	movs	r2, #0
 8104be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104be2:	4b04      	ldr	r3, [pc, #16]	@ (8104bf4 <SysTick_Config+0x40>)
 8104be4:	2207      	movs	r2, #7
 8104be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104be8:	2300      	movs	r3, #0
}
 8104bea:	4618      	mov	r0, r3
 8104bec:	3708      	adds	r7, #8
 8104bee:	46bd      	mov	sp, r7
 8104bf0:	bd80      	pop	{r7, pc}
 8104bf2:	bf00      	nop
 8104bf4:	e000e010 	.word	0xe000e010

08104bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104bf8:	b580      	push	{r7, lr}
 8104bfa:	b082      	sub	sp, #8
 8104bfc:	af00      	add	r7, sp, #0
 8104bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104c00:	6878      	ldr	r0, [r7, #4]
 8104c02:	f7ff ff29 	bl	8104a58 <__NVIC_SetPriorityGrouping>
}
 8104c06:	bf00      	nop
 8104c08:	3708      	adds	r7, #8
 8104c0a:	46bd      	mov	sp, r7
 8104c0c:	bd80      	pop	{r7, pc}

08104c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104c0e:	b580      	push	{r7, lr}
 8104c10:	b086      	sub	sp, #24
 8104c12:	af00      	add	r7, sp, #0
 8104c14:	4603      	mov	r3, r0
 8104c16:	60b9      	str	r1, [r7, #8]
 8104c18:	607a      	str	r2, [r7, #4]
 8104c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104c1c:	f7ff ff40 	bl	8104aa0 <__NVIC_GetPriorityGrouping>
 8104c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104c22:	687a      	ldr	r2, [r7, #4]
 8104c24:	68b9      	ldr	r1, [r7, #8]
 8104c26:	6978      	ldr	r0, [r7, #20]
 8104c28:	f7ff ff90 	bl	8104b4c <NVIC_EncodePriority>
 8104c2c:	4602      	mov	r2, r0
 8104c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104c32:	4611      	mov	r1, r2
 8104c34:	4618      	mov	r0, r3
 8104c36:	f7ff ff5f 	bl	8104af8 <__NVIC_SetPriority>
}
 8104c3a:	bf00      	nop
 8104c3c:	3718      	adds	r7, #24
 8104c3e:	46bd      	mov	sp, r7
 8104c40:	bd80      	pop	{r7, pc}

08104c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104c42:	b580      	push	{r7, lr}
 8104c44:	b082      	sub	sp, #8
 8104c46:	af00      	add	r7, sp, #0
 8104c48:	4603      	mov	r3, r0
 8104c4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104c50:	4618      	mov	r0, r3
 8104c52:	f7ff ff33 	bl	8104abc <__NVIC_EnableIRQ>
}
 8104c56:	bf00      	nop
 8104c58:	3708      	adds	r7, #8
 8104c5a:	46bd      	mov	sp, r7
 8104c5c:	bd80      	pop	{r7, pc}

08104c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104c5e:	b580      	push	{r7, lr}
 8104c60:	b082      	sub	sp, #8
 8104c62:	af00      	add	r7, sp, #0
 8104c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104c66:	6878      	ldr	r0, [r7, #4]
 8104c68:	f7ff ffa4 	bl	8104bb4 <SysTick_Config>
 8104c6c:	4603      	mov	r3, r0
}
 8104c6e:	4618      	mov	r0, r3
 8104c70:	3708      	adds	r7, #8
 8104c72:	46bd      	mov	sp, r7
 8104c74:	bd80      	pop	{r7, pc}
	...

08104c78 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104c78:	b480      	push	{r7}
 8104c7a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104c7c:	4b06      	ldr	r3, [pc, #24]	@ (8104c98 <HAL_GetCurrentCPUID+0x20>)
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8104c84:	2b70      	cmp	r3, #112	@ 0x70
 8104c86:	d101      	bne.n	8104c8c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8104c88:	2303      	movs	r3, #3
 8104c8a:	e000      	b.n	8104c8e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8104c8c:	2301      	movs	r3, #1
  }
}
 8104c8e:	4618      	mov	r0, r3
 8104c90:	46bd      	mov	sp, r7
 8104c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c96:	4770      	bx	lr
 8104c98:	e000ed00 	.word	0xe000ed00

08104c9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8104c9c:	b580      	push	{r7, lr}
 8104c9e:	b086      	sub	sp, #24
 8104ca0:	af00      	add	r7, sp, #0
 8104ca2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8104ca4:	f7fd ff50 	bl	8102b48 <HAL_GetTick>
 8104ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	2b00      	cmp	r3, #0
 8104cae:	d101      	bne.n	8104cb4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8104cb0:	2301      	movs	r3, #1
 8104cb2:	e314      	b.n	81052de <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	4a66      	ldr	r2, [pc, #408]	@ (8104e54 <HAL_DMA_Init+0x1b8>)
 8104cba:	4293      	cmp	r3, r2
 8104cbc:	d04a      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	4a65      	ldr	r2, [pc, #404]	@ (8104e58 <HAL_DMA_Init+0x1bc>)
 8104cc4:	4293      	cmp	r3, r2
 8104cc6:	d045      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	4a63      	ldr	r2, [pc, #396]	@ (8104e5c <HAL_DMA_Init+0x1c0>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d040      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	4a62      	ldr	r2, [pc, #392]	@ (8104e60 <HAL_DMA_Init+0x1c4>)
 8104cd8:	4293      	cmp	r3, r2
 8104cda:	d03b      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	681b      	ldr	r3, [r3, #0]
 8104ce0:	4a60      	ldr	r2, [pc, #384]	@ (8104e64 <HAL_DMA_Init+0x1c8>)
 8104ce2:	4293      	cmp	r3, r2
 8104ce4:	d036      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	4a5f      	ldr	r2, [pc, #380]	@ (8104e68 <HAL_DMA_Init+0x1cc>)
 8104cec:	4293      	cmp	r3, r2
 8104cee:	d031      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8104e6c <HAL_DMA_Init+0x1d0>)
 8104cf6:	4293      	cmp	r3, r2
 8104cf8:	d02c      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8104e70 <HAL_DMA_Init+0x1d4>)
 8104d00:	4293      	cmp	r3, r2
 8104d02:	d027      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	4a5a      	ldr	r2, [pc, #360]	@ (8104e74 <HAL_DMA_Init+0x1d8>)
 8104d0a:	4293      	cmp	r3, r2
 8104d0c:	d022      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	4a59      	ldr	r2, [pc, #356]	@ (8104e78 <HAL_DMA_Init+0x1dc>)
 8104d14:	4293      	cmp	r3, r2
 8104d16:	d01d      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	4a57      	ldr	r2, [pc, #348]	@ (8104e7c <HAL_DMA_Init+0x1e0>)
 8104d1e:	4293      	cmp	r3, r2
 8104d20:	d018      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	4a56      	ldr	r2, [pc, #344]	@ (8104e80 <HAL_DMA_Init+0x1e4>)
 8104d28:	4293      	cmp	r3, r2
 8104d2a:	d013      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a54      	ldr	r2, [pc, #336]	@ (8104e84 <HAL_DMA_Init+0x1e8>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d00e      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	681b      	ldr	r3, [r3, #0]
 8104d3a:	4a53      	ldr	r2, [pc, #332]	@ (8104e88 <HAL_DMA_Init+0x1ec>)
 8104d3c:	4293      	cmp	r3, r2
 8104d3e:	d009      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	4a51      	ldr	r2, [pc, #324]	@ (8104e8c <HAL_DMA_Init+0x1f0>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d004      	beq.n	8104d54 <HAL_DMA_Init+0xb8>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	4a50      	ldr	r2, [pc, #320]	@ (8104e90 <HAL_DMA_Init+0x1f4>)
 8104d50:	4293      	cmp	r3, r2
 8104d52:	d101      	bne.n	8104d58 <HAL_DMA_Init+0xbc>
 8104d54:	2301      	movs	r3, #1
 8104d56:	e000      	b.n	8104d5a <HAL_DMA_Init+0xbe>
 8104d58:	2300      	movs	r3, #0
 8104d5a:	2b00      	cmp	r3, #0
 8104d5c:	f000 813b 	beq.w	8104fd6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	2202      	movs	r2, #2
 8104d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	2200      	movs	r2, #0
 8104d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	4a37      	ldr	r2, [pc, #220]	@ (8104e54 <HAL_DMA_Init+0x1b8>)
 8104d76:	4293      	cmp	r3, r2
 8104d78:	d04a      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	4a36      	ldr	r2, [pc, #216]	@ (8104e58 <HAL_DMA_Init+0x1bc>)
 8104d80:	4293      	cmp	r3, r2
 8104d82:	d045      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	4a34      	ldr	r2, [pc, #208]	@ (8104e5c <HAL_DMA_Init+0x1c0>)
 8104d8a:	4293      	cmp	r3, r2
 8104d8c:	d040      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	4a33      	ldr	r2, [pc, #204]	@ (8104e60 <HAL_DMA_Init+0x1c4>)
 8104d94:	4293      	cmp	r3, r2
 8104d96:	d03b      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	4a31      	ldr	r2, [pc, #196]	@ (8104e64 <HAL_DMA_Init+0x1c8>)
 8104d9e:	4293      	cmp	r3, r2
 8104da0:	d036      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	4a30      	ldr	r2, [pc, #192]	@ (8104e68 <HAL_DMA_Init+0x1cc>)
 8104da8:	4293      	cmp	r3, r2
 8104daa:	d031      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	4a2e      	ldr	r2, [pc, #184]	@ (8104e6c <HAL_DMA_Init+0x1d0>)
 8104db2:	4293      	cmp	r3, r2
 8104db4:	d02c      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	4a2d      	ldr	r2, [pc, #180]	@ (8104e70 <HAL_DMA_Init+0x1d4>)
 8104dbc:	4293      	cmp	r3, r2
 8104dbe:	d027      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8104e74 <HAL_DMA_Init+0x1d8>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d022      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	4a2a      	ldr	r2, [pc, #168]	@ (8104e78 <HAL_DMA_Init+0x1dc>)
 8104dd0:	4293      	cmp	r3, r2
 8104dd2:	d01d      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	4a28      	ldr	r2, [pc, #160]	@ (8104e7c <HAL_DMA_Init+0x1e0>)
 8104dda:	4293      	cmp	r3, r2
 8104ddc:	d018      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a27      	ldr	r2, [pc, #156]	@ (8104e80 <HAL_DMA_Init+0x1e4>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d013      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a25      	ldr	r2, [pc, #148]	@ (8104e84 <HAL_DMA_Init+0x1e8>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d00e      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	4a24      	ldr	r2, [pc, #144]	@ (8104e88 <HAL_DMA_Init+0x1ec>)
 8104df8:	4293      	cmp	r3, r2
 8104dfa:	d009      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	4a22      	ldr	r2, [pc, #136]	@ (8104e8c <HAL_DMA_Init+0x1f0>)
 8104e02:	4293      	cmp	r3, r2
 8104e04:	d004      	beq.n	8104e10 <HAL_DMA_Init+0x174>
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a21      	ldr	r2, [pc, #132]	@ (8104e90 <HAL_DMA_Init+0x1f4>)
 8104e0c:	4293      	cmp	r3, r2
 8104e0e:	d108      	bne.n	8104e22 <HAL_DMA_Init+0x186>
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	681a      	ldr	r2, [r3, #0]
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	681b      	ldr	r3, [r3, #0]
 8104e1a:	f022 0201 	bic.w	r2, r2, #1
 8104e1e:	601a      	str	r2, [r3, #0]
 8104e20:	e007      	b.n	8104e32 <HAL_DMA_Init+0x196>
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	681b      	ldr	r3, [r3, #0]
 8104e26:	681a      	ldr	r2, [r3, #0]
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	f022 0201 	bic.w	r2, r2, #1
 8104e30:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104e32:	e02f      	b.n	8104e94 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104e34:	f7fd fe88 	bl	8102b48 <HAL_GetTick>
 8104e38:	4602      	mov	r2, r0
 8104e3a:	693b      	ldr	r3, [r7, #16]
 8104e3c:	1ad3      	subs	r3, r2, r3
 8104e3e:	2b05      	cmp	r3, #5
 8104e40:	d928      	bls.n	8104e94 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	2220      	movs	r2, #32
 8104e46:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	2203      	movs	r2, #3
 8104e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8104e50:	2301      	movs	r3, #1
 8104e52:	e244      	b.n	81052de <HAL_DMA_Init+0x642>
 8104e54:	40020010 	.word	0x40020010
 8104e58:	40020028 	.word	0x40020028
 8104e5c:	40020040 	.word	0x40020040
 8104e60:	40020058 	.word	0x40020058
 8104e64:	40020070 	.word	0x40020070
 8104e68:	40020088 	.word	0x40020088
 8104e6c:	400200a0 	.word	0x400200a0
 8104e70:	400200b8 	.word	0x400200b8
 8104e74:	40020410 	.word	0x40020410
 8104e78:	40020428 	.word	0x40020428
 8104e7c:	40020440 	.word	0x40020440
 8104e80:	40020458 	.word	0x40020458
 8104e84:	40020470 	.word	0x40020470
 8104e88:	40020488 	.word	0x40020488
 8104e8c:	400204a0 	.word	0x400204a0
 8104e90:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	f003 0301 	and.w	r3, r3, #1
 8104e9e:	2b00      	cmp	r3, #0
 8104ea0:	d1c8      	bne.n	8104e34 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8104eaa:	697a      	ldr	r2, [r7, #20]
 8104eac:	4b84      	ldr	r3, [pc, #528]	@ (81050c0 <HAL_DMA_Init+0x424>)
 8104eae:	4013      	ands	r3, r2
 8104eb0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8104eba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	691b      	ldr	r3, [r3, #16]
 8104ec0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104ec6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	699b      	ldr	r3, [r3, #24]
 8104ecc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104ed2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	6a1b      	ldr	r3, [r3, #32]
 8104ed8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8104eda:	697a      	ldr	r2, [r7, #20]
 8104edc:	4313      	orrs	r3, r2
 8104ede:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104ee4:	2b04      	cmp	r3, #4
 8104ee6:	d107      	bne.n	8104ef8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ef0:	4313      	orrs	r3, r2
 8104ef2:	697a      	ldr	r2, [r7, #20]
 8104ef4:	4313      	orrs	r3, r2
 8104ef6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104ef8:	4b72      	ldr	r3, [pc, #456]	@ (81050c4 <HAL_DMA_Init+0x428>)
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	0c1b      	lsrs	r3, r3, #16
 8104efe:	041b      	lsls	r3, r3, #16
 8104f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f04:	d328      	bcc.n	8104f58 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104f06:	687b      	ldr	r3, [r7, #4]
 8104f08:	685b      	ldr	r3, [r3, #4]
 8104f0a:	2b28      	cmp	r3, #40	@ 0x28
 8104f0c:	d903      	bls.n	8104f16 <HAL_DMA_Init+0x27a>
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	685b      	ldr	r3, [r3, #4]
 8104f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8104f14:	d917      	bls.n	8104f46 <HAL_DMA_Init+0x2aa>
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	685b      	ldr	r3, [r3, #4]
 8104f1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8104f1c:	d903      	bls.n	8104f26 <HAL_DMA_Init+0x28a>
 8104f1e:	687b      	ldr	r3, [r7, #4]
 8104f20:	685b      	ldr	r3, [r3, #4]
 8104f22:	2b42      	cmp	r3, #66	@ 0x42
 8104f24:	d90f      	bls.n	8104f46 <HAL_DMA_Init+0x2aa>
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	685b      	ldr	r3, [r3, #4]
 8104f2a:	2b46      	cmp	r3, #70	@ 0x46
 8104f2c:	d903      	bls.n	8104f36 <HAL_DMA_Init+0x29a>
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	685b      	ldr	r3, [r3, #4]
 8104f32:	2b48      	cmp	r3, #72	@ 0x48
 8104f34:	d907      	bls.n	8104f46 <HAL_DMA_Init+0x2aa>
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	685b      	ldr	r3, [r3, #4]
 8104f3a:	2b4e      	cmp	r3, #78	@ 0x4e
 8104f3c:	d905      	bls.n	8104f4a <HAL_DMA_Init+0x2ae>
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	685b      	ldr	r3, [r3, #4]
 8104f42:	2b52      	cmp	r3, #82	@ 0x52
 8104f44:	d801      	bhi.n	8104f4a <HAL_DMA_Init+0x2ae>
 8104f46:	2301      	movs	r3, #1
 8104f48:	e000      	b.n	8104f4c <HAL_DMA_Init+0x2b0>
 8104f4a:	2300      	movs	r3, #0
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	d003      	beq.n	8104f58 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8104f50:	697b      	ldr	r3, [r7, #20]
 8104f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104f56:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	681b      	ldr	r3, [r3, #0]
 8104f5c:	697a      	ldr	r2, [r7, #20]
 8104f5e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	695b      	ldr	r3, [r3, #20]
 8104f66:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8104f68:	697b      	ldr	r3, [r7, #20]
 8104f6a:	f023 0307 	bic.w	r3, r3, #7
 8104f6e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104f74:	697a      	ldr	r2, [r7, #20]
 8104f76:	4313      	orrs	r3, r2
 8104f78:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104f7e:	2b04      	cmp	r3, #4
 8104f80:	d117      	bne.n	8104fb2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104f86:	697a      	ldr	r2, [r7, #20]
 8104f88:	4313      	orrs	r3, r2
 8104f8a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	d00e      	beq.n	8104fb2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8104f94:	6878      	ldr	r0, [r7, #4]
 8104f96:	f001 ff29 	bl	8106dec <DMA_CheckFifoParam>
 8104f9a:	4603      	mov	r3, r0
 8104f9c:	2b00      	cmp	r3, #0
 8104f9e:	d008      	beq.n	8104fb2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	2240      	movs	r2, #64	@ 0x40
 8104fa4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	2201      	movs	r2, #1
 8104faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8104fae:	2301      	movs	r3, #1
 8104fb0:	e195      	b.n	81052de <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	697a      	ldr	r2, [r7, #20]
 8104fb8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104fba:	6878      	ldr	r0, [r7, #4]
 8104fbc:	f001 fe64 	bl	8106c88 <DMA_CalcBaseAndBitshift>
 8104fc0:	4603      	mov	r3, r0
 8104fc2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104fc8:	f003 031f 	and.w	r3, r3, #31
 8104fcc:	223f      	movs	r2, #63	@ 0x3f
 8104fce:	409a      	lsls	r2, r3
 8104fd0:	68bb      	ldr	r3, [r7, #8]
 8104fd2:	609a      	str	r2, [r3, #8]
 8104fd4:	e0cb      	b.n	810516e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	4a3b      	ldr	r2, [pc, #236]	@ (81050c8 <HAL_DMA_Init+0x42c>)
 8104fdc:	4293      	cmp	r3, r2
 8104fde:	d022      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	681b      	ldr	r3, [r3, #0]
 8104fe4:	4a39      	ldr	r2, [pc, #228]	@ (81050cc <HAL_DMA_Init+0x430>)
 8104fe6:	4293      	cmp	r3, r2
 8104fe8:	d01d      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	681b      	ldr	r3, [r3, #0]
 8104fee:	4a38      	ldr	r2, [pc, #224]	@ (81050d0 <HAL_DMA_Init+0x434>)
 8104ff0:	4293      	cmp	r3, r2
 8104ff2:	d018      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	681b      	ldr	r3, [r3, #0]
 8104ff8:	4a36      	ldr	r2, [pc, #216]	@ (81050d4 <HAL_DMA_Init+0x438>)
 8104ffa:	4293      	cmp	r3, r2
 8104ffc:	d013      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	681b      	ldr	r3, [r3, #0]
 8105002:	4a35      	ldr	r2, [pc, #212]	@ (81050d8 <HAL_DMA_Init+0x43c>)
 8105004:	4293      	cmp	r3, r2
 8105006:	d00e      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	4a33      	ldr	r2, [pc, #204]	@ (81050dc <HAL_DMA_Init+0x440>)
 810500e:	4293      	cmp	r3, r2
 8105010:	d009      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 8105012:	687b      	ldr	r3, [r7, #4]
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	4a32      	ldr	r2, [pc, #200]	@ (81050e0 <HAL_DMA_Init+0x444>)
 8105018:	4293      	cmp	r3, r2
 810501a:	d004      	beq.n	8105026 <HAL_DMA_Init+0x38a>
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	4a30      	ldr	r2, [pc, #192]	@ (81050e4 <HAL_DMA_Init+0x448>)
 8105022:	4293      	cmp	r3, r2
 8105024:	d101      	bne.n	810502a <HAL_DMA_Init+0x38e>
 8105026:	2301      	movs	r3, #1
 8105028:	e000      	b.n	810502c <HAL_DMA_Init+0x390>
 810502a:	2300      	movs	r3, #0
 810502c:	2b00      	cmp	r3, #0
 810502e:	f000 8095 	beq.w	810515c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	4a24      	ldr	r2, [pc, #144]	@ (81050c8 <HAL_DMA_Init+0x42c>)
 8105038:	4293      	cmp	r3, r2
 810503a:	d021      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	4a22      	ldr	r2, [pc, #136]	@ (81050cc <HAL_DMA_Init+0x430>)
 8105042:	4293      	cmp	r3, r2
 8105044:	d01c      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	681b      	ldr	r3, [r3, #0]
 810504a:	4a21      	ldr	r2, [pc, #132]	@ (81050d0 <HAL_DMA_Init+0x434>)
 810504c:	4293      	cmp	r3, r2
 810504e:	d017      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	4a1f      	ldr	r2, [pc, #124]	@ (81050d4 <HAL_DMA_Init+0x438>)
 8105056:	4293      	cmp	r3, r2
 8105058:	d012      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	681b      	ldr	r3, [r3, #0]
 810505e:	4a1e      	ldr	r2, [pc, #120]	@ (81050d8 <HAL_DMA_Init+0x43c>)
 8105060:	4293      	cmp	r3, r2
 8105062:	d00d      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	4a1c      	ldr	r2, [pc, #112]	@ (81050dc <HAL_DMA_Init+0x440>)
 810506a:	4293      	cmp	r3, r2
 810506c:	d008      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	4a1b      	ldr	r2, [pc, #108]	@ (81050e0 <HAL_DMA_Init+0x444>)
 8105074:	4293      	cmp	r3, r2
 8105076:	d003      	beq.n	8105080 <HAL_DMA_Init+0x3e4>
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	681b      	ldr	r3, [r3, #0]
 810507c:	4a19      	ldr	r2, [pc, #100]	@ (81050e4 <HAL_DMA_Init+0x448>)
 810507e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	2202      	movs	r2, #2
 8105084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	2200      	movs	r2, #0
 810508c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8105098:	697b      	ldr	r3, [r7, #20]
 810509a:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 810509e:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 81050a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	689b      	ldr	r3, [r3, #8]
 81050a8:	2b40      	cmp	r3, #64	@ 0x40
 81050aa:	d01d      	beq.n	81050e8 <HAL_DMA_Init+0x44c>
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	689b      	ldr	r3, [r3, #8]
 81050b0:	2b80      	cmp	r3, #128	@ 0x80
 81050b2:	d102      	bne.n	81050ba <HAL_DMA_Init+0x41e>
 81050b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81050b8:	e017      	b.n	81050ea <HAL_DMA_Init+0x44e>
 81050ba:	2300      	movs	r3, #0
 81050bc:	e015      	b.n	81050ea <HAL_DMA_Init+0x44e>
 81050be:	bf00      	nop
 81050c0:	fe10803f 	.word	0xfe10803f
 81050c4:	5c001000 	.word	0x5c001000
 81050c8:	58025408 	.word	0x58025408
 81050cc:	5802541c 	.word	0x5802541c
 81050d0:	58025430 	.word	0x58025430
 81050d4:	58025444 	.word	0x58025444
 81050d8:	58025458 	.word	0x58025458
 81050dc:	5802546c 	.word	0x5802546c
 81050e0:	58025480 	.word	0x58025480
 81050e4:	58025494 	.word	0x58025494
 81050e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81050ea:	687a      	ldr	r2, [r7, #4]
 81050ec:	68d2      	ldr	r2, [r2, #12]
 81050ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81050f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	691b      	ldr	r3, [r3, #16]
 81050f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81050f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	695b      	ldr	r3, [r3, #20]
 81050fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8105100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	699b      	ldr	r3, [r3, #24]
 8105106:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8105108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	69db      	ldr	r3, [r3, #28]
 810510e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8105110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	6a1b      	ldr	r3, [r3, #32]
 8105116:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8105118:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810511a:	697a      	ldr	r2, [r7, #20]
 810511c:	4313      	orrs	r3, r2
 810511e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	697a      	ldr	r2, [r7, #20]
 8105126:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	461a      	mov	r2, r3
 810512e:	4b6e      	ldr	r3, [pc, #440]	@ (81052e8 <HAL_DMA_Init+0x64c>)
 8105130:	4413      	add	r3, r2
 8105132:	4a6e      	ldr	r2, [pc, #440]	@ (81052ec <HAL_DMA_Init+0x650>)
 8105134:	fba2 2303 	umull	r2, r3, r2, r3
 8105138:	091b      	lsrs	r3, r3, #4
 810513a:	009a      	lsls	r2, r3, #2
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8105140:	6878      	ldr	r0, [r7, #4]
 8105142:	f001 fda1 	bl	8106c88 <DMA_CalcBaseAndBitshift>
 8105146:	4603      	mov	r3, r0
 8105148:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810514e:	f003 031f 	and.w	r3, r3, #31
 8105152:	2201      	movs	r2, #1
 8105154:	409a      	lsls	r2, r3
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	605a      	str	r2, [r3, #4]
 810515a:	e008      	b.n	810516e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	2240      	movs	r2, #64	@ 0x40
 8105160:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	2203      	movs	r2, #3
 8105166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 810516a:	2301      	movs	r3, #1
 810516c:	e0b7      	b.n	81052de <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	4a5f      	ldr	r2, [pc, #380]	@ (81052f0 <HAL_DMA_Init+0x654>)
 8105174:	4293      	cmp	r3, r2
 8105176:	d072      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	4a5d      	ldr	r2, [pc, #372]	@ (81052f4 <HAL_DMA_Init+0x658>)
 810517e:	4293      	cmp	r3, r2
 8105180:	d06d      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	4a5c      	ldr	r2, [pc, #368]	@ (81052f8 <HAL_DMA_Init+0x65c>)
 8105188:	4293      	cmp	r3, r2
 810518a:	d068      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	4a5a      	ldr	r2, [pc, #360]	@ (81052fc <HAL_DMA_Init+0x660>)
 8105192:	4293      	cmp	r3, r2
 8105194:	d063      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	4a59      	ldr	r2, [pc, #356]	@ (8105300 <HAL_DMA_Init+0x664>)
 810519c:	4293      	cmp	r3, r2
 810519e:	d05e      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	4a57      	ldr	r2, [pc, #348]	@ (8105304 <HAL_DMA_Init+0x668>)
 81051a6:	4293      	cmp	r3, r2
 81051a8:	d059      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a56      	ldr	r2, [pc, #344]	@ (8105308 <HAL_DMA_Init+0x66c>)
 81051b0:	4293      	cmp	r3, r2
 81051b2:	d054      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4a54      	ldr	r2, [pc, #336]	@ (810530c <HAL_DMA_Init+0x670>)
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d04f      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	4a53      	ldr	r2, [pc, #332]	@ (8105310 <HAL_DMA_Init+0x674>)
 81051c4:	4293      	cmp	r3, r2
 81051c6:	d04a      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	4a51      	ldr	r2, [pc, #324]	@ (8105314 <HAL_DMA_Init+0x678>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d045      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	4a50      	ldr	r2, [pc, #320]	@ (8105318 <HAL_DMA_Init+0x67c>)
 81051d8:	4293      	cmp	r3, r2
 81051da:	d040      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	4a4e      	ldr	r2, [pc, #312]	@ (810531c <HAL_DMA_Init+0x680>)
 81051e2:	4293      	cmp	r3, r2
 81051e4:	d03b      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	4a4d      	ldr	r2, [pc, #308]	@ (8105320 <HAL_DMA_Init+0x684>)
 81051ec:	4293      	cmp	r3, r2
 81051ee:	d036      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	4a4b      	ldr	r2, [pc, #300]	@ (8105324 <HAL_DMA_Init+0x688>)
 81051f6:	4293      	cmp	r3, r2
 81051f8:	d031      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	4a4a      	ldr	r2, [pc, #296]	@ (8105328 <HAL_DMA_Init+0x68c>)
 8105200:	4293      	cmp	r3, r2
 8105202:	d02c      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	4a48      	ldr	r2, [pc, #288]	@ (810532c <HAL_DMA_Init+0x690>)
 810520a:	4293      	cmp	r3, r2
 810520c:	d027      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	4a47      	ldr	r2, [pc, #284]	@ (8105330 <HAL_DMA_Init+0x694>)
 8105214:	4293      	cmp	r3, r2
 8105216:	d022      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	4a45      	ldr	r2, [pc, #276]	@ (8105334 <HAL_DMA_Init+0x698>)
 810521e:	4293      	cmp	r3, r2
 8105220:	d01d      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	4a44      	ldr	r2, [pc, #272]	@ (8105338 <HAL_DMA_Init+0x69c>)
 8105228:	4293      	cmp	r3, r2
 810522a:	d018      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4a42      	ldr	r2, [pc, #264]	@ (810533c <HAL_DMA_Init+0x6a0>)
 8105232:	4293      	cmp	r3, r2
 8105234:	d013      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	4a41      	ldr	r2, [pc, #260]	@ (8105340 <HAL_DMA_Init+0x6a4>)
 810523c:	4293      	cmp	r3, r2
 810523e:	d00e      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	4a3f      	ldr	r2, [pc, #252]	@ (8105344 <HAL_DMA_Init+0x6a8>)
 8105246:	4293      	cmp	r3, r2
 8105248:	d009      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	4a3e      	ldr	r2, [pc, #248]	@ (8105348 <HAL_DMA_Init+0x6ac>)
 8105250:	4293      	cmp	r3, r2
 8105252:	d004      	beq.n	810525e <HAL_DMA_Init+0x5c2>
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	4a3c      	ldr	r2, [pc, #240]	@ (810534c <HAL_DMA_Init+0x6b0>)
 810525a:	4293      	cmp	r3, r2
 810525c:	d101      	bne.n	8105262 <HAL_DMA_Init+0x5c6>
 810525e:	2301      	movs	r3, #1
 8105260:	e000      	b.n	8105264 <HAL_DMA_Init+0x5c8>
 8105262:	2300      	movs	r3, #0
 8105264:	2b00      	cmp	r3, #0
 8105266:	d032      	beq.n	81052ce <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8105268:	6878      	ldr	r0, [r7, #4]
 810526a:	f001 fe3b 	bl	8106ee4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	689b      	ldr	r3, [r3, #8]
 8105272:	2b80      	cmp	r3, #128	@ 0x80
 8105274:	d102      	bne.n	810527c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8105276:	687b      	ldr	r3, [r7, #4]
 8105278:	2200      	movs	r2, #0
 810527a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	685a      	ldr	r2, [r3, #4]
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105284:	b2d2      	uxtb	r2, r2
 8105286:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810528c:	687a      	ldr	r2, [r7, #4]
 810528e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105290:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8105292:	687b      	ldr	r3, [r7, #4]
 8105294:	685b      	ldr	r3, [r3, #4]
 8105296:	2b00      	cmp	r3, #0
 8105298:	d010      	beq.n	81052bc <HAL_DMA_Init+0x620>
 810529a:	687b      	ldr	r3, [r7, #4]
 810529c:	685b      	ldr	r3, [r3, #4]
 810529e:	2b08      	cmp	r3, #8
 81052a0:	d80c      	bhi.n	81052bc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81052a2:	6878      	ldr	r0, [r7, #4]
 81052a4:	f001 feb8 	bl	8107018 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81052ac:	2200      	movs	r2, #0
 81052ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81052b4:	687a      	ldr	r2, [r7, #4]
 81052b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 81052b8:	605a      	str	r2, [r3, #4]
 81052ba:	e008      	b.n	81052ce <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	2200      	movs	r2, #0
 81052c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	2200      	movs	r2, #0
 81052c6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	2200      	movs	r2, #0
 81052cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	2200      	movs	r2, #0
 81052d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	2201      	movs	r2, #1
 81052d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 81052dc:	2300      	movs	r3, #0
}
 81052de:	4618      	mov	r0, r3
 81052e0:	3718      	adds	r7, #24
 81052e2:	46bd      	mov	sp, r7
 81052e4:	bd80      	pop	{r7, pc}
 81052e6:	bf00      	nop
 81052e8:	a7fdabf8 	.word	0xa7fdabf8
 81052ec:	cccccccd 	.word	0xcccccccd
 81052f0:	40020010 	.word	0x40020010
 81052f4:	40020028 	.word	0x40020028
 81052f8:	40020040 	.word	0x40020040
 81052fc:	40020058 	.word	0x40020058
 8105300:	40020070 	.word	0x40020070
 8105304:	40020088 	.word	0x40020088
 8105308:	400200a0 	.word	0x400200a0
 810530c:	400200b8 	.word	0x400200b8
 8105310:	40020410 	.word	0x40020410
 8105314:	40020428 	.word	0x40020428
 8105318:	40020440 	.word	0x40020440
 810531c:	40020458 	.word	0x40020458
 8105320:	40020470 	.word	0x40020470
 8105324:	40020488 	.word	0x40020488
 8105328:	400204a0 	.word	0x400204a0
 810532c:	400204b8 	.word	0x400204b8
 8105330:	58025408 	.word	0x58025408
 8105334:	5802541c 	.word	0x5802541c
 8105338:	58025430 	.word	0x58025430
 810533c:	58025444 	.word	0x58025444
 8105340:	58025458 	.word	0x58025458
 8105344:	5802546c 	.word	0x5802546c
 8105348:	58025480 	.word	0x58025480
 810534c:	58025494 	.word	0x58025494

08105350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8105350:	b580      	push	{r7, lr}
 8105352:	b086      	sub	sp, #24
 8105354:	af00      	add	r7, sp, #0
 8105356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8105358:	f7fd fbf6 	bl	8102b48 <HAL_GetTick>
 810535c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	2b00      	cmp	r3, #0
 8105362:	d101      	bne.n	8105368 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8105364:	2301      	movs	r3, #1
 8105366:	e2dc      	b.n	8105922 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810536e:	b2db      	uxtb	r3, r3
 8105370:	2b02      	cmp	r3, #2
 8105372:	d008      	beq.n	8105386 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	2280      	movs	r2, #128	@ 0x80
 8105378:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	2200      	movs	r2, #0
 810537e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8105382:	2301      	movs	r3, #1
 8105384:	e2cd      	b.n	8105922 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	681b      	ldr	r3, [r3, #0]
 810538a:	4a76      	ldr	r2, [pc, #472]	@ (8105564 <HAL_DMA_Abort+0x214>)
 810538c:	4293      	cmp	r3, r2
 810538e:	d04a      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	681b      	ldr	r3, [r3, #0]
 8105394:	4a74      	ldr	r2, [pc, #464]	@ (8105568 <HAL_DMA_Abort+0x218>)
 8105396:	4293      	cmp	r3, r2
 8105398:	d045      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	4a73      	ldr	r2, [pc, #460]	@ (810556c <HAL_DMA_Abort+0x21c>)
 81053a0:	4293      	cmp	r3, r2
 81053a2:	d040      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	4a71      	ldr	r2, [pc, #452]	@ (8105570 <HAL_DMA_Abort+0x220>)
 81053aa:	4293      	cmp	r3, r2
 81053ac:	d03b      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053ae:	687b      	ldr	r3, [r7, #4]
 81053b0:	681b      	ldr	r3, [r3, #0]
 81053b2:	4a70      	ldr	r2, [pc, #448]	@ (8105574 <HAL_DMA_Abort+0x224>)
 81053b4:	4293      	cmp	r3, r2
 81053b6:	d036      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	681b      	ldr	r3, [r3, #0]
 81053bc:	4a6e      	ldr	r2, [pc, #440]	@ (8105578 <HAL_DMA_Abort+0x228>)
 81053be:	4293      	cmp	r3, r2
 81053c0:	d031      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	681b      	ldr	r3, [r3, #0]
 81053c6:	4a6d      	ldr	r2, [pc, #436]	@ (810557c <HAL_DMA_Abort+0x22c>)
 81053c8:	4293      	cmp	r3, r2
 81053ca:	d02c      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	4a6b      	ldr	r2, [pc, #428]	@ (8105580 <HAL_DMA_Abort+0x230>)
 81053d2:	4293      	cmp	r3, r2
 81053d4:	d027      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	4a6a      	ldr	r2, [pc, #424]	@ (8105584 <HAL_DMA_Abort+0x234>)
 81053dc:	4293      	cmp	r3, r2
 81053de:	d022      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053e0:	687b      	ldr	r3, [r7, #4]
 81053e2:	681b      	ldr	r3, [r3, #0]
 81053e4:	4a68      	ldr	r2, [pc, #416]	@ (8105588 <HAL_DMA_Abort+0x238>)
 81053e6:	4293      	cmp	r3, r2
 81053e8:	d01d      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	681b      	ldr	r3, [r3, #0]
 81053ee:	4a67      	ldr	r2, [pc, #412]	@ (810558c <HAL_DMA_Abort+0x23c>)
 81053f0:	4293      	cmp	r3, r2
 81053f2:	d018      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	4a65      	ldr	r2, [pc, #404]	@ (8105590 <HAL_DMA_Abort+0x240>)
 81053fa:	4293      	cmp	r3, r2
 81053fc:	d013      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	681b      	ldr	r3, [r3, #0]
 8105402:	4a64      	ldr	r2, [pc, #400]	@ (8105594 <HAL_DMA_Abort+0x244>)
 8105404:	4293      	cmp	r3, r2
 8105406:	d00e      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 8105408:	687b      	ldr	r3, [r7, #4]
 810540a:	681b      	ldr	r3, [r3, #0]
 810540c:	4a62      	ldr	r2, [pc, #392]	@ (8105598 <HAL_DMA_Abort+0x248>)
 810540e:	4293      	cmp	r3, r2
 8105410:	d009      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	4a61      	ldr	r2, [pc, #388]	@ (810559c <HAL_DMA_Abort+0x24c>)
 8105418:	4293      	cmp	r3, r2
 810541a:	d004      	beq.n	8105426 <HAL_DMA_Abort+0xd6>
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	4a5f      	ldr	r2, [pc, #380]	@ (81055a0 <HAL_DMA_Abort+0x250>)
 8105422:	4293      	cmp	r3, r2
 8105424:	d101      	bne.n	810542a <HAL_DMA_Abort+0xda>
 8105426:	2301      	movs	r3, #1
 8105428:	e000      	b.n	810542c <HAL_DMA_Abort+0xdc>
 810542a:	2300      	movs	r3, #0
 810542c:	2b00      	cmp	r3, #0
 810542e:	d013      	beq.n	8105458 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	681a      	ldr	r2, [r3, #0]
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	f022 021e 	bic.w	r2, r2, #30
 810543e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	695a      	ldr	r2, [r3, #20]
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
 810544a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810544e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	617b      	str	r3, [r7, #20]
 8105456:	e00a      	b.n	810546e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	681a      	ldr	r2, [r3, #0]
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	681b      	ldr	r3, [r3, #0]
 8105462:	f022 020e 	bic.w	r2, r2, #14
 8105466:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4a3c      	ldr	r2, [pc, #240]	@ (8105564 <HAL_DMA_Abort+0x214>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d072      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a3a      	ldr	r2, [pc, #232]	@ (8105568 <HAL_DMA_Abort+0x218>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d06d      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a39      	ldr	r2, [pc, #228]	@ (810556c <HAL_DMA_Abort+0x21c>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d068      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a37      	ldr	r2, [pc, #220]	@ (8105570 <HAL_DMA_Abort+0x220>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d063      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a36      	ldr	r2, [pc, #216]	@ (8105574 <HAL_DMA_Abort+0x224>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d05e      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a34      	ldr	r2, [pc, #208]	@ (8105578 <HAL_DMA_Abort+0x228>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d059      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a33      	ldr	r2, [pc, #204]	@ (810557c <HAL_DMA_Abort+0x22c>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d054      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	4a31      	ldr	r2, [pc, #196]	@ (8105580 <HAL_DMA_Abort+0x230>)
 81054ba:	4293      	cmp	r3, r2
 81054bc:	d04f      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	4a30      	ldr	r2, [pc, #192]	@ (8105584 <HAL_DMA_Abort+0x234>)
 81054c4:	4293      	cmp	r3, r2
 81054c6:	d04a      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	4a2e      	ldr	r2, [pc, #184]	@ (8105588 <HAL_DMA_Abort+0x238>)
 81054ce:	4293      	cmp	r3, r2
 81054d0:	d045      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	4a2d      	ldr	r2, [pc, #180]	@ (810558c <HAL_DMA_Abort+0x23c>)
 81054d8:	4293      	cmp	r3, r2
 81054da:	d040      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	4a2b      	ldr	r2, [pc, #172]	@ (8105590 <HAL_DMA_Abort+0x240>)
 81054e2:	4293      	cmp	r3, r2
 81054e4:	d03b      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	4a2a      	ldr	r2, [pc, #168]	@ (8105594 <HAL_DMA_Abort+0x244>)
 81054ec:	4293      	cmp	r3, r2
 81054ee:	d036      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	4a28      	ldr	r2, [pc, #160]	@ (8105598 <HAL_DMA_Abort+0x248>)
 81054f6:	4293      	cmp	r3, r2
 81054f8:	d031      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	681b      	ldr	r3, [r3, #0]
 81054fe:	4a27      	ldr	r2, [pc, #156]	@ (810559c <HAL_DMA_Abort+0x24c>)
 8105500:	4293      	cmp	r3, r2
 8105502:	d02c      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	4a25      	ldr	r2, [pc, #148]	@ (81055a0 <HAL_DMA_Abort+0x250>)
 810550a:	4293      	cmp	r3, r2
 810550c:	d027      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	4a24      	ldr	r2, [pc, #144]	@ (81055a4 <HAL_DMA_Abort+0x254>)
 8105514:	4293      	cmp	r3, r2
 8105516:	d022      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	4a22      	ldr	r2, [pc, #136]	@ (81055a8 <HAL_DMA_Abort+0x258>)
 810551e:	4293      	cmp	r3, r2
 8105520:	d01d      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	681b      	ldr	r3, [r3, #0]
 8105526:	4a21      	ldr	r2, [pc, #132]	@ (81055ac <HAL_DMA_Abort+0x25c>)
 8105528:	4293      	cmp	r3, r2
 810552a:	d018      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	681b      	ldr	r3, [r3, #0]
 8105530:	4a1f      	ldr	r2, [pc, #124]	@ (81055b0 <HAL_DMA_Abort+0x260>)
 8105532:	4293      	cmp	r3, r2
 8105534:	d013      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105536:	687b      	ldr	r3, [r7, #4]
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	4a1e      	ldr	r2, [pc, #120]	@ (81055b4 <HAL_DMA_Abort+0x264>)
 810553c:	4293      	cmp	r3, r2
 810553e:	d00e      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	4a1c      	ldr	r2, [pc, #112]	@ (81055b8 <HAL_DMA_Abort+0x268>)
 8105546:	4293      	cmp	r3, r2
 8105548:	d009      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	4a1b      	ldr	r2, [pc, #108]	@ (81055bc <HAL_DMA_Abort+0x26c>)
 8105550:	4293      	cmp	r3, r2
 8105552:	d004      	beq.n	810555e <HAL_DMA_Abort+0x20e>
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	4a19      	ldr	r2, [pc, #100]	@ (81055c0 <HAL_DMA_Abort+0x270>)
 810555a:	4293      	cmp	r3, r2
 810555c:	d132      	bne.n	81055c4 <HAL_DMA_Abort+0x274>
 810555e:	2301      	movs	r3, #1
 8105560:	e031      	b.n	81055c6 <HAL_DMA_Abort+0x276>
 8105562:	bf00      	nop
 8105564:	40020010 	.word	0x40020010
 8105568:	40020028 	.word	0x40020028
 810556c:	40020040 	.word	0x40020040
 8105570:	40020058 	.word	0x40020058
 8105574:	40020070 	.word	0x40020070
 8105578:	40020088 	.word	0x40020088
 810557c:	400200a0 	.word	0x400200a0
 8105580:	400200b8 	.word	0x400200b8
 8105584:	40020410 	.word	0x40020410
 8105588:	40020428 	.word	0x40020428
 810558c:	40020440 	.word	0x40020440
 8105590:	40020458 	.word	0x40020458
 8105594:	40020470 	.word	0x40020470
 8105598:	40020488 	.word	0x40020488
 810559c:	400204a0 	.word	0x400204a0
 81055a0:	400204b8 	.word	0x400204b8
 81055a4:	58025408 	.word	0x58025408
 81055a8:	5802541c 	.word	0x5802541c
 81055ac:	58025430 	.word	0x58025430
 81055b0:	58025444 	.word	0x58025444
 81055b4:	58025458 	.word	0x58025458
 81055b8:	5802546c 	.word	0x5802546c
 81055bc:	58025480 	.word	0x58025480
 81055c0:	58025494 	.word	0x58025494
 81055c4:	2300      	movs	r3, #0
 81055c6:	2b00      	cmp	r3, #0
 81055c8:	d007      	beq.n	81055da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81055ce:	681a      	ldr	r2, [r3, #0]
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81055d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81055d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	681b      	ldr	r3, [r3, #0]
 81055de:	4a6d      	ldr	r2, [pc, #436]	@ (8105794 <HAL_DMA_Abort+0x444>)
 81055e0:	4293      	cmp	r3, r2
 81055e2:	d04a      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	4a6b      	ldr	r2, [pc, #428]	@ (8105798 <HAL_DMA_Abort+0x448>)
 81055ea:	4293      	cmp	r3, r2
 81055ec:	d045      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	4a6a      	ldr	r2, [pc, #424]	@ (810579c <HAL_DMA_Abort+0x44c>)
 81055f4:	4293      	cmp	r3, r2
 81055f6:	d040      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	4a68      	ldr	r2, [pc, #416]	@ (81057a0 <HAL_DMA_Abort+0x450>)
 81055fe:	4293      	cmp	r3, r2
 8105600:	d03b      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	4a67      	ldr	r2, [pc, #412]	@ (81057a4 <HAL_DMA_Abort+0x454>)
 8105608:	4293      	cmp	r3, r2
 810560a:	d036      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	4a65      	ldr	r2, [pc, #404]	@ (81057a8 <HAL_DMA_Abort+0x458>)
 8105612:	4293      	cmp	r3, r2
 8105614:	d031      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	681b      	ldr	r3, [r3, #0]
 810561a:	4a64      	ldr	r2, [pc, #400]	@ (81057ac <HAL_DMA_Abort+0x45c>)
 810561c:	4293      	cmp	r3, r2
 810561e:	d02c      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	4a62      	ldr	r2, [pc, #392]	@ (81057b0 <HAL_DMA_Abort+0x460>)
 8105626:	4293      	cmp	r3, r2
 8105628:	d027      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	681b      	ldr	r3, [r3, #0]
 810562e:	4a61      	ldr	r2, [pc, #388]	@ (81057b4 <HAL_DMA_Abort+0x464>)
 8105630:	4293      	cmp	r3, r2
 8105632:	d022      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	681b      	ldr	r3, [r3, #0]
 8105638:	4a5f      	ldr	r2, [pc, #380]	@ (81057b8 <HAL_DMA_Abort+0x468>)
 810563a:	4293      	cmp	r3, r2
 810563c:	d01d      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	681b      	ldr	r3, [r3, #0]
 8105642:	4a5e      	ldr	r2, [pc, #376]	@ (81057bc <HAL_DMA_Abort+0x46c>)
 8105644:	4293      	cmp	r3, r2
 8105646:	d018      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	681b      	ldr	r3, [r3, #0]
 810564c:	4a5c      	ldr	r2, [pc, #368]	@ (81057c0 <HAL_DMA_Abort+0x470>)
 810564e:	4293      	cmp	r3, r2
 8105650:	d013      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	681b      	ldr	r3, [r3, #0]
 8105656:	4a5b      	ldr	r2, [pc, #364]	@ (81057c4 <HAL_DMA_Abort+0x474>)
 8105658:	4293      	cmp	r3, r2
 810565a:	d00e      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	681b      	ldr	r3, [r3, #0]
 8105660:	4a59      	ldr	r2, [pc, #356]	@ (81057c8 <HAL_DMA_Abort+0x478>)
 8105662:	4293      	cmp	r3, r2
 8105664:	d009      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	4a58      	ldr	r2, [pc, #352]	@ (81057cc <HAL_DMA_Abort+0x47c>)
 810566c:	4293      	cmp	r3, r2
 810566e:	d004      	beq.n	810567a <HAL_DMA_Abort+0x32a>
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	681b      	ldr	r3, [r3, #0]
 8105674:	4a56      	ldr	r2, [pc, #344]	@ (81057d0 <HAL_DMA_Abort+0x480>)
 8105676:	4293      	cmp	r3, r2
 8105678:	d108      	bne.n	810568c <HAL_DMA_Abort+0x33c>
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	681a      	ldr	r2, [r3, #0]
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	f022 0201 	bic.w	r2, r2, #1
 8105688:	601a      	str	r2, [r3, #0]
 810568a:	e007      	b.n	810569c <HAL_DMA_Abort+0x34c>
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	681a      	ldr	r2, [r3, #0]
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	f022 0201 	bic.w	r2, r2, #1
 810569a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810569c:	e013      	b.n	81056c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810569e:	f7fd fa53 	bl	8102b48 <HAL_GetTick>
 81056a2:	4602      	mov	r2, r0
 81056a4:	693b      	ldr	r3, [r7, #16]
 81056a6:	1ad3      	subs	r3, r2, r3
 81056a8:	2b05      	cmp	r3, #5
 81056aa:	d90c      	bls.n	81056c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	2220      	movs	r2, #32
 81056b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	2203      	movs	r2, #3
 81056b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	2200      	movs	r2, #0
 81056be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 81056c2:	2301      	movs	r3, #1
 81056c4:	e12d      	b.n	8105922 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81056c6:	697b      	ldr	r3, [r7, #20]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	f003 0301 	and.w	r3, r3, #1
 81056ce:	2b00      	cmp	r3, #0
 81056d0:	d1e5      	bne.n	810569e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	4a2f      	ldr	r2, [pc, #188]	@ (8105794 <HAL_DMA_Abort+0x444>)
 81056d8:	4293      	cmp	r3, r2
 81056da:	d04a      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	4a2d      	ldr	r2, [pc, #180]	@ (8105798 <HAL_DMA_Abort+0x448>)
 81056e2:	4293      	cmp	r3, r2
 81056e4:	d045      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	4a2c      	ldr	r2, [pc, #176]	@ (810579c <HAL_DMA_Abort+0x44c>)
 81056ec:	4293      	cmp	r3, r2
 81056ee:	d040      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	4a2a      	ldr	r2, [pc, #168]	@ (81057a0 <HAL_DMA_Abort+0x450>)
 81056f6:	4293      	cmp	r3, r2
 81056f8:	d03b      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	4a29      	ldr	r2, [pc, #164]	@ (81057a4 <HAL_DMA_Abort+0x454>)
 8105700:	4293      	cmp	r3, r2
 8105702:	d036      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	4a27      	ldr	r2, [pc, #156]	@ (81057a8 <HAL_DMA_Abort+0x458>)
 810570a:	4293      	cmp	r3, r2
 810570c:	d031      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	4a26      	ldr	r2, [pc, #152]	@ (81057ac <HAL_DMA_Abort+0x45c>)
 8105714:	4293      	cmp	r3, r2
 8105716:	d02c      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	4a24      	ldr	r2, [pc, #144]	@ (81057b0 <HAL_DMA_Abort+0x460>)
 810571e:	4293      	cmp	r3, r2
 8105720:	d027      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681b      	ldr	r3, [r3, #0]
 8105726:	4a23      	ldr	r2, [pc, #140]	@ (81057b4 <HAL_DMA_Abort+0x464>)
 8105728:	4293      	cmp	r3, r2
 810572a:	d022      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	4a21      	ldr	r2, [pc, #132]	@ (81057b8 <HAL_DMA_Abort+0x468>)
 8105732:	4293      	cmp	r3, r2
 8105734:	d01d      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	681b      	ldr	r3, [r3, #0]
 810573a:	4a20      	ldr	r2, [pc, #128]	@ (81057bc <HAL_DMA_Abort+0x46c>)
 810573c:	4293      	cmp	r3, r2
 810573e:	d018      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	4a1e      	ldr	r2, [pc, #120]	@ (81057c0 <HAL_DMA_Abort+0x470>)
 8105746:	4293      	cmp	r3, r2
 8105748:	d013      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	681b      	ldr	r3, [r3, #0]
 810574e:	4a1d      	ldr	r2, [pc, #116]	@ (81057c4 <HAL_DMA_Abort+0x474>)
 8105750:	4293      	cmp	r3, r2
 8105752:	d00e      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	4a1b      	ldr	r2, [pc, #108]	@ (81057c8 <HAL_DMA_Abort+0x478>)
 810575a:	4293      	cmp	r3, r2
 810575c:	d009      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	4a1a      	ldr	r2, [pc, #104]	@ (81057cc <HAL_DMA_Abort+0x47c>)
 8105764:	4293      	cmp	r3, r2
 8105766:	d004      	beq.n	8105772 <HAL_DMA_Abort+0x422>
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	681b      	ldr	r3, [r3, #0]
 810576c:	4a18      	ldr	r2, [pc, #96]	@ (81057d0 <HAL_DMA_Abort+0x480>)
 810576e:	4293      	cmp	r3, r2
 8105770:	d101      	bne.n	8105776 <HAL_DMA_Abort+0x426>
 8105772:	2301      	movs	r3, #1
 8105774:	e000      	b.n	8105778 <HAL_DMA_Abort+0x428>
 8105776:	2300      	movs	r3, #0
 8105778:	2b00      	cmp	r3, #0
 810577a:	d02b      	beq.n	81057d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105780:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105786:	f003 031f 	and.w	r3, r3, #31
 810578a:	223f      	movs	r2, #63	@ 0x3f
 810578c:	409a      	lsls	r2, r3
 810578e:	68bb      	ldr	r3, [r7, #8]
 8105790:	609a      	str	r2, [r3, #8]
 8105792:	e02a      	b.n	81057ea <HAL_DMA_Abort+0x49a>
 8105794:	40020010 	.word	0x40020010
 8105798:	40020028 	.word	0x40020028
 810579c:	40020040 	.word	0x40020040
 81057a0:	40020058 	.word	0x40020058
 81057a4:	40020070 	.word	0x40020070
 81057a8:	40020088 	.word	0x40020088
 81057ac:	400200a0 	.word	0x400200a0
 81057b0:	400200b8 	.word	0x400200b8
 81057b4:	40020410 	.word	0x40020410
 81057b8:	40020428 	.word	0x40020428
 81057bc:	40020440 	.word	0x40020440
 81057c0:	40020458 	.word	0x40020458
 81057c4:	40020470 	.word	0x40020470
 81057c8:	40020488 	.word	0x40020488
 81057cc:	400204a0 	.word	0x400204a0
 81057d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81057de:	f003 031f 	and.w	r3, r3, #31
 81057e2:	2201      	movs	r2, #1
 81057e4:	409a      	lsls	r2, r3
 81057e6:	68fb      	ldr	r3, [r7, #12]
 81057e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	4a4f      	ldr	r2, [pc, #316]	@ (810592c <HAL_DMA_Abort+0x5dc>)
 81057f0:	4293      	cmp	r3, r2
 81057f2:	d072      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	681b      	ldr	r3, [r3, #0]
 81057f8:	4a4d      	ldr	r2, [pc, #308]	@ (8105930 <HAL_DMA_Abort+0x5e0>)
 81057fa:	4293      	cmp	r3, r2
 81057fc:	d06d      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	681b      	ldr	r3, [r3, #0]
 8105802:	4a4c      	ldr	r2, [pc, #304]	@ (8105934 <HAL_DMA_Abort+0x5e4>)
 8105804:	4293      	cmp	r3, r2
 8105806:	d068      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	4a4a      	ldr	r2, [pc, #296]	@ (8105938 <HAL_DMA_Abort+0x5e8>)
 810580e:	4293      	cmp	r3, r2
 8105810:	d063      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	4a49      	ldr	r2, [pc, #292]	@ (810593c <HAL_DMA_Abort+0x5ec>)
 8105818:	4293      	cmp	r3, r2
 810581a:	d05e      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	4a47      	ldr	r2, [pc, #284]	@ (8105940 <HAL_DMA_Abort+0x5f0>)
 8105822:	4293      	cmp	r3, r2
 8105824:	d059      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	4a46      	ldr	r2, [pc, #280]	@ (8105944 <HAL_DMA_Abort+0x5f4>)
 810582c:	4293      	cmp	r3, r2
 810582e:	d054      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	4a44      	ldr	r2, [pc, #272]	@ (8105948 <HAL_DMA_Abort+0x5f8>)
 8105836:	4293      	cmp	r3, r2
 8105838:	d04f      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	4a43      	ldr	r2, [pc, #268]	@ (810594c <HAL_DMA_Abort+0x5fc>)
 8105840:	4293      	cmp	r3, r2
 8105842:	d04a      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	4a41      	ldr	r2, [pc, #260]	@ (8105950 <HAL_DMA_Abort+0x600>)
 810584a:	4293      	cmp	r3, r2
 810584c:	d045      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	4a40      	ldr	r2, [pc, #256]	@ (8105954 <HAL_DMA_Abort+0x604>)
 8105854:	4293      	cmp	r3, r2
 8105856:	d040      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	4a3e      	ldr	r2, [pc, #248]	@ (8105958 <HAL_DMA_Abort+0x608>)
 810585e:	4293      	cmp	r3, r2
 8105860:	d03b      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	4a3d      	ldr	r2, [pc, #244]	@ (810595c <HAL_DMA_Abort+0x60c>)
 8105868:	4293      	cmp	r3, r2
 810586a:	d036      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	4a3b      	ldr	r2, [pc, #236]	@ (8105960 <HAL_DMA_Abort+0x610>)
 8105872:	4293      	cmp	r3, r2
 8105874:	d031      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	4a3a      	ldr	r2, [pc, #232]	@ (8105964 <HAL_DMA_Abort+0x614>)
 810587c:	4293      	cmp	r3, r2
 810587e:	d02c      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	4a38      	ldr	r2, [pc, #224]	@ (8105968 <HAL_DMA_Abort+0x618>)
 8105886:	4293      	cmp	r3, r2
 8105888:	d027      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	4a37      	ldr	r2, [pc, #220]	@ (810596c <HAL_DMA_Abort+0x61c>)
 8105890:	4293      	cmp	r3, r2
 8105892:	d022      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	4a35      	ldr	r2, [pc, #212]	@ (8105970 <HAL_DMA_Abort+0x620>)
 810589a:	4293      	cmp	r3, r2
 810589c:	d01d      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	4a34      	ldr	r2, [pc, #208]	@ (8105974 <HAL_DMA_Abort+0x624>)
 81058a4:	4293      	cmp	r3, r2
 81058a6:	d018      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	4a32      	ldr	r2, [pc, #200]	@ (8105978 <HAL_DMA_Abort+0x628>)
 81058ae:	4293      	cmp	r3, r2
 81058b0:	d013      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	4a31      	ldr	r2, [pc, #196]	@ (810597c <HAL_DMA_Abort+0x62c>)
 81058b8:	4293      	cmp	r3, r2
 81058ba:	d00e      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	4a2f      	ldr	r2, [pc, #188]	@ (8105980 <HAL_DMA_Abort+0x630>)
 81058c2:	4293      	cmp	r3, r2
 81058c4:	d009      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	4a2e      	ldr	r2, [pc, #184]	@ (8105984 <HAL_DMA_Abort+0x634>)
 81058cc:	4293      	cmp	r3, r2
 81058ce:	d004      	beq.n	81058da <HAL_DMA_Abort+0x58a>
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	4a2c      	ldr	r2, [pc, #176]	@ (8105988 <HAL_DMA_Abort+0x638>)
 81058d6:	4293      	cmp	r3, r2
 81058d8:	d101      	bne.n	81058de <HAL_DMA_Abort+0x58e>
 81058da:	2301      	movs	r3, #1
 81058dc:	e000      	b.n	81058e0 <HAL_DMA_Abort+0x590>
 81058de:	2300      	movs	r3, #0
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d015      	beq.n	8105910 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81058e8:	687a      	ldr	r2, [r7, #4]
 81058ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 81058ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81058f2:	2b00      	cmp	r3, #0
 81058f4:	d00c      	beq.n	8105910 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81058fa:	681a      	ldr	r2, [r3, #0]
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105904:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810590a:	687a      	ldr	r2, [r7, #4]
 810590c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810590e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	2201      	movs	r2, #1
 8105914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	2200      	movs	r2, #0
 810591c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8105920:	2300      	movs	r3, #0
}
 8105922:	4618      	mov	r0, r3
 8105924:	3718      	adds	r7, #24
 8105926:	46bd      	mov	sp, r7
 8105928:	bd80      	pop	{r7, pc}
 810592a:	bf00      	nop
 810592c:	40020010 	.word	0x40020010
 8105930:	40020028 	.word	0x40020028
 8105934:	40020040 	.word	0x40020040
 8105938:	40020058 	.word	0x40020058
 810593c:	40020070 	.word	0x40020070
 8105940:	40020088 	.word	0x40020088
 8105944:	400200a0 	.word	0x400200a0
 8105948:	400200b8 	.word	0x400200b8
 810594c:	40020410 	.word	0x40020410
 8105950:	40020428 	.word	0x40020428
 8105954:	40020440 	.word	0x40020440
 8105958:	40020458 	.word	0x40020458
 810595c:	40020470 	.word	0x40020470
 8105960:	40020488 	.word	0x40020488
 8105964:	400204a0 	.word	0x400204a0
 8105968:	400204b8 	.word	0x400204b8
 810596c:	58025408 	.word	0x58025408
 8105970:	5802541c 	.word	0x5802541c
 8105974:	58025430 	.word	0x58025430
 8105978:	58025444 	.word	0x58025444
 810597c:	58025458 	.word	0x58025458
 8105980:	5802546c 	.word	0x5802546c
 8105984:	58025480 	.word	0x58025480
 8105988:	58025494 	.word	0x58025494

0810598c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 810598c:	b580      	push	{r7, lr}
 810598e:	b084      	sub	sp, #16
 8105990:	af00      	add	r7, sp, #0
 8105992:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	2b00      	cmp	r3, #0
 8105998:	d101      	bne.n	810599e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810599a:	2301      	movs	r3, #1
 810599c:	e237      	b.n	8105e0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81059a4:	b2db      	uxtb	r3, r3
 81059a6:	2b02      	cmp	r3, #2
 81059a8:	d004      	beq.n	81059b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	2280      	movs	r2, #128	@ 0x80
 81059ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81059b0:	2301      	movs	r3, #1
 81059b2:	e22c      	b.n	8105e0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	4a5c      	ldr	r2, [pc, #368]	@ (8105b2c <HAL_DMA_Abort_IT+0x1a0>)
 81059ba:	4293      	cmp	r3, r2
 81059bc:	d04a      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	4a5b      	ldr	r2, [pc, #364]	@ (8105b30 <HAL_DMA_Abort_IT+0x1a4>)
 81059c4:	4293      	cmp	r3, r2
 81059c6:	d045      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	4a59      	ldr	r2, [pc, #356]	@ (8105b34 <HAL_DMA_Abort_IT+0x1a8>)
 81059ce:	4293      	cmp	r3, r2
 81059d0:	d040      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	4a58      	ldr	r2, [pc, #352]	@ (8105b38 <HAL_DMA_Abort_IT+0x1ac>)
 81059d8:	4293      	cmp	r3, r2
 81059da:	d03b      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	4a56      	ldr	r2, [pc, #344]	@ (8105b3c <HAL_DMA_Abort_IT+0x1b0>)
 81059e2:	4293      	cmp	r3, r2
 81059e4:	d036      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	4a55      	ldr	r2, [pc, #340]	@ (8105b40 <HAL_DMA_Abort_IT+0x1b4>)
 81059ec:	4293      	cmp	r3, r2
 81059ee:	d031      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	681b      	ldr	r3, [r3, #0]
 81059f4:	4a53      	ldr	r2, [pc, #332]	@ (8105b44 <HAL_DMA_Abort_IT+0x1b8>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	d02c      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4a52      	ldr	r2, [pc, #328]	@ (8105b48 <HAL_DMA_Abort_IT+0x1bc>)
 8105a00:	4293      	cmp	r3, r2
 8105a02:	d027      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	4a50      	ldr	r2, [pc, #320]	@ (8105b4c <HAL_DMA_Abort_IT+0x1c0>)
 8105a0a:	4293      	cmp	r3, r2
 8105a0c:	d022      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	4a4f      	ldr	r2, [pc, #316]	@ (8105b50 <HAL_DMA_Abort_IT+0x1c4>)
 8105a14:	4293      	cmp	r3, r2
 8105a16:	d01d      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8105b54 <HAL_DMA_Abort_IT+0x1c8>)
 8105a1e:	4293      	cmp	r3, r2
 8105a20:	d018      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	4a4c      	ldr	r2, [pc, #304]	@ (8105b58 <HAL_DMA_Abort_IT+0x1cc>)
 8105a28:	4293      	cmp	r3, r2
 8105a2a:	d013      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	4a4a      	ldr	r2, [pc, #296]	@ (8105b5c <HAL_DMA_Abort_IT+0x1d0>)
 8105a32:	4293      	cmp	r3, r2
 8105a34:	d00e      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	4a49      	ldr	r2, [pc, #292]	@ (8105b60 <HAL_DMA_Abort_IT+0x1d4>)
 8105a3c:	4293      	cmp	r3, r2
 8105a3e:	d009      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	4a47      	ldr	r2, [pc, #284]	@ (8105b64 <HAL_DMA_Abort_IT+0x1d8>)
 8105a46:	4293      	cmp	r3, r2
 8105a48:	d004      	beq.n	8105a54 <HAL_DMA_Abort_IT+0xc8>
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	4a46      	ldr	r2, [pc, #280]	@ (8105b68 <HAL_DMA_Abort_IT+0x1dc>)
 8105a50:	4293      	cmp	r3, r2
 8105a52:	d101      	bne.n	8105a58 <HAL_DMA_Abort_IT+0xcc>
 8105a54:	2301      	movs	r3, #1
 8105a56:	e000      	b.n	8105a5a <HAL_DMA_Abort_IT+0xce>
 8105a58:	2300      	movs	r3, #0
 8105a5a:	2b00      	cmp	r3, #0
 8105a5c:	f000 8086 	beq.w	8105b6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	2204      	movs	r2, #4
 8105a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8105b2c <HAL_DMA_Abort_IT+0x1a0>)
 8105a6e:	4293      	cmp	r3, r2
 8105a70:	d04a      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	4a2e      	ldr	r2, [pc, #184]	@ (8105b30 <HAL_DMA_Abort_IT+0x1a4>)
 8105a78:	4293      	cmp	r3, r2
 8105a7a:	d045      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	4a2c      	ldr	r2, [pc, #176]	@ (8105b34 <HAL_DMA_Abort_IT+0x1a8>)
 8105a82:	4293      	cmp	r3, r2
 8105a84:	d040      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	681b      	ldr	r3, [r3, #0]
 8105a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8105b38 <HAL_DMA_Abort_IT+0x1ac>)
 8105a8c:	4293      	cmp	r3, r2
 8105a8e:	d03b      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105a90:	687b      	ldr	r3, [r7, #4]
 8105a92:	681b      	ldr	r3, [r3, #0]
 8105a94:	4a29      	ldr	r2, [pc, #164]	@ (8105b3c <HAL_DMA_Abort_IT+0x1b0>)
 8105a96:	4293      	cmp	r3, r2
 8105a98:	d036      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	4a28      	ldr	r2, [pc, #160]	@ (8105b40 <HAL_DMA_Abort_IT+0x1b4>)
 8105aa0:	4293      	cmp	r3, r2
 8105aa2:	d031      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	681b      	ldr	r3, [r3, #0]
 8105aa8:	4a26      	ldr	r2, [pc, #152]	@ (8105b44 <HAL_DMA_Abort_IT+0x1b8>)
 8105aaa:	4293      	cmp	r3, r2
 8105aac:	d02c      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	4a25      	ldr	r2, [pc, #148]	@ (8105b48 <HAL_DMA_Abort_IT+0x1bc>)
 8105ab4:	4293      	cmp	r3, r2
 8105ab6:	d027      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	4a23      	ldr	r2, [pc, #140]	@ (8105b4c <HAL_DMA_Abort_IT+0x1c0>)
 8105abe:	4293      	cmp	r3, r2
 8105ac0:	d022      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	681b      	ldr	r3, [r3, #0]
 8105ac6:	4a22      	ldr	r2, [pc, #136]	@ (8105b50 <HAL_DMA_Abort_IT+0x1c4>)
 8105ac8:	4293      	cmp	r3, r2
 8105aca:	d01d      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	4a20      	ldr	r2, [pc, #128]	@ (8105b54 <HAL_DMA_Abort_IT+0x1c8>)
 8105ad2:	4293      	cmp	r3, r2
 8105ad4:	d018      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	4a1f      	ldr	r2, [pc, #124]	@ (8105b58 <HAL_DMA_Abort_IT+0x1cc>)
 8105adc:	4293      	cmp	r3, r2
 8105ade:	d013      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	681b      	ldr	r3, [r3, #0]
 8105ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8105b5c <HAL_DMA_Abort_IT+0x1d0>)
 8105ae6:	4293      	cmp	r3, r2
 8105ae8:	d00e      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	681b      	ldr	r3, [r3, #0]
 8105aee:	4a1c      	ldr	r2, [pc, #112]	@ (8105b60 <HAL_DMA_Abort_IT+0x1d4>)
 8105af0:	4293      	cmp	r3, r2
 8105af2:	d009      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	681b      	ldr	r3, [r3, #0]
 8105af8:	4a1a      	ldr	r2, [pc, #104]	@ (8105b64 <HAL_DMA_Abort_IT+0x1d8>)
 8105afa:	4293      	cmp	r3, r2
 8105afc:	d004      	beq.n	8105b08 <HAL_DMA_Abort_IT+0x17c>
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	681b      	ldr	r3, [r3, #0]
 8105b02:	4a19      	ldr	r2, [pc, #100]	@ (8105b68 <HAL_DMA_Abort_IT+0x1dc>)
 8105b04:	4293      	cmp	r3, r2
 8105b06:	d108      	bne.n	8105b1a <HAL_DMA_Abort_IT+0x18e>
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	681a      	ldr	r2, [r3, #0]
 8105b0e:	687b      	ldr	r3, [r7, #4]
 8105b10:	681b      	ldr	r3, [r3, #0]
 8105b12:	f022 0201 	bic.w	r2, r2, #1
 8105b16:	601a      	str	r2, [r3, #0]
 8105b18:	e178      	b.n	8105e0c <HAL_DMA_Abort_IT+0x480>
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	681a      	ldr	r2, [r3, #0]
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	f022 0201 	bic.w	r2, r2, #1
 8105b28:	601a      	str	r2, [r3, #0]
 8105b2a:	e16f      	b.n	8105e0c <HAL_DMA_Abort_IT+0x480>
 8105b2c:	40020010 	.word	0x40020010
 8105b30:	40020028 	.word	0x40020028
 8105b34:	40020040 	.word	0x40020040
 8105b38:	40020058 	.word	0x40020058
 8105b3c:	40020070 	.word	0x40020070
 8105b40:	40020088 	.word	0x40020088
 8105b44:	400200a0 	.word	0x400200a0
 8105b48:	400200b8 	.word	0x400200b8
 8105b4c:	40020410 	.word	0x40020410
 8105b50:	40020428 	.word	0x40020428
 8105b54:	40020440 	.word	0x40020440
 8105b58:	40020458 	.word	0x40020458
 8105b5c:	40020470 	.word	0x40020470
 8105b60:	40020488 	.word	0x40020488
 8105b64:	400204a0 	.word	0x400204a0
 8105b68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	681b      	ldr	r3, [r3, #0]
 8105b70:	681a      	ldr	r2, [r3, #0]
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	681b      	ldr	r3, [r3, #0]
 8105b76:	f022 020e 	bic.w	r2, r2, #14
 8105b7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	4a6c      	ldr	r2, [pc, #432]	@ (8105d34 <HAL_DMA_Abort_IT+0x3a8>)
 8105b82:	4293      	cmp	r3, r2
 8105b84:	d04a      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	681b      	ldr	r3, [r3, #0]
 8105b8a:	4a6b      	ldr	r2, [pc, #428]	@ (8105d38 <HAL_DMA_Abort_IT+0x3ac>)
 8105b8c:	4293      	cmp	r3, r2
 8105b8e:	d045      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	4a69      	ldr	r2, [pc, #420]	@ (8105d3c <HAL_DMA_Abort_IT+0x3b0>)
 8105b96:	4293      	cmp	r3, r2
 8105b98:	d040      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	681b      	ldr	r3, [r3, #0]
 8105b9e:	4a68      	ldr	r2, [pc, #416]	@ (8105d40 <HAL_DMA_Abort_IT+0x3b4>)
 8105ba0:	4293      	cmp	r3, r2
 8105ba2:	d03b      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	681b      	ldr	r3, [r3, #0]
 8105ba8:	4a66      	ldr	r2, [pc, #408]	@ (8105d44 <HAL_DMA_Abort_IT+0x3b8>)
 8105baa:	4293      	cmp	r3, r2
 8105bac:	d036      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	681b      	ldr	r3, [r3, #0]
 8105bb2:	4a65      	ldr	r2, [pc, #404]	@ (8105d48 <HAL_DMA_Abort_IT+0x3bc>)
 8105bb4:	4293      	cmp	r3, r2
 8105bb6:	d031      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bb8:	687b      	ldr	r3, [r7, #4]
 8105bba:	681b      	ldr	r3, [r3, #0]
 8105bbc:	4a63      	ldr	r2, [pc, #396]	@ (8105d4c <HAL_DMA_Abort_IT+0x3c0>)
 8105bbe:	4293      	cmp	r3, r2
 8105bc0:	d02c      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	681b      	ldr	r3, [r3, #0]
 8105bc6:	4a62      	ldr	r2, [pc, #392]	@ (8105d50 <HAL_DMA_Abort_IT+0x3c4>)
 8105bc8:	4293      	cmp	r3, r2
 8105bca:	d027      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	4a60      	ldr	r2, [pc, #384]	@ (8105d54 <HAL_DMA_Abort_IT+0x3c8>)
 8105bd2:	4293      	cmp	r3, r2
 8105bd4:	d022      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bd6:	687b      	ldr	r3, [r7, #4]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	4a5f      	ldr	r2, [pc, #380]	@ (8105d58 <HAL_DMA_Abort_IT+0x3cc>)
 8105bdc:	4293      	cmp	r3, r2
 8105bde:	d01d      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	4a5d      	ldr	r2, [pc, #372]	@ (8105d5c <HAL_DMA_Abort_IT+0x3d0>)
 8105be6:	4293      	cmp	r3, r2
 8105be8:	d018      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	4a5c      	ldr	r2, [pc, #368]	@ (8105d60 <HAL_DMA_Abort_IT+0x3d4>)
 8105bf0:	4293      	cmp	r3, r2
 8105bf2:	d013      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	681b      	ldr	r3, [r3, #0]
 8105bf8:	4a5a      	ldr	r2, [pc, #360]	@ (8105d64 <HAL_DMA_Abort_IT+0x3d8>)
 8105bfa:	4293      	cmp	r3, r2
 8105bfc:	d00e      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	4a59      	ldr	r2, [pc, #356]	@ (8105d68 <HAL_DMA_Abort_IT+0x3dc>)
 8105c04:	4293      	cmp	r3, r2
 8105c06:	d009      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	4a57      	ldr	r2, [pc, #348]	@ (8105d6c <HAL_DMA_Abort_IT+0x3e0>)
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d004      	beq.n	8105c1c <HAL_DMA_Abort_IT+0x290>
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	681b      	ldr	r3, [r3, #0]
 8105c16:	4a56      	ldr	r2, [pc, #344]	@ (8105d70 <HAL_DMA_Abort_IT+0x3e4>)
 8105c18:	4293      	cmp	r3, r2
 8105c1a:	d108      	bne.n	8105c2e <HAL_DMA_Abort_IT+0x2a2>
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	681b      	ldr	r3, [r3, #0]
 8105c20:	681a      	ldr	r2, [r3, #0]
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	681b      	ldr	r3, [r3, #0]
 8105c26:	f022 0201 	bic.w	r2, r2, #1
 8105c2a:	601a      	str	r2, [r3, #0]
 8105c2c:	e007      	b.n	8105c3e <HAL_DMA_Abort_IT+0x2b2>
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	681a      	ldr	r2, [r3, #0]
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	f022 0201 	bic.w	r2, r2, #1
 8105c3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	4a3c      	ldr	r2, [pc, #240]	@ (8105d34 <HAL_DMA_Abort_IT+0x3a8>)
 8105c44:	4293      	cmp	r3, r2
 8105c46:	d072      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8105d38 <HAL_DMA_Abort_IT+0x3ac>)
 8105c4e:	4293      	cmp	r3, r2
 8105c50:	d06d      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	4a39      	ldr	r2, [pc, #228]	@ (8105d3c <HAL_DMA_Abort_IT+0x3b0>)
 8105c58:	4293      	cmp	r3, r2
 8105c5a:	d068      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	4a37      	ldr	r2, [pc, #220]	@ (8105d40 <HAL_DMA_Abort_IT+0x3b4>)
 8105c62:	4293      	cmp	r3, r2
 8105c64:	d063      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	681b      	ldr	r3, [r3, #0]
 8105c6a:	4a36      	ldr	r2, [pc, #216]	@ (8105d44 <HAL_DMA_Abort_IT+0x3b8>)
 8105c6c:	4293      	cmp	r3, r2
 8105c6e:	d05e      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	4a34      	ldr	r2, [pc, #208]	@ (8105d48 <HAL_DMA_Abort_IT+0x3bc>)
 8105c76:	4293      	cmp	r3, r2
 8105c78:	d059      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	4a33      	ldr	r2, [pc, #204]	@ (8105d4c <HAL_DMA_Abort_IT+0x3c0>)
 8105c80:	4293      	cmp	r3, r2
 8105c82:	d054      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	4a31      	ldr	r2, [pc, #196]	@ (8105d50 <HAL_DMA_Abort_IT+0x3c4>)
 8105c8a:	4293      	cmp	r3, r2
 8105c8c:	d04f      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	4a30      	ldr	r2, [pc, #192]	@ (8105d54 <HAL_DMA_Abort_IT+0x3c8>)
 8105c94:	4293      	cmp	r3, r2
 8105c96:	d04a      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8105d58 <HAL_DMA_Abort_IT+0x3cc>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d045      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8105d5c <HAL_DMA_Abort_IT+0x3d0>)
 8105ca8:	4293      	cmp	r3, r2
 8105caa:	d040      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8105d60 <HAL_DMA_Abort_IT+0x3d4>)
 8105cb2:	4293      	cmp	r3, r2
 8105cb4:	d03b      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	4a2a      	ldr	r2, [pc, #168]	@ (8105d64 <HAL_DMA_Abort_IT+0x3d8>)
 8105cbc:	4293      	cmp	r3, r2
 8105cbe:	d036      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	4a28      	ldr	r2, [pc, #160]	@ (8105d68 <HAL_DMA_Abort_IT+0x3dc>)
 8105cc6:	4293      	cmp	r3, r2
 8105cc8:	d031      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	4a27      	ldr	r2, [pc, #156]	@ (8105d6c <HAL_DMA_Abort_IT+0x3e0>)
 8105cd0:	4293      	cmp	r3, r2
 8105cd2:	d02c      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	4a25      	ldr	r2, [pc, #148]	@ (8105d70 <HAL_DMA_Abort_IT+0x3e4>)
 8105cda:	4293      	cmp	r3, r2
 8105cdc:	d027      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	4a24      	ldr	r2, [pc, #144]	@ (8105d74 <HAL_DMA_Abort_IT+0x3e8>)
 8105ce4:	4293      	cmp	r3, r2
 8105ce6:	d022      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	4a22      	ldr	r2, [pc, #136]	@ (8105d78 <HAL_DMA_Abort_IT+0x3ec>)
 8105cee:	4293      	cmp	r3, r2
 8105cf0:	d01d      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	4a21      	ldr	r2, [pc, #132]	@ (8105d7c <HAL_DMA_Abort_IT+0x3f0>)
 8105cf8:	4293      	cmp	r3, r2
 8105cfa:	d018      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	4a1f      	ldr	r2, [pc, #124]	@ (8105d80 <HAL_DMA_Abort_IT+0x3f4>)
 8105d02:	4293      	cmp	r3, r2
 8105d04:	d013      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8105d84 <HAL_DMA_Abort_IT+0x3f8>)
 8105d0c:	4293      	cmp	r3, r2
 8105d0e:	d00e      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	4a1c      	ldr	r2, [pc, #112]	@ (8105d88 <HAL_DMA_Abort_IT+0x3fc>)
 8105d16:	4293      	cmp	r3, r2
 8105d18:	d009      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	681b      	ldr	r3, [r3, #0]
 8105d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8105d8c <HAL_DMA_Abort_IT+0x400>)
 8105d20:	4293      	cmp	r3, r2
 8105d22:	d004      	beq.n	8105d2e <HAL_DMA_Abort_IT+0x3a2>
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	4a19      	ldr	r2, [pc, #100]	@ (8105d90 <HAL_DMA_Abort_IT+0x404>)
 8105d2a:	4293      	cmp	r3, r2
 8105d2c:	d132      	bne.n	8105d94 <HAL_DMA_Abort_IT+0x408>
 8105d2e:	2301      	movs	r3, #1
 8105d30:	e031      	b.n	8105d96 <HAL_DMA_Abort_IT+0x40a>
 8105d32:	bf00      	nop
 8105d34:	40020010 	.word	0x40020010
 8105d38:	40020028 	.word	0x40020028
 8105d3c:	40020040 	.word	0x40020040
 8105d40:	40020058 	.word	0x40020058
 8105d44:	40020070 	.word	0x40020070
 8105d48:	40020088 	.word	0x40020088
 8105d4c:	400200a0 	.word	0x400200a0
 8105d50:	400200b8 	.word	0x400200b8
 8105d54:	40020410 	.word	0x40020410
 8105d58:	40020428 	.word	0x40020428
 8105d5c:	40020440 	.word	0x40020440
 8105d60:	40020458 	.word	0x40020458
 8105d64:	40020470 	.word	0x40020470
 8105d68:	40020488 	.word	0x40020488
 8105d6c:	400204a0 	.word	0x400204a0
 8105d70:	400204b8 	.word	0x400204b8
 8105d74:	58025408 	.word	0x58025408
 8105d78:	5802541c 	.word	0x5802541c
 8105d7c:	58025430 	.word	0x58025430
 8105d80:	58025444 	.word	0x58025444
 8105d84:	58025458 	.word	0x58025458
 8105d88:	5802546c 	.word	0x5802546c
 8105d8c:	58025480 	.word	0x58025480
 8105d90:	58025494 	.word	0x58025494
 8105d94:	2300      	movs	r3, #0
 8105d96:	2b00      	cmp	r3, #0
 8105d98:	d028      	beq.n	8105dec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105d9e:	681a      	ldr	r2, [r3, #0]
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105da8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105dae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105db4:	f003 031f 	and.w	r3, r3, #31
 8105db8:	2201      	movs	r2, #1
 8105dba:	409a      	lsls	r2, r3
 8105dbc:	68fb      	ldr	r3, [r7, #12]
 8105dbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105dc4:	687a      	ldr	r2, [r7, #4]
 8105dc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105dc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105dce:	2b00      	cmp	r3, #0
 8105dd0:	d00c      	beq.n	8105dec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105dd6:	681a      	ldr	r2, [r3, #0]
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105de0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105de6:	687a      	ldr	r2, [r7, #4]
 8105de8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8105dea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	2201      	movs	r2, #1
 8105df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	2200      	movs	r2, #0
 8105df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	d003      	beq.n	8105e0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105e08:	6878      	ldr	r0, [r7, #4]
 8105e0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8105e0c:	2300      	movs	r3, #0
}
 8105e0e:	4618      	mov	r0, r3
 8105e10:	3710      	adds	r7, #16
 8105e12:	46bd      	mov	sp, r7
 8105e14:	bd80      	pop	{r7, pc}
 8105e16:	bf00      	nop

08105e18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8105e18:	b580      	push	{r7, lr}
 8105e1a:	b08a      	sub	sp, #40	@ 0x28
 8105e1c:	af00      	add	r7, sp, #0
 8105e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8105e20:	2300      	movs	r3, #0
 8105e22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8105e24:	4b67      	ldr	r3, [pc, #412]	@ (8105fc4 <HAL_DMA_IRQHandler+0x1ac>)
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	4a67      	ldr	r2, [pc, #412]	@ (8105fc8 <HAL_DMA_IRQHandler+0x1b0>)
 8105e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8105e2e:	0a9b      	lsrs	r3, r3, #10
 8105e30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8105e3e:	6a3b      	ldr	r3, [r7, #32]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105e44:	69fb      	ldr	r3, [r7, #28]
 8105e46:	681b      	ldr	r3, [r3, #0]
 8105e48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	681b      	ldr	r3, [r3, #0]
 8105e4e:	4a5f      	ldr	r2, [pc, #380]	@ (8105fcc <HAL_DMA_IRQHandler+0x1b4>)
 8105e50:	4293      	cmp	r3, r2
 8105e52:	d04a      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	4a5d      	ldr	r2, [pc, #372]	@ (8105fd0 <HAL_DMA_IRQHandler+0x1b8>)
 8105e5a:	4293      	cmp	r3, r2
 8105e5c:	d045      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	681b      	ldr	r3, [r3, #0]
 8105e62:	4a5c      	ldr	r2, [pc, #368]	@ (8105fd4 <HAL_DMA_IRQHandler+0x1bc>)
 8105e64:	4293      	cmp	r3, r2
 8105e66:	d040      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	681b      	ldr	r3, [r3, #0]
 8105e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8105fd8 <HAL_DMA_IRQHandler+0x1c0>)
 8105e6e:	4293      	cmp	r3, r2
 8105e70:	d03b      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	681b      	ldr	r3, [r3, #0]
 8105e76:	4a59      	ldr	r2, [pc, #356]	@ (8105fdc <HAL_DMA_IRQHandler+0x1c4>)
 8105e78:	4293      	cmp	r3, r2
 8105e7a:	d036      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	681b      	ldr	r3, [r3, #0]
 8105e80:	4a57      	ldr	r2, [pc, #348]	@ (8105fe0 <HAL_DMA_IRQHandler+0x1c8>)
 8105e82:	4293      	cmp	r3, r2
 8105e84:	d031      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	4a56      	ldr	r2, [pc, #344]	@ (8105fe4 <HAL_DMA_IRQHandler+0x1cc>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d02c      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	4a54      	ldr	r2, [pc, #336]	@ (8105fe8 <HAL_DMA_IRQHandler+0x1d0>)
 8105e96:	4293      	cmp	r3, r2
 8105e98:	d027      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	4a53      	ldr	r2, [pc, #332]	@ (8105fec <HAL_DMA_IRQHandler+0x1d4>)
 8105ea0:	4293      	cmp	r3, r2
 8105ea2:	d022      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	4a51      	ldr	r2, [pc, #324]	@ (8105ff0 <HAL_DMA_IRQHandler+0x1d8>)
 8105eaa:	4293      	cmp	r3, r2
 8105eac:	d01d      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	4a50      	ldr	r2, [pc, #320]	@ (8105ff4 <HAL_DMA_IRQHandler+0x1dc>)
 8105eb4:	4293      	cmp	r3, r2
 8105eb6:	d018      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8105ff8 <HAL_DMA_IRQHandler+0x1e0>)
 8105ebe:	4293      	cmp	r3, r2
 8105ec0:	d013      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	4a4d      	ldr	r2, [pc, #308]	@ (8105ffc <HAL_DMA_IRQHandler+0x1e4>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d00e      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8106000 <HAL_DMA_IRQHandler+0x1e8>)
 8105ed2:	4293      	cmp	r3, r2
 8105ed4:	d009      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	4a4a      	ldr	r2, [pc, #296]	@ (8106004 <HAL_DMA_IRQHandler+0x1ec>)
 8105edc:	4293      	cmp	r3, r2
 8105ede:	d004      	beq.n	8105eea <HAL_DMA_IRQHandler+0xd2>
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a48      	ldr	r2, [pc, #288]	@ (8106008 <HAL_DMA_IRQHandler+0x1f0>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d101      	bne.n	8105eee <HAL_DMA_IRQHandler+0xd6>
 8105eea:	2301      	movs	r3, #1
 8105eec:	e000      	b.n	8105ef0 <HAL_DMA_IRQHandler+0xd8>
 8105eee:	2300      	movs	r3, #0
 8105ef0:	2b00      	cmp	r3, #0
 8105ef2:	f000 842b 	beq.w	810674c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105efa:	f003 031f 	and.w	r3, r3, #31
 8105efe:	2208      	movs	r2, #8
 8105f00:	409a      	lsls	r2, r3
 8105f02:	69bb      	ldr	r3, [r7, #24]
 8105f04:	4013      	ands	r3, r2
 8105f06:	2b00      	cmp	r3, #0
 8105f08:	f000 80a2 	beq.w	8106050 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	681b      	ldr	r3, [r3, #0]
 8105f10:	4a2e      	ldr	r2, [pc, #184]	@ (8105fcc <HAL_DMA_IRQHandler+0x1b4>)
 8105f12:	4293      	cmp	r3, r2
 8105f14:	d04a      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	681b      	ldr	r3, [r3, #0]
 8105f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8105fd0 <HAL_DMA_IRQHandler+0x1b8>)
 8105f1c:	4293      	cmp	r3, r2
 8105f1e:	d045      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	681b      	ldr	r3, [r3, #0]
 8105f24:	4a2b      	ldr	r2, [pc, #172]	@ (8105fd4 <HAL_DMA_IRQHandler+0x1bc>)
 8105f26:	4293      	cmp	r3, r2
 8105f28:	d040      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f2a:	687b      	ldr	r3, [r7, #4]
 8105f2c:	681b      	ldr	r3, [r3, #0]
 8105f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8105fd8 <HAL_DMA_IRQHandler+0x1c0>)
 8105f30:	4293      	cmp	r3, r2
 8105f32:	d03b      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	4a28      	ldr	r2, [pc, #160]	@ (8105fdc <HAL_DMA_IRQHandler+0x1c4>)
 8105f3a:	4293      	cmp	r3, r2
 8105f3c:	d036      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	4a27      	ldr	r2, [pc, #156]	@ (8105fe0 <HAL_DMA_IRQHandler+0x1c8>)
 8105f44:	4293      	cmp	r3, r2
 8105f46:	d031      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	4a25      	ldr	r2, [pc, #148]	@ (8105fe4 <HAL_DMA_IRQHandler+0x1cc>)
 8105f4e:	4293      	cmp	r3, r2
 8105f50:	d02c      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	4a24      	ldr	r2, [pc, #144]	@ (8105fe8 <HAL_DMA_IRQHandler+0x1d0>)
 8105f58:	4293      	cmp	r3, r2
 8105f5a:	d027      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	4a22      	ldr	r2, [pc, #136]	@ (8105fec <HAL_DMA_IRQHandler+0x1d4>)
 8105f62:	4293      	cmp	r3, r2
 8105f64:	d022      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	4a21      	ldr	r2, [pc, #132]	@ (8105ff0 <HAL_DMA_IRQHandler+0x1d8>)
 8105f6c:	4293      	cmp	r3, r2
 8105f6e:	d01d      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f70:	687b      	ldr	r3, [r7, #4]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	4a1f      	ldr	r2, [pc, #124]	@ (8105ff4 <HAL_DMA_IRQHandler+0x1dc>)
 8105f76:	4293      	cmp	r3, r2
 8105f78:	d018      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	681b      	ldr	r3, [r3, #0]
 8105f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8105ff8 <HAL_DMA_IRQHandler+0x1e0>)
 8105f80:	4293      	cmp	r3, r2
 8105f82:	d013      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	4a1c      	ldr	r2, [pc, #112]	@ (8105ffc <HAL_DMA_IRQHandler+0x1e4>)
 8105f8a:	4293      	cmp	r3, r2
 8105f8c:	d00e      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	4a1b      	ldr	r2, [pc, #108]	@ (8106000 <HAL_DMA_IRQHandler+0x1e8>)
 8105f94:	4293      	cmp	r3, r2
 8105f96:	d009      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	4a19      	ldr	r2, [pc, #100]	@ (8106004 <HAL_DMA_IRQHandler+0x1ec>)
 8105f9e:	4293      	cmp	r3, r2
 8105fa0:	d004      	beq.n	8105fac <HAL_DMA_IRQHandler+0x194>
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	4a18      	ldr	r2, [pc, #96]	@ (8106008 <HAL_DMA_IRQHandler+0x1f0>)
 8105fa8:	4293      	cmp	r3, r2
 8105faa:	d12f      	bne.n	810600c <HAL_DMA_IRQHandler+0x1f4>
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	f003 0304 	and.w	r3, r3, #4
 8105fb6:	2b00      	cmp	r3, #0
 8105fb8:	bf14      	ite	ne
 8105fba:	2301      	movne	r3, #1
 8105fbc:	2300      	moveq	r3, #0
 8105fbe:	b2db      	uxtb	r3, r3
 8105fc0:	e02e      	b.n	8106020 <HAL_DMA_IRQHandler+0x208>
 8105fc2:	bf00      	nop
 8105fc4:	10000000 	.word	0x10000000
 8105fc8:	1b4e81b5 	.word	0x1b4e81b5
 8105fcc:	40020010 	.word	0x40020010
 8105fd0:	40020028 	.word	0x40020028
 8105fd4:	40020040 	.word	0x40020040
 8105fd8:	40020058 	.word	0x40020058
 8105fdc:	40020070 	.word	0x40020070
 8105fe0:	40020088 	.word	0x40020088
 8105fe4:	400200a0 	.word	0x400200a0
 8105fe8:	400200b8 	.word	0x400200b8
 8105fec:	40020410 	.word	0x40020410
 8105ff0:	40020428 	.word	0x40020428
 8105ff4:	40020440 	.word	0x40020440
 8105ff8:	40020458 	.word	0x40020458
 8105ffc:	40020470 	.word	0x40020470
 8106000:	40020488 	.word	0x40020488
 8106004:	400204a0 	.word	0x400204a0
 8106008:	400204b8 	.word	0x400204b8
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	f003 0308 	and.w	r3, r3, #8
 8106016:	2b00      	cmp	r3, #0
 8106018:	bf14      	ite	ne
 810601a:	2301      	movne	r3, #1
 810601c:	2300      	moveq	r3, #0
 810601e:	b2db      	uxtb	r3, r3
 8106020:	2b00      	cmp	r3, #0
 8106022:	d015      	beq.n	8106050 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	681a      	ldr	r2, [r3, #0]
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	681b      	ldr	r3, [r3, #0]
 810602e:	f022 0204 	bic.w	r2, r2, #4
 8106032:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106038:	f003 031f 	and.w	r3, r3, #31
 810603c:	2208      	movs	r2, #8
 810603e:	409a      	lsls	r2, r3
 8106040:	6a3b      	ldr	r3, [r7, #32]
 8106042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106048:	f043 0201 	orr.w	r2, r3, #1
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106054:	f003 031f 	and.w	r3, r3, #31
 8106058:	69ba      	ldr	r2, [r7, #24]
 810605a:	fa22 f303 	lsr.w	r3, r2, r3
 810605e:	f003 0301 	and.w	r3, r3, #1
 8106062:	2b00      	cmp	r3, #0
 8106064:	d06e      	beq.n	8106144 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	4a69      	ldr	r2, [pc, #420]	@ (8106210 <HAL_DMA_IRQHandler+0x3f8>)
 810606c:	4293      	cmp	r3, r2
 810606e:	d04a      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 8106070:	687b      	ldr	r3, [r7, #4]
 8106072:	681b      	ldr	r3, [r3, #0]
 8106074:	4a67      	ldr	r2, [pc, #412]	@ (8106214 <HAL_DMA_IRQHandler+0x3fc>)
 8106076:	4293      	cmp	r3, r2
 8106078:	d045      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	4a66      	ldr	r2, [pc, #408]	@ (8106218 <HAL_DMA_IRQHandler+0x400>)
 8106080:	4293      	cmp	r3, r2
 8106082:	d040      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	681b      	ldr	r3, [r3, #0]
 8106088:	4a64      	ldr	r2, [pc, #400]	@ (810621c <HAL_DMA_IRQHandler+0x404>)
 810608a:	4293      	cmp	r3, r2
 810608c:	d03b      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	4a63      	ldr	r2, [pc, #396]	@ (8106220 <HAL_DMA_IRQHandler+0x408>)
 8106094:	4293      	cmp	r3, r2
 8106096:	d036      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	4a61      	ldr	r2, [pc, #388]	@ (8106224 <HAL_DMA_IRQHandler+0x40c>)
 810609e:	4293      	cmp	r3, r2
 81060a0:	d031      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	681b      	ldr	r3, [r3, #0]
 81060a6:	4a60      	ldr	r2, [pc, #384]	@ (8106228 <HAL_DMA_IRQHandler+0x410>)
 81060a8:	4293      	cmp	r3, r2
 81060aa:	d02c      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	4a5e      	ldr	r2, [pc, #376]	@ (810622c <HAL_DMA_IRQHandler+0x414>)
 81060b2:	4293      	cmp	r3, r2
 81060b4:	d027      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	4a5d      	ldr	r2, [pc, #372]	@ (8106230 <HAL_DMA_IRQHandler+0x418>)
 81060bc:	4293      	cmp	r3, r2
 81060be:	d022      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	681b      	ldr	r3, [r3, #0]
 81060c4:	4a5b      	ldr	r2, [pc, #364]	@ (8106234 <HAL_DMA_IRQHandler+0x41c>)
 81060c6:	4293      	cmp	r3, r2
 81060c8:	d01d      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	4a5a      	ldr	r2, [pc, #360]	@ (8106238 <HAL_DMA_IRQHandler+0x420>)
 81060d0:	4293      	cmp	r3, r2
 81060d2:	d018      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	681b      	ldr	r3, [r3, #0]
 81060d8:	4a58      	ldr	r2, [pc, #352]	@ (810623c <HAL_DMA_IRQHandler+0x424>)
 81060da:	4293      	cmp	r3, r2
 81060dc:	d013      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	4a57      	ldr	r2, [pc, #348]	@ (8106240 <HAL_DMA_IRQHandler+0x428>)
 81060e4:	4293      	cmp	r3, r2
 81060e6:	d00e      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	681b      	ldr	r3, [r3, #0]
 81060ec:	4a55      	ldr	r2, [pc, #340]	@ (8106244 <HAL_DMA_IRQHandler+0x42c>)
 81060ee:	4293      	cmp	r3, r2
 81060f0:	d009      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	4a54      	ldr	r2, [pc, #336]	@ (8106248 <HAL_DMA_IRQHandler+0x430>)
 81060f8:	4293      	cmp	r3, r2
 81060fa:	d004      	beq.n	8106106 <HAL_DMA_IRQHandler+0x2ee>
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	4a52      	ldr	r2, [pc, #328]	@ (810624c <HAL_DMA_IRQHandler+0x434>)
 8106102:	4293      	cmp	r3, r2
 8106104:	d10a      	bne.n	810611c <HAL_DMA_IRQHandler+0x304>
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	695b      	ldr	r3, [r3, #20]
 810610c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106110:	2b00      	cmp	r3, #0
 8106112:	bf14      	ite	ne
 8106114:	2301      	movne	r3, #1
 8106116:	2300      	moveq	r3, #0
 8106118:	b2db      	uxtb	r3, r3
 810611a:	e003      	b.n	8106124 <HAL_DMA_IRQHandler+0x30c>
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	681b      	ldr	r3, [r3, #0]
 8106122:	2300      	movs	r3, #0
 8106124:	2b00      	cmp	r3, #0
 8106126:	d00d      	beq.n	8106144 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106128:	687b      	ldr	r3, [r7, #4]
 810612a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810612c:	f003 031f 	and.w	r3, r3, #31
 8106130:	2201      	movs	r2, #1
 8106132:	409a      	lsls	r2, r3
 8106134:	6a3b      	ldr	r3, [r7, #32]
 8106136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810613c:	f043 0202 	orr.w	r2, r3, #2
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106148:	f003 031f 	and.w	r3, r3, #31
 810614c:	2204      	movs	r2, #4
 810614e:	409a      	lsls	r2, r3
 8106150:	69bb      	ldr	r3, [r7, #24]
 8106152:	4013      	ands	r3, r2
 8106154:	2b00      	cmp	r3, #0
 8106156:	f000 808f 	beq.w	8106278 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	4a2c      	ldr	r2, [pc, #176]	@ (8106210 <HAL_DMA_IRQHandler+0x3f8>)
 8106160:	4293      	cmp	r3, r2
 8106162:	d04a      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	4a2a      	ldr	r2, [pc, #168]	@ (8106214 <HAL_DMA_IRQHandler+0x3fc>)
 810616a:	4293      	cmp	r3, r2
 810616c:	d045      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	681b      	ldr	r3, [r3, #0]
 8106172:	4a29      	ldr	r2, [pc, #164]	@ (8106218 <HAL_DMA_IRQHandler+0x400>)
 8106174:	4293      	cmp	r3, r2
 8106176:	d040      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	681b      	ldr	r3, [r3, #0]
 810617c:	4a27      	ldr	r2, [pc, #156]	@ (810621c <HAL_DMA_IRQHandler+0x404>)
 810617e:	4293      	cmp	r3, r2
 8106180:	d03b      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	4a26      	ldr	r2, [pc, #152]	@ (8106220 <HAL_DMA_IRQHandler+0x408>)
 8106188:	4293      	cmp	r3, r2
 810618a:	d036      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	4a24      	ldr	r2, [pc, #144]	@ (8106224 <HAL_DMA_IRQHandler+0x40c>)
 8106192:	4293      	cmp	r3, r2
 8106194:	d031      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	681b      	ldr	r3, [r3, #0]
 810619a:	4a23      	ldr	r2, [pc, #140]	@ (8106228 <HAL_DMA_IRQHandler+0x410>)
 810619c:	4293      	cmp	r3, r2
 810619e:	d02c      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061a0:	687b      	ldr	r3, [r7, #4]
 81061a2:	681b      	ldr	r3, [r3, #0]
 81061a4:	4a21      	ldr	r2, [pc, #132]	@ (810622c <HAL_DMA_IRQHandler+0x414>)
 81061a6:	4293      	cmp	r3, r2
 81061a8:	d027      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	4a20      	ldr	r2, [pc, #128]	@ (8106230 <HAL_DMA_IRQHandler+0x418>)
 81061b0:	4293      	cmp	r3, r2
 81061b2:	d022      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	681b      	ldr	r3, [r3, #0]
 81061b8:	4a1e      	ldr	r2, [pc, #120]	@ (8106234 <HAL_DMA_IRQHandler+0x41c>)
 81061ba:	4293      	cmp	r3, r2
 81061bc:	d01d      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	681b      	ldr	r3, [r3, #0]
 81061c2:	4a1d      	ldr	r2, [pc, #116]	@ (8106238 <HAL_DMA_IRQHandler+0x420>)
 81061c4:	4293      	cmp	r3, r2
 81061c6:	d018      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	681b      	ldr	r3, [r3, #0]
 81061cc:	4a1b      	ldr	r2, [pc, #108]	@ (810623c <HAL_DMA_IRQHandler+0x424>)
 81061ce:	4293      	cmp	r3, r2
 81061d0:	d013      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	681b      	ldr	r3, [r3, #0]
 81061d6:	4a1a      	ldr	r2, [pc, #104]	@ (8106240 <HAL_DMA_IRQHandler+0x428>)
 81061d8:	4293      	cmp	r3, r2
 81061da:	d00e      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	681b      	ldr	r3, [r3, #0]
 81061e0:	4a18      	ldr	r2, [pc, #96]	@ (8106244 <HAL_DMA_IRQHandler+0x42c>)
 81061e2:	4293      	cmp	r3, r2
 81061e4:	d009      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	4a17      	ldr	r2, [pc, #92]	@ (8106248 <HAL_DMA_IRQHandler+0x430>)
 81061ec:	4293      	cmp	r3, r2
 81061ee:	d004      	beq.n	81061fa <HAL_DMA_IRQHandler+0x3e2>
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	4a15      	ldr	r2, [pc, #84]	@ (810624c <HAL_DMA_IRQHandler+0x434>)
 81061f6:	4293      	cmp	r3, r2
 81061f8:	d12a      	bne.n	8106250 <HAL_DMA_IRQHandler+0x438>
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	681b      	ldr	r3, [r3, #0]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	f003 0302 	and.w	r3, r3, #2
 8106204:	2b00      	cmp	r3, #0
 8106206:	bf14      	ite	ne
 8106208:	2301      	movne	r3, #1
 810620a:	2300      	moveq	r3, #0
 810620c:	b2db      	uxtb	r3, r3
 810620e:	e023      	b.n	8106258 <HAL_DMA_IRQHandler+0x440>
 8106210:	40020010 	.word	0x40020010
 8106214:	40020028 	.word	0x40020028
 8106218:	40020040 	.word	0x40020040
 810621c:	40020058 	.word	0x40020058
 8106220:	40020070 	.word	0x40020070
 8106224:	40020088 	.word	0x40020088
 8106228:	400200a0 	.word	0x400200a0
 810622c:	400200b8 	.word	0x400200b8
 8106230:	40020410 	.word	0x40020410
 8106234:	40020428 	.word	0x40020428
 8106238:	40020440 	.word	0x40020440
 810623c:	40020458 	.word	0x40020458
 8106240:	40020470 	.word	0x40020470
 8106244:	40020488 	.word	0x40020488
 8106248:	400204a0 	.word	0x400204a0
 810624c:	400204b8 	.word	0x400204b8
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	2300      	movs	r3, #0
 8106258:	2b00      	cmp	r3, #0
 810625a:	d00d      	beq.n	8106278 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106260:	f003 031f 	and.w	r3, r3, #31
 8106264:	2204      	movs	r2, #4
 8106266:	409a      	lsls	r2, r3
 8106268:	6a3b      	ldr	r3, [r7, #32]
 810626a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106270:	f043 0204 	orr.w	r2, r3, #4
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810627c:	f003 031f 	and.w	r3, r3, #31
 8106280:	2210      	movs	r2, #16
 8106282:	409a      	lsls	r2, r3
 8106284:	69bb      	ldr	r3, [r7, #24]
 8106286:	4013      	ands	r3, r2
 8106288:	2b00      	cmp	r3, #0
 810628a:	f000 80a6 	beq.w	81063da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	681b      	ldr	r3, [r3, #0]
 8106292:	4a85      	ldr	r2, [pc, #532]	@ (81064a8 <HAL_DMA_IRQHandler+0x690>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d04a      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	4a83      	ldr	r2, [pc, #524]	@ (81064ac <HAL_DMA_IRQHandler+0x694>)
 810629e:	4293      	cmp	r3, r2
 81062a0:	d045      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	4a82      	ldr	r2, [pc, #520]	@ (81064b0 <HAL_DMA_IRQHandler+0x698>)
 81062a8:	4293      	cmp	r3, r2
 81062aa:	d040      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a80      	ldr	r2, [pc, #512]	@ (81064b4 <HAL_DMA_IRQHandler+0x69c>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d03b      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	681b      	ldr	r3, [r3, #0]
 81062ba:	4a7f      	ldr	r2, [pc, #508]	@ (81064b8 <HAL_DMA_IRQHandler+0x6a0>)
 81062bc:	4293      	cmp	r3, r2
 81062be:	d036      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	681b      	ldr	r3, [r3, #0]
 81062c4:	4a7d      	ldr	r2, [pc, #500]	@ (81064bc <HAL_DMA_IRQHandler+0x6a4>)
 81062c6:	4293      	cmp	r3, r2
 81062c8:	d031      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	4a7c      	ldr	r2, [pc, #496]	@ (81064c0 <HAL_DMA_IRQHandler+0x6a8>)
 81062d0:	4293      	cmp	r3, r2
 81062d2:	d02c      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	681b      	ldr	r3, [r3, #0]
 81062d8:	4a7a      	ldr	r2, [pc, #488]	@ (81064c4 <HAL_DMA_IRQHandler+0x6ac>)
 81062da:	4293      	cmp	r3, r2
 81062dc:	d027      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	4a79      	ldr	r2, [pc, #484]	@ (81064c8 <HAL_DMA_IRQHandler+0x6b0>)
 81062e4:	4293      	cmp	r3, r2
 81062e6:	d022      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	4a77      	ldr	r2, [pc, #476]	@ (81064cc <HAL_DMA_IRQHandler+0x6b4>)
 81062ee:	4293      	cmp	r3, r2
 81062f0:	d01d      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	4a76      	ldr	r2, [pc, #472]	@ (81064d0 <HAL_DMA_IRQHandler+0x6b8>)
 81062f8:	4293      	cmp	r3, r2
 81062fa:	d018      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	4a74      	ldr	r2, [pc, #464]	@ (81064d4 <HAL_DMA_IRQHandler+0x6bc>)
 8106302:	4293      	cmp	r3, r2
 8106304:	d013      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	681b      	ldr	r3, [r3, #0]
 810630a:	4a73      	ldr	r2, [pc, #460]	@ (81064d8 <HAL_DMA_IRQHandler+0x6c0>)
 810630c:	4293      	cmp	r3, r2
 810630e:	d00e      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 8106310:	687b      	ldr	r3, [r7, #4]
 8106312:	681b      	ldr	r3, [r3, #0]
 8106314:	4a71      	ldr	r2, [pc, #452]	@ (81064dc <HAL_DMA_IRQHandler+0x6c4>)
 8106316:	4293      	cmp	r3, r2
 8106318:	d009      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	681b      	ldr	r3, [r3, #0]
 810631e:	4a70      	ldr	r2, [pc, #448]	@ (81064e0 <HAL_DMA_IRQHandler+0x6c8>)
 8106320:	4293      	cmp	r3, r2
 8106322:	d004      	beq.n	810632e <HAL_DMA_IRQHandler+0x516>
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	681b      	ldr	r3, [r3, #0]
 8106328:	4a6e      	ldr	r2, [pc, #440]	@ (81064e4 <HAL_DMA_IRQHandler+0x6cc>)
 810632a:	4293      	cmp	r3, r2
 810632c:	d10a      	bne.n	8106344 <HAL_DMA_IRQHandler+0x52c>
 810632e:	687b      	ldr	r3, [r7, #4]
 8106330:	681b      	ldr	r3, [r3, #0]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	f003 0308 	and.w	r3, r3, #8
 8106338:	2b00      	cmp	r3, #0
 810633a:	bf14      	ite	ne
 810633c:	2301      	movne	r3, #1
 810633e:	2300      	moveq	r3, #0
 8106340:	b2db      	uxtb	r3, r3
 8106342:	e009      	b.n	8106358 <HAL_DMA_IRQHandler+0x540>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	f003 0304 	and.w	r3, r3, #4
 810634e:	2b00      	cmp	r3, #0
 8106350:	bf14      	ite	ne
 8106352:	2301      	movne	r3, #1
 8106354:	2300      	moveq	r3, #0
 8106356:	b2db      	uxtb	r3, r3
 8106358:	2b00      	cmp	r3, #0
 810635a:	d03e      	beq.n	81063da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 810635c:	687b      	ldr	r3, [r7, #4]
 810635e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106360:	f003 031f 	and.w	r3, r3, #31
 8106364:	2210      	movs	r2, #16
 8106366:	409a      	lsls	r2, r3
 8106368:	6a3b      	ldr	r3, [r7, #32]
 810636a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8106376:	2b00      	cmp	r3, #0
 8106378:	d018      	beq.n	81063ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	681b      	ldr	r3, [r3, #0]
 810637e:	681b      	ldr	r3, [r3, #0]
 8106380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8106384:	2b00      	cmp	r3, #0
 8106386:	d108      	bne.n	810639a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810638c:	2b00      	cmp	r3, #0
 810638e:	d024      	beq.n	81063da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106394:	6878      	ldr	r0, [r7, #4]
 8106396:	4798      	blx	r3
 8106398:	e01f      	b.n	81063da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810639e:	2b00      	cmp	r3, #0
 81063a0:	d01b      	beq.n	81063da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81063a6:	6878      	ldr	r0, [r7, #4]
 81063a8:	4798      	blx	r3
 81063aa:	e016      	b.n	81063da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	681b      	ldr	r3, [r3, #0]
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81063b6:	2b00      	cmp	r3, #0
 81063b8:	d107      	bne.n	81063ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	681b      	ldr	r3, [r3, #0]
 81063be:	681a      	ldr	r2, [r3, #0]
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	f022 0208 	bic.w	r2, r2, #8
 81063c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81063ce:	2b00      	cmp	r3, #0
 81063d0:	d003      	beq.n	81063da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81063d6:	6878      	ldr	r0, [r7, #4]
 81063d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81063de:	f003 031f 	and.w	r3, r3, #31
 81063e2:	2220      	movs	r2, #32
 81063e4:	409a      	lsls	r2, r3
 81063e6:	69bb      	ldr	r3, [r7, #24]
 81063e8:	4013      	ands	r3, r2
 81063ea:	2b00      	cmp	r3, #0
 81063ec:	f000 8110 	beq.w	8106610 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81063f0:	687b      	ldr	r3, [r7, #4]
 81063f2:	681b      	ldr	r3, [r3, #0]
 81063f4:	4a2c      	ldr	r2, [pc, #176]	@ (81064a8 <HAL_DMA_IRQHandler+0x690>)
 81063f6:	4293      	cmp	r3, r2
 81063f8:	d04a      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	681b      	ldr	r3, [r3, #0]
 81063fe:	4a2b      	ldr	r2, [pc, #172]	@ (81064ac <HAL_DMA_IRQHandler+0x694>)
 8106400:	4293      	cmp	r3, r2
 8106402:	d045      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	681b      	ldr	r3, [r3, #0]
 8106408:	4a29      	ldr	r2, [pc, #164]	@ (81064b0 <HAL_DMA_IRQHandler+0x698>)
 810640a:	4293      	cmp	r3, r2
 810640c:	d040      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	681b      	ldr	r3, [r3, #0]
 8106412:	4a28      	ldr	r2, [pc, #160]	@ (81064b4 <HAL_DMA_IRQHandler+0x69c>)
 8106414:	4293      	cmp	r3, r2
 8106416:	d03b      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	4a26      	ldr	r2, [pc, #152]	@ (81064b8 <HAL_DMA_IRQHandler+0x6a0>)
 810641e:	4293      	cmp	r3, r2
 8106420:	d036      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	4a25      	ldr	r2, [pc, #148]	@ (81064bc <HAL_DMA_IRQHandler+0x6a4>)
 8106428:	4293      	cmp	r3, r2
 810642a:	d031      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	681b      	ldr	r3, [r3, #0]
 8106430:	4a23      	ldr	r2, [pc, #140]	@ (81064c0 <HAL_DMA_IRQHandler+0x6a8>)
 8106432:	4293      	cmp	r3, r2
 8106434:	d02c      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	681b      	ldr	r3, [r3, #0]
 810643a:	4a22      	ldr	r2, [pc, #136]	@ (81064c4 <HAL_DMA_IRQHandler+0x6ac>)
 810643c:	4293      	cmp	r3, r2
 810643e:	d027      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	681b      	ldr	r3, [r3, #0]
 8106444:	4a20      	ldr	r2, [pc, #128]	@ (81064c8 <HAL_DMA_IRQHandler+0x6b0>)
 8106446:	4293      	cmp	r3, r2
 8106448:	d022      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	681b      	ldr	r3, [r3, #0]
 810644e:	4a1f      	ldr	r2, [pc, #124]	@ (81064cc <HAL_DMA_IRQHandler+0x6b4>)
 8106450:	4293      	cmp	r3, r2
 8106452:	d01d      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	681b      	ldr	r3, [r3, #0]
 8106458:	4a1d      	ldr	r2, [pc, #116]	@ (81064d0 <HAL_DMA_IRQHandler+0x6b8>)
 810645a:	4293      	cmp	r3, r2
 810645c:	d018      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	681b      	ldr	r3, [r3, #0]
 8106462:	4a1c      	ldr	r2, [pc, #112]	@ (81064d4 <HAL_DMA_IRQHandler+0x6bc>)
 8106464:	4293      	cmp	r3, r2
 8106466:	d013      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	681b      	ldr	r3, [r3, #0]
 810646c:	4a1a      	ldr	r2, [pc, #104]	@ (81064d8 <HAL_DMA_IRQHandler+0x6c0>)
 810646e:	4293      	cmp	r3, r2
 8106470:	d00e      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	681b      	ldr	r3, [r3, #0]
 8106476:	4a19      	ldr	r2, [pc, #100]	@ (81064dc <HAL_DMA_IRQHandler+0x6c4>)
 8106478:	4293      	cmp	r3, r2
 810647a:	d009      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	681b      	ldr	r3, [r3, #0]
 8106480:	4a17      	ldr	r2, [pc, #92]	@ (81064e0 <HAL_DMA_IRQHandler+0x6c8>)
 8106482:	4293      	cmp	r3, r2
 8106484:	d004      	beq.n	8106490 <HAL_DMA_IRQHandler+0x678>
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	681b      	ldr	r3, [r3, #0]
 810648a:	4a16      	ldr	r2, [pc, #88]	@ (81064e4 <HAL_DMA_IRQHandler+0x6cc>)
 810648c:	4293      	cmp	r3, r2
 810648e:	d12b      	bne.n	81064e8 <HAL_DMA_IRQHandler+0x6d0>
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	f003 0310 	and.w	r3, r3, #16
 810649a:	2b00      	cmp	r3, #0
 810649c:	bf14      	ite	ne
 810649e:	2301      	movne	r3, #1
 81064a0:	2300      	moveq	r3, #0
 81064a2:	b2db      	uxtb	r3, r3
 81064a4:	e02a      	b.n	81064fc <HAL_DMA_IRQHandler+0x6e4>
 81064a6:	bf00      	nop
 81064a8:	40020010 	.word	0x40020010
 81064ac:	40020028 	.word	0x40020028
 81064b0:	40020040 	.word	0x40020040
 81064b4:	40020058 	.word	0x40020058
 81064b8:	40020070 	.word	0x40020070
 81064bc:	40020088 	.word	0x40020088
 81064c0:	400200a0 	.word	0x400200a0
 81064c4:	400200b8 	.word	0x400200b8
 81064c8:	40020410 	.word	0x40020410
 81064cc:	40020428 	.word	0x40020428
 81064d0:	40020440 	.word	0x40020440
 81064d4:	40020458 	.word	0x40020458
 81064d8:	40020470 	.word	0x40020470
 81064dc:	40020488 	.word	0x40020488
 81064e0:	400204a0 	.word	0x400204a0
 81064e4:	400204b8 	.word	0x400204b8
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	681b      	ldr	r3, [r3, #0]
 81064ee:	f003 0302 	and.w	r3, r3, #2
 81064f2:	2b00      	cmp	r3, #0
 81064f4:	bf14      	ite	ne
 81064f6:	2301      	movne	r3, #1
 81064f8:	2300      	moveq	r3, #0
 81064fa:	b2db      	uxtb	r3, r3
 81064fc:	2b00      	cmp	r3, #0
 81064fe:	f000 8087 	beq.w	8106610 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106506:	f003 031f 	and.w	r3, r3, #31
 810650a:	2220      	movs	r2, #32
 810650c:	409a      	lsls	r2, r3
 810650e:	6a3b      	ldr	r3, [r7, #32]
 8106510:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8106518:	b2db      	uxtb	r3, r3
 810651a:	2b04      	cmp	r3, #4
 810651c:	d139      	bne.n	8106592 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	681a      	ldr	r2, [r3, #0]
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	f022 0216 	bic.w	r2, r2, #22
 810652c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	695a      	ldr	r2, [r3, #20]
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810653c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106542:	2b00      	cmp	r3, #0
 8106544:	d103      	bne.n	810654e <HAL_DMA_IRQHandler+0x736>
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810654a:	2b00      	cmp	r3, #0
 810654c:	d007      	beq.n	810655e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	681a      	ldr	r2, [r3, #0]
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	f022 0208 	bic.w	r2, r2, #8
 810655c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106562:	f003 031f 	and.w	r3, r3, #31
 8106566:	223f      	movs	r2, #63	@ 0x3f
 8106568:	409a      	lsls	r2, r3
 810656a:	6a3b      	ldr	r3, [r7, #32]
 810656c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	2201      	movs	r2, #1
 8106572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	2200      	movs	r2, #0
 810657a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106582:	2b00      	cmp	r3, #0
 8106584:	f000 834a 	beq.w	8106c1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810658c:	6878      	ldr	r0, [r7, #4]
 810658e:	4798      	blx	r3
          }
          return;
 8106590:	e344      	b.n	8106c1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810659c:	2b00      	cmp	r3, #0
 810659e:	d018      	beq.n	81065d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81065a0:	687b      	ldr	r3, [r7, #4]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	681b      	ldr	r3, [r3, #0]
 81065a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d108      	bne.n	81065c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81065b2:	2b00      	cmp	r3, #0
 81065b4:	d02c      	beq.n	8106610 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81065ba:	6878      	ldr	r0, [r7, #4]
 81065bc:	4798      	blx	r3
 81065be:	e027      	b.n	8106610 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81065c4:	2b00      	cmp	r3, #0
 81065c6:	d023      	beq.n	8106610 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81065cc:	6878      	ldr	r0, [r7, #4]
 81065ce:	4798      	blx	r3
 81065d0:	e01e      	b.n	8106610 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	681b      	ldr	r3, [r3, #0]
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81065dc:	2b00      	cmp	r3, #0
 81065de:	d10f      	bne.n	8106600 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	681a      	ldr	r2, [r3, #0]
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	f022 0210 	bic.w	r2, r2, #16
 81065ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	2201      	movs	r2, #1
 81065f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	2200      	movs	r2, #0
 81065fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106604:	2b00      	cmp	r3, #0
 8106606:	d003      	beq.n	8106610 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810660c:	6878      	ldr	r0, [r7, #4]
 810660e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106614:	2b00      	cmp	r3, #0
 8106616:	f000 8306 	beq.w	8106c26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810661e:	f003 0301 	and.w	r3, r3, #1
 8106622:	2b00      	cmp	r3, #0
 8106624:	f000 8088 	beq.w	8106738 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	2204      	movs	r2, #4
 810662c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	681b      	ldr	r3, [r3, #0]
 8106634:	4a7a      	ldr	r2, [pc, #488]	@ (8106820 <HAL_DMA_IRQHandler+0xa08>)
 8106636:	4293      	cmp	r3, r2
 8106638:	d04a      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	4a79      	ldr	r2, [pc, #484]	@ (8106824 <HAL_DMA_IRQHandler+0xa0c>)
 8106640:	4293      	cmp	r3, r2
 8106642:	d045      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	4a77      	ldr	r2, [pc, #476]	@ (8106828 <HAL_DMA_IRQHandler+0xa10>)
 810664a:	4293      	cmp	r3, r2
 810664c:	d040      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	4a76      	ldr	r2, [pc, #472]	@ (810682c <HAL_DMA_IRQHandler+0xa14>)
 8106654:	4293      	cmp	r3, r2
 8106656:	d03b      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	681b      	ldr	r3, [r3, #0]
 810665c:	4a74      	ldr	r2, [pc, #464]	@ (8106830 <HAL_DMA_IRQHandler+0xa18>)
 810665e:	4293      	cmp	r3, r2
 8106660:	d036      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	681b      	ldr	r3, [r3, #0]
 8106666:	4a73      	ldr	r2, [pc, #460]	@ (8106834 <HAL_DMA_IRQHandler+0xa1c>)
 8106668:	4293      	cmp	r3, r2
 810666a:	d031      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	4a71      	ldr	r2, [pc, #452]	@ (8106838 <HAL_DMA_IRQHandler+0xa20>)
 8106672:	4293      	cmp	r3, r2
 8106674:	d02c      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	4a70      	ldr	r2, [pc, #448]	@ (810683c <HAL_DMA_IRQHandler+0xa24>)
 810667c:	4293      	cmp	r3, r2
 810667e:	d027      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	4a6e      	ldr	r2, [pc, #440]	@ (8106840 <HAL_DMA_IRQHandler+0xa28>)
 8106686:	4293      	cmp	r3, r2
 8106688:	d022      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	681b      	ldr	r3, [r3, #0]
 810668e:	4a6d      	ldr	r2, [pc, #436]	@ (8106844 <HAL_DMA_IRQHandler+0xa2c>)
 8106690:	4293      	cmp	r3, r2
 8106692:	d01d      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	681b      	ldr	r3, [r3, #0]
 8106698:	4a6b      	ldr	r2, [pc, #428]	@ (8106848 <HAL_DMA_IRQHandler+0xa30>)
 810669a:	4293      	cmp	r3, r2
 810669c:	d018      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	681b      	ldr	r3, [r3, #0]
 81066a2:	4a6a      	ldr	r2, [pc, #424]	@ (810684c <HAL_DMA_IRQHandler+0xa34>)
 81066a4:	4293      	cmp	r3, r2
 81066a6:	d013      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	4a68      	ldr	r2, [pc, #416]	@ (8106850 <HAL_DMA_IRQHandler+0xa38>)
 81066ae:	4293      	cmp	r3, r2
 81066b0:	d00e      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	4a67      	ldr	r2, [pc, #412]	@ (8106854 <HAL_DMA_IRQHandler+0xa3c>)
 81066b8:	4293      	cmp	r3, r2
 81066ba:	d009      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	681b      	ldr	r3, [r3, #0]
 81066c0:	4a65      	ldr	r2, [pc, #404]	@ (8106858 <HAL_DMA_IRQHandler+0xa40>)
 81066c2:	4293      	cmp	r3, r2
 81066c4:	d004      	beq.n	81066d0 <HAL_DMA_IRQHandler+0x8b8>
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	681b      	ldr	r3, [r3, #0]
 81066ca:	4a64      	ldr	r2, [pc, #400]	@ (810685c <HAL_DMA_IRQHandler+0xa44>)
 81066cc:	4293      	cmp	r3, r2
 81066ce:	d108      	bne.n	81066e2 <HAL_DMA_IRQHandler+0x8ca>
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	681a      	ldr	r2, [r3, #0]
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	f022 0201 	bic.w	r2, r2, #1
 81066de:	601a      	str	r2, [r3, #0]
 81066e0:	e007      	b.n	81066f2 <HAL_DMA_IRQHandler+0x8da>
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	681a      	ldr	r2, [r3, #0]
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	681b      	ldr	r3, [r3, #0]
 81066ec:	f022 0201 	bic.w	r2, r2, #1
 81066f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81066f2:	68fb      	ldr	r3, [r7, #12]
 81066f4:	3301      	adds	r3, #1
 81066f6:	60fb      	str	r3, [r7, #12]
 81066f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81066fa:	429a      	cmp	r2, r3
 81066fc:	d307      	bcc.n	810670e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	681b      	ldr	r3, [r3, #0]
 8106704:	f003 0301 	and.w	r3, r3, #1
 8106708:	2b00      	cmp	r3, #0
 810670a:	d1f2      	bne.n	81066f2 <HAL_DMA_IRQHandler+0x8da>
 810670c:	e000      	b.n	8106710 <HAL_DMA_IRQHandler+0x8f8>
            break;
 810670e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	681b      	ldr	r3, [r3, #0]
 8106714:	681b      	ldr	r3, [r3, #0]
 8106716:	f003 0301 	and.w	r3, r3, #1
 810671a:	2b00      	cmp	r3, #0
 810671c:	d004      	beq.n	8106728 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	2203      	movs	r2, #3
 8106722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8106726:	e003      	b.n	8106730 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	2201      	movs	r2, #1
 810672c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	2200      	movs	r2, #0
 8106734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810673c:	2b00      	cmp	r3, #0
 810673e:	f000 8272 	beq.w	8106c26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106746:	6878      	ldr	r0, [r7, #4]
 8106748:	4798      	blx	r3
 810674a:	e26c      	b.n	8106c26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	681b      	ldr	r3, [r3, #0]
 8106750:	4a43      	ldr	r2, [pc, #268]	@ (8106860 <HAL_DMA_IRQHandler+0xa48>)
 8106752:	4293      	cmp	r3, r2
 8106754:	d022      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	4a42      	ldr	r2, [pc, #264]	@ (8106864 <HAL_DMA_IRQHandler+0xa4c>)
 810675c:	4293      	cmp	r3, r2
 810675e:	d01d      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	4a40      	ldr	r2, [pc, #256]	@ (8106868 <HAL_DMA_IRQHandler+0xa50>)
 8106766:	4293      	cmp	r3, r2
 8106768:	d018      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	4a3f      	ldr	r2, [pc, #252]	@ (810686c <HAL_DMA_IRQHandler+0xa54>)
 8106770:	4293      	cmp	r3, r2
 8106772:	d013      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	4a3d      	ldr	r2, [pc, #244]	@ (8106870 <HAL_DMA_IRQHandler+0xa58>)
 810677a:	4293      	cmp	r3, r2
 810677c:	d00e      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	681b      	ldr	r3, [r3, #0]
 8106782:	4a3c      	ldr	r2, [pc, #240]	@ (8106874 <HAL_DMA_IRQHandler+0xa5c>)
 8106784:	4293      	cmp	r3, r2
 8106786:	d009      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	4a3a      	ldr	r2, [pc, #232]	@ (8106878 <HAL_DMA_IRQHandler+0xa60>)
 810678e:	4293      	cmp	r3, r2
 8106790:	d004      	beq.n	810679c <HAL_DMA_IRQHandler+0x984>
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	4a39      	ldr	r2, [pc, #228]	@ (810687c <HAL_DMA_IRQHandler+0xa64>)
 8106798:	4293      	cmp	r3, r2
 810679a:	d101      	bne.n	81067a0 <HAL_DMA_IRQHandler+0x988>
 810679c:	2301      	movs	r3, #1
 810679e:	e000      	b.n	81067a2 <HAL_DMA_IRQHandler+0x98a>
 81067a0:	2300      	movs	r3, #0
 81067a2:	2b00      	cmp	r3, #0
 81067a4:	f000 823f 	beq.w	8106c26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	681b      	ldr	r3, [r3, #0]
 81067ac:	681b      	ldr	r3, [r3, #0]
 81067ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81067b4:	f003 031f 	and.w	r3, r3, #31
 81067b8:	2204      	movs	r2, #4
 81067ba:	409a      	lsls	r2, r3
 81067bc:	697b      	ldr	r3, [r7, #20]
 81067be:	4013      	ands	r3, r2
 81067c0:	2b00      	cmp	r3, #0
 81067c2:	f000 80cd 	beq.w	8106960 <HAL_DMA_IRQHandler+0xb48>
 81067c6:	693b      	ldr	r3, [r7, #16]
 81067c8:	f003 0304 	and.w	r3, r3, #4
 81067cc:	2b00      	cmp	r3, #0
 81067ce:	f000 80c7 	beq.w	8106960 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81067d6:	f003 031f 	and.w	r3, r3, #31
 81067da:	2204      	movs	r2, #4
 81067dc:	409a      	lsls	r2, r3
 81067de:	69fb      	ldr	r3, [r7, #28]
 81067e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81067e2:	693b      	ldr	r3, [r7, #16]
 81067e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81067e8:	2b00      	cmp	r3, #0
 81067ea:	d049      	beq.n	8106880 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81067ec:	693b      	ldr	r3, [r7, #16]
 81067ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81067f2:	2b00      	cmp	r3, #0
 81067f4:	d109      	bne.n	810680a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81067fa:	2b00      	cmp	r3, #0
 81067fc:	f000 8210 	beq.w	8106c20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106804:	6878      	ldr	r0, [r7, #4]
 8106806:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106808:	e20a      	b.n	8106c20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810680e:	2b00      	cmp	r3, #0
 8106810:	f000 8206 	beq.w	8106c20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106818:	6878      	ldr	r0, [r7, #4]
 810681a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810681c:	e200      	b.n	8106c20 <HAL_DMA_IRQHandler+0xe08>
 810681e:	bf00      	nop
 8106820:	40020010 	.word	0x40020010
 8106824:	40020028 	.word	0x40020028
 8106828:	40020040 	.word	0x40020040
 810682c:	40020058 	.word	0x40020058
 8106830:	40020070 	.word	0x40020070
 8106834:	40020088 	.word	0x40020088
 8106838:	400200a0 	.word	0x400200a0
 810683c:	400200b8 	.word	0x400200b8
 8106840:	40020410 	.word	0x40020410
 8106844:	40020428 	.word	0x40020428
 8106848:	40020440 	.word	0x40020440
 810684c:	40020458 	.word	0x40020458
 8106850:	40020470 	.word	0x40020470
 8106854:	40020488 	.word	0x40020488
 8106858:	400204a0 	.word	0x400204a0
 810685c:	400204b8 	.word	0x400204b8
 8106860:	58025408 	.word	0x58025408
 8106864:	5802541c 	.word	0x5802541c
 8106868:	58025430 	.word	0x58025430
 810686c:	58025444 	.word	0x58025444
 8106870:	58025458 	.word	0x58025458
 8106874:	5802546c 	.word	0x5802546c
 8106878:	58025480 	.word	0x58025480
 810687c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106880:	693b      	ldr	r3, [r7, #16]
 8106882:	f003 0320 	and.w	r3, r3, #32
 8106886:	2b00      	cmp	r3, #0
 8106888:	d160      	bne.n	810694c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	4a7f      	ldr	r2, [pc, #508]	@ (8106a8c <HAL_DMA_IRQHandler+0xc74>)
 8106890:	4293      	cmp	r3, r2
 8106892:	d04a      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	681b      	ldr	r3, [r3, #0]
 8106898:	4a7d      	ldr	r2, [pc, #500]	@ (8106a90 <HAL_DMA_IRQHandler+0xc78>)
 810689a:	4293      	cmp	r3, r2
 810689c:	d045      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	681b      	ldr	r3, [r3, #0]
 81068a2:	4a7c      	ldr	r2, [pc, #496]	@ (8106a94 <HAL_DMA_IRQHandler+0xc7c>)
 81068a4:	4293      	cmp	r3, r2
 81068a6:	d040      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	681b      	ldr	r3, [r3, #0]
 81068ac:	4a7a      	ldr	r2, [pc, #488]	@ (8106a98 <HAL_DMA_IRQHandler+0xc80>)
 81068ae:	4293      	cmp	r3, r2
 81068b0:	d03b      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	4a79      	ldr	r2, [pc, #484]	@ (8106a9c <HAL_DMA_IRQHandler+0xc84>)
 81068b8:	4293      	cmp	r3, r2
 81068ba:	d036      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	4a77      	ldr	r2, [pc, #476]	@ (8106aa0 <HAL_DMA_IRQHandler+0xc88>)
 81068c2:	4293      	cmp	r3, r2
 81068c4:	d031      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	4a76      	ldr	r2, [pc, #472]	@ (8106aa4 <HAL_DMA_IRQHandler+0xc8c>)
 81068cc:	4293      	cmp	r3, r2
 81068ce:	d02c      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	4a74      	ldr	r2, [pc, #464]	@ (8106aa8 <HAL_DMA_IRQHandler+0xc90>)
 81068d6:	4293      	cmp	r3, r2
 81068d8:	d027      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	4a73      	ldr	r2, [pc, #460]	@ (8106aac <HAL_DMA_IRQHandler+0xc94>)
 81068e0:	4293      	cmp	r3, r2
 81068e2:	d022      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	4a71      	ldr	r2, [pc, #452]	@ (8106ab0 <HAL_DMA_IRQHandler+0xc98>)
 81068ea:	4293      	cmp	r3, r2
 81068ec:	d01d      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	4a70      	ldr	r2, [pc, #448]	@ (8106ab4 <HAL_DMA_IRQHandler+0xc9c>)
 81068f4:	4293      	cmp	r3, r2
 81068f6:	d018      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 81068f8:	687b      	ldr	r3, [r7, #4]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	4a6e      	ldr	r2, [pc, #440]	@ (8106ab8 <HAL_DMA_IRQHandler+0xca0>)
 81068fe:	4293      	cmp	r3, r2
 8106900:	d013      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	4a6d      	ldr	r2, [pc, #436]	@ (8106abc <HAL_DMA_IRQHandler+0xca4>)
 8106908:	4293      	cmp	r3, r2
 810690a:	d00e      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	4a6b      	ldr	r2, [pc, #428]	@ (8106ac0 <HAL_DMA_IRQHandler+0xca8>)
 8106912:	4293      	cmp	r3, r2
 8106914:	d009      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	4a6a      	ldr	r2, [pc, #424]	@ (8106ac4 <HAL_DMA_IRQHandler+0xcac>)
 810691c:	4293      	cmp	r3, r2
 810691e:	d004      	beq.n	810692a <HAL_DMA_IRQHandler+0xb12>
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	4a68      	ldr	r2, [pc, #416]	@ (8106ac8 <HAL_DMA_IRQHandler+0xcb0>)
 8106926:	4293      	cmp	r3, r2
 8106928:	d108      	bne.n	810693c <HAL_DMA_IRQHandler+0xb24>
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	681a      	ldr	r2, [r3, #0]
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	f022 0208 	bic.w	r2, r2, #8
 8106938:	601a      	str	r2, [r3, #0]
 810693a:	e007      	b.n	810694c <HAL_DMA_IRQHandler+0xb34>
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	681a      	ldr	r2, [r3, #0]
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	681b      	ldr	r3, [r3, #0]
 8106946:	f022 0204 	bic.w	r2, r2, #4
 810694a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106950:	2b00      	cmp	r3, #0
 8106952:	f000 8165 	beq.w	8106c20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810695a:	6878      	ldr	r0, [r7, #4]
 810695c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810695e:	e15f      	b.n	8106c20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106964:	f003 031f 	and.w	r3, r3, #31
 8106968:	2202      	movs	r2, #2
 810696a:	409a      	lsls	r2, r3
 810696c:	697b      	ldr	r3, [r7, #20]
 810696e:	4013      	ands	r3, r2
 8106970:	2b00      	cmp	r3, #0
 8106972:	f000 80c5 	beq.w	8106b00 <HAL_DMA_IRQHandler+0xce8>
 8106976:	693b      	ldr	r3, [r7, #16]
 8106978:	f003 0302 	and.w	r3, r3, #2
 810697c:	2b00      	cmp	r3, #0
 810697e:	f000 80bf 	beq.w	8106b00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106986:	f003 031f 	and.w	r3, r3, #31
 810698a:	2202      	movs	r2, #2
 810698c:	409a      	lsls	r2, r3
 810698e:	69fb      	ldr	r3, [r7, #28]
 8106990:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106992:	693b      	ldr	r3, [r7, #16]
 8106994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106998:	2b00      	cmp	r3, #0
 810699a:	d018      	beq.n	81069ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810699c:	693b      	ldr	r3, [r7, #16]
 810699e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	d109      	bne.n	81069ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81069a6:	687b      	ldr	r3, [r7, #4]
 81069a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81069aa:	2b00      	cmp	r3, #0
 81069ac:	f000 813a 	beq.w	8106c24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81069b4:	6878      	ldr	r0, [r7, #4]
 81069b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81069b8:	e134      	b.n	8106c24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81069be:	2b00      	cmp	r3, #0
 81069c0:	f000 8130 	beq.w	8106c24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81069c8:	6878      	ldr	r0, [r7, #4]
 81069ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81069cc:	e12a      	b.n	8106c24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81069ce:	693b      	ldr	r3, [r7, #16]
 81069d0:	f003 0320 	and.w	r3, r3, #32
 81069d4:	2b00      	cmp	r3, #0
 81069d6:	f040 8089 	bne.w	8106aec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	4a2b      	ldr	r2, [pc, #172]	@ (8106a8c <HAL_DMA_IRQHandler+0xc74>)
 81069e0:	4293      	cmp	r3, r2
 81069e2:	d04a      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	4a29      	ldr	r2, [pc, #164]	@ (8106a90 <HAL_DMA_IRQHandler+0xc78>)
 81069ea:	4293      	cmp	r3, r2
 81069ec:	d045      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	4a28      	ldr	r2, [pc, #160]	@ (8106a94 <HAL_DMA_IRQHandler+0xc7c>)
 81069f4:	4293      	cmp	r3, r2
 81069f6:	d040      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	4a26      	ldr	r2, [pc, #152]	@ (8106a98 <HAL_DMA_IRQHandler+0xc80>)
 81069fe:	4293      	cmp	r3, r2
 8106a00:	d03b      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a02:	687b      	ldr	r3, [r7, #4]
 8106a04:	681b      	ldr	r3, [r3, #0]
 8106a06:	4a25      	ldr	r2, [pc, #148]	@ (8106a9c <HAL_DMA_IRQHandler+0xc84>)
 8106a08:	4293      	cmp	r3, r2
 8106a0a:	d036      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	681b      	ldr	r3, [r3, #0]
 8106a10:	4a23      	ldr	r2, [pc, #140]	@ (8106aa0 <HAL_DMA_IRQHandler+0xc88>)
 8106a12:	4293      	cmp	r3, r2
 8106a14:	d031      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	681b      	ldr	r3, [r3, #0]
 8106a1a:	4a22      	ldr	r2, [pc, #136]	@ (8106aa4 <HAL_DMA_IRQHandler+0xc8c>)
 8106a1c:	4293      	cmp	r3, r2
 8106a1e:	d02c      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	4a20      	ldr	r2, [pc, #128]	@ (8106aa8 <HAL_DMA_IRQHandler+0xc90>)
 8106a26:	4293      	cmp	r3, r2
 8106a28:	d027      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a2a:	687b      	ldr	r3, [r7, #4]
 8106a2c:	681b      	ldr	r3, [r3, #0]
 8106a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8106aac <HAL_DMA_IRQHandler+0xc94>)
 8106a30:	4293      	cmp	r3, r2
 8106a32:	d022      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	681b      	ldr	r3, [r3, #0]
 8106a38:	4a1d      	ldr	r2, [pc, #116]	@ (8106ab0 <HAL_DMA_IRQHandler+0xc98>)
 8106a3a:	4293      	cmp	r3, r2
 8106a3c:	d01d      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	4a1c      	ldr	r2, [pc, #112]	@ (8106ab4 <HAL_DMA_IRQHandler+0xc9c>)
 8106a44:	4293      	cmp	r3, r2
 8106a46:	d018      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8106ab8 <HAL_DMA_IRQHandler+0xca0>)
 8106a4e:	4293      	cmp	r3, r2
 8106a50:	d013      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	4a19      	ldr	r2, [pc, #100]	@ (8106abc <HAL_DMA_IRQHandler+0xca4>)
 8106a58:	4293      	cmp	r3, r2
 8106a5a:	d00e      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	4a17      	ldr	r2, [pc, #92]	@ (8106ac0 <HAL_DMA_IRQHandler+0xca8>)
 8106a62:	4293      	cmp	r3, r2
 8106a64:	d009      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	4a16      	ldr	r2, [pc, #88]	@ (8106ac4 <HAL_DMA_IRQHandler+0xcac>)
 8106a6c:	4293      	cmp	r3, r2
 8106a6e:	d004      	beq.n	8106a7a <HAL_DMA_IRQHandler+0xc62>
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	4a14      	ldr	r2, [pc, #80]	@ (8106ac8 <HAL_DMA_IRQHandler+0xcb0>)
 8106a76:	4293      	cmp	r3, r2
 8106a78:	d128      	bne.n	8106acc <HAL_DMA_IRQHandler+0xcb4>
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	681a      	ldr	r2, [r3, #0]
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	f022 0214 	bic.w	r2, r2, #20
 8106a88:	601a      	str	r2, [r3, #0]
 8106a8a:	e027      	b.n	8106adc <HAL_DMA_IRQHandler+0xcc4>
 8106a8c:	40020010 	.word	0x40020010
 8106a90:	40020028 	.word	0x40020028
 8106a94:	40020040 	.word	0x40020040
 8106a98:	40020058 	.word	0x40020058
 8106a9c:	40020070 	.word	0x40020070
 8106aa0:	40020088 	.word	0x40020088
 8106aa4:	400200a0 	.word	0x400200a0
 8106aa8:	400200b8 	.word	0x400200b8
 8106aac:	40020410 	.word	0x40020410
 8106ab0:	40020428 	.word	0x40020428
 8106ab4:	40020440 	.word	0x40020440
 8106ab8:	40020458 	.word	0x40020458
 8106abc:	40020470 	.word	0x40020470
 8106ac0:	40020488 	.word	0x40020488
 8106ac4:	400204a0 	.word	0x400204a0
 8106ac8:	400204b8 	.word	0x400204b8
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	681b      	ldr	r3, [r3, #0]
 8106ad0:	681a      	ldr	r2, [r3, #0]
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	681b      	ldr	r3, [r3, #0]
 8106ad6:	f022 020a 	bic.w	r2, r2, #10
 8106ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	2201      	movs	r2, #1
 8106ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	2200      	movs	r2, #0
 8106ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106af0:	2b00      	cmp	r3, #0
 8106af2:	f000 8097 	beq.w	8106c24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106afa:	6878      	ldr	r0, [r7, #4]
 8106afc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106afe:	e091      	b.n	8106c24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106b04:	f003 031f 	and.w	r3, r3, #31
 8106b08:	2208      	movs	r2, #8
 8106b0a:	409a      	lsls	r2, r3
 8106b0c:	697b      	ldr	r3, [r7, #20]
 8106b0e:	4013      	ands	r3, r2
 8106b10:	2b00      	cmp	r3, #0
 8106b12:	f000 8088 	beq.w	8106c26 <HAL_DMA_IRQHandler+0xe0e>
 8106b16:	693b      	ldr	r3, [r7, #16]
 8106b18:	f003 0308 	and.w	r3, r3, #8
 8106b1c:	2b00      	cmp	r3, #0
 8106b1e:	f000 8082 	beq.w	8106c26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	4a41      	ldr	r2, [pc, #260]	@ (8106c2c <HAL_DMA_IRQHandler+0xe14>)
 8106b28:	4293      	cmp	r3, r2
 8106b2a:	d04a      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	681b      	ldr	r3, [r3, #0]
 8106b30:	4a3f      	ldr	r2, [pc, #252]	@ (8106c30 <HAL_DMA_IRQHandler+0xe18>)
 8106b32:	4293      	cmp	r3, r2
 8106b34:	d045      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	681b      	ldr	r3, [r3, #0]
 8106b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8106c34 <HAL_DMA_IRQHandler+0xe1c>)
 8106b3c:	4293      	cmp	r3, r2
 8106b3e:	d040      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	4a3c      	ldr	r2, [pc, #240]	@ (8106c38 <HAL_DMA_IRQHandler+0xe20>)
 8106b46:	4293      	cmp	r3, r2
 8106b48:	d03b      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8106c3c <HAL_DMA_IRQHandler+0xe24>)
 8106b50:	4293      	cmp	r3, r2
 8106b52:	d036      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	681b      	ldr	r3, [r3, #0]
 8106b58:	4a39      	ldr	r2, [pc, #228]	@ (8106c40 <HAL_DMA_IRQHandler+0xe28>)
 8106b5a:	4293      	cmp	r3, r2
 8106b5c:	d031      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	681b      	ldr	r3, [r3, #0]
 8106b62:	4a38      	ldr	r2, [pc, #224]	@ (8106c44 <HAL_DMA_IRQHandler+0xe2c>)
 8106b64:	4293      	cmp	r3, r2
 8106b66:	d02c      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	4a36      	ldr	r2, [pc, #216]	@ (8106c48 <HAL_DMA_IRQHandler+0xe30>)
 8106b6e:	4293      	cmp	r3, r2
 8106b70:	d027      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	681b      	ldr	r3, [r3, #0]
 8106b76:	4a35      	ldr	r2, [pc, #212]	@ (8106c4c <HAL_DMA_IRQHandler+0xe34>)
 8106b78:	4293      	cmp	r3, r2
 8106b7a:	d022      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	681b      	ldr	r3, [r3, #0]
 8106b80:	4a33      	ldr	r2, [pc, #204]	@ (8106c50 <HAL_DMA_IRQHandler+0xe38>)
 8106b82:	4293      	cmp	r3, r2
 8106b84:	d01d      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	4a32      	ldr	r2, [pc, #200]	@ (8106c54 <HAL_DMA_IRQHandler+0xe3c>)
 8106b8c:	4293      	cmp	r3, r2
 8106b8e:	d018      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	4a30      	ldr	r2, [pc, #192]	@ (8106c58 <HAL_DMA_IRQHandler+0xe40>)
 8106b96:	4293      	cmp	r3, r2
 8106b98:	d013      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8106c5c <HAL_DMA_IRQHandler+0xe44>)
 8106ba0:	4293      	cmp	r3, r2
 8106ba2:	d00e      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8106c60 <HAL_DMA_IRQHandler+0xe48>)
 8106baa:	4293      	cmp	r3, r2
 8106bac:	d009      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	681b      	ldr	r3, [r3, #0]
 8106bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8106c64 <HAL_DMA_IRQHandler+0xe4c>)
 8106bb4:	4293      	cmp	r3, r2
 8106bb6:	d004      	beq.n	8106bc2 <HAL_DMA_IRQHandler+0xdaa>
 8106bb8:	687b      	ldr	r3, [r7, #4]
 8106bba:	681b      	ldr	r3, [r3, #0]
 8106bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8106c68 <HAL_DMA_IRQHandler+0xe50>)
 8106bbe:	4293      	cmp	r3, r2
 8106bc0:	d108      	bne.n	8106bd4 <HAL_DMA_IRQHandler+0xdbc>
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	681b      	ldr	r3, [r3, #0]
 8106bc6:	681a      	ldr	r2, [r3, #0]
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	681b      	ldr	r3, [r3, #0]
 8106bcc:	f022 021c 	bic.w	r2, r2, #28
 8106bd0:	601a      	str	r2, [r3, #0]
 8106bd2:	e007      	b.n	8106be4 <HAL_DMA_IRQHandler+0xdcc>
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	681a      	ldr	r2, [r3, #0]
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	f022 020e 	bic.w	r2, r2, #14
 8106be2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106be8:	f003 031f 	and.w	r3, r3, #31
 8106bec:	2201      	movs	r2, #1
 8106bee:	409a      	lsls	r2, r3
 8106bf0:	69fb      	ldr	r3, [r7, #28]
 8106bf2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	2201      	movs	r2, #1
 8106bf8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	2201      	movs	r2, #1
 8106bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	2200      	movs	r2, #0
 8106c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106c0e:	2b00      	cmp	r3, #0
 8106c10:	d009      	beq.n	8106c26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106c16:	6878      	ldr	r0, [r7, #4]
 8106c18:	4798      	blx	r3
 8106c1a:	e004      	b.n	8106c26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8106c1c:	bf00      	nop
 8106c1e:	e002      	b.n	8106c26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106c20:	bf00      	nop
 8106c22:	e000      	b.n	8106c26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106c24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106c26:	3728      	adds	r7, #40	@ 0x28
 8106c28:	46bd      	mov	sp, r7
 8106c2a:	bd80      	pop	{r7, pc}
 8106c2c:	40020010 	.word	0x40020010
 8106c30:	40020028 	.word	0x40020028
 8106c34:	40020040 	.word	0x40020040
 8106c38:	40020058 	.word	0x40020058
 8106c3c:	40020070 	.word	0x40020070
 8106c40:	40020088 	.word	0x40020088
 8106c44:	400200a0 	.word	0x400200a0
 8106c48:	400200b8 	.word	0x400200b8
 8106c4c:	40020410 	.word	0x40020410
 8106c50:	40020428 	.word	0x40020428
 8106c54:	40020440 	.word	0x40020440
 8106c58:	40020458 	.word	0x40020458
 8106c5c:	40020470 	.word	0x40020470
 8106c60:	40020488 	.word	0x40020488
 8106c64:	400204a0 	.word	0x400204a0
 8106c68:	400204b8 	.word	0x400204b8

08106c6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8106c6c:	b480      	push	{r7}
 8106c6e:	b083      	sub	sp, #12
 8106c70:	af00      	add	r7, sp, #0
 8106c72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8106c7a:	b2db      	uxtb	r3, r3
}
 8106c7c:	4618      	mov	r0, r3
 8106c7e:	370c      	adds	r7, #12
 8106c80:	46bd      	mov	sp, r7
 8106c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c86:	4770      	bx	lr

08106c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106c88:	b480      	push	{r7}
 8106c8a:	b085      	sub	sp, #20
 8106c8c:	af00      	add	r7, sp, #0
 8106c8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	681b      	ldr	r3, [r3, #0]
 8106c94:	4a43      	ldr	r2, [pc, #268]	@ (8106da4 <DMA_CalcBaseAndBitshift+0x11c>)
 8106c96:	4293      	cmp	r3, r2
 8106c98:	d04a      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	681b      	ldr	r3, [r3, #0]
 8106c9e:	4a42      	ldr	r2, [pc, #264]	@ (8106da8 <DMA_CalcBaseAndBitshift+0x120>)
 8106ca0:	4293      	cmp	r3, r2
 8106ca2:	d045      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	681b      	ldr	r3, [r3, #0]
 8106ca8:	4a40      	ldr	r2, [pc, #256]	@ (8106dac <DMA_CalcBaseAndBitshift+0x124>)
 8106caa:	4293      	cmp	r3, r2
 8106cac:	d040      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	681b      	ldr	r3, [r3, #0]
 8106cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8106db0 <DMA_CalcBaseAndBitshift+0x128>)
 8106cb4:	4293      	cmp	r3, r2
 8106cb6:	d03b      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	681b      	ldr	r3, [r3, #0]
 8106cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8106db4 <DMA_CalcBaseAndBitshift+0x12c>)
 8106cbe:	4293      	cmp	r3, r2
 8106cc0:	d036      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	681b      	ldr	r3, [r3, #0]
 8106cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8106db8 <DMA_CalcBaseAndBitshift+0x130>)
 8106cc8:	4293      	cmp	r3, r2
 8106cca:	d031      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	681b      	ldr	r3, [r3, #0]
 8106cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8106dbc <DMA_CalcBaseAndBitshift+0x134>)
 8106cd2:	4293      	cmp	r3, r2
 8106cd4:	d02c      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	681b      	ldr	r3, [r3, #0]
 8106cda:	4a39      	ldr	r2, [pc, #228]	@ (8106dc0 <DMA_CalcBaseAndBitshift+0x138>)
 8106cdc:	4293      	cmp	r3, r2
 8106cde:	d027      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	681b      	ldr	r3, [r3, #0]
 8106ce4:	4a37      	ldr	r2, [pc, #220]	@ (8106dc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8106ce6:	4293      	cmp	r3, r2
 8106ce8:	d022      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	681b      	ldr	r3, [r3, #0]
 8106cee:	4a36      	ldr	r2, [pc, #216]	@ (8106dc8 <DMA_CalcBaseAndBitshift+0x140>)
 8106cf0:	4293      	cmp	r3, r2
 8106cf2:	d01d      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	681b      	ldr	r3, [r3, #0]
 8106cf8:	4a34      	ldr	r2, [pc, #208]	@ (8106dcc <DMA_CalcBaseAndBitshift+0x144>)
 8106cfa:	4293      	cmp	r3, r2
 8106cfc:	d018      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	681b      	ldr	r3, [r3, #0]
 8106d02:	4a33      	ldr	r2, [pc, #204]	@ (8106dd0 <DMA_CalcBaseAndBitshift+0x148>)
 8106d04:	4293      	cmp	r3, r2
 8106d06:	d013      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	4a31      	ldr	r2, [pc, #196]	@ (8106dd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8106d0e:	4293      	cmp	r3, r2
 8106d10:	d00e      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	681b      	ldr	r3, [r3, #0]
 8106d16:	4a30      	ldr	r2, [pc, #192]	@ (8106dd8 <DMA_CalcBaseAndBitshift+0x150>)
 8106d18:	4293      	cmp	r3, r2
 8106d1a:	d009      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	681b      	ldr	r3, [r3, #0]
 8106d20:	4a2e      	ldr	r2, [pc, #184]	@ (8106ddc <DMA_CalcBaseAndBitshift+0x154>)
 8106d22:	4293      	cmp	r3, r2
 8106d24:	d004      	beq.n	8106d30 <DMA_CalcBaseAndBitshift+0xa8>
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8106de0 <DMA_CalcBaseAndBitshift+0x158>)
 8106d2c:	4293      	cmp	r3, r2
 8106d2e:	d101      	bne.n	8106d34 <DMA_CalcBaseAndBitshift+0xac>
 8106d30:	2301      	movs	r3, #1
 8106d32:	e000      	b.n	8106d36 <DMA_CalcBaseAndBitshift+0xae>
 8106d34:	2300      	movs	r3, #0
 8106d36:	2b00      	cmp	r3, #0
 8106d38:	d026      	beq.n	8106d88 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	b2db      	uxtb	r3, r3
 8106d40:	3b10      	subs	r3, #16
 8106d42:	4a28      	ldr	r2, [pc, #160]	@ (8106de4 <DMA_CalcBaseAndBitshift+0x15c>)
 8106d44:	fba2 2303 	umull	r2, r3, r2, r3
 8106d48:	091b      	lsrs	r3, r3, #4
 8106d4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106d4c:	68fb      	ldr	r3, [r7, #12]
 8106d4e:	f003 0307 	and.w	r3, r3, #7
 8106d52:	4a25      	ldr	r2, [pc, #148]	@ (8106de8 <DMA_CalcBaseAndBitshift+0x160>)
 8106d54:	5cd3      	ldrb	r3, [r2, r3]
 8106d56:	461a      	mov	r2, r3
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8106d5c:	68fb      	ldr	r3, [r7, #12]
 8106d5e:	2b03      	cmp	r3, #3
 8106d60:	d909      	bls.n	8106d76 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8106d6a:	f023 0303 	bic.w	r3, r3, #3
 8106d6e:	1d1a      	adds	r2, r3, #4
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	659a      	str	r2, [r3, #88]	@ 0x58
 8106d74:	e00e      	b.n	8106d94 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	681b      	ldr	r3, [r3, #0]
 8106d7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8106d7e:	f023 0303 	bic.w	r3, r3, #3
 8106d82:	687a      	ldr	r2, [r7, #4]
 8106d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8106d86:	e005      	b.n	8106d94 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	681b      	ldr	r3, [r3, #0]
 8106d8c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8106d98:	4618      	mov	r0, r3
 8106d9a:	3714      	adds	r7, #20
 8106d9c:	46bd      	mov	sp, r7
 8106d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106da2:	4770      	bx	lr
 8106da4:	40020010 	.word	0x40020010
 8106da8:	40020028 	.word	0x40020028
 8106dac:	40020040 	.word	0x40020040
 8106db0:	40020058 	.word	0x40020058
 8106db4:	40020070 	.word	0x40020070
 8106db8:	40020088 	.word	0x40020088
 8106dbc:	400200a0 	.word	0x400200a0
 8106dc0:	400200b8 	.word	0x400200b8
 8106dc4:	40020410 	.word	0x40020410
 8106dc8:	40020428 	.word	0x40020428
 8106dcc:	40020440 	.word	0x40020440
 8106dd0:	40020458 	.word	0x40020458
 8106dd4:	40020470 	.word	0x40020470
 8106dd8:	40020488 	.word	0x40020488
 8106ddc:	400204a0 	.word	0x400204a0
 8106de0:	400204b8 	.word	0x400204b8
 8106de4:	aaaaaaab 	.word	0xaaaaaaab
 8106de8:	081121e4 	.word	0x081121e4

08106dec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8106dec:	b480      	push	{r7}
 8106dee:	b085      	sub	sp, #20
 8106df0:	af00      	add	r7, sp, #0
 8106df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106df4:	2300      	movs	r3, #0
 8106df6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106df8:	687b      	ldr	r3, [r7, #4]
 8106dfa:	699b      	ldr	r3, [r3, #24]
 8106dfc:	2b00      	cmp	r3, #0
 8106dfe:	d120      	bne.n	8106e42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106e04:	2b03      	cmp	r3, #3
 8106e06:	d858      	bhi.n	8106eba <DMA_CheckFifoParam+0xce>
 8106e08:	a201      	add	r2, pc, #4	@ (adr r2, 8106e10 <DMA_CheckFifoParam+0x24>)
 8106e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e0e:	bf00      	nop
 8106e10:	08106e21 	.word	0x08106e21
 8106e14:	08106e33 	.word	0x08106e33
 8106e18:	08106e21 	.word	0x08106e21
 8106e1c:	08106ebb 	.word	0x08106ebb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8106e28:	2b00      	cmp	r3, #0
 8106e2a:	d048      	beq.n	8106ebe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106e2c:	2301      	movs	r3, #1
 8106e2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106e30:	e045      	b.n	8106ebe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8106e3a:	d142      	bne.n	8106ec2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106e3c:	2301      	movs	r3, #1
 8106e3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106e40:	e03f      	b.n	8106ec2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106e42:	687b      	ldr	r3, [r7, #4]
 8106e44:	699b      	ldr	r3, [r3, #24]
 8106e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106e4a:	d123      	bne.n	8106e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106e50:	2b03      	cmp	r3, #3
 8106e52:	d838      	bhi.n	8106ec6 <DMA_CheckFifoParam+0xda>
 8106e54:	a201      	add	r2, pc, #4	@ (adr r2, 8106e5c <DMA_CheckFifoParam+0x70>)
 8106e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e5a:	bf00      	nop
 8106e5c:	08106e6d 	.word	0x08106e6d
 8106e60:	08106e73 	.word	0x08106e73
 8106e64:	08106e6d 	.word	0x08106e6d
 8106e68:	08106e85 	.word	0x08106e85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106e6c:	2301      	movs	r3, #1
 8106e6e:	73fb      	strb	r3, [r7, #15]
        break;
 8106e70:	e030      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8106e7a:	2b00      	cmp	r3, #0
 8106e7c:	d025      	beq.n	8106eca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106e7e:	2301      	movs	r3, #1
 8106e80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106e82:	e022      	b.n	8106eca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106e84:	687b      	ldr	r3, [r7, #4]
 8106e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8106e8c:	d11f      	bne.n	8106ece <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106e8e:	2301      	movs	r3, #1
 8106e90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106e92:	e01c      	b.n	8106ece <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106e98:	2b02      	cmp	r3, #2
 8106e9a:	d902      	bls.n	8106ea2 <DMA_CheckFifoParam+0xb6>
 8106e9c:	2b03      	cmp	r3, #3
 8106e9e:	d003      	beq.n	8106ea8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106ea0:	e018      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106ea2:	2301      	movs	r3, #1
 8106ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8106ea6:	e015      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8106eb0:	2b00      	cmp	r3, #0
 8106eb2:	d00e      	beq.n	8106ed2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106eb4:	2301      	movs	r3, #1
 8106eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8106eb8:	e00b      	b.n	8106ed2 <DMA_CheckFifoParam+0xe6>
        break;
 8106eba:	bf00      	nop
 8106ebc:	e00a      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8106ebe:	bf00      	nop
 8106ec0:	e008      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8106ec2:	bf00      	nop
 8106ec4:	e006      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8106ec6:	bf00      	nop
 8106ec8:	e004      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8106eca:	bf00      	nop
 8106ecc:	e002      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
        break;
 8106ece:	bf00      	nop
 8106ed0:	e000      	b.n	8106ed4 <DMA_CheckFifoParam+0xe8>
    break;
 8106ed2:	bf00      	nop
    }
  }

  return status;
 8106ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ed6:	4618      	mov	r0, r3
 8106ed8:	3714      	adds	r7, #20
 8106eda:	46bd      	mov	sp, r7
 8106edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ee0:	4770      	bx	lr
 8106ee2:	bf00      	nop

08106ee4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106ee4:	b480      	push	{r7}
 8106ee6:	b085      	sub	sp, #20
 8106ee8:	af00      	add	r7, sp, #0
 8106eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	681b      	ldr	r3, [r3, #0]
 8106ef0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106ef2:	687b      	ldr	r3, [r7, #4]
 8106ef4:	681b      	ldr	r3, [r3, #0]
 8106ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8106fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106ef8:	4293      	cmp	r3, r2
 8106efa:	d022      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	681b      	ldr	r3, [r3, #0]
 8106f00:	4a38      	ldr	r2, [pc, #224]	@ (8106fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106f02:	4293      	cmp	r3, r2
 8106f04:	d01d      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	681b      	ldr	r3, [r3, #0]
 8106f0a:	4a37      	ldr	r2, [pc, #220]	@ (8106fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106f0c:	4293      	cmp	r3, r2
 8106f0e:	d018      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	4a35      	ldr	r2, [pc, #212]	@ (8106fec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106f16:	4293      	cmp	r3, r2
 8106f18:	d013      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	681b      	ldr	r3, [r3, #0]
 8106f1e:	4a34      	ldr	r2, [pc, #208]	@ (8106ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106f20:	4293      	cmp	r3, r2
 8106f22:	d00e      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	681b      	ldr	r3, [r3, #0]
 8106f28:	4a32      	ldr	r2, [pc, #200]	@ (8106ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106f2a:	4293      	cmp	r3, r2
 8106f2c:	d009      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	681b      	ldr	r3, [r3, #0]
 8106f32:	4a31      	ldr	r2, [pc, #196]	@ (8106ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106f34:	4293      	cmp	r3, r2
 8106f36:	d004      	beq.n	8106f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	681b      	ldr	r3, [r3, #0]
 8106f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8106ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106f3e:	4293      	cmp	r3, r2
 8106f40:	d101      	bne.n	8106f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106f42:	2301      	movs	r3, #1
 8106f44:	e000      	b.n	8106f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106f46:	2300      	movs	r3, #0
 8106f48:	2b00      	cmp	r3, #0
 8106f4a:	d01c      	beq.n	8106f86 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	b2db      	uxtb	r3, r3
 8106f52:	3b08      	subs	r3, #8
 8106f54:	4a2a      	ldr	r2, [pc, #168]	@ (8107000 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106f56:	fba2 2303 	umull	r2, r3, r2, r3
 8106f5a:	091b      	lsrs	r3, r3, #4
 8106f5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106f5e:	68fb      	ldr	r3, [r7, #12]
 8106f60:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8106f64:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8106f68:	009b      	lsls	r3, r3, #2
 8106f6a:	461a      	mov	r2, r3
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106f70:	687b      	ldr	r3, [r7, #4]
 8106f72:	4a24      	ldr	r2, [pc, #144]	@ (8107004 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106f74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106f76:	68fb      	ldr	r3, [r7, #12]
 8106f78:	f003 031f 	and.w	r3, r3, #31
 8106f7c:	2201      	movs	r2, #1
 8106f7e:	409a      	lsls	r2, r3
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106f84:	e026      	b.n	8106fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106f86:	687b      	ldr	r3, [r7, #4]
 8106f88:	681b      	ldr	r3, [r3, #0]
 8106f8a:	b2db      	uxtb	r3, r3
 8106f8c:	3b10      	subs	r3, #16
 8106f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8107008 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106f90:	fba2 2303 	umull	r2, r3, r2, r3
 8106f94:	091b      	lsrs	r3, r3, #4
 8106f96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106f98:	68bb      	ldr	r3, [r7, #8]
 8106f9a:	4a1c      	ldr	r2, [pc, #112]	@ (810700c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106f9c:	4293      	cmp	r3, r2
 8106f9e:	d806      	bhi.n	8106fae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106fa0:	68bb      	ldr	r3, [r7, #8]
 8106fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8107010 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106fa4:	4293      	cmp	r3, r2
 8106fa6:	d902      	bls.n	8106fae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106fa8:	68fb      	ldr	r3, [r7, #12]
 8106faa:	3308      	adds	r3, #8
 8106fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8106fb4:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8106fb8:	009b      	lsls	r3, r3, #2
 8106fba:	461a      	mov	r2, r3
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	4a14      	ldr	r2, [pc, #80]	@ (8107014 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106fc4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106fc6:	68fb      	ldr	r3, [r7, #12]
 8106fc8:	f003 031f 	and.w	r3, r3, #31
 8106fcc:	2201      	movs	r2, #1
 8106fce:	409a      	lsls	r2, r3
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8106fd4:	bf00      	nop
 8106fd6:	3714      	adds	r7, #20
 8106fd8:	46bd      	mov	sp, r7
 8106fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fde:	4770      	bx	lr
 8106fe0:	58025408 	.word	0x58025408
 8106fe4:	5802541c 	.word	0x5802541c
 8106fe8:	58025430 	.word	0x58025430
 8106fec:	58025444 	.word	0x58025444
 8106ff0:	58025458 	.word	0x58025458
 8106ff4:	5802546c 	.word	0x5802546c
 8106ff8:	58025480 	.word	0x58025480
 8106ffc:	58025494 	.word	0x58025494
 8107000:	cccccccd 	.word	0xcccccccd
 8107004:	58025880 	.word	0x58025880
 8107008:	aaaaaaab 	.word	0xaaaaaaab
 810700c:	400204b8 	.word	0x400204b8
 8107010:	4002040f 	.word	0x4002040f
 8107014:	40020880 	.word	0x40020880

08107018 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8107018:	b480      	push	{r7}
 810701a:	b085      	sub	sp, #20
 810701c:	af00      	add	r7, sp, #0
 810701e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8107020:	687b      	ldr	r3, [r7, #4]
 8107022:	685b      	ldr	r3, [r3, #4]
 8107024:	b2db      	uxtb	r3, r3
 8107026:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8107028:	68fb      	ldr	r3, [r7, #12]
 810702a:	2b00      	cmp	r3, #0
 810702c:	d04a      	beq.n	81070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810702e:	68fb      	ldr	r3, [r7, #12]
 8107030:	2b08      	cmp	r3, #8
 8107032:	d847      	bhi.n	81070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8107034:	687b      	ldr	r3, [r7, #4]
 8107036:	681b      	ldr	r3, [r3, #0]
 8107038:	4a25      	ldr	r2, [pc, #148]	@ (81070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810703a:	4293      	cmp	r3, r2
 810703c:	d022      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810703e:	687b      	ldr	r3, [r7, #4]
 8107040:	681b      	ldr	r3, [r3, #0]
 8107042:	4a24      	ldr	r2, [pc, #144]	@ (81070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8107044:	4293      	cmp	r3, r2
 8107046:	d01d      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	4a22      	ldr	r2, [pc, #136]	@ (81070d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810704e:	4293      	cmp	r3, r2
 8107050:	d018      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	681b      	ldr	r3, [r3, #0]
 8107056:	4a21      	ldr	r2, [pc, #132]	@ (81070dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8107058:	4293      	cmp	r3, r2
 810705a:	d013      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	681b      	ldr	r3, [r3, #0]
 8107060:	4a1f      	ldr	r2, [pc, #124]	@ (81070e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8107062:	4293      	cmp	r3, r2
 8107064:	d00e      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	681b      	ldr	r3, [r3, #0]
 810706a:	4a1e      	ldr	r2, [pc, #120]	@ (81070e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 810706c:	4293      	cmp	r3, r2
 810706e:	d009      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	681b      	ldr	r3, [r3, #0]
 8107074:	4a1c      	ldr	r2, [pc, #112]	@ (81070e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8107076:	4293      	cmp	r3, r2
 8107078:	d004      	beq.n	8107084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	681b      	ldr	r3, [r3, #0]
 810707e:	4a1b      	ldr	r2, [pc, #108]	@ (81070ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8107080:	4293      	cmp	r3, r2
 8107082:	d101      	bne.n	8107088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8107084:	2301      	movs	r3, #1
 8107086:	e000      	b.n	810708a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8107088:	2300      	movs	r3, #0
 810708a:	2b00      	cmp	r3, #0
 810708c:	d00a      	beq.n	81070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810708e:	68fa      	ldr	r2, [r7, #12]
 8107090:	4b17      	ldr	r3, [pc, #92]	@ (81070f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8107092:	4413      	add	r3, r2
 8107094:	009b      	lsls	r3, r3, #2
 8107096:	461a      	mov	r2, r3
 8107098:	687b      	ldr	r3, [r7, #4]
 810709a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	4a15      	ldr	r2, [pc, #84]	@ (81070f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81070a0:	671a      	str	r2, [r3, #112]	@ 0x70
 81070a2:	e009      	b.n	81070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81070a4:	68fa      	ldr	r2, [r7, #12]
 81070a6:	4b14      	ldr	r3, [pc, #80]	@ (81070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81070a8:	4413      	add	r3, r2
 81070aa:	009b      	lsls	r3, r3, #2
 81070ac:	461a      	mov	r2, r3
 81070ae:	687b      	ldr	r3, [r7, #4]
 81070b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	4a11      	ldr	r2, [pc, #68]	@ (81070fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81070b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81070b8:	68fb      	ldr	r3, [r7, #12]
 81070ba:	3b01      	subs	r3, #1
 81070bc:	2201      	movs	r2, #1
 81070be:	409a      	lsls	r2, r3
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 81070c4:	bf00      	nop
 81070c6:	3714      	adds	r7, #20
 81070c8:	46bd      	mov	sp, r7
 81070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070ce:	4770      	bx	lr
 81070d0:	58025408 	.word	0x58025408
 81070d4:	5802541c 	.word	0x5802541c
 81070d8:	58025430 	.word	0x58025430
 81070dc:	58025444 	.word	0x58025444
 81070e0:	58025458 	.word	0x58025458
 81070e4:	5802546c 	.word	0x5802546c
 81070e8:	58025480 	.word	0x58025480
 81070ec:	58025494 	.word	0x58025494
 81070f0:	1600963f 	.word	0x1600963f
 81070f4:	58025940 	.word	0x58025940
 81070f8:	1000823f 	.word	0x1000823f
 81070fc:	40020940 	.word	0x40020940

08107100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8107100:	b480      	push	{r7}
 8107102:	b089      	sub	sp, #36	@ 0x24
 8107104:	af00      	add	r7, sp, #0
 8107106:	6078      	str	r0, [r7, #4]
 8107108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810710a:	2300      	movs	r3, #0
 810710c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810710e:	4b89      	ldr	r3, [pc, #548]	@ (8107334 <HAL_GPIO_Init+0x234>)
 8107110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8107112:	e194      	b.n	810743e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8107114:	683b      	ldr	r3, [r7, #0]
 8107116:	681a      	ldr	r2, [r3, #0]
 8107118:	2101      	movs	r1, #1
 810711a:	69fb      	ldr	r3, [r7, #28]
 810711c:	fa01 f303 	lsl.w	r3, r1, r3
 8107120:	4013      	ands	r3, r2
 8107122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8107124:	693b      	ldr	r3, [r7, #16]
 8107126:	2b00      	cmp	r3, #0
 8107128:	f000 8186 	beq.w	8107438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810712c:	683b      	ldr	r3, [r7, #0]
 810712e:	685b      	ldr	r3, [r3, #4]
 8107130:	f003 0303 	and.w	r3, r3, #3
 8107134:	2b01      	cmp	r3, #1
 8107136:	d005      	beq.n	8107144 <HAL_GPIO_Init+0x44>
 8107138:	683b      	ldr	r3, [r7, #0]
 810713a:	685b      	ldr	r3, [r3, #4]
 810713c:	f003 0303 	and.w	r3, r3, #3
 8107140:	2b02      	cmp	r3, #2
 8107142:	d130      	bne.n	81071a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	689b      	ldr	r3, [r3, #8]
 8107148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810714a:	69fb      	ldr	r3, [r7, #28]
 810714c:	005b      	lsls	r3, r3, #1
 810714e:	2203      	movs	r2, #3
 8107150:	fa02 f303 	lsl.w	r3, r2, r3
 8107154:	43db      	mvns	r3, r3
 8107156:	69ba      	ldr	r2, [r7, #24]
 8107158:	4013      	ands	r3, r2
 810715a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810715c:	683b      	ldr	r3, [r7, #0]
 810715e:	68da      	ldr	r2, [r3, #12]
 8107160:	69fb      	ldr	r3, [r7, #28]
 8107162:	005b      	lsls	r3, r3, #1
 8107164:	fa02 f303 	lsl.w	r3, r2, r3
 8107168:	69ba      	ldr	r2, [r7, #24]
 810716a:	4313      	orrs	r3, r2
 810716c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	69ba      	ldr	r2, [r7, #24]
 8107172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	685b      	ldr	r3, [r3, #4]
 8107178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810717a:	2201      	movs	r2, #1
 810717c:	69fb      	ldr	r3, [r7, #28]
 810717e:	fa02 f303 	lsl.w	r3, r2, r3
 8107182:	43db      	mvns	r3, r3
 8107184:	69ba      	ldr	r2, [r7, #24]
 8107186:	4013      	ands	r3, r2
 8107188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810718a:	683b      	ldr	r3, [r7, #0]
 810718c:	685b      	ldr	r3, [r3, #4]
 810718e:	091b      	lsrs	r3, r3, #4
 8107190:	f003 0201 	and.w	r2, r3, #1
 8107194:	69fb      	ldr	r3, [r7, #28]
 8107196:	fa02 f303 	lsl.w	r3, r2, r3
 810719a:	69ba      	ldr	r2, [r7, #24]
 810719c:	4313      	orrs	r3, r2
 810719e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81071a0:	687b      	ldr	r3, [r7, #4]
 81071a2:	69ba      	ldr	r2, [r7, #24]
 81071a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81071a6:	683b      	ldr	r3, [r7, #0]
 81071a8:	685b      	ldr	r3, [r3, #4]
 81071aa:	f003 0303 	and.w	r3, r3, #3
 81071ae:	2b03      	cmp	r3, #3
 81071b0:	d017      	beq.n	81071e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	68db      	ldr	r3, [r3, #12]
 81071b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81071b8:	69fb      	ldr	r3, [r7, #28]
 81071ba:	005b      	lsls	r3, r3, #1
 81071bc:	2203      	movs	r2, #3
 81071be:	fa02 f303 	lsl.w	r3, r2, r3
 81071c2:	43db      	mvns	r3, r3
 81071c4:	69ba      	ldr	r2, [r7, #24]
 81071c6:	4013      	ands	r3, r2
 81071c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81071ca:	683b      	ldr	r3, [r7, #0]
 81071cc:	689a      	ldr	r2, [r3, #8]
 81071ce:	69fb      	ldr	r3, [r7, #28]
 81071d0:	005b      	lsls	r3, r3, #1
 81071d2:	fa02 f303 	lsl.w	r3, r2, r3
 81071d6:	69ba      	ldr	r2, [r7, #24]
 81071d8:	4313      	orrs	r3, r2
 81071da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	69ba      	ldr	r2, [r7, #24]
 81071e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81071e2:	683b      	ldr	r3, [r7, #0]
 81071e4:	685b      	ldr	r3, [r3, #4]
 81071e6:	f003 0303 	and.w	r3, r3, #3
 81071ea:	2b02      	cmp	r3, #2
 81071ec:	d123      	bne.n	8107236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81071ee:	69fb      	ldr	r3, [r7, #28]
 81071f0:	08da      	lsrs	r2, r3, #3
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	3208      	adds	r2, #8
 81071f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81071fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81071fc:	69fb      	ldr	r3, [r7, #28]
 81071fe:	f003 0307 	and.w	r3, r3, #7
 8107202:	009b      	lsls	r3, r3, #2
 8107204:	220f      	movs	r2, #15
 8107206:	fa02 f303 	lsl.w	r3, r2, r3
 810720a:	43db      	mvns	r3, r3
 810720c:	69ba      	ldr	r2, [r7, #24]
 810720e:	4013      	ands	r3, r2
 8107210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8107212:	683b      	ldr	r3, [r7, #0]
 8107214:	691a      	ldr	r2, [r3, #16]
 8107216:	69fb      	ldr	r3, [r7, #28]
 8107218:	f003 0307 	and.w	r3, r3, #7
 810721c:	009b      	lsls	r3, r3, #2
 810721e:	fa02 f303 	lsl.w	r3, r2, r3
 8107222:	69ba      	ldr	r2, [r7, #24]
 8107224:	4313      	orrs	r3, r2
 8107226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8107228:	69fb      	ldr	r3, [r7, #28]
 810722a:	08da      	lsrs	r2, r3, #3
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	3208      	adds	r2, #8
 8107230:	69b9      	ldr	r1, [r7, #24]
 8107232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	681b      	ldr	r3, [r3, #0]
 810723a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810723c:	69fb      	ldr	r3, [r7, #28]
 810723e:	005b      	lsls	r3, r3, #1
 8107240:	2203      	movs	r2, #3
 8107242:	fa02 f303 	lsl.w	r3, r2, r3
 8107246:	43db      	mvns	r3, r3
 8107248:	69ba      	ldr	r2, [r7, #24]
 810724a:	4013      	ands	r3, r2
 810724c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810724e:	683b      	ldr	r3, [r7, #0]
 8107250:	685b      	ldr	r3, [r3, #4]
 8107252:	f003 0203 	and.w	r2, r3, #3
 8107256:	69fb      	ldr	r3, [r7, #28]
 8107258:	005b      	lsls	r3, r3, #1
 810725a:	fa02 f303 	lsl.w	r3, r2, r3
 810725e:	69ba      	ldr	r2, [r7, #24]
 8107260:	4313      	orrs	r3, r2
 8107262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	69ba      	ldr	r2, [r7, #24]
 8107268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810726a:	683b      	ldr	r3, [r7, #0]
 810726c:	685b      	ldr	r3, [r3, #4]
 810726e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107272:	2b00      	cmp	r3, #0
 8107274:	f000 80e0 	beq.w	8107438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8107278:	4b2f      	ldr	r3, [pc, #188]	@ (8107338 <HAL_GPIO_Init+0x238>)
 810727a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810727e:	4a2e      	ldr	r2, [pc, #184]	@ (8107338 <HAL_GPIO_Init+0x238>)
 8107280:	f043 0302 	orr.w	r3, r3, #2
 8107284:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8107288:	4b2b      	ldr	r3, [pc, #172]	@ (8107338 <HAL_GPIO_Init+0x238>)
 810728a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810728e:	f003 0302 	and.w	r3, r3, #2
 8107292:	60fb      	str	r3, [r7, #12]
 8107294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8107296:	4a29      	ldr	r2, [pc, #164]	@ (810733c <HAL_GPIO_Init+0x23c>)
 8107298:	69fb      	ldr	r3, [r7, #28]
 810729a:	089b      	lsrs	r3, r3, #2
 810729c:	3302      	adds	r3, #2
 810729e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81072a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81072a4:	69fb      	ldr	r3, [r7, #28]
 81072a6:	f003 0303 	and.w	r3, r3, #3
 81072aa:	009b      	lsls	r3, r3, #2
 81072ac:	220f      	movs	r2, #15
 81072ae:	fa02 f303 	lsl.w	r3, r2, r3
 81072b2:	43db      	mvns	r3, r3
 81072b4:	69ba      	ldr	r2, [r7, #24]
 81072b6:	4013      	ands	r3, r2
 81072b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81072ba:	687b      	ldr	r3, [r7, #4]
 81072bc:	4a20      	ldr	r2, [pc, #128]	@ (8107340 <HAL_GPIO_Init+0x240>)
 81072be:	4293      	cmp	r3, r2
 81072c0:	d052      	beq.n	8107368 <HAL_GPIO_Init+0x268>
 81072c2:	687b      	ldr	r3, [r7, #4]
 81072c4:	4a1f      	ldr	r2, [pc, #124]	@ (8107344 <HAL_GPIO_Init+0x244>)
 81072c6:	4293      	cmp	r3, r2
 81072c8:	d031      	beq.n	810732e <HAL_GPIO_Init+0x22e>
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	4a1e      	ldr	r2, [pc, #120]	@ (8107348 <HAL_GPIO_Init+0x248>)
 81072ce:	4293      	cmp	r3, r2
 81072d0:	d02b      	beq.n	810732a <HAL_GPIO_Init+0x22a>
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	4a1d      	ldr	r2, [pc, #116]	@ (810734c <HAL_GPIO_Init+0x24c>)
 81072d6:	4293      	cmp	r3, r2
 81072d8:	d025      	beq.n	8107326 <HAL_GPIO_Init+0x226>
 81072da:	687b      	ldr	r3, [r7, #4]
 81072dc:	4a1c      	ldr	r2, [pc, #112]	@ (8107350 <HAL_GPIO_Init+0x250>)
 81072de:	4293      	cmp	r3, r2
 81072e0:	d01f      	beq.n	8107322 <HAL_GPIO_Init+0x222>
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	4a1b      	ldr	r2, [pc, #108]	@ (8107354 <HAL_GPIO_Init+0x254>)
 81072e6:	4293      	cmp	r3, r2
 81072e8:	d019      	beq.n	810731e <HAL_GPIO_Init+0x21e>
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	4a1a      	ldr	r2, [pc, #104]	@ (8107358 <HAL_GPIO_Init+0x258>)
 81072ee:	4293      	cmp	r3, r2
 81072f0:	d013      	beq.n	810731a <HAL_GPIO_Init+0x21a>
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	4a19      	ldr	r2, [pc, #100]	@ (810735c <HAL_GPIO_Init+0x25c>)
 81072f6:	4293      	cmp	r3, r2
 81072f8:	d00d      	beq.n	8107316 <HAL_GPIO_Init+0x216>
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	4a18      	ldr	r2, [pc, #96]	@ (8107360 <HAL_GPIO_Init+0x260>)
 81072fe:	4293      	cmp	r3, r2
 8107300:	d007      	beq.n	8107312 <HAL_GPIO_Init+0x212>
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	4a17      	ldr	r2, [pc, #92]	@ (8107364 <HAL_GPIO_Init+0x264>)
 8107306:	4293      	cmp	r3, r2
 8107308:	d101      	bne.n	810730e <HAL_GPIO_Init+0x20e>
 810730a:	2309      	movs	r3, #9
 810730c:	e02d      	b.n	810736a <HAL_GPIO_Init+0x26a>
 810730e:	230a      	movs	r3, #10
 8107310:	e02b      	b.n	810736a <HAL_GPIO_Init+0x26a>
 8107312:	2308      	movs	r3, #8
 8107314:	e029      	b.n	810736a <HAL_GPIO_Init+0x26a>
 8107316:	2307      	movs	r3, #7
 8107318:	e027      	b.n	810736a <HAL_GPIO_Init+0x26a>
 810731a:	2306      	movs	r3, #6
 810731c:	e025      	b.n	810736a <HAL_GPIO_Init+0x26a>
 810731e:	2305      	movs	r3, #5
 8107320:	e023      	b.n	810736a <HAL_GPIO_Init+0x26a>
 8107322:	2304      	movs	r3, #4
 8107324:	e021      	b.n	810736a <HAL_GPIO_Init+0x26a>
 8107326:	2303      	movs	r3, #3
 8107328:	e01f      	b.n	810736a <HAL_GPIO_Init+0x26a>
 810732a:	2302      	movs	r3, #2
 810732c:	e01d      	b.n	810736a <HAL_GPIO_Init+0x26a>
 810732e:	2301      	movs	r3, #1
 8107330:	e01b      	b.n	810736a <HAL_GPIO_Init+0x26a>
 8107332:	bf00      	nop
 8107334:	580000c0 	.word	0x580000c0
 8107338:	58024400 	.word	0x58024400
 810733c:	58000400 	.word	0x58000400
 8107340:	58020000 	.word	0x58020000
 8107344:	58020400 	.word	0x58020400
 8107348:	58020800 	.word	0x58020800
 810734c:	58020c00 	.word	0x58020c00
 8107350:	58021000 	.word	0x58021000
 8107354:	58021400 	.word	0x58021400
 8107358:	58021800 	.word	0x58021800
 810735c:	58021c00 	.word	0x58021c00
 8107360:	58022000 	.word	0x58022000
 8107364:	58022400 	.word	0x58022400
 8107368:	2300      	movs	r3, #0
 810736a:	69fa      	ldr	r2, [r7, #28]
 810736c:	f002 0203 	and.w	r2, r2, #3
 8107370:	0092      	lsls	r2, r2, #2
 8107372:	4093      	lsls	r3, r2
 8107374:	69ba      	ldr	r2, [r7, #24]
 8107376:	4313      	orrs	r3, r2
 8107378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810737a:	4938      	ldr	r1, [pc, #224]	@ (810745c <HAL_GPIO_Init+0x35c>)
 810737c:	69fb      	ldr	r3, [r7, #28]
 810737e:	089b      	lsrs	r3, r3, #2
 8107380:	3302      	adds	r3, #2
 8107382:	69ba      	ldr	r2, [r7, #24]
 8107384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8107388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810738c:	681b      	ldr	r3, [r3, #0]
 810738e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107390:	693b      	ldr	r3, [r7, #16]
 8107392:	43db      	mvns	r3, r3
 8107394:	69ba      	ldr	r2, [r7, #24]
 8107396:	4013      	ands	r3, r2
 8107398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810739a:	683b      	ldr	r3, [r7, #0]
 810739c:	685b      	ldr	r3, [r3, #4]
 810739e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81073a2:	2b00      	cmp	r3, #0
 81073a4:	d003      	beq.n	81073ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81073a6:	69ba      	ldr	r2, [r7, #24]
 81073a8:	693b      	ldr	r3, [r7, #16]
 81073aa:	4313      	orrs	r3, r2
 81073ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81073ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81073b2:	69bb      	ldr	r3, [r7, #24]
 81073b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81073b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81073ba:	685b      	ldr	r3, [r3, #4]
 81073bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81073be:	693b      	ldr	r3, [r7, #16]
 81073c0:	43db      	mvns	r3, r3
 81073c2:	69ba      	ldr	r2, [r7, #24]
 81073c4:	4013      	ands	r3, r2
 81073c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81073c8:	683b      	ldr	r3, [r7, #0]
 81073ca:	685b      	ldr	r3, [r3, #4]
 81073cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81073d0:	2b00      	cmp	r3, #0
 81073d2:	d003      	beq.n	81073dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81073d4:	69ba      	ldr	r2, [r7, #24]
 81073d6:	693b      	ldr	r3, [r7, #16]
 81073d8:	4313      	orrs	r3, r2
 81073da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81073dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81073e0:	69bb      	ldr	r3, [r7, #24]
 81073e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81073e4:	697b      	ldr	r3, [r7, #20]
 81073e6:	685b      	ldr	r3, [r3, #4]
 81073e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81073ea:	693b      	ldr	r3, [r7, #16]
 81073ec:	43db      	mvns	r3, r3
 81073ee:	69ba      	ldr	r2, [r7, #24]
 81073f0:	4013      	ands	r3, r2
 81073f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81073f4:	683b      	ldr	r3, [r7, #0]
 81073f6:	685b      	ldr	r3, [r3, #4]
 81073f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81073fc:	2b00      	cmp	r3, #0
 81073fe:	d003      	beq.n	8107408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8107400:	69ba      	ldr	r2, [r7, #24]
 8107402:	693b      	ldr	r3, [r7, #16]
 8107404:	4313      	orrs	r3, r2
 8107406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8107408:	697b      	ldr	r3, [r7, #20]
 810740a:	69ba      	ldr	r2, [r7, #24]
 810740c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810740e:	697b      	ldr	r3, [r7, #20]
 8107410:	681b      	ldr	r3, [r3, #0]
 8107412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107414:	693b      	ldr	r3, [r7, #16]
 8107416:	43db      	mvns	r3, r3
 8107418:	69ba      	ldr	r2, [r7, #24]
 810741a:	4013      	ands	r3, r2
 810741c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810741e:	683b      	ldr	r3, [r7, #0]
 8107420:	685b      	ldr	r3, [r3, #4]
 8107422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107426:	2b00      	cmp	r3, #0
 8107428:	d003      	beq.n	8107432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810742a:	69ba      	ldr	r2, [r7, #24]
 810742c:	693b      	ldr	r3, [r7, #16]
 810742e:	4313      	orrs	r3, r2
 8107430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8107432:	697b      	ldr	r3, [r7, #20]
 8107434:	69ba      	ldr	r2, [r7, #24]
 8107436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8107438:	69fb      	ldr	r3, [r7, #28]
 810743a:	3301      	adds	r3, #1
 810743c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810743e:	683b      	ldr	r3, [r7, #0]
 8107440:	681a      	ldr	r2, [r3, #0]
 8107442:	69fb      	ldr	r3, [r7, #28]
 8107444:	fa22 f303 	lsr.w	r3, r2, r3
 8107448:	2b00      	cmp	r3, #0
 810744a:	f47f ae63 	bne.w	8107114 <HAL_GPIO_Init+0x14>
  }
}
 810744e:	bf00      	nop
 8107450:	bf00      	nop
 8107452:	3724      	adds	r7, #36	@ 0x24
 8107454:	46bd      	mov	sp, r7
 8107456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810745a:	4770      	bx	lr
 810745c:	58000400 	.word	0x58000400

08107460 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107460:	b480      	push	{r7}
 8107462:	b083      	sub	sp, #12
 8107464:	af00      	add	r7, sp, #0
 8107466:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8107468:	4b05      	ldr	r3, [pc, #20]	@ (8107480 <HAL_HSEM_ActivateNotification+0x20>)
 810746a:	681a      	ldr	r2, [r3, #0]
 810746c:	4904      	ldr	r1, [pc, #16]	@ (8107480 <HAL_HSEM_ActivateNotification+0x20>)
 810746e:	687b      	ldr	r3, [r7, #4]
 8107470:	4313      	orrs	r3, r2
 8107472:	600b      	str	r3, [r1, #0]
#endif
}
 8107474:	bf00      	nop
 8107476:	370c      	adds	r7, #12
 8107478:	46bd      	mov	sp, r7
 810747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810747e:	4770      	bx	lr
 8107480:	58026510 	.word	0x58026510

08107484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8107484:	b580      	push	{r7, lr}
 8107486:	b082      	sub	sp, #8
 8107488:	af00      	add	r7, sp, #0
 810748a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810748c:	687b      	ldr	r3, [r7, #4]
 810748e:	2b00      	cmp	r3, #0
 8107490:	d101      	bne.n	8107496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8107492:	2301      	movs	r3, #1
 8107494:	e08d      	b.n	81075b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8107496:	687b      	ldr	r3, [r7, #4]
 8107498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810749c:	b2db      	uxtb	r3, r3
 810749e:	2b00      	cmp	r3, #0
 81074a0:	d106      	bne.n	81074b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	2200      	movs	r2, #0
 81074a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81074aa:	6878      	ldr	r0, [r7, #4]
 81074ac:	f7fb f876 	bl	810259c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	2224      	movs	r2, #36	@ 0x24
 81074b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	681b      	ldr	r3, [r3, #0]
 81074bc:	681a      	ldr	r2, [r3, #0]
 81074be:	687b      	ldr	r3, [r7, #4]
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	f022 0201 	bic.w	r2, r2, #1
 81074c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	685a      	ldr	r2, [r3, #4]
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 81074d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81074d6:	687b      	ldr	r3, [r7, #4]
 81074d8:	681b      	ldr	r3, [r3, #0]
 81074da:	689a      	ldr	r2, [r3, #8]
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81074e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	68db      	ldr	r3, [r3, #12]
 81074ea:	2b01      	cmp	r3, #1
 81074ec:	d107      	bne.n	81074fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	689a      	ldr	r2, [r3, #8]
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81074fa:	609a      	str	r2, [r3, #8]
 81074fc:	e006      	b.n	810750c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81074fe:	687b      	ldr	r3, [r7, #4]
 8107500:	689a      	ldr	r2, [r3, #8]
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810750a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	68db      	ldr	r3, [r3, #12]
 8107510:	2b02      	cmp	r3, #2
 8107512:	d108      	bne.n	8107526 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8107514:	687b      	ldr	r3, [r7, #4]
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	685a      	ldr	r2, [r3, #4]
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	681b      	ldr	r3, [r3, #0]
 810751e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107522:	605a      	str	r2, [r3, #4]
 8107524:	e007      	b.n	8107536 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8107526:	687b      	ldr	r3, [r7, #4]
 8107528:	681b      	ldr	r3, [r3, #0]
 810752a:	685a      	ldr	r2, [r3, #4]
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	681b      	ldr	r3, [r3, #0]
 8107530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8107534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8107536:	687b      	ldr	r3, [r7, #4]
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	685b      	ldr	r3, [r3, #4]
 810753c:	687a      	ldr	r2, [r7, #4]
 810753e:	6812      	ldr	r2, [r2, #0]
 8107540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8107544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8107548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	681b      	ldr	r3, [r3, #0]
 810754e:	68da      	ldr	r2, [r3, #12]
 8107550:	687b      	ldr	r3, [r7, #4]
 8107552:	681b      	ldr	r3, [r3, #0]
 8107554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8107558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	691a      	ldr	r2, [r3, #16]
 810755e:	687b      	ldr	r3, [r7, #4]
 8107560:	695b      	ldr	r3, [r3, #20]
 8107562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	699b      	ldr	r3, [r3, #24]
 810756a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	681b      	ldr	r3, [r3, #0]
 8107570:	430a      	orrs	r2, r1
 8107572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8107574:	687b      	ldr	r3, [r7, #4]
 8107576:	69d9      	ldr	r1, [r3, #28]
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	6a1a      	ldr	r2, [r3, #32]
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	681b      	ldr	r3, [r3, #0]
 8107580:	430a      	orrs	r2, r1
 8107582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	681a      	ldr	r2, [r3, #0]
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	681b      	ldr	r3, [r3, #0]
 810758e:	f042 0201 	orr.w	r2, r2, #1
 8107592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	2200      	movs	r2, #0
 8107598:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	2220      	movs	r2, #32
 810759e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	2200      	movs	r2, #0
 81075a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81075a8:	687b      	ldr	r3, [r7, #4]
 81075aa:	2200      	movs	r2, #0
 81075ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 81075b0:	2300      	movs	r3, #0
}
 81075b2:	4618      	mov	r0, r3
 81075b4:	3708      	adds	r7, #8
 81075b6:	46bd      	mov	sp, r7
 81075b8:	bd80      	pop	{r7, pc}
	...

081075bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81075bc:	b580      	push	{r7, lr}
 81075be:	b088      	sub	sp, #32
 81075c0:	af02      	add	r7, sp, #8
 81075c2:	60f8      	str	r0, [r7, #12]
 81075c4:	4608      	mov	r0, r1
 81075c6:	4611      	mov	r1, r2
 81075c8:	461a      	mov	r2, r3
 81075ca:	4603      	mov	r3, r0
 81075cc:	817b      	strh	r3, [r7, #10]
 81075ce:	460b      	mov	r3, r1
 81075d0:	813b      	strh	r3, [r7, #8]
 81075d2:	4613      	mov	r3, r2
 81075d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81075dc:	b2db      	uxtb	r3, r3
 81075de:	2b20      	cmp	r3, #32
 81075e0:	f040 80f9 	bne.w	81077d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81075e4:	6a3b      	ldr	r3, [r7, #32]
 81075e6:	2b00      	cmp	r3, #0
 81075e8:	d002      	beq.n	81075f0 <HAL_I2C_Mem_Write+0x34>
 81075ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81075ec:	2b00      	cmp	r3, #0
 81075ee:	d105      	bne.n	81075fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81075f0:	68fb      	ldr	r3, [r7, #12]
 81075f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81075f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 81075f8:	2301      	movs	r3, #1
 81075fa:	e0ed      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81075fc:	68fb      	ldr	r3, [r7, #12]
 81075fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107602:	2b01      	cmp	r3, #1
 8107604:	d101      	bne.n	810760a <HAL_I2C_Mem_Write+0x4e>
 8107606:	2302      	movs	r3, #2
 8107608:	e0e6      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
 810760a:	68fb      	ldr	r3, [r7, #12]
 810760c:	2201      	movs	r2, #1
 810760e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8107612:	f7fb fa99 	bl	8102b48 <HAL_GetTick>
 8107616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107618:	697b      	ldr	r3, [r7, #20]
 810761a:	9300      	str	r3, [sp, #0]
 810761c:	2319      	movs	r3, #25
 810761e:	2201      	movs	r2, #1
 8107620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107624:	68f8      	ldr	r0, [r7, #12]
 8107626:	f001 f94a 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 810762a:	4603      	mov	r3, r0
 810762c:	2b00      	cmp	r3, #0
 810762e:	d001      	beq.n	8107634 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8107630:	2301      	movs	r3, #1
 8107632:	e0d1      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8107634:	68fb      	ldr	r3, [r7, #12]
 8107636:	2221      	movs	r2, #33	@ 0x21
 8107638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810763c:	68fb      	ldr	r3, [r7, #12]
 810763e:	2240      	movs	r2, #64	@ 0x40
 8107640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107644:	68fb      	ldr	r3, [r7, #12]
 8107646:	2200      	movs	r2, #0
 8107648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810764a:	68fb      	ldr	r3, [r7, #12]
 810764c:	6a3a      	ldr	r2, [r7, #32]
 810764e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8107650:	68fb      	ldr	r3, [r7, #12]
 8107652:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8107654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8107656:	68fb      	ldr	r3, [r7, #12]
 8107658:	2200      	movs	r2, #0
 810765a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810765c:	88f8      	ldrh	r0, [r7, #6]
 810765e:	893a      	ldrh	r2, [r7, #8]
 8107660:	8979      	ldrh	r1, [r7, #10]
 8107662:	697b      	ldr	r3, [r7, #20]
 8107664:	9301      	str	r3, [sp, #4]
 8107666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107668:	9300      	str	r3, [sp, #0]
 810766a:	4603      	mov	r3, r0
 810766c:	68f8      	ldr	r0, [r7, #12]
 810766e:	f000 fb93 	bl	8107d98 <I2C_RequestMemoryWrite>
 8107672:	4603      	mov	r3, r0
 8107674:	2b00      	cmp	r3, #0
 8107676:	d005      	beq.n	8107684 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	2200      	movs	r2, #0
 810767c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8107680:	2301      	movs	r3, #1
 8107682:	e0a9      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107688:	b29b      	uxth	r3, r3
 810768a:	2bff      	cmp	r3, #255	@ 0xff
 810768c:	d90e      	bls.n	81076ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810768e:	68fb      	ldr	r3, [r7, #12]
 8107690:	22ff      	movs	r2, #255	@ 0xff
 8107692:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107694:	68fb      	ldr	r3, [r7, #12]
 8107696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107698:	b2da      	uxtb	r2, r3
 810769a:	8979      	ldrh	r1, [r7, #10]
 810769c:	2300      	movs	r3, #0
 810769e:	9300      	str	r3, [sp, #0]
 81076a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81076a4:	68f8      	ldr	r0, [r7, #12]
 81076a6:	f001 facd 	bl	8108c44 <I2C_TransferConfig>
 81076aa:	e00f      	b.n	81076cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81076ac:	68fb      	ldr	r3, [r7, #12]
 81076ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81076b0:	b29a      	uxth	r2, r3
 81076b2:	68fb      	ldr	r3, [r7, #12]
 81076b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81076b6:	68fb      	ldr	r3, [r7, #12]
 81076b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81076ba:	b2da      	uxtb	r2, r3
 81076bc:	8979      	ldrh	r1, [r7, #10]
 81076be:	2300      	movs	r3, #0
 81076c0:	9300      	str	r3, [sp, #0]
 81076c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81076c6:	68f8      	ldr	r0, [r7, #12]
 81076c8:	f001 fabc 	bl	8108c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81076cc:	697a      	ldr	r2, [r7, #20]
 81076ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81076d0:	68f8      	ldr	r0, [r7, #12]
 81076d2:	f001 f94d 	bl	8108970 <I2C_WaitOnTXISFlagUntilTimeout>
 81076d6:	4603      	mov	r3, r0
 81076d8:	2b00      	cmp	r3, #0
 81076da:	d001      	beq.n	81076e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81076dc:	2301      	movs	r3, #1
 81076de:	e07b      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81076e0:	68fb      	ldr	r3, [r7, #12]
 81076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81076e4:	781a      	ldrb	r2, [r3, #0]
 81076e6:	68fb      	ldr	r3, [r7, #12]
 81076e8:	681b      	ldr	r3, [r3, #0]
 81076ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81076ec:	68fb      	ldr	r3, [r7, #12]
 81076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81076f0:	1c5a      	adds	r2, r3, #1
 81076f2:	68fb      	ldr	r3, [r7, #12]
 81076f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81076f6:	68fb      	ldr	r3, [r7, #12]
 81076f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81076fa:	b29b      	uxth	r3, r3
 81076fc:	3b01      	subs	r3, #1
 81076fe:	b29a      	uxth	r2, r3
 8107700:	68fb      	ldr	r3, [r7, #12]
 8107702:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8107704:	68fb      	ldr	r3, [r7, #12]
 8107706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107708:	3b01      	subs	r3, #1
 810770a:	b29a      	uxth	r2, r3
 810770c:	68fb      	ldr	r3, [r7, #12]
 810770e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8107710:	68fb      	ldr	r3, [r7, #12]
 8107712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107714:	b29b      	uxth	r3, r3
 8107716:	2b00      	cmp	r3, #0
 8107718:	d034      	beq.n	8107784 <HAL_I2C_Mem_Write+0x1c8>
 810771a:	68fb      	ldr	r3, [r7, #12]
 810771c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810771e:	2b00      	cmp	r3, #0
 8107720:	d130      	bne.n	8107784 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8107722:	697b      	ldr	r3, [r7, #20]
 8107724:	9300      	str	r3, [sp, #0]
 8107726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107728:	2200      	movs	r2, #0
 810772a:	2180      	movs	r1, #128	@ 0x80
 810772c:	68f8      	ldr	r0, [r7, #12]
 810772e:	f001 f8c6 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 8107732:	4603      	mov	r3, r0
 8107734:	2b00      	cmp	r3, #0
 8107736:	d001      	beq.n	810773c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8107738:	2301      	movs	r3, #1
 810773a:	e04d      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810773c:	68fb      	ldr	r3, [r7, #12]
 810773e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107740:	b29b      	uxth	r3, r3
 8107742:	2bff      	cmp	r3, #255	@ 0xff
 8107744:	d90e      	bls.n	8107764 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107746:	68fb      	ldr	r3, [r7, #12]
 8107748:	22ff      	movs	r2, #255	@ 0xff
 810774a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810774c:	68fb      	ldr	r3, [r7, #12]
 810774e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107750:	b2da      	uxtb	r2, r3
 8107752:	8979      	ldrh	r1, [r7, #10]
 8107754:	2300      	movs	r3, #0
 8107756:	9300      	str	r3, [sp, #0]
 8107758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810775c:	68f8      	ldr	r0, [r7, #12]
 810775e:	f001 fa71 	bl	8108c44 <I2C_TransferConfig>
 8107762:	e00f      	b.n	8107784 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107764:	68fb      	ldr	r3, [r7, #12]
 8107766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107768:	b29a      	uxth	r2, r3
 810776a:	68fb      	ldr	r3, [r7, #12]
 810776c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810776e:	68fb      	ldr	r3, [r7, #12]
 8107770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107772:	b2da      	uxtb	r2, r3
 8107774:	8979      	ldrh	r1, [r7, #10]
 8107776:	2300      	movs	r3, #0
 8107778:	9300      	str	r3, [sp, #0]
 810777a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810777e:	68f8      	ldr	r0, [r7, #12]
 8107780:	f001 fa60 	bl	8108c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8107784:	68fb      	ldr	r3, [r7, #12]
 8107786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107788:	b29b      	uxth	r3, r3
 810778a:	2b00      	cmp	r3, #0
 810778c:	d19e      	bne.n	81076cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810778e:	697a      	ldr	r2, [r7, #20]
 8107790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8107792:	68f8      	ldr	r0, [r7, #12]
 8107794:	f001 f933 	bl	81089fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8107798:	4603      	mov	r3, r0
 810779a:	2b00      	cmp	r3, #0
 810779c:	d001      	beq.n	81077a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810779e:	2301      	movs	r3, #1
 81077a0:	e01a      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81077a2:	68fb      	ldr	r3, [r7, #12]
 81077a4:	681b      	ldr	r3, [r3, #0]
 81077a6:	2220      	movs	r2, #32
 81077a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81077aa:	68fb      	ldr	r3, [r7, #12]
 81077ac:	681b      	ldr	r3, [r3, #0]
 81077ae:	6859      	ldr	r1, [r3, #4]
 81077b0:	68fb      	ldr	r3, [r7, #12]
 81077b2:	681a      	ldr	r2, [r3, #0]
 81077b4:	4b0a      	ldr	r3, [pc, #40]	@ (81077e0 <HAL_I2C_Mem_Write+0x224>)
 81077b6:	400b      	ands	r3, r1
 81077b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81077ba:	68fb      	ldr	r3, [r7, #12]
 81077bc:	2220      	movs	r2, #32
 81077be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81077c2:	68fb      	ldr	r3, [r7, #12]
 81077c4:	2200      	movs	r2, #0
 81077c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81077ca:	68fb      	ldr	r3, [r7, #12]
 81077cc:	2200      	movs	r2, #0
 81077ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81077d2:	2300      	movs	r3, #0
 81077d4:	e000      	b.n	81077d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81077d6:	2302      	movs	r3, #2
  }
}
 81077d8:	4618      	mov	r0, r3
 81077da:	3718      	adds	r7, #24
 81077dc:	46bd      	mov	sp, r7
 81077de:	bd80      	pop	{r7, pc}
 81077e0:	fe00e800 	.word	0xfe00e800

081077e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81077e4:	b580      	push	{r7, lr}
 81077e6:	b088      	sub	sp, #32
 81077e8:	af02      	add	r7, sp, #8
 81077ea:	60f8      	str	r0, [r7, #12]
 81077ec:	4608      	mov	r0, r1
 81077ee:	4611      	mov	r1, r2
 81077f0:	461a      	mov	r2, r3
 81077f2:	4603      	mov	r3, r0
 81077f4:	817b      	strh	r3, [r7, #10]
 81077f6:	460b      	mov	r3, r1
 81077f8:	813b      	strh	r3, [r7, #8]
 81077fa:	4613      	mov	r3, r2
 81077fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81077fe:	68fb      	ldr	r3, [r7, #12]
 8107800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107804:	b2db      	uxtb	r3, r3
 8107806:	2b20      	cmp	r3, #32
 8107808:	f040 80fd 	bne.w	8107a06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810780c:	6a3b      	ldr	r3, [r7, #32]
 810780e:	2b00      	cmp	r3, #0
 8107810:	d002      	beq.n	8107818 <HAL_I2C_Mem_Read+0x34>
 8107812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8107814:	2b00      	cmp	r3, #0
 8107816:	d105      	bne.n	8107824 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8107818:	68fb      	ldr	r3, [r7, #12]
 810781a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810781e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8107820:	2301      	movs	r3, #1
 8107822:	e0f1      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107824:	68fb      	ldr	r3, [r7, #12]
 8107826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810782a:	2b01      	cmp	r3, #1
 810782c:	d101      	bne.n	8107832 <HAL_I2C_Mem_Read+0x4e>
 810782e:	2302      	movs	r3, #2
 8107830:	e0ea      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
 8107832:	68fb      	ldr	r3, [r7, #12]
 8107834:	2201      	movs	r2, #1
 8107836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810783a:	f7fb f985 	bl	8102b48 <HAL_GetTick>
 810783e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107840:	697b      	ldr	r3, [r7, #20]
 8107842:	9300      	str	r3, [sp, #0]
 8107844:	2319      	movs	r3, #25
 8107846:	2201      	movs	r2, #1
 8107848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810784c:	68f8      	ldr	r0, [r7, #12]
 810784e:	f001 f836 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 8107852:	4603      	mov	r3, r0
 8107854:	2b00      	cmp	r3, #0
 8107856:	d001      	beq.n	810785c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8107858:	2301      	movs	r3, #1
 810785a:	e0d5      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810785c:	68fb      	ldr	r3, [r7, #12]
 810785e:	2222      	movs	r2, #34	@ 0x22
 8107860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8107864:	68fb      	ldr	r3, [r7, #12]
 8107866:	2240      	movs	r2, #64	@ 0x40
 8107868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	2200      	movs	r2, #0
 8107870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8107872:	68fb      	ldr	r3, [r7, #12]
 8107874:	6a3a      	ldr	r2, [r7, #32]
 8107876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8107878:	68fb      	ldr	r3, [r7, #12]
 810787a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810787c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810787e:	68fb      	ldr	r3, [r7, #12]
 8107880:	2200      	movs	r2, #0
 8107882:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8107884:	88f8      	ldrh	r0, [r7, #6]
 8107886:	893a      	ldrh	r2, [r7, #8]
 8107888:	8979      	ldrh	r1, [r7, #10]
 810788a:	697b      	ldr	r3, [r7, #20]
 810788c:	9301      	str	r3, [sp, #4]
 810788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107890:	9300      	str	r3, [sp, #0]
 8107892:	4603      	mov	r3, r0
 8107894:	68f8      	ldr	r0, [r7, #12]
 8107896:	f000 fad3 	bl	8107e40 <I2C_RequestMemoryRead>
 810789a:	4603      	mov	r3, r0
 810789c:	2b00      	cmp	r3, #0
 810789e:	d005      	beq.n	81078ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81078a0:	68fb      	ldr	r3, [r7, #12]
 81078a2:	2200      	movs	r2, #0
 81078a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 81078a8:	2301      	movs	r3, #1
 81078aa:	e0ad      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81078ac:	68fb      	ldr	r3, [r7, #12]
 81078ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81078b0:	b29b      	uxth	r3, r3
 81078b2:	2bff      	cmp	r3, #255	@ 0xff
 81078b4:	d90e      	bls.n	81078d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81078b6:	68fb      	ldr	r3, [r7, #12]
 81078b8:	22ff      	movs	r2, #255	@ 0xff
 81078ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81078bc:	68fb      	ldr	r3, [r7, #12]
 81078be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81078c0:	b2da      	uxtb	r2, r3
 81078c2:	8979      	ldrh	r1, [r7, #10]
 81078c4:	4b52      	ldr	r3, [pc, #328]	@ (8107a10 <HAL_I2C_Mem_Read+0x22c>)
 81078c6:	9300      	str	r3, [sp, #0]
 81078c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81078cc:	68f8      	ldr	r0, [r7, #12]
 81078ce:	f001 f9b9 	bl	8108c44 <I2C_TransferConfig>
 81078d2:	e00f      	b.n	81078f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81078d4:	68fb      	ldr	r3, [r7, #12]
 81078d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81078d8:	b29a      	uxth	r2, r3
 81078da:	68fb      	ldr	r3, [r7, #12]
 81078dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81078de:	68fb      	ldr	r3, [r7, #12]
 81078e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81078e2:	b2da      	uxtb	r2, r3
 81078e4:	8979      	ldrh	r1, [r7, #10]
 81078e6:	4b4a      	ldr	r3, [pc, #296]	@ (8107a10 <HAL_I2C_Mem_Read+0x22c>)
 81078e8:	9300      	str	r3, [sp, #0]
 81078ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81078ee:	68f8      	ldr	r0, [r7, #12]
 81078f0:	f001 f9a8 	bl	8108c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81078f4:	697b      	ldr	r3, [r7, #20]
 81078f6:	9300      	str	r3, [sp, #0]
 81078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078fa:	2200      	movs	r2, #0
 81078fc:	2104      	movs	r1, #4
 81078fe:	68f8      	ldr	r0, [r7, #12]
 8107900:	f000 ffdd 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 8107904:	4603      	mov	r3, r0
 8107906:	2b00      	cmp	r3, #0
 8107908:	d001      	beq.n	810790e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810790a:	2301      	movs	r3, #1
 810790c:	e07c      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810790e:	68fb      	ldr	r3, [r7, #12]
 8107910:	681b      	ldr	r3, [r3, #0]
 8107912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8107914:	68fb      	ldr	r3, [r7, #12]
 8107916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107918:	b2d2      	uxtb	r2, r2
 810791a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810791c:	68fb      	ldr	r3, [r7, #12]
 810791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107920:	1c5a      	adds	r2, r3, #1
 8107922:	68fb      	ldr	r3, [r7, #12]
 8107924:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8107926:	68fb      	ldr	r3, [r7, #12]
 8107928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810792a:	3b01      	subs	r3, #1
 810792c:	b29a      	uxth	r2, r3
 810792e:	68fb      	ldr	r3, [r7, #12]
 8107930:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8107932:	68fb      	ldr	r3, [r7, #12]
 8107934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107936:	b29b      	uxth	r3, r3
 8107938:	3b01      	subs	r3, #1
 810793a:	b29a      	uxth	r2, r3
 810793c:	68fb      	ldr	r3, [r7, #12]
 810793e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8107940:	68fb      	ldr	r3, [r7, #12]
 8107942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107944:	b29b      	uxth	r3, r3
 8107946:	2b00      	cmp	r3, #0
 8107948:	d034      	beq.n	81079b4 <HAL_I2C_Mem_Read+0x1d0>
 810794a:	68fb      	ldr	r3, [r7, #12]
 810794c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810794e:	2b00      	cmp	r3, #0
 8107950:	d130      	bne.n	81079b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8107952:	697b      	ldr	r3, [r7, #20]
 8107954:	9300      	str	r3, [sp, #0]
 8107956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107958:	2200      	movs	r2, #0
 810795a:	2180      	movs	r1, #128	@ 0x80
 810795c:	68f8      	ldr	r0, [r7, #12]
 810795e:	f000 ffae 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 8107962:	4603      	mov	r3, r0
 8107964:	2b00      	cmp	r3, #0
 8107966:	d001      	beq.n	810796c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8107968:	2301      	movs	r3, #1
 810796a:	e04d      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810796c:	68fb      	ldr	r3, [r7, #12]
 810796e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107970:	b29b      	uxth	r3, r3
 8107972:	2bff      	cmp	r3, #255	@ 0xff
 8107974:	d90e      	bls.n	8107994 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107976:	68fb      	ldr	r3, [r7, #12]
 8107978:	22ff      	movs	r2, #255	@ 0xff
 810797a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810797c:	68fb      	ldr	r3, [r7, #12]
 810797e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107980:	b2da      	uxtb	r2, r3
 8107982:	8979      	ldrh	r1, [r7, #10]
 8107984:	2300      	movs	r3, #0
 8107986:	9300      	str	r3, [sp, #0]
 8107988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810798c:	68f8      	ldr	r0, [r7, #12]
 810798e:	f001 f959 	bl	8108c44 <I2C_TransferConfig>
 8107992:	e00f      	b.n	81079b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107994:	68fb      	ldr	r3, [r7, #12]
 8107996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107998:	b29a      	uxth	r2, r3
 810799a:	68fb      	ldr	r3, [r7, #12]
 810799c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810799e:	68fb      	ldr	r3, [r7, #12]
 81079a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81079a2:	b2da      	uxtb	r2, r3
 81079a4:	8979      	ldrh	r1, [r7, #10]
 81079a6:	2300      	movs	r3, #0
 81079a8:	9300      	str	r3, [sp, #0]
 81079aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81079ae:	68f8      	ldr	r0, [r7, #12]
 81079b0:	f001 f948 	bl	8108c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 81079b4:	68fb      	ldr	r3, [r7, #12]
 81079b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81079b8:	b29b      	uxth	r3, r3
 81079ba:	2b00      	cmp	r3, #0
 81079bc:	d19a      	bne.n	81078f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81079be:	697a      	ldr	r2, [r7, #20]
 81079c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81079c2:	68f8      	ldr	r0, [r7, #12]
 81079c4:	f001 f81b 	bl	81089fe <I2C_WaitOnSTOPFlagUntilTimeout>
 81079c8:	4603      	mov	r3, r0
 81079ca:	2b00      	cmp	r3, #0
 81079cc:	d001      	beq.n	81079d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81079ce:	2301      	movs	r3, #1
 81079d0:	e01a      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81079d2:	68fb      	ldr	r3, [r7, #12]
 81079d4:	681b      	ldr	r3, [r3, #0]
 81079d6:	2220      	movs	r2, #32
 81079d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81079da:	68fb      	ldr	r3, [r7, #12]
 81079dc:	681b      	ldr	r3, [r3, #0]
 81079de:	6859      	ldr	r1, [r3, #4]
 81079e0:	68fb      	ldr	r3, [r7, #12]
 81079e2:	681a      	ldr	r2, [r3, #0]
 81079e4:	4b0b      	ldr	r3, [pc, #44]	@ (8107a14 <HAL_I2C_Mem_Read+0x230>)
 81079e6:	400b      	ands	r3, r1
 81079e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81079ea:	68fb      	ldr	r3, [r7, #12]
 81079ec:	2220      	movs	r2, #32
 81079ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81079f2:	68fb      	ldr	r3, [r7, #12]
 81079f4:	2200      	movs	r2, #0
 81079f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81079fa:	68fb      	ldr	r3, [r7, #12]
 81079fc:	2200      	movs	r2, #0
 81079fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107a02:	2300      	movs	r3, #0
 8107a04:	e000      	b.n	8107a08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8107a06:	2302      	movs	r3, #2
  }
}
 8107a08:	4618      	mov	r0, r3
 8107a0a:	3718      	adds	r7, #24
 8107a0c:	46bd      	mov	sp, r7
 8107a0e:	bd80      	pop	{r7, pc}
 8107a10:	80002400 	.word	0x80002400
 8107a14:	fe00e800 	.word	0xfe00e800

08107a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8107a18:	b580      	push	{r7, lr}
 8107a1a:	b084      	sub	sp, #16
 8107a1c:	af00      	add	r7, sp, #0
 8107a1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	699b      	ldr	r3, [r3, #24]
 8107a26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107a34:	2b00      	cmp	r3, #0
 8107a36:	d005      	beq.n	8107a44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107a3c:	68ba      	ldr	r2, [r7, #8]
 8107a3e:	68f9      	ldr	r1, [r7, #12]
 8107a40:	6878      	ldr	r0, [r7, #4]
 8107a42:	4798      	blx	r3
  }
}
 8107a44:	bf00      	nop
 8107a46:	3710      	adds	r7, #16
 8107a48:	46bd      	mov	sp, r7
 8107a4a:	bd80      	pop	{r7, pc}

08107a4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107a4c:	b580      	push	{r7, lr}
 8107a4e:	b086      	sub	sp, #24
 8107a50:	af00      	add	r7, sp, #0
 8107a52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	681b      	ldr	r3, [r3, #0]
 8107a58:	699b      	ldr	r3, [r3, #24]
 8107a5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107a5c:	687b      	ldr	r3, [r7, #4]
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8107a64:	697b      	ldr	r3, [r7, #20]
 8107a66:	0a1b      	lsrs	r3, r3, #8
 8107a68:	f003 0301 	and.w	r3, r3, #1
 8107a6c:	2b00      	cmp	r3, #0
 8107a6e:	d010      	beq.n	8107a92 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107a70:	693b      	ldr	r3, [r7, #16]
 8107a72:	09db      	lsrs	r3, r3, #7
 8107a74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8107a78:	2b00      	cmp	r3, #0
 8107a7a:	d00a      	beq.n	8107a92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107a80:	f043 0201 	orr.w	r2, r3, #1
 8107a84:	687b      	ldr	r3, [r7, #4]
 8107a86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	681b      	ldr	r3, [r3, #0]
 8107a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107a90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8107a92:	697b      	ldr	r3, [r7, #20]
 8107a94:	0a9b      	lsrs	r3, r3, #10
 8107a96:	f003 0301 	and.w	r3, r3, #1
 8107a9a:	2b00      	cmp	r3, #0
 8107a9c:	d010      	beq.n	8107ac0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107a9e:	693b      	ldr	r3, [r7, #16]
 8107aa0:	09db      	lsrs	r3, r3, #7
 8107aa2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8107aa6:	2b00      	cmp	r3, #0
 8107aa8:	d00a      	beq.n	8107ac0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107aae:	f043 0208 	orr.w	r2, r3, #8
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8107abe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8107ac0:	697b      	ldr	r3, [r7, #20]
 8107ac2:	0a5b      	lsrs	r3, r3, #9
 8107ac4:	f003 0301 	and.w	r3, r3, #1
 8107ac8:	2b00      	cmp	r3, #0
 8107aca:	d010      	beq.n	8107aee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107acc:	693b      	ldr	r3, [r7, #16]
 8107ace:	09db      	lsrs	r3, r3, #7
 8107ad0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8107ad4:	2b00      	cmp	r3, #0
 8107ad6:	d00a      	beq.n	8107aee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107adc:	f043 0202 	orr.w	r2, r3, #2
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	681b      	ldr	r3, [r3, #0]
 8107ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8107aec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107af2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8107af4:	68fb      	ldr	r3, [r7, #12]
 8107af6:	f003 030b 	and.w	r3, r3, #11
 8107afa:	2b00      	cmp	r3, #0
 8107afc:	d003      	beq.n	8107b06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8107afe:	68f9      	ldr	r1, [r7, #12]
 8107b00:	6878      	ldr	r0, [r7, #4]
 8107b02:	f000 fd83 	bl	810860c <I2C_ITError>
  }
}
 8107b06:	bf00      	nop
 8107b08:	3718      	adds	r7, #24
 8107b0a:	46bd      	mov	sp, r7
 8107b0c:	bd80      	pop	{r7, pc}

08107b0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107b0e:	b480      	push	{r7}
 8107b10:	b083      	sub	sp, #12
 8107b12:	af00      	add	r7, sp, #0
 8107b14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8107b16:	bf00      	nop
 8107b18:	370c      	adds	r7, #12
 8107b1a:	46bd      	mov	sp, r7
 8107b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b20:	4770      	bx	lr

08107b22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107b22:	b480      	push	{r7}
 8107b24:	b083      	sub	sp, #12
 8107b26:	af00      	add	r7, sp, #0
 8107b28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8107b2a:	bf00      	nop
 8107b2c:	370c      	adds	r7, #12
 8107b2e:	46bd      	mov	sp, r7
 8107b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b34:	4770      	bx	lr

08107b36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8107b36:	b480      	push	{r7}
 8107b38:	b083      	sub	sp, #12
 8107b3a:	af00      	add	r7, sp, #0
 8107b3c:	6078      	str	r0, [r7, #4]
 8107b3e:	460b      	mov	r3, r1
 8107b40:	70fb      	strb	r3, [r7, #3]
 8107b42:	4613      	mov	r3, r2
 8107b44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8107b46:	bf00      	nop
 8107b48:	370c      	adds	r7, #12
 8107b4a:	46bd      	mov	sp, r7
 8107b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b50:	4770      	bx	lr

08107b52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107b52:	b480      	push	{r7}
 8107b54:	b083      	sub	sp, #12
 8107b56:	af00      	add	r7, sp, #0
 8107b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8107b5a:	bf00      	nop
 8107b5c:	370c      	adds	r7, #12
 8107b5e:	46bd      	mov	sp, r7
 8107b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b64:	4770      	bx	lr

08107b66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107b66:	b480      	push	{r7}
 8107b68:	b083      	sub	sp, #12
 8107b6a:	af00      	add	r7, sp, #0
 8107b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8107b6e:	bf00      	nop
 8107b70:	370c      	adds	r7, #12
 8107b72:	46bd      	mov	sp, r7
 8107b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b78:	4770      	bx	lr

08107b7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107b7a:	b480      	push	{r7}
 8107b7c:	b083      	sub	sp, #12
 8107b7e:	af00      	add	r7, sp, #0
 8107b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8107b82:	bf00      	nop
 8107b84:	370c      	adds	r7, #12
 8107b86:	46bd      	mov	sp, r7
 8107b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b8c:	4770      	bx	lr

08107b8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8107b8e:	b580      	push	{r7, lr}
 8107b90:	b086      	sub	sp, #24
 8107b92:	af00      	add	r7, sp, #0
 8107b94:	60f8      	str	r0, [r7, #12]
 8107b96:	60b9      	str	r1, [r7, #8]
 8107b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107b9a:	68fb      	ldr	r3, [r7, #12]
 8107b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8107ba0:	68bb      	ldr	r3, [r7, #8]
 8107ba2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8107ba4:	68fb      	ldr	r3, [r7, #12]
 8107ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107baa:	2b01      	cmp	r3, #1
 8107bac:	d101      	bne.n	8107bb2 <I2C_Slave_ISR_IT+0x24>
 8107bae:	2302      	movs	r3, #2
 8107bb0:	e0ed      	b.n	8107d8e <I2C_Slave_ISR_IT+0x200>
 8107bb2:	68fb      	ldr	r3, [r7, #12]
 8107bb4:	2201      	movs	r2, #1
 8107bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8107bba:	693b      	ldr	r3, [r7, #16]
 8107bbc:	095b      	lsrs	r3, r3, #5
 8107bbe:	f003 0301 	and.w	r3, r3, #1
 8107bc2:	2b00      	cmp	r3, #0
 8107bc4:	d00a      	beq.n	8107bdc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107bc6:	687b      	ldr	r3, [r7, #4]
 8107bc8:	095b      	lsrs	r3, r3, #5
 8107bca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8107bce:	2b00      	cmp	r3, #0
 8107bd0:	d004      	beq.n	8107bdc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8107bd2:	6939      	ldr	r1, [r7, #16]
 8107bd4:	68f8      	ldr	r0, [r7, #12]
 8107bd6:	f000 fa69 	bl	81080ac <I2C_ITSlaveCplt>
 8107bda:	e0d3      	b.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8107bdc:	693b      	ldr	r3, [r7, #16]
 8107bde:	091b      	lsrs	r3, r3, #4
 8107be0:	f003 0301 	and.w	r3, r3, #1
 8107be4:	2b00      	cmp	r3, #0
 8107be6:	d04d      	beq.n	8107c84 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	091b      	lsrs	r3, r3, #4
 8107bec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8107bf0:	2b00      	cmp	r3, #0
 8107bf2:	d047      	beq.n	8107c84 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8107bf4:	68fb      	ldr	r3, [r7, #12]
 8107bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107bf8:	b29b      	uxth	r3, r3
 8107bfa:	2b00      	cmp	r3, #0
 8107bfc:	d128      	bne.n	8107c50 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8107bfe:	68fb      	ldr	r3, [r7, #12]
 8107c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107c04:	b2db      	uxtb	r3, r3
 8107c06:	2b28      	cmp	r3, #40	@ 0x28
 8107c08:	d108      	bne.n	8107c1c <I2C_Slave_ISR_IT+0x8e>
 8107c0a:	697b      	ldr	r3, [r7, #20]
 8107c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c10:	d104      	bne.n	8107c1c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8107c12:	6939      	ldr	r1, [r7, #16]
 8107c14:	68f8      	ldr	r0, [r7, #12]
 8107c16:	f000 fca3 	bl	8108560 <I2C_ITListenCplt>
 8107c1a:	e032      	b.n	8107c82 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8107c1c:	68fb      	ldr	r3, [r7, #12]
 8107c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107c22:	b2db      	uxtb	r3, r3
 8107c24:	2b29      	cmp	r3, #41	@ 0x29
 8107c26:	d10e      	bne.n	8107c46 <I2C_Slave_ISR_IT+0xb8>
 8107c28:	697b      	ldr	r3, [r7, #20]
 8107c2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8107c2e:	d00a      	beq.n	8107c46 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c30:	68fb      	ldr	r3, [r7, #12]
 8107c32:	681b      	ldr	r3, [r3, #0]
 8107c34:	2210      	movs	r2, #16
 8107c36:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8107c38:	68f8      	ldr	r0, [r7, #12]
 8107c3a:	f000 fdfe 	bl	810883a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107c3e:	68f8      	ldr	r0, [r7, #12]
 8107c40:	f000 f9d6 	bl	8107ff0 <I2C_ITSlaveSeqCplt>
 8107c44:	e01d      	b.n	8107c82 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c46:	68fb      	ldr	r3, [r7, #12]
 8107c48:	681b      	ldr	r3, [r3, #0]
 8107c4a:	2210      	movs	r2, #16
 8107c4c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8107c4e:	e096      	b.n	8107d7e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c50:	68fb      	ldr	r3, [r7, #12]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	2210      	movs	r2, #16
 8107c56:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107c58:	68fb      	ldr	r3, [r7, #12]
 8107c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c5c:	f043 0204 	orr.w	r2, r3, #4
 8107c60:	68fb      	ldr	r3, [r7, #12]
 8107c62:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8107c64:	697b      	ldr	r3, [r7, #20]
 8107c66:	2b00      	cmp	r3, #0
 8107c68:	d004      	beq.n	8107c74 <I2C_Slave_ISR_IT+0xe6>
 8107c6a:	697b      	ldr	r3, [r7, #20]
 8107c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107c70:	f040 8085 	bne.w	8107d7e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c78:	4619      	mov	r1, r3
 8107c7a:	68f8      	ldr	r0, [r7, #12]
 8107c7c:	f000 fcc6 	bl	810860c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8107c80:	e07d      	b.n	8107d7e <I2C_Slave_ISR_IT+0x1f0>
 8107c82:	e07c      	b.n	8107d7e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8107c84:	693b      	ldr	r3, [r7, #16]
 8107c86:	089b      	lsrs	r3, r3, #2
 8107c88:	f003 0301 	and.w	r3, r3, #1
 8107c8c:	2b00      	cmp	r3, #0
 8107c8e:	d030      	beq.n	8107cf2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	089b      	lsrs	r3, r3, #2
 8107c94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8107c98:	2b00      	cmp	r3, #0
 8107c9a:	d02a      	beq.n	8107cf2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8107c9c:	68fb      	ldr	r3, [r7, #12]
 8107c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107ca0:	b29b      	uxth	r3, r3
 8107ca2:	2b00      	cmp	r3, #0
 8107ca4:	d018      	beq.n	8107cd8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107ca6:	68fb      	ldr	r3, [r7, #12]
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8107cac:	68fb      	ldr	r3, [r7, #12]
 8107cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107cb0:	b2d2      	uxtb	r2, r2
 8107cb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107cb4:	68fb      	ldr	r3, [r7, #12]
 8107cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107cb8:	1c5a      	adds	r2, r3, #1
 8107cba:	68fb      	ldr	r3, [r7, #12]
 8107cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8107cbe:	68fb      	ldr	r3, [r7, #12]
 8107cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107cc2:	3b01      	subs	r3, #1
 8107cc4:	b29a      	uxth	r2, r3
 8107cc6:	68fb      	ldr	r3, [r7, #12]
 8107cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8107cca:	68fb      	ldr	r3, [r7, #12]
 8107ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107cce:	b29b      	uxth	r3, r3
 8107cd0:	3b01      	subs	r3, #1
 8107cd2:	b29a      	uxth	r2, r3
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8107cd8:	68fb      	ldr	r3, [r7, #12]
 8107cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107cdc:	b29b      	uxth	r3, r3
 8107cde:	2b00      	cmp	r3, #0
 8107ce0:	d14f      	bne.n	8107d82 <I2C_Slave_ISR_IT+0x1f4>
 8107ce2:	697b      	ldr	r3, [r7, #20]
 8107ce4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8107ce8:	d04b      	beq.n	8107d82 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107cea:	68f8      	ldr	r0, [r7, #12]
 8107cec:	f000 f980 	bl	8107ff0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8107cf0:	e047      	b.n	8107d82 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107cf2:	693b      	ldr	r3, [r7, #16]
 8107cf4:	08db      	lsrs	r3, r3, #3
 8107cf6:	f003 0301 	and.w	r3, r3, #1
 8107cfa:	2b00      	cmp	r3, #0
 8107cfc:	d00a      	beq.n	8107d14 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	08db      	lsrs	r3, r3, #3
 8107d02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107d06:	2b00      	cmp	r3, #0
 8107d08:	d004      	beq.n	8107d14 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8107d0a:	6939      	ldr	r1, [r7, #16]
 8107d0c:	68f8      	ldr	r0, [r7, #12]
 8107d0e:	f000 f8eb 	bl	8107ee8 <I2C_ITAddrCplt>
 8107d12:	e037      	b.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8107d14:	693b      	ldr	r3, [r7, #16]
 8107d16:	085b      	lsrs	r3, r3, #1
 8107d18:	f003 0301 	and.w	r3, r3, #1
 8107d1c:	2b00      	cmp	r3, #0
 8107d1e:	d031      	beq.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8107d20:	687b      	ldr	r3, [r7, #4]
 8107d22:	085b      	lsrs	r3, r3, #1
 8107d24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8107d28:	2b00      	cmp	r3, #0
 8107d2a:	d02b      	beq.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107d2c:	68fb      	ldr	r3, [r7, #12]
 8107d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107d30:	b29b      	uxth	r3, r3
 8107d32:	2b00      	cmp	r3, #0
 8107d34:	d018      	beq.n	8107d68 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8107d36:	68fb      	ldr	r3, [r7, #12]
 8107d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107d3a:	781a      	ldrb	r2, [r3, #0]
 8107d3c:	68fb      	ldr	r3, [r7, #12]
 8107d3e:	681b      	ldr	r3, [r3, #0]
 8107d40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107d42:	68fb      	ldr	r3, [r7, #12]
 8107d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107d46:	1c5a      	adds	r2, r3, #1
 8107d48:	68fb      	ldr	r3, [r7, #12]
 8107d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8107d4c:	68fb      	ldr	r3, [r7, #12]
 8107d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107d50:	b29b      	uxth	r3, r3
 8107d52:	3b01      	subs	r3, #1
 8107d54:	b29a      	uxth	r2, r3
 8107d56:	68fb      	ldr	r3, [r7, #12]
 8107d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8107d5a:	68fb      	ldr	r3, [r7, #12]
 8107d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107d5e:	3b01      	subs	r3, #1
 8107d60:	b29a      	uxth	r2, r3
 8107d62:	68fb      	ldr	r3, [r7, #12]
 8107d64:	851a      	strh	r2, [r3, #40]	@ 0x28
 8107d66:	e00d      	b.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8107d68:	697b      	ldr	r3, [r7, #20]
 8107d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107d6e:	d002      	beq.n	8107d76 <I2C_Slave_ISR_IT+0x1e8>
 8107d70:	697b      	ldr	r3, [r7, #20]
 8107d72:	2b00      	cmp	r3, #0
 8107d74:	d106      	bne.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107d76:	68f8      	ldr	r0, [r7, #12]
 8107d78:	f000 f93a 	bl	8107ff0 <I2C_ITSlaveSeqCplt>
 8107d7c:	e002      	b.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8107d7e:	bf00      	nop
 8107d80:	e000      	b.n	8107d84 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8107d82:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107d84:	68fb      	ldr	r3, [r7, #12]
 8107d86:	2200      	movs	r2, #0
 8107d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8107d8c:	2300      	movs	r3, #0
}
 8107d8e:	4618      	mov	r0, r3
 8107d90:	3718      	adds	r7, #24
 8107d92:	46bd      	mov	sp, r7
 8107d94:	bd80      	pop	{r7, pc}
	...

08107d98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8107d98:	b580      	push	{r7, lr}
 8107d9a:	b086      	sub	sp, #24
 8107d9c:	af02      	add	r7, sp, #8
 8107d9e:	60f8      	str	r0, [r7, #12]
 8107da0:	4608      	mov	r0, r1
 8107da2:	4611      	mov	r1, r2
 8107da4:	461a      	mov	r2, r3
 8107da6:	4603      	mov	r3, r0
 8107da8:	817b      	strh	r3, [r7, #10]
 8107daa:	460b      	mov	r3, r1
 8107dac:	813b      	strh	r3, [r7, #8]
 8107dae:	4613      	mov	r3, r2
 8107db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8107db2:	88fb      	ldrh	r3, [r7, #6]
 8107db4:	b2da      	uxtb	r2, r3
 8107db6:	8979      	ldrh	r1, [r7, #10]
 8107db8:	4b20      	ldr	r3, [pc, #128]	@ (8107e3c <I2C_RequestMemoryWrite+0xa4>)
 8107dba:	9300      	str	r3, [sp, #0]
 8107dbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107dc0:	68f8      	ldr	r0, [r7, #12]
 8107dc2:	f000 ff3f 	bl	8108c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107dc6:	69fa      	ldr	r2, [r7, #28]
 8107dc8:	69b9      	ldr	r1, [r7, #24]
 8107dca:	68f8      	ldr	r0, [r7, #12]
 8107dcc:	f000 fdd0 	bl	8108970 <I2C_WaitOnTXISFlagUntilTimeout>
 8107dd0:	4603      	mov	r3, r0
 8107dd2:	2b00      	cmp	r3, #0
 8107dd4:	d001      	beq.n	8107dda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8107dd6:	2301      	movs	r3, #1
 8107dd8:	e02c      	b.n	8107e34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107dda:	88fb      	ldrh	r3, [r7, #6]
 8107ddc:	2b01      	cmp	r3, #1
 8107dde:	d105      	bne.n	8107dec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107de0:	893b      	ldrh	r3, [r7, #8]
 8107de2:	b2da      	uxtb	r2, r3
 8107de4:	68fb      	ldr	r3, [r7, #12]
 8107de6:	681b      	ldr	r3, [r3, #0]
 8107de8:	629a      	str	r2, [r3, #40]	@ 0x28
 8107dea:	e015      	b.n	8107e18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107dec:	893b      	ldrh	r3, [r7, #8]
 8107dee:	0a1b      	lsrs	r3, r3, #8
 8107df0:	b29b      	uxth	r3, r3
 8107df2:	b2da      	uxtb	r2, r3
 8107df4:	68fb      	ldr	r3, [r7, #12]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107dfa:	69fa      	ldr	r2, [r7, #28]
 8107dfc:	69b9      	ldr	r1, [r7, #24]
 8107dfe:	68f8      	ldr	r0, [r7, #12]
 8107e00:	f000 fdb6 	bl	8108970 <I2C_WaitOnTXISFlagUntilTimeout>
 8107e04:	4603      	mov	r3, r0
 8107e06:	2b00      	cmp	r3, #0
 8107e08:	d001      	beq.n	8107e0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8107e0a:	2301      	movs	r3, #1
 8107e0c:	e012      	b.n	8107e34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107e0e:	893b      	ldrh	r3, [r7, #8]
 8107e10:	b2da      	uxtb	r2, r3
 8107e12:	68fb      	ldr	r3, [r7, #12]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8107e18:	69fb      	ldr	r3, [r7, #28]
 8107e1a:	9300      	str	r3, [sp, #0]
 8107e1c:	69bb      	ldr	r3, [r7, #24]
 8107e1e:	2200      	movs	r2, #0
 8107e20:	2180      	movs	r1, #128	@ 0x80
 8107e22:	68f8      	ldr	r0, [r7, #12]
 8107e24:	f000 fd4b 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 8107e28:	4603      	mov	r3, r0
 8107e2a:	2b00      	cmp	r3, #0
 8107e2c:	d001      	beq.n	8107e32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8107e2e:	2301      	movs	r3, #1
 8107e30:	e000      	b.n	8107e34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8107e32:	2300      	movs	r3, #0
}
 8107e34:	4618      	mov	r0, r3
 8107e36:	3710      	adds	r7, #16
 8107e38:	46bd      	mov	sp, r7
 8107e3a:	bd80      	pop	{r7, pc}
 8107e3c:	80002000 	.word	0x80002000

08107e40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8107e40:	b580      	push	{r7, lr}
 8107e42:	b086      	sub	sp, #24
 8107e44:	af02      	add	r7, sp, #8
 8107e46:	60f8      	str	r0, [r7, #12]
 8107e48:	4608      	mov	r0, r1
 8107e4a:	4611      	mov	r1, r2
 8107e4c:	461a      	mov	r2, r3
 8107e4e:	4603      	mov	r3, r0
 8107e50:	817b      	strh	r3, [r7, #10]
 8107e52:	460b      	mov	r3, r1
 8107e54:	813b      	strh	r3, [r7, #8]
 8107e56:	4613      	mov	r3, r2
 8107e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8107e5a:	88fb      	ldrh	r3, [r7, #6]
 8107e5c:	b2da      	uxtb	r2, r3
 8107e5e:	8979      	ldrh	r1, [r7, #10]
 8107e60:	4b20      	ldr	r3, [pc, #128]	@ (8107ee4 <I2C_RequestMemoryRead+0xa4>)
 8107e62:	9300      	str	r3, [sp, #0]
 8107e64:	2300      	movs	r3, #0
 8107e66:	68f8      	ldr	r0, [r7, #12]
 8107e68:	f000 feec 	bl	8108c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107e6c:	69fa      	ldr	r2, [r7, #28]
 8107e6e:	69b9      	ldr	r1, [r7, #24]
 8107e70:	68f8      	ldr	r0, [r7, #12]
 8107e72:	f000 fd7d 	bl	8108970 <I2C_WaitOnTXISFlagUntilTimeout>
 8107e76:	4603      	mov	r3, r0
 8107e78:	2b00      	cmp	r3, #0
 8107e7a:	d001      	beq.n	8107e80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8107e7c:	2301      	movs	r3, #1
 8107e7e:	e02c      	b.n	8107eda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107e80:	88fb      	ldrh	r3, [r7, #6]
 8107e82:	2b01      	cmp	r3, #1
 8107e84:	d105      	bne.n	8107e92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107e86:	893b      	ldrh	r3, [r7, #8]
 8107e88:	b2da      	uxtb	r2, r3
 8107e8a:	68fb      	ldr	r3, [r7, #12]
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8107e90:	e015      	b.n	8107ebe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107e92:	893b      	ldrh	r3, [r7, #8]
 8107e94:	0a1b      	lsrs	r3, r3, #8
 8107e96:	b29b      	uxth	r3, r3
 8107e98:	b2da      	uxtb	r2, r3
 8107e9a:	68fb      	ldr	r3, [r7, #12]
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107ea0:	69fa      	ldr	r2, [r7, #28]
 8107ea2:	69b9      	ldr	r1, [r7, #24]
 8107ea4:	68f8      	ldr	r0, [r7, #12]
 8107ea6:	f000 fd63 	bl	8108970 <I2C_WaitOnTXISFlagUntilTimeout>
 8107eaa:	4603      	mov	r3, r0
 8107eac:	2b00      	cmp	r3, #0
 8107eae:	d001      	beq.n	8107eb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8107eb0:	2301      	movs	r3, #1
 8107eb2:	e012      	b.n	8107eda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107eb4:	893b      	ldrh	r3, [r7, #8]
 8107eb6:	b2da      	uxtb	r2, r3
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	681b      	ldr	r3, [r3, #0]
 8107ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8107ebe:	69fb      	ldr	r3, [r7, #28]
 8107ec0:	9300      	str	r3, [sp, #0]
 8107ec2:	69bb      	ldr	r3, [r7, #24]
 8107ec4:	2200      	movs	r2, #0
 8107ec6:	2140      	movs	r1, #64	@ 0x40
 8107ec8:	68f8      	ldr	r0, [r7, #12]
 8107eca:	f000 fcf8 	bl	81088be <I2C_WaitOnFlagUntilTimeout>
 8107ece:	4603      	mov	r3, r0
 8107ed0:	2b00      	cmp	r3, #0
 8107ed2:	d001      	beq.n	8107ed8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8107ed4:	2301      	movs	r3, #1
 8107ed6:	e000      	b.n	8107eda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107ed8:	2300      	movs	r3, #0
}
 8107eda:	4618      	mov	r0, r3
 8107edc:	3710      	adds	r7, #16
 8107ede:	46bd      	mov	sp, r7
 8107ee0:	bd80      	pop	{r7, pc}
 8107ee2:	bf00      	nop
 8107ee4:	80002000 	.word	0x80002000

08107ee8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107ee8:	b580      	push	{r7, lr}
 8107eea:	b084      	sub	sp, #16
 8107eec:	af00      	add	r7, sp, #0
 8107eee:	6078      	str	r0, [r7, #4]
 8107ef0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107ef8:	b2db      	uxtb	r3, r3
 8107efa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8107efe:	2b28      	cmp	r3, #40	@ 0x28
 8107f00:	d16a      	bne.n	8107fd8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107f02:	687b      	ldr	r3, [r7, #4]
 8107f04:	681b      	ldr	r3, [r3, #0]
 8107f06:	699b      	ldr	r3, [r3, #24]
 8107f08:	0c1b      	lsrs	r3, r3, #16
 8107f0a:	b2db      	uxtb	r3, r3
 8107f0c:	f003 0301 	and.w	r3, r3, #1
 8107f10:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	699b      	ldr	r3, [r3, #24]
 8107f18:	0c1b      	lsrs	r3, r3, #16
 8107f1a:	b29b      	uxth	r3, r3
 8107f1c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8107f20:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8107f22:	687b      	ldr	r3, [r7, #4]
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	689b      	ldr	r3, [r3, #8]
 8107f28:	b29b      	uxth	r3, r3
 8107f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107f2e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	681b      	ldr	r3, [r3, #0]
 8107f34:	68db      	ldr	r3, [r3, #12]
 8107f36:	b29b      	uxth	r3, r3
 8107f38:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8107f3c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	68db      	ldr	r3, [r3, #12]
 8107f42:	2b02      	cmp	r3, #2
 8107f44:	d138      	bne.n	8107fb8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8107f46:	897b      	ldrh	r3, [r7, #10]
 8107f48:	09db      	lsrs	r3, r3, #7
 8107f4a:	b29a      	uxth	r2, r3
 8107f4c:	89bb      	ldrh	r3, [r7, #12]
 8107f4e:	4053      	eors	r3, r2
 8107f50:	b29b      	uxth	r3, r3
 8107f52:	f003 0306 	and.w	r3, r3, #6
 8107f56:	2b00      	cmp	r3, #0
 8107f58:	d11c      	bne.n	8107f94 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107f5a:	897b      	ldrh	r3, [r7, #10]
 8107f5c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107f62:	1c5a      	adds	r2, r3, #1
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107f6c:	2b02      	cmp	r3, #2
 8107f6e:	d13b      	bne.n	8107fe8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	2200      	movs	r2, #0
 8107f74:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	2208      	movs	r2, #8
 8107f7c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	2200      	movs	r2, #0
 8107f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107f86:	89ba      	ldrh	r2, [r7, #12]
 8107f88:	7bfb      	ldrb	r3, [r7, #15]
 8107f8a:	4619      	mov	r1, r3
 8107f8c:	6878      	ldr	r0, [r7, #4]
 8107f8e:	f7ff fdd2 	bl	8107b36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107f92:	e029      	b.n	8107fe8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107f94:	893b      	ldrh	r3, [r7, #8]
 8107f96:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107f98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107f9c:	6878      	ldr	r0, [r7, #4]
 8107f9e:	f000 fe83 	bl	8108ca8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	2200      	movs	r2, #0
 8107fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107faa:	89ba      	ldrh	r2, [r7, #12]
 8107fac:	7bfb      	ldrb	r3, [r7, #15]
 8107fae:	4619      	mov	r1, r3
 8107fb0:	6878      	ldr	r0, [r7, #4]
 8107fb2:	f7ff fdc0 	bl	8107b36 <HAL_I2C_AddrCallback>
}
 8107fb6:	e017      	b.n	8107fe8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107fbc:	6878      	ldr	r0, [r7, #4]
 8107fbe:	f000 fe73 	bl	8108ca8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	2200      	movs	r2, #0
 8107fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107fca:	89ba      	ldrh	r2, [r7, #12]
 8107fcc:	7bfb      	ldrb	r3, [r7, #15]
 8107fce:	4619      	mov	r1, r3
 8107fd0:	6878      	ldr	r0, [r7, #4]
 8107fd2:	f7ff fdb0 	bl	8107b36 <HAL_I2C_AddrCallback>
}
 8107fd6:	e007      	b.n	8107fe8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	2208      	movs	r2, #8
 8107fde:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	2200      	movs	r2, #0
 8107fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8107fe8:	bf00      	nop
 8107fea:	3710      	adds	r7, #16
 8107fec:	46bd      	mov	sp, r7
 8107fee:	bd80      	pop	{r7, pc}

08107ff0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107ff0:	b580      	push	{r7, lr}
 8107ff2:	b084      	sub	sp, #16
 8107ff4:	af00      	add	r7, sp, #0
 8107ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	681b      	ldr	r3, [r3, #0]
 8107ffe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8108000:	687b      	ldr	r3, [r7, #4]
 8108002:	2200      	movs	r2, #0
 8108004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8108008:	68fb      	ldr	r3, [r7, #12]
 810800a:	0b9b      	lsrs	r3, r3, #14
 810800c:	f003 0301 	and.w	r3, r3, #1
 8108010:	2b00      	cmp	r3, #0
 8108012:	d008      	beq.n	8108026 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	681a      	ldr	r2, [r3, #0]
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	681b      	ldr	r3, [r3, #0]
 810801e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8108022:	601a      	str	r2, [r3, #0]
 8108024:	e00d      	b.n	8108042 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8108026:	68fb      	ldr	r3, [r7, #12]
 8108028:	0bdb      	lsrs	r3, r3, #15
 810802a:	f003 0301 	and.w	r3, r3, #1
 810802e:	2b00      	cmp	r3, #0
 8108030:	d007      	beq.n	8108042 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	681b      	ldr	r3, [r3, #0]
 8108036:	681a      	ldr	r2, [r3, #0]
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	681b      	ldr	r3, [r3, #0]
 810803c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8108040:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108048:	b2db      	uxtb	r3, r3
 810804a:	2b29      	cmp	r3, #41	@ 0x29
 810804c:	d112      	bne.n	8108074 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	2228      	movs	r2, #40	@ 0x28
 8108052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	2221      	movs	r2, #33	@ 0x21
 810805a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 810805c:	2101      	movs	r1, #1
 810805e:	6878      	ldr	r0, [r7, #4]
 8108060:	f000 fe22 	bl	8108ca8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	2200      	movs	r2, #0
 8108068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810806c:	6878      	ldr	r0, [r7, #4]
 810806e:	f7ff fd4e 	bl	8107b0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8108072:	e017      	b.n	81080a4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810807a:	b2db      	uxtb	r3, r3
 810807c:	2b2a      	cmp	r3, #42	@ 0x2a
 810807e:	d111      	bne.n	81080a4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	2228      	movs	r2, #40	@ 0x28
 8108084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	2222      	movs	r2, #34	@ 0x22
 810808c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 810808e:	2102      	movs	r1, #2
 8108090:	6878      	ldr	r0, [r7, #4]
 8108092:	f000 fe09 	bl	8108ca8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8108096:	687b      	ldr	r3, [r7, #4]
 8108098:	2200      	movs	r2, #0
 810809a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 810809e:	6878      	ldr	r0, [r7, #4]
 81080a0:	f7ff fd3f 	bl	8107b22 <HAL_I2C_SlaveRxCpltCallback>
}
 81080a4:	bf00      	nop
 81080a6:	3710      	adds	r7, #16
 81080a8:	46bd      	mov	sp, r7
 81080aa:	bd80      	pop	{r7, pc}

081080ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81080ac:	b580      	push	{r7, lr}
 81080ae:	b086      	sub	sp, #24
 81080b0:	af00      	add	r7, sp, #0
 81080b2:	6078      	str	r0, [r7, #4]
 81080b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	681b      	ldr	r3, [r3, #0]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 81080be:	683b      	ldr	r3, [r7, #0]
 81080c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81080c6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81080ce:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81080d0:	687b      	ldr	r3, [r7, #4]
 81080d2:	681b      	ldr	r3, [r3, #0]
 81080d4:	2220      	movs	r2, #32
 81080d6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 81080d8:	7afb      	ldrb	r3, [r7, #11]
 81080da:	2b21      	cmp	r3, #33	@ 0x21
 81080dc:	d002      	beq.n	81080e4 <I2C_ITSlaveCplt+0x38>
 81080de:	7afb      	ldrb	r3, [r7, #11]
 81080e0:	2b29      	cmp	r3, #41	@ 0x29
 81080e2:	d108      	bne.n	81080f6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 81080e4:	f248 0101 	movw	r1, #32769	@ 0x8001
 81080e8:	6878      	ldr	r0, [r7, #4]
 81080ea:	f000 fddd 	bl	8108ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	2221      	movs	r2, #33	@ 0x21
 81080f2:	631a      	str	r2, [r3, #48]	@ 0x30
 81080f4:	e019      	b.n	810812a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 81080f6:	7afb      	ldrb	r3, [r7, #11]
 81080f8:	2b22      	cmp	r3, #34	@ 0x22
 81080fa:	d002      	beq.n	8108102 <I2C_ITSlaveCplt+0x56>
 81080fc:	7afb      	ldrb	r3, [r7, #11]
 81080fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8108100:	d108      	bne.n	8108114 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8108102:	f248 0102 	movw	r1, #32770	@ 0x8002
 8108106:	6878      	ldr	r0, [r7, #4]
 8108108:	f000 fdce 	bl	8108ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	2222      	movs	r2, #34	@ 0x22
 8108110:	631a      	str	r2, [r3, #48]	@ 0x30
 8108112:	e00a      	b.n	810812a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8108114:	7afb      	ldrb	r3, [r7, #11]
 8108116:	2b28      	cmp	r3, #40	@ 0x28
 8108118:	d107      	bne.n	810812a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 810811a:	f248 0103 	movw	r1, #32771	@ 0x8003
 810811e:	6878      	ldr	r0, [r7, #4]
 8108120:	f000 fdc2 	bl	8108ca8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8108124:	687b      	ldr	r3, [r7, #4]
 8108126:	2200      	movs	r2, #0
 8108128:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	681b      	ldr	r3, [r3, #0]
 810812e:	685a      	ldr	r2, [r3, #4]
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	681b      	ldr	r3, [r3, #0]
 8108134:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8108138:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	681b      	ldr	r3, [r3, #0]
 810813e:	6859      	ldr	r1, [r3, #4]
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	681a      	ldr	r2, [r3, #0]
 8108144:	4b80      	ldr	r3, [pc, #512]	@ (8108348 <I2C_ITSlaveCplt+0x29c>)
 8108146:	400b      	ands	r3, r1
 8108148:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 810814a:	6878      	ldr	r0, [r7, #4]
 810814c:	f000 fb75 	bl	810883a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8108150:	693b      	ldr	r3, [r7, #16]
 8108152:	0b9b      	lsrs	r3, r3, #14
 8108154:	f003 0301 	and.w	r3, r3, #1
 8108158:	2b00      	cmp	r3, #0
 810815a:	d07a      	beq.n	8108252 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	681a      	ldr	r2, [r3, #0]
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 810816a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 810816c:	687b      	ldr	r3, [r7, #4]
 810816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108170:	2b00      	cmp	r3, #0
 8108172:	f000 8112 	beq.w	810839a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810817a:	681b      	ldr	r3, [r3, #0]
 810817c:	4a73      	ldr	r2, [pc, #460]	@ (810834c <I2C_ITSlaveCplt+0x2a0>)
 810817e:	4293      	cmp	r3, r2
 8108180:	d059      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 8108182:	687b      	ldr	r3, [r7, #4]
 8108184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108186:	681b      	ldr	r3, [r3, #0]
 8108188:	4a71      	ldr	r2, [pc, #452]	@ (8108350 <I2C_ITSlaveCplt+0x2a4>)
 810818a:	4293      	cmp	r3, r2
 810818c:	d053      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108192:	681b      	ldr	r3, [r3, #0]
 8108194:	4a6f      	ldr	r2, [pc, #444]	@ (8108354 <I2C_ITSlaveCplt+0x2a8>)
 8108196:	4293      	cmp	r3, r2
 8108198:	d04d      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 810819a:	687b      	ldr	r3, [r7, #4]
 810819c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810819e:	681b      	ldr	r3, [r3, #0]
 81081a0:	4a6d      	ldr	r2, [pc, #436]	@ (8108358 <I2C_ITSlaveCplt+0x2ac>)
 81081a2:	4293      	cmp	r3, r2
 81081a4:	d047      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081aa:	681b      	ldr	r3, [r3, #0]
 81081ac:	4a6b      	ldr	r2, [pc, #428]	@ (810835c <I2C_ITSlaveCplt+0x2b0>)
 81081ae:	4293      	cmp	r3, r2
 81081b0:	d041      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081b6:	681b      	ldr	r3, [r3, #0]
 81081b8:	4a69      	ldr	r2, [pc, #420]	@ (8108360 <I2C_ITSlaveCplt+0x2b4>)
 81081ba:	4293      	cmp	r3, r2
 81081bc:	d03b      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081c2:	681b      	ldr	r3, [r3, #0]
 81081c4:	4a67      	ldr	r2, [pc, #412]	@ (8108364 <I2C_ITSlaveCplt+0x2b8>)
 81081c6:	4293      	cmp	r3, r2
 81081c8:	d035      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081ce:	681b      	ldr	r3, [r3, #0]
 81081d0:	4a65      	ldr	r2, [pc, #404]	@ (8108368 <I2C_ITSlaveCplt+0x2bc>)
 81081d2:	4293      	cmp	r3, r2
 81081d4:	d02f      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081d6:	687b      	ldr	r3, [r7, #4]
 81081d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081da:	681b      	ldr	r3, [r3, #0]
 81081dc:	4a63      	ldr	r2, [pc, #396]	@ (810836c <I2C_ITSlaveCplt+0x2c0>)
 81081de:	4293      	cmp	r3, r2
 81081e0:	d029      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081e2:	687b      	ldr	r3, [r7, #4]
 81081e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081e6:	681b      	ldr	r3, [r3, #0]
 81081e8:	4a61      	ldr	r2, [pc, #388]	@ (8108370 <I2C_ITSlaveCplt+0x2c4>)
 81081ea:	4293      	cmp	r3, r2
 81081ec:	d023      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081f2:	681b      	ldr	r3, [r3, #0]
 81081f4:	4a5f      	ldr	r2, [pc, #380]	@ (8108374 <I2C_ITSlaveCplt+0x2c8>)
 81081f6:	4293      	cmp	r3, r2
 81081f8:	d01d      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 81081fa:	687b      	ldr	r3, [r7, #4]
 81081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081fe:	681b      	ldr	r3, [r3, #0]
 8108200:	4a5d      	ldr	r2, [pc, #372]	@ (8108378 <I2C_ITSlaveCplt+0x2cc>)
 8108202:	4293      	cmp	r3, r2
 8108204:	d017      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810820a:	681b      	ldr	r3, [r3, #0]
 810820c:	4a5b      	ldr	r2, [pc, #364]	@ (810837c <I2C_ITSlaveCplt+0x2d0>)
 810820e:	4293      	cmp	r3, r2
 8108210:	d011      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 8108212:	687b      	ldr	r3, [r7, #4]
 8108214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108216:	681b      	ldr	r3, [r3, #0]
 8108218:	4a59      	ldr	r2, [pc, #356]	@ (8108380 <I2C_ITSlaveCplt+0x2d4>)
 810821a:	4293      	cmp	r3, r2
 810821c:	d00b      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	4a57      	ldr	r2, [pc, #348]	@ (8108384 <I2C_ITSlaveCplt+0x2d8>)
 8108226:	4293      	cmp	r3, r2
 8108228:	d005      	beq.n	8108236 <I2C_ITSlaveCplt+0x18a>
 810822a:	687b      	ldr	r3, [r7, #4]
 810822c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810822e:	681b      	ldr	r3, [r3, #0]
 8108230:	4a55      	ldr	r2, [pc, #340]	@ (8108388 <I2C_ITSlaveCplt+0x2dc>)
 8108232:	4293      	cmp	r3, r2
 8108234:	d105      	bne.n	8108242 <I2C_ITSlaveCplt+0x196>
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810823a:	681b      	ldr	r3, [r3, #0]
 810823c:	685b      	ldr	r3, [r3, #4]
 810823e:	b29b      	uxth	r3, r3
 8108240:	e004      	b.n	810824c <I2C_ITSlaveCplt+0x1a0>
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	685b      	ldr	r3, [r3, #4]
 810824a:	b29b      	uxth	r3, r3
 810824c:	687a      	ldr	r2, [r7, #4]
 810824e:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8108250:	e0a3      	b.n	810839a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8108252:	693b      	ldr	r3, [r7, #16]
 8108254:	0bdb      	lsrs	r3, r3, #15
 8108256:	f003 0301 	and.w	r3, r3, #1
 810825a:	2b00      	cmp	r3, #0
 810825c:	f000 809d 	beq.w	810839a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108260:	687b      	ldr	r3, [r7, #4]
 8108262:	681b      	ldr	r3, [r3, #0]
 8108264:	681a      	ldr	r2, [r3, #0]
 8108266:	687b      	ldr	r3, [r7, #4]
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810826e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108274:	2b00      	cmp	r3, #0
 8108276:	f000 8090 	beq.w	810839a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 810827a:	687b      	ldr	r3, [r7, #4]
 810827c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810827e:	681b      	ldr	r3, [r3, #0]
 8108280:	4a32      	ldr	r2, [pc, #200]	@ (810834c <I2C_ITSlaveCplt+0x2a0>)
 8108282:	4293      	cmp	r3, r2
 8108284:	d059      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810828a:	681b      	ldr	r3, [r3, #0]
 810828c:	4a30      	ldr	r2, [pc, #192]	@ (8108350 <I2C_ITSlaveCplt+0x2a4>)
 810828e:	4293      	cmp	r3, r2
 8108290:	d053      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 8108292:	687b      	ldr	r3, [r7, #4]
 8108294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108296:	681b      	ldr	r3, [r3, #0]
 8108298:	4a2e      	ldr	r2, [pc, #184]	@ (8108354 <I2C_ITSlaveCplt+0x2a8>)
 810829a:	4293      	cmp	r3, r2
 810829c:	d04d      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 810829e:	687b      	ldr	r3, [r7, #4]
 81082a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082a2:	681b      	ldr	r3, [r3, #0]
 81082a4:	4a2c      	ldr	r2, [pc, #176]	@ (8108358 <I2C_ITSlaveCplt+0x2ac>)
 81082a6:	4293      	cmp	r3, r2
 81082a8:	d047      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082aa:	687b      	ldr	r3, [r7, #4]
 81082ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082ae:	681b      	ldr	r3, [r3, #0]
 81082b0:	4a2a      	ldr	r2, [pc, #168]	@ (810835c <I2C_ITSlaveCplt+0x2b0>)
 81082b2:	4293      	cmp	r3, r2
 81082b4:	d041      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082ba:	681b      	ldr	r3, [r3, #0]
 81082bc:	4a28      	ldr	r2, [pc, #160]	@ (8108360 <I2C_ITSlaveCplt+0x2b4>)
 81082be:	4293      	cmp	r3, r2
 81082c0:	d03b      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082c6:	681b      	ldr	r3, [r3, #0]
 81082c8:	4a26      	ldr	r2, [pc, #152]	@ (8108364 <I2C_ITSlaveCplt+0x2b8>)
 81082ca:	4293      	cmp	r3, r2
 81082cc:	d035      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082ce:	687b      	ldr	r3, [r7, #4]
 81082d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082d2:	681b      	ldr	r3, [r3, #0]
 81082d4:	4a24      	ldr	r2, [pc, #144]	@ (8108368 <I2C_ITSlaveCplt+0x2bc>)
 81082d6:	4293      	cmp	r3, r2
 81082d8:	d02f      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082da:	687b      	ldr	r3, [r7, #4]
 81082dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082de:	681b      	ldr	r3, [r3, #0]
 81082e0:	4a22      	ldr	r2, [pc, #136]	@ (810836c <I2C_ITSlaveCplt+0x2c0>)
 81082e2:	4293      	cmp	r3, r2
 81082e4:	d029      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082e6:	687b      	ldr	r3, [r7, #4]
 81082e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082ea:	681b      	ldr	r3, [r3, #0]
 81082ec:	4a20      	ldr	r2, [pc, #128]	@ (8108370 <I2C_ITSlaveCplt+0x2c4>)
 81082ee:	4293      	cmp	r3, r2
 81082f0:	d023      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082f6:	681b      	ldr	r3, [r3, #0]
 81082f8:	4a1e      	ldr	r2, [pc, #120]	@ (8108374 <I2C_ITSlaveCplt+0x2c8>)
 81082fa:	4293      	cmp	r3, r2
 81082fc:	d01d      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108302:	681b      	ldr	r3, [r3, #0]
 8108304:	4a1c      	ldr	r2, [pc, #112]	@ (8108378 <I2C_ITSlaveCplt+0x2cc>)
 8108306:	4293      	cmp	r3, r2
 8108308:	d017      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	4a1a      	ldr	r2, [pc, #104]	@ (810837c <I2C_ITSlaveCplt+0x2d0>)
 8108312:	4293      	cmp	r3, r2
 8108314:	d011      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 8108316:	687b      	ldr	r3, [r7, #4]
 8108318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810831a:	681b      	ldr	r3, [r3, #0]
 810831c:	4a18      	ldr	r2, [pc, #96]	@ (8108380 <I2C_ITSlaveCplt+0x2d4>)
 810831e:	4293      	cmp	r3, r2
 8108320:	d00b      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108326:	681b      	ldr	r3, [r3, #0]
 8108328:	4a16      	ldr	r2, [pc, #88]	@ (8108384 <I2C_ITSlaveCplt+0x2d8>)
 810832a:	4293      	cmp	r3, r2
 810832c:	d005      	beq.n	810833a <I2C_ITSlaveCplt+0x28e>
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108332:	681b      	ldr	r3, [r3, #0]
 8108334:	4a14      	ldr	r2, [pc, #80]	@ (8108388 <I2C_ITSlaveCplt+0x2dc>)
 8108336:	4293      	cmp	r3, r2
 8108338:	d128      	bne.n	810838c <I2C_ITSlaveCplt+0x2e0>
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810833e:	681b      	ldr	r3, [r3, #0]
 8108340:	685b      	ldr	r3, [r3, #4]
 8108342:	b29b      	uxth	r3, r3
 8108344:	e027      	b.n	8108396 <I2C_ITSlaveCplt+0x2ea>
 8108346:	bf00      	nop
 8108348:	fe00e800 	.word	0xfe00e800
 810834c:	40020010 	.word	0x40020010
 8108350:	40020028 	.word	0x40020028
 8108354:	40020040 	.word	0x40020040
 8108358:	40020058 	.word	0x40020058
 810835c:	40020070 	.word	0x40020070
 8108360:	40020088 	.word	0x40020088
 8108364:	400200a0 	.word	0x400200a0
 8108368:	400200b8 	.word	0x400200b8
 810836c:	40020410 	.word	0x40020410
 8108370:	40020428 	.word	0x40020428
 8108374:	40020440 	.word	0x40020440
 8108378:	40020458 	.word	0x40020458
 810837c:	40020470 	.word	0x40020470
 8108380:	40020488 	.word	0x40020488
 8108384:	400204a0 	.word	0x400204a0
 8108388:	400204b8 	.word	0x400204b8
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108390:	681b      	ldr	r3, [r3, #0]
 8108392:	685b      	ldr	r3, [r3, #4]
 8108394:	b29b      	uxth	r3, r3
 8108396:	687a      	ldr	r2, [r7, #4]
 8108398:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 810839a:	697b      	ldr	r3, [r7, #20]
 810839c:	089b      	lsrs	r3, r3, #2
 810839e:	f003 0301 	and.w	r3, r3, #1
 81083a2:	2b00      	cmp	r3, #0
 81083a4:	d020      	beq.n	81083e8 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 81083a6:	697b      	ldr	r3, [r7, #20]
 81083a8:	f023 0304 	bic.w	r3, r3, #4
 81083ac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	681b      	ldr	r3, [r3, #0]
 81083b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81083b8:	b2d2      	uxtb	r2, r2
 81083ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81083bc:	687b      	ldr	r3, [r7, #4]
 81083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81083c0:	1c5a      	adds	r2, r3, #1
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 81083c6:	687b      	ldr	r3, [r7, #4]
 81083c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81083ca:	2b00      	cmp	r3, #0
 81083cc:	d00c      	beq.n	81083e8 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81083d2:	3b01      	subs	r3, #1
 81083d4:	b29a      	uxth	r2, r3
 81083d6:	687b      	ldr	r3, [r7, #4]
 81083d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81083de:	b29b      	uxth	r3, r3
 81083e0:	3b01      	subs	r3, #1
 81083e2:	b29a      	uxth	r2, r3
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81083ec:	b29b      	uxth	r3, r3
 81083ee:	2b00      	cmp	r3, #0
 81083f0:	d005      	beq.n	81083fe <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81083f6:	f043 0204 	orr.w	r2, r3, #4
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 81083fe:	697b      	ldr	r3, [r7, #20]
 8108400:	091b      	lsrs	r3, r3, #4
 8108402:	f003 0301 	and.w	r3, r3, #1
 8108406:	2b00      	cmp	r3, #0
 8108408:	d04a      	beq.n	81084a0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 810840a:	693b      	ldr	r3, [r7, #16]
 810840c:	091b      	lsrs	r3, r3, #4
 810840e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8108412:	2b00      	cmp	r3, #0
 8108414:	d044      	beq.n	81084a0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8108416:	687b      	ldr	r3, [r7, #4]
 8108418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810841a:	b29b      	uxth	r3, r3
 810841c:	2b00      	cmp	r3, #0
 810841e:	d128      	bne.n	8108472 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8108420:	687b      	ldr	r3, [r7, #4]
 8108422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108426:	b2db      	uxtb	r3, r3
 8108428:	2b28      	cmp	r3, #40	@ 0x28
 810842a:	d108      	bne.n	810843e <I2C_ITSlaveCplt+0x392>
 810842c:	68fb      	ldr	r3, [r7, #12]
 810842e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108432:	d104      	bne.n	810843e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8108434:	6979      	ldr	r1, [r7, #20]
 8108436:	6878      	ldr	r0, [r7, #4]
 8108438:	f000 f892 	bl	8108560 <I2C_ITListenCplt>
 810843c:	e030      	b.n	81084a0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108444:	b2db      	uxtb	r3, r3
 8108446:	2b29      	cmp	r3, #41	@ 0x29
 8108448:	d10e      	bne.n	8108468 <I2C_ITSlaveCplt+0x3bc>
 810844a:	68fb      	ldr	r3, [r7, #12]
 810844c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8108450:	d00a      	beq.n	8108468 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	681b      	ldr	r3, [r3, #0]
 8108456:	2210      	movs	r2, #16
 8108458:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 810845a:	6878      	ldr	r0, [r7, #4]
 810845c:	f000 f9ed 	bl	810883a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8108460:	6878      	ldr	r0, [r7, #4]
 8108462:	f7ff fdc5 	bl	8107ff0 <I2C_ITSlaveSeqCplt>
 8108466:	e01b      	b.n	81084a0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	681b      	ldr	r3, [r3, #0]
 810846c:	2210      	movs	r2, #16
 810846e:	61da      	str	r2, [r3, #28]
 8108470:	e016      	b.n	81084a0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	681b      	ldr	r3, [r3, #0]
 8108476:	2210      	movs	r2, #16
 8108478:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810847a:	687b      	ldr	r3, [r7, #4]
 810847c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810847e:	f043 0204 	orr.w	r2, r3, #4
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8108486:	68fb      	ldr	r3, [r7, #12]
 8108488:	2b00      	cmp	r3, #0
 810848a:	d003      	beq.n	8108494 <I2C_ITSlaveCplt+0x3e8>
 810848c:	68fb      	ldr	r3, [r7, #12]
 810848e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8108492:	d105      	bne.n	81084a0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8108494:	687b      	ldr	r3, [r7, #4]
 8108496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108498:	4619      	mov	r1, r3
 810849a:	6878      	ldr	r0, [r7, #4]
 810849c:	f000 f8b6 	bl	810860c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	2200      	movs	r2, #0
 81084a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	2200      	movs	r2, #0
 81084ac:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81084b2:	2b00      	cmp	r3, #0
 81084b4:	d010      	beq.n	81084d8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 81084b6:	687b      	ldr	r3, [r7, #4]
 81084b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81084ba:	4619      	mov	r1, r3
 81084bc:	6878      	ldr	r0, [r7, #4]
 81084be:	f000 f8a5 	bl	810860c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81084c8:	b2db      	uxtb	r3, r3
 81084ca:	2b28      	cmp	r3, #40	@ 0x28
 81084cc:	d141      	bne.n	8108552 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 81084ce:	6979      	ldr	r1, [r7, #20]
 81084d0:	6878      	ldr	r0, [r7, #4]
 81084d2:	f000 f845 	bl	8108560 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81084d6:	e03c      	b.n	8108552 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81084dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 81084e0:	d014      	beq.n	810850c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 81084e2:	6878      	ldr	r0, [r7, #4]
 81084e4:	f7ff fd84 	bl	8107ff0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 81084e8:	687b      	ldr	r3, [r7, #4]
 81084ea:	4a1c      	ldr	r2, [pc, #112]	@ (810855c <I2C_ITSlaveCplt+0x4b0>)
 81084ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	2220      	movs	r2, #32
 81084f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81084f6:	687b      	ldr	r3, [r7, #4]
 81084f8:	2200      	movs	r2, #0
 81084fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	2200      	movs	r2, #0
 8108500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8108504:	6878      	ldr	r0, [r7, #4]
 8108506:	f7ff fb24 	bl	8107b52 <HAL_I2C_ListenCpltCallback>
}
 810850a:	e022      	b.n	8108552 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108512:	b2db      	uxtb	r3, r3
 8108514:	2b22      	cmp	r3, #34	@ 0x22
 8108516:	d10e      	bne.n	8108536 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	2220      	movs	r2, #32
 810851c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	2200      	movs	r2, #0
 8108524:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8108526:	687b      	ldr	r3, [r7, #4]
 8108528:	2200      	movs	r2, #0
 810852a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 810852e:	6878      	ldr	r0, [r7, #4]
 8108530:	f7ff faf7 	bl	8107b22 <HAL_I2C_SlaveRxCpltCallback>
}
 8108534:	e00d      	b.n	8108552 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	2220      	movs	r2, #32
 810853a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	2200      	movs	r2, #0
 8108542:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8108544:	687b      	ldr	r3, [r7, #4]
 8108546:	2200      	movs	r2, #0
 8108548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810854c:	6878      	ldr	r0, [r7, #4]
 810854e:	f7ff fade 	bl	8107b0e <HAL_I2C_SlaveTxCpltCallback>
}
 8108552:	bf00      	nop
 8108554:	3718      	adds	r7, #24
 8108556:	46bd      	mov	sp, r7
 8108558:	bd80      	pop	{r7, pc}
 810855a:	bf00      	nop
 810855c:	ffff0000 	.word	0xffff0000

08108560 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8108560:	b580      	push	{r7, lr}
 8108562:	b082      	sub	sp, #8
 8108564:	af00      	add	r7, sp, #0
 8108566:	6078      	str	r0, [r7, #4]
 8108568:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	4a26      	ldr	r2, [pc, #152]	@ (8108608 <I2C_ITListenCplt+0xa8>)
 810856e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	2200      	movs	r2, #0
 8108574:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8108576:	687b      	ldr	r3, [r7, #4]
 8108578:	2220      	movs	r2, #32
 810857a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	2200      	movs	r2, #0
 8108582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	2200      	movs	r2, #0
 810858a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810858c:	683b      	ldr	r3, [r7, #0]
 810858e:	089b      	lsrs	r3, r3, #2
 8108590:	f003 0301 	and.w	r3, r3, #1
 8108594:	2b00      	cmp	r3, #0
 8108596:	d022      	beq.n	81085de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8108598:	687b      	ldr	r3, [r7, #4]
 810859a:	681b      	ldr	r3, [r3, #0]
 810859c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810859e:	687b      	ldr	r3, [r7, #4]
 81085a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81085a2:	b2d2      	uxtb	r2, r2
 81085a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81085a6:	687b      	ldr	r3, [r7, #4]
 81085a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81085aa:	1c5a      	adds	r2, r3, #1
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81085b4:	2b00      	cmp	r3, #0
 81085b6:	d012      	beq.n	81085de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81085bc:	3b01      	subs	r3, #1
 81085be:	b29a      	uxth	r2, r3
 81085c0:	687b      	ldr	r3, [r7, #4]
 81085c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81085c8:	b29b      	uxth	r3, r3
 81085ca:	3b01      	subs	r3, #1
 81085cc:	b29a      	uxth	r2, r3
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81085d6:	f043 0204 	orr.w	r2, r3, #4
 81085da:	687b      	ldr	r3, [r7, #4]
 81085dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81085de:	f248 0103 	movw	r1, #32771	@ 0x8003
 81085e2:	6878      	ldr	r0, [r7, #4]
 81085e4:	f000 fb60 	bl	8108ca8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81085e8:	687b      	ldr	r3, [r7, #4]
 81085ea:	681b      	ldr	r3, [r3, #0]
 81085ec:	2210      	movs	r2, #16
 81085ee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81085f0:	687b      	ldr	r3, [r7, #4]
 81085f2:	2200      	movs	r2, #0
 81085f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 81085f8:	6878      	ldr	r0, [r7, #4]
 81085fa:	f7ff faaa 	bl	8107b52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 81085fe:	bf00      	nop
 8108600:	3708      	adds	r7, #8
 8108602:	46bd      	mov	sp, r7
 8108604:	bd80      	pop	{r7, pc}
 8108606:	bf00      	nop
 8108608:	ffff0000 	.word	0xffff0000

0810860c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 810860c:	b580      	push	{r7, lr}
 810860e:	b084      	sub	sp, #16
 8108610:	af00      	add	r7, sp, #0
 8108612:	6078      	str	r0, [r7, #4]
 8108614:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810861c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 810861e:	687b      	ldr	r3, [r7, #4]
 8108620:	2200      	movs	r2, #0
 8108622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8108626:	687b      	ldr	r3, [r7, #4]
 8108628:	4a6d      	ldr	r2, [pc, #436]	@ (81087e0 <I2C_ITError+0x1d4>)
 810862a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	2200      	movs	r2, #0
 8108630:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8108632:	687b      	ldr	r3, [r7, #4]
 8108634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8108636:	683b      	ldr	r3, [r7, #0]
 8108638:	431a      	orrs	r2, r3
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 810863e:	7bfb      	ldrb	r3, [r7, #15]
 8108640:	2b28      	cmp	r3, #40	@ 0x28
 8108642:	d005      	beq.n	8108650 <I2C_ITError+0x44>
 8108644:	7bfb      	ldrb	r3, [r7, #15]
 8108646:	2b29      	cmp	r3, #41	@ 0x29
 8108648:	d002      	beq.n	8108650 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 810864a:	7bfb      	ldrb	r3, [r7, #15]
 810864c:	2b2a      	cmp	r3, #42	@ 0x2a
 810864e:	d10b      	bne.n	8108668 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108650:	2103      	movs	r1, #3
 8108652:	6878      	ldr	r0, [r7, #4]
 8108654:	f000 fb28 	bl	8108ca8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	2228      	movs	r2, #40	@ 0x28
 810865c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	4a60      	ldr	r2, [pc, #384]	@ (81087e4 <I2C_ITError+0x1d8>)
 8108664:	635a      	str	r2, [r3, #52]	@ 0x34
 8108666:	e030      	b.n	81086ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108668:	f248 0103 	movw	r1, #32771	@ 0x8003
 810866c:	6878      	ldr	r0, [r7, #4]
 810866e:	f000 fb1b 	bl	8108ca8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108672:	6878      	ldr	r0, [r7, #4]
 8108674:	f000 f8e1 	bl	810883a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810867e:	b2db      	uxtb	r3, r3
 8108680:	2b60      	cmp	r3, #96	@ 0x60
 8108682:	d01f      	beq.n	81086c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	2220      	movs	r2, #32
 8108688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810868c:	687b      	ldr	r3, [r7, #4]
 810868e:	681b      	ldr	r3, [r3, #0]
 8108690:	699b      	ldr	r3, [r3, #24]
 8108692:	f003 0320 	and.w	r3, r3, #32
 8108696:	2b20      	cmp	r3, #32
 8108698:	d114      	bne.n	81086c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810869a:	687b      	ldr	r3, [r7, #4]
 810869c:	681b      	ldr	r3, [r3, #0]
 810869e:	699b      	ldr	r3, [r3, #24]
 81086a0:	f003 0310 	and.w	r3, r3, #16
 81086a4:	2b10      	cmp	r3, #16
 81086a6:	d109      	bne.n	81086bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81086a8:	687b      	ldr	r3, [r7, #4]
 81086aa:	681b      	ldr	r3, [r3, #0]
 81086ac:	2210      	movs	r2, #16
 81086ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81086b0:	687b      	ldr	r3, [r7, #4]
 81086b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086b4:	f043 0204 	orr.w	r2, r3, #4
 81086b8:	687b      	ldr	r3, [r7, #4]
 81086ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81086bc:	687b      	ldr	r3, [r7, #4]
 81086be:	681b      	ldr	r3, [r3, #0]
 81086c0:	2220      	movs	r2, #32
 81086c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 81086c4:	687b      	ldr	r3, [r7, #4]
 81086c6:	2200      	movs	r2, #0
 81086c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81086ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 81086d0:	687b      	ldr	r3, [r7, #4]
 81086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086d4:	2b00      	cmp	r3, #0
 81086d6:	d039      	beq.n	810874c <I2C_ITError+0x140>
 81086d8:	68bb      	ldr	r3, [r7, #8]
 81086da:	2b11      	cmp	r3, #17
 81086dc:	d002      	beq.n	81086e4 <I2C_ITError+0xd8>
 81086de:	68bb      	ldr	r3, [r7, #8]
 81086e0:	2b21      	cmp	r3, #33	@ 0x21
 81086e2:	d133      	bne.n	810874c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	681b      	ldr	r3, [r3, #0]
 81086ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81086ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81086f2:	d107      	bne.n	8108704 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	681a      	ldr	r2, [r3, #0]
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8108702:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108704:	687b      	ldr	r3, [r7, #4]
 8108706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108708:	4618      	mov	r0, r3
 810870a:	f7fe faaf 	bl	8106c6c <HAL_DMA_GetState>
 810870e:	4603      	mov	r3, r0
 8108710:	2b01      	cmp	r3, #1
 8108712:	d017      	beq.n	8108744 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8108714:	687b      	ldr	r3, [r7, #4]
 8108716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108718:	4a33      	ldr	r2, [pc, #204]	@ (81087e8 <I2C_ITError+0x1dc>)
 810871a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810871c:	687b      	ldr	r3, [r7, #4]
 810871e:	2200      	movs	r2, #0
 8108720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108728:	4618      	mov	r0, r3
 810872a:	f7fd f92f 	bl	810598c <HAL_DMA_Abort_IT>
 810872e:	4603      	mov	r3, r0
 8108730:	2b00      	cmp	r3, #0
 8108732:	d04d      	beq.n	81087d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810873a:	687a      	ldr	r2, [r7, #4]
 810873c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 810873e:	4610      	mov	r0, r2
 8108740:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108742:	e045      	b.n	81087d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108744:	6878      	ldr	r0, [r7, #4]
 8108746:	f000 f851 	bl	81087ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810874a:	e041      	b.n	81087d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 810874c:	687b      	ldr	r3, [r7, #4]
 810874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108750:	2b00      	cmp	r3, #0
 8108752:	d039      	beq.n	81087c8 <I2C_ITError+0x1bc>
 8108754:	68bb      	ldr	r3, [r7, #8]
 8108756:	2b12      	cmp	r3, #18
 8108758:	d002      	beq.n	8108760 <I2C_ITError+0x154>
 810875a:	68bb      	ldr	r3, [r7, #8]
 810875c:	2b22      	cmp	r3, #34	@ 0x22
 810875e:	d133      	bne.n	81087c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	681b      	ldr	r3, [r3, #0]
 8108766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810876a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810876e:	d107      	bne.n	8108780 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108770:	687b      	ldr	r3, [r7, #4]
 8108772:	681b      	ldr	r3, [r3, #0]
 8108774:	681a      	ldr	r2, [r3, #0]
 8108776:	687b      	ldr	r3, [r7, #4]
 8108778:	681b      	ldr	r3, [r3, #0]
 810877a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810877e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108780:	687b      	ldr	r3, [r7, #4]
 8108782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108784:	4618      	mov	r0, r3
 8108786:	f7fe fa71 	bl	8106c6c <HAL_DMA_GetState>
 810878a:	4603      	mov	r3, r0
 810878c:	2b01      	cmp	r3, #1
 810878e:	d017      	beq.n	81087c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8108790:	687b      	ldr	r3, [r7, #4]
 8108792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108794:	4a14      	ldr	r2, [pc, #80]	@ (81087e8 <I2C_ITError+0x1dc>)
 8108796:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	2200      	movs	r2, #0
 810879c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 81087a0:	687b      	ldr	r3, [r7, #4]
 81087a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087a4:	4618      	mov	r0, r3
 81087a6:	f7fd f8f1 	bl	810598c <HAL_DMA_Abort_IT>
 81087aa:	4603      	mov	r3, r0
 81087ac:	2b00      	cmp	r3, #0
 81087ae:	d011      	beq.n	81087d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81087b6:	687a      	ldr	r2, [r7, #4]
 81087b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 81087ba:	4610      	mov	r0, r2
 81087bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81087be:	e009      	b.n	81087d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81087c0:	6878      	ldr	r0, [r7, #4]
 81087c2:	f000 f813 	bl	81087ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81087c6:	e005      	b.n	81087d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 81087c8:	6878      	ldr	r0, [r7, #4]
 81087ca:	f000 f80f 	bl	81087ec <I2C_TreatErrorCallback>
  }
}
 81087ce:	e002      	b.n	81087d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81087d0:	bf00      	nop
 81087d2:	e000      	b.n	81087d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81087d4:	bf00      	nop
}
 81087d6:	bf00      	nop
 81087d8:	3710      	adds	r7, #16
 81087da:	46bd      	mov	sp, r7
 81087dc:	bd80      	pop	{r7, pc}
 81087de:	bf00      	nop
 81087e0:	ffff0000 	.word	0xffff0000
 81087e4:	08107b8f 	.word	0x08107b8f
 81087e8:	08108883 	.word	0x08108883

081087ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81087ec:	b580      	push	{r7, lr}
 81087ee:	b082      	sub	sp, #8
 81087f0:	af00      	add	r7, sp, #0
 81087f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81087fa:	b2db      	uxtb	r3, r3
 81087fc:	2b60      	cmp	r3, #96	@ 0x60
 81087fe:	d10e      	bne.n	810881e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	2220      	movs	r2, #32
 8108804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108808:	687b      	ldr	r3, [r7, #4]
 810880a:	2200      	movs	r2, #0
 810880c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810880e:	687b      	ldr	r3, [r7, #4]
 8108810:	2200      	movs	r2, #0
 8108812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8108816:	6878      	ldr	r0, [r7, #4]
 8108818:	f7ff f9af 	bl	8107b7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 810881c:	e009      	b.n	8108832 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 810881e:	687b      	ldr	r3, [r7, #4]
 8108820:	2200      	movs	r2, #0
 8108822:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	2200      	movs	r2, #0
 8108828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 810882c:	6878      	ldr	r0, [r7, #4]
 810882e:	f7ff f99a 	bl	8107b66 <HAL_I2C_ErrorCallback>
}
 8108832:	bf00      	nop
 8108834:	3708      	adds	r7, #8
 8108836:	46bd      	mov	sp, r7
 8108838:	bd80      	pop	{r7, pc}

0810883a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810883a:	b480      	push	{r7}
 810883c:	b083      	sub	sp, #12
 810883e:	af00      	add	r7, sp, #0
 8108840:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	699b      	ldr	r3, [r3, #24]
 8108848:	f003 0302 	and.w	r3, r3, #2
 810884c:	2b02      	cmp	r3, #2
 810884e:	d103      	bne.n	8108858 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8108850:	687b      	ldr	r3, [r7, #4]
 8108852:	681b      	ldr	r3, [r3, #0]
 8108854:	2200      	movs	r2, #0
 8108856:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8108858:	687b      	ldr	r3, [r7, #4]
 810885a:	681b      	ldr	r3, [r3, #0]
 810885c:	699b      	ldr	r3, [r3, #24]
 810885e:	f003 0301 	and.w	r3, r3, #1
 8108862:	2b01      	cmp	r3, #1
 8108864:	d007      	beq.n	8108876 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	699a      	ldr	r2, [r3, #24]
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	681b      	ldr	r3, [r3, #0]
 8108870:	f042 0201 	orr.w	r2, r2, #1
 8108874:	619a      	str	r2, [r3, #24]
  }
}
 8108876:	bf00      	nop
 8108878:	370c      	adds	r7, #12
 810887a:	46bd      	mov	sp, r7
 810887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108880:	4770      	bx	lr

08108882 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108882:	b580      	push	{r7, lr}
 8108884:	b084      	sub	sp, #16
 8108886:	af00      	add	r7, sp, #0
 8108888:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810888e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8108890:	68fb      	ldr	r3, [r7, #12]
 8108892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108894:	2b00      	cmp	r3, #0
 8108896:	d003      	beq.n	81088a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8108898:	68fb      	ldr	r3, [r7, #12]
 810889a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810889c:	2200      	movs	r2, #0
 810889e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 81088a0:	68fb      	ldr	r3, [r7, #12]
 81088a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81088a4:	2b00      	cmp	r3, #0
 81088a6:	d003      	beq.n	81088b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81088ac:	2200      	movs	r2, #0
 81088ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 81088b0:	68f8      	ldr	r0, [r7, #12]
 81088b2:	f7ff ff9b 	bl	81087ec <I2C_TreatErrorCallback>
}
 81088b6:	bf00      	nop
 81088b8:	3710      	adds	r7, #16
 81088ba:	46bd      	mov	sp, r7
 81088bc:	bd80      	pop	{r7, pc}

081088be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81088be:	b580      	push	{r7, lr}
 81088c0:	b084      	sub	sp, #16
 81088c2:	af00      	add	r7, sp, #0
 81088c4:	60f8      	str	r0, [r7, #12]
 81088c6:	60b9      	str	r1, [r7, #8]
 81088c8:	603b      	str	r3, [r7, #0]
 81088ca:	4613      	mov	r3, r2
 81088cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81088ce:	e03b      	b.n	8108948 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81088d0:	69ba      	ldr	r2, [r7, #24]
 81088d2:	6839      	ldr	r1, [r7, #0]
 81088d4:	68f8      	ldr	r0, [r7, #12]
 81088d6:	f000 f8d5 	bl	8108a84 <I2C_IsErrorOccurred>
 81088da:	4603      	mov	r3, r0
 81088dc:	2b00      	cmp	r3, #0
 81088de:	d001      	beq.n	81088e4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 81088e0:	2301      	movs	r3, #1
 81088e2:	e041      	b.n	8108968 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81088e4:	683b      	ldr	r3, [r7, #0]
 81088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81088ea:	d02d      	beq.n	8108948 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81088ec:	f7fa f92c 	bl	8102b48 <HAL_GetTick>
 81088f0:	4602      	mov	r2, r0
 81088f2:	69bb      	ldr	r3, [r7, #24]
 81088f4:	1ad3      	subs	r3, r2, r3
 81088f6:	683a      	ldr	r2, [r7, #0]
 81088f8:	429a      	cmp	r2, r3
 81088fa:	d302      	bcc.n	8108902 <I2C_WaitOnFlagUntilTimeout+0x44>
 81088fc:	683b      	ldr	r3, [r7, #0]
 81088fe:	2b00      	cmp	r3, #0
 8108900:	d122      	bne.n	8108948 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8108902:	68fb      	ldr	r3, [r7, #12]
 8108904:	681b      	ldr	r3, [r3, #0]
 8108906:	699a      	ldr	r2, [r3, #24]
 8108908:	68bb      	ldr	r3, [r7, #8]
 810890a:	4013      	ands	r3, r2
 810890c:	68ba      	ldr	r2, [r7, #8]
 810890e:	429a      	cmp	r2, r3
 8108910:	bf0c      	ite	eq
 8108912:	2301      	moveq	r3, #1
 8108914:	2300      	movne	r3, #0
 8108916:	b2db      	uxtb	r3, r3
 8108918:	461a      	mov	r2, r3
 810891a:	79fb      	ldrb	r3, [r7, #7]
 810891c:	429a      	cmp	r2, r3
 810891e:	d113      	bne.n	8108948 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108920:	68fb      	ldr	r3, [r7, #12]
 8108922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108924:	f043 0220 	orr.w	r2, r3, #32
 8108928:	68fb      	ldr	r3, [r7, #12]
 810892a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810892c:	68fb      	ldr	r3, [r7, #12]
 810892e:	2220      	movs	r2, #32
 8108930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8108934:	68fb      	ldr	r3, [r7, #12]
 8108936:	2200      	movs	r2, #0
 8108938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810893c:	68fb      	ldr	r3, [r7, #12]
 810893e:	2200      	movs	r2, #0
 8108940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8108944:	2301      	movs	r3, #1
 8108946:	e00f      	b.n	8108968 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8108948:	68fb      	ldr	r3, [r7, #12]
 810894a:	681b      	ldr	r3, [r3, #0]
 810894c:	699a      	ldr	r2, [r3, #24]
 810894e:	68bb      	ldr	r3, [r7, #8]
 8108950:	4013      	ands	r3, r2
 8108952:	68ba      	ldr	r2, [r7, #8]
 8108954:	429a      	cmp	r2, r3
 8108956:	bf0c      	ite	eq
 8108958:	2301      	moveq	r3, #1
 810895a:	2300      	movne	r3, #0
 810895c:	b2db      	uxtb	r3, r3
 810895e:	461a      	mov	r2, r3
 8108960:	79fb      	ldrb	r3, [r7, #7]
 8108962:	429a      	cmp	r2, r3
 8108964:	d0b4      	beq.n	81088d0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108966:	2300      	movs	r3, #0
}
 8108968:	4618      	mov	r0, r3
 810896a:	3710      	adds	r7, #16
 810896c:	46bd      	mov	sp, r7
 810896e:	bd80      	pop	{r7, pc}

08108970 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8108970:	b580      	push	{r7, lr}
 8108972:	b084      	sub	sp, #16
 8108974:	af00      	add	r7, sp, #0
 8108976:	60f8      	str	r0, [r7, #12]
 8108978:	60b9      	str	r1, [r7, #8]
 810897a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810897c:	e033      	b.n	81089e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810897e:	687a      	ldr	r2, [r7, #4]
 8108980:	68b9      	ldr	r1, [r7, #8]
 8108982:	68f8      	ldr	r0, [r7, #12]
 8108984:	f000 f87e 	bl	8108a84 <I2C_IsErrorOccurred>
 8108988:	4603      	mov	r3, r0
 810898a:	2b00      	cmp	r3, #0
 810898c:	d001      	beq.n	8108992 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810898e:	2301      	movs	r3, #1
 8108990:	e031      	b.n	81089f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108992:	68bb      	ldr	r3, [r7, #8]
 8108994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108998:	d025      	beq.n	81089e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810899a:	f7fa f8d5 	bl	8102b48 <HAL_GetTick>
 810899e:	4602      	mov	r2, r0
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	1ad3      	subs	r3, r2, r3
 81089a4:	68ba      	ldr	r2, [r7, #8]
 81089a6:	429a      	cmp	r2, r3
 81089a8:	d302      	bcc.n	81089b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81089aa:	68bb      	ldr	r3, [r7, #8]
 81089ac:	2b00      	cmp	r3, #0
 81089ae:	d11a      	bne.n	81089e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81089b0:	68fb      	ldr	r3, [r7, #12]
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	699b      	ldr	r3, [r3, #24]
 81089b6:	f003 0302 	and.w	r3, r3, #2
 81089ba:	2b02      	cmp	r3, #2
 81089bc:	d013      	beq.n	81089e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81089be:	68fb      	ldr	r3, [r7, #12]
 81089c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81089c2:	f043 0220 	orr.w	r2, r3, #32
 81089c6:	68fb      	ldr	r3, [r7, #12]
 81089c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81089ca:	68fb      	ldr	r3, [r7, #12]
 81089cc:	2220      	movs	r2, #32
 81089ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81089d2:	68fb      	ldr	r3, [r7, #12]
 81089d4:	2200      	movs	r2, #0
 81089d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81089da:	68fb      	ldr	r3, [r7, #12]
 81089dc:	2200      	movs	r2, #0
 81089de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 81089e2:	2301      	movs	r3, #1
 81089e4:	e007      	b.n	81089f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81089e6:	68fb      	ldr	r3, [r7, #12]
 81089e8:	681b      	ldr	r3, [r3, #0]
 81089ea:	699b      	ldr	r3, [r3, #24]
 81089ec:	f003 0302 	and.w	r3, r3, #2
 81089f0:	2b02      	cmp	r3, #2
 81089f2:	d1c4      	bne.n	810897e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81089f4:	2300      	movs	r3, #0
}
 81089f6:	4618      	mov	r0, r3
 81089f8:	3710      	adds	r7, #16
 81089fa:	46bd      	mov	sp, r7
 81089fc:	bd80      	pop	{r7, pc}

081089fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81089fe:	b580      	push	{r7, lr}
 8108a00:	b084      	sub	sp, #16
 8108a02:	af00      	add	r7, sp, #0
 8108a04:	60f8      	str	r0, [r7, #12]
 8108a06:	60b9      	str	r1, [r7, #8]
 8108a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108a0a:	e02f      	b.n	8108a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8108a0c:	687a      	ldr	r2, [r7, #4]
 8108a0e:	68b9      	ldr	r1, [r7, #8]
 8108a10:	68f8      	ldr	r0, [r7, #12]
 8108a12:	f000 f837 	bl	8108a84 <I2C_IsErrorOccurred>
 8108a16:	4603      	mov	r3, r0
 8108a18:	2b00      	cmp	r3, #0
 8108a1a:	d001      	beq.n	8108a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8108a1c:	2301      	movs	r3, #1
 8108a1e:	e02d      	b.n	8108a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108a20:	f7fa f892 	bl	8102b48 <HAL_GetTick>
 8108a24:	4602      	mov	r2, r0
 8108a26:	687b      	ldr	r3, [r7, #4]
 8108a28:	1ad3      	subs	r3, r2, r3
 8108a2a:	68ba      	ldr	r2, [r7, #8]
 8108a2c:	429a      	cmp	r2, r3
 8108a2e:	d302      	bcc.n	8108a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8108a30:	68bb      	ldr	r3, [r7, #8]
 8108a32:	2b00      	cmp	r3, #0
 8108a34:	d11a      	bne.n	8108a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8108a36:	68fb      	ldr	r3, [r7, #12]
 8108a38:	681b      	ldr	r3, [r3, #0]
 8108a3a:	699b      	ldr	r3, [r3, #24]
 8108a3c:	f003 0320 	and.w	r3, r3, #32
 8108a40:	2b20      	cmp	r3, #32
 8108a42:	d013      	beq.n	8108a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108a44:	68fb      	ldr	r3, [r7, #12]
 8108a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108a48:	f043 0220 	orr.w	r2, r3, #32
 8108a4c:	68fb      	ldr	r3, [r7, #12]
 8108a4e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8108a50:	68fb      	ldr	r3, [r7, #12]
 8108a52:	2220      	movs	r2, #32
 8108a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8108a58:	68fb      	ldr	r3, [r7, #12]
 8108a5a:	2200      	movs	r2, #0
 8108a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8108a60:	68fb      	ldr	r3, [r7, #12]
 8108a62:	2200      	movs	r2, #0
 8108a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8108a68:	2301      	movs	r3, #1
 8108a6a:	e007      	b.n	8108a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108a6c:	68fb      	ldr	r3, [r7, #12]
 8108a6e:	681b      	ldr	r3, [r3, #0]
 8108a70:	699b      	ldr	r3, [r3, #24]
 8108a72:	f003 0320 	and.w	r3, r3, #32
 8108a76:	2b20      	cmp	r3, #32
 8108a78:	d1c8      	bne.n	8108a0c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8108a7a:	2300      	movs	r3, #0
}
 8108a7c:	4618      	mov	r0, r3
 8108a7e:	3710      	adds	r7, #16
 8108a80:	46bd      	mov	sp, r7
 8108a82:	bd80      	pop	{r7, pc}

08108a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8108a84:	b580      	push	{r7, lr}
 8108a86:	b08a      	sub	sp, #40	@ 0x28
 8108a88:	af00      	add	r7, sp, #0
 8108a8a:	60f8      	str	r0, [r7, #12]
 8108a8c:	60b9      	str	r1, [r7, #8]
 8108a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108a90:	2300      	movs	r3, #0
 8108a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8108a96:	68fb      	ldr	r3, [r7, #12]
 8108a98:	681b      	ldr	r3, [r3, #0]
 8108a9a:	699b      	ldr	r3, [r3, #24]
 8108a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8108a9e:	2300      	movs	r3, #0
 8108aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8108aa6:	69bb      	ldr	r3, [r7, #24]
 8108aa8:	f003 0310 	and.w	r3, r3, #16
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d068      	beq.n	8108b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108ab0:	68fb      	ldr	r3, [r7, #12]
 8108ab2:	681b      	ldr	r3, [r3, #0]
 8108ab4:	2210      	movs	r2, #16
 8108ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8108ab8:	e049      	b.n	8108b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8108aba:	68bb      	ldr	r3, [r7, #8]
 8108abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ac0:	d045      	beq.n	8108b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8108ac2:	f7fa f841 	bl	8102b48 <HAL_GetTick>
 8108ac6:	4602      	mov	r2, r0
 8108ac8:	69fb      	ldr	r3, [r7, #28]
 8108aca:	1ad3      	subs	r3, r2, r3
 8108acc:	68ba      	ldr	r2, [r7, #8]
 8108ace:	429a      	cmp	r2, r3
 8108ad0:	d302      	bcc.n	8108ad8 <I2C_IsErrorOccurred+0x54>
 8108ad2:	68bb      	ldr	r3, [r7, #8]
 8108ad4:	2b00      	cmp	r3, #0
 8108ad6:	d13a      	bne.n	8108b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8108ad8:	68fb      	ldr	r3, [r7, #12]
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	685b      	ldr	r3, [r3, #4]
 8108ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8108ae4:	68fb      	ldr	r3, [r7, #12]
 8108ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8108aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8108aec:	68fb      	ldr	r3, [r7, #12]
 8108aee:	681b      	ldr	r3, [r3, #0]
 8108af0:	699b      	ldr	r3, [r3, #24]
 8108af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8108af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108afa:	d121      	bne.n	8108b40 <I2C_IsErrorOccurred+0xbc>
 8108afc:	697b      	ldr	r3, [r7, #20]
 8108afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108b02:	d01d      	beq.n	8108b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8108b04:	7cfb      	ldrb	r3, [r7, #19]
 8108b06:	2b20      	cmp	r3, #32
 8108b08:	d01a      	beq.n	8108b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8108b0a:	68fb      	ldr	r3, [r7, #12]
 8108b0c:	681b      	ldr	r3, [r3, #0]
 8108b0e:	685a      	ldr	r2, [r3, #4]
 8108b10:	68fb      	ldr	r3, [r7, #12]
 8108b12:	681b      	ldr	r3, [r3, #0]
 8108b14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8108b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8108b1a:	f7fa f815 	bl	8102b48 <HAL_GetTick>
 8108b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108b20:	e00e      	b.n	8108b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8108b22:	f7fa f811 	bl	8102b48 <HAL_GetTick>
 8108b26:	4602      	mov	r2, r0
 8108b28:	69fb      	ldr	r3, [r7, #28]
 8108b2a:	1ad3      	subs	r3, r2, r3
 8108b2c:	2b19      	cmp	r3, #25
 8108b2e:	d907      	bls.n	8108b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8108b30:	6a3b      	ldr	r3, [r7, #32]
 8108b32:	f043 0320 	orr.w	r3, r3, #32
 8108b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8108b38:	2301      	movs	r3, #1
 8108b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8108b3e:	e006      	b.n	8108b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108b40:	68fb      	ldr	r3, [r7, #12]
 8108b42:	681b      	ldr	r3, [r3, #0]
 8108b44:	699b      	ldr	r3, [r3, #24]
 8108b46:	f003 0320 	and.w	r3, r3, #32
 8108b4a:	2b20      	cmp	r3, #32
 8108b4c:	d1e9      	bne.n	8108b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8108b4e:	68fb      	ldr	r3, [r7, #12]
 8108b50:	681b      	ldr	r3, [r3, #0]
 8108b52:	699b      	ldr	r3, [r3, #24]
 8108b54:	f003 0320 	and.w	r3, r3, #32
 8108b58:	2b20      	cmp	r3, #32
 8108b5a:	d003      	beq.n	8108b64 <I2C_IsErrorOccurred+0xe0>
 8108b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108b60:	2b00      	cmp	r3, #0
 8108b62:	d0aa      	beq.n	8108aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8108b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108b68:	2b00      	cmp	r3, #0
 8108b6a:	d103      	bne.n	8108b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108b6c:	68fb      	ldr	r3, [r7, #12]
 8108b6e:	681b      	ldr	r3, [r3, #0]
 8108b70:	2220      	movs	r2, #32
 8108b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8108b74:	6a3b      	ldr	r3, [r7, #32]
 8108b76:	f043 0304 	orr.w	r3, r3, #4
 8108b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8108b7c:	2301      	movs	r3, #1
 8108b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8108b82:	68fb      	ldr	r3, [r7, #12]
 8108b84:	681b      	ldr	r3, [r3, #0]
 8108b86:	699b      	ldr	r3, [r3, #24]
 8108b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8108b8a:	69bb      	ldr	r3, [r7, #24]
 8108b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108b90:	2b00      	cmp	r3, #0
 8108b92:	d00b      	beq.n	8108bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8108b94:	6a3b      	ldr	r3, [r7, #32]
 8108b96:	f043 0301 	orr.w	r3, r3, #1
 8108b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8108b9c:	68fb      	ldr	r3, [r7, #12]
 8108b9e:	681b      	ldr	r3, [r3, #0]
 8108ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8108ba6:	2301      	movs	r3, #1
 8108ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8108bac:	69bb      	ldr	r3, [r7, #24]
 8108bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8108bb2:	2b00      	cmp	r3, #0
 8108bb4:	d00b      	beq.n	8108bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8108bb6:	6a3b      	ldr	r3, [r7, #32]
 8108bb8:	f043 0308 	orr.w	r3, r3, #8
 8108bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8108bbe:	68fb      	ldr	r3, [r7, #12]
 8108bc0:	681b      	ldr	r3, [r3, #0]
 8108bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8108bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8108bc8:	2301      	movs	r3, #1
 8108bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8108bce:	69bb      	ldr	r3, [r7, #24]
 8108bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108bd4:	2b00      	cmp	r3, #0
 8108bd6:	d00b      	beq.n	8108bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8108bd8:	6a3b      	ldr	r3, [r7, #32]
 8108bda:	f043 0302 	orr.w	r3, r3, #2
 8108bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8108be0:	68fb      	ldr	r3, [r7, #12]
 8108be2:	681b      	ldr	r3, [r3, #0]
 8108be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8108bea:	2301      	movs	r3, #1
 8108bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8108bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108bf4:	2b00      	cmp	r3, #0
 8108bf6:	d01c      	beq.n	8108c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108bf8:	68f8      	ldr	r0, [r7, #12]
 8108bfa:	f7ff fe1e 	bl	810883a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108bfe:	68fb      	ldr	r3, [r7, #12]
 8108c00:	681b      	ldr	r3, [r3, #0]
 8108c02:	6859      	ldr	r1, [r3, #4]
 8108c04:	68fb      	ldr	r3, [r7, #12]
 8108c06:	681a      	ldr	r2, [r3, #0]
 8108c08:	4b0d      	ldr	r3, [pc, #52]	@ (8108c40 <I2C_IsErrorOccurred+0x1bc>)
 8108c0a:	400b      	ands	r3, r1
 8108c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8108c0e:	68fb      	ldr	r3, [r7, #12]
 8108c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8108c12:	6a3b      	ldr	r3, [r7, #32]
 8108c14:	431a      	orrs	r2, r3
 8108c16:	68fb      	ldr	r3, [r7, #12]
 8108c18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8108c1a:	68fb      	ldr	r3, [r7, #12]
 8108c1c:	2220      	movs	r2, #32
 8108c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8108c22:	68fb      	ldr	r3, [r7, #12]
 8108c24:	2200      	movs	r2, #0
 8108c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108c2a:	68fb      	ldr	r3, [r7, #12]
 8108c2c:	2200      	movs	r2, #0
 8108c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8108c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8108c36:	4618      	mov	r0, r3
 8108c38:	3728      	adds	r7, #40	@ 0x28
 8108c3a:	46bd      	mov	sp, r7
 8108c3c:	bd80      	pop	{r7, pc}
 8108c3e:	bf00      	nop
 8108c40:	fe00e800 	.word	0xfe00e800

08108c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8108c44:	b480      	push	{r7}
 8108c46:	b087      	sub	sp, #28
 8108c48:	af00      	add	r7, sp, #0
 8108c4a:	60f8      	str	r0, [r7, #12]
 8108c4c:	607b      	str	r3, [r7, #4]
 8108c4e:	460b      	mov	r3, r1
 8108c50:	817b      	strh	r3, [r7, #10]
 8108c52:	4613      	mov	r3, r2
 8108c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8108c56:	897b      	ldrh	r3, [r7, #10]
 8108c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8108c5c:	7a7b      	ldrb	r3, [r7, #9]
 8108c5e:	041b      	lsls	r3, r3, #16
 8108c60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8108c64:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8108c6a:	6a3b      	ldr	r3, [r7, #32]
 8108c6c:	4313      	orrs	r3, r2
 8108c6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8108c72:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8108c74:	68fb      	ldr	r3, [r7, #12]
 8108c76:	681b      	ldr	r3, [r3, #0]
 8108c78:	685a      	ldr	r2, [r3, #4]
 8108c7a:	6a3b      	ldr	r3, [r7, #32]
 8108c7c:	0d5b      	lsrs	r3, r3, #21
 8108c7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8108c82:	4b08      	ldr	r3, [pc, #32]	@ (8108ca4 <I2C_TransferConfig+0x60>)
 8108c84:	430b      	orrs	r3, r1
 8108c86:	43db      	mvns	r3, r3
 8108c88:	ea02 0103 	and.w	r1, r2, r3
 8108c8c:	68fb      	ldr	r3, [r7, #12]
 8108c8e:	681b      	ldr	r3, [r3, #0]
 8108c90:	697a      	ldr	r2, [r7, #20]
 8108c92:	430a      	orrs	r2, r1
 8108c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8108c96:	bf00      	nop
 8108c98:	371c      	adds	r7, #28
 8108c9a:	46bd      	mov	sp, r7
 8108c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ca0:	4770      	bx	lr
 8108ca2:	bf00      	nop
 8108ca4:	03ff63ff 	.word	0x03ff63ff

08108ca8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108ca8:	b480      	push	{r7}
 8108caa:	b085      	sub	sp, #20
 8108cac:	af00      	add	r7, sp, #0
 8108cae:	6078      	str	r0, [r7, #4]
 8108cb0:	460b      	mov	r3, r1
 8108cb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108cb4:	2300      	movs	r3, #0
 8108cb6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108cb8:	887b      	ldrh	r3, [r7, #2]
 8108cba:	f003 0301 	and.w	r3, r3, #1
 8108cbe:	2b00      	cmp	r3, #0
 8108cc0:	d00f      	beq.n	8108ce2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108cc2:	68fb      	ldr	r3, [r7, #12]
 8108cc4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8108cc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108cd0:	b2db      	uxtb	r3, r3
 8108cd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8108cd6:	2b28      	cmp	r3, #40	@ 0x28
 8108cd8:	d003      	beq.n	8108ce2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108cda:	68fb      	ldr	r3, [r7, #12]
 8108cdc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8108ce0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108ce2:	887b      	ldrh	r3, [r7, #2]
 8108ce4:	f003 0302 	and.w	r3, r3, #2
 8108ce8:	2b00      	cmp	r3, #0
 8108cea:	d00f      	beq.n	8108d0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108cec:	68fb      	ldr	r3, [r7, #12]
 8108cee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8108cf2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108cfa:	b2db      	uxtb	r3, r3
 8108cfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8108d00:	2b28      	cmp	r3, #40	@ 0x28
 8108d02:	d003      	beq.n	8108d0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108d04:	68fb      	ldr	r3, [r7, #12]
 8108d06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8108d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108d10:	2b00      	cmp	r3, #0
 8108d12:	da03      	bge.n	8108d1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108d14:	68fb      	ldr	r3, [r7, #12]
 8108d16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8108d1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108d1c:	887b      	ldrh	r3, [r7, #2]
 8108d1e:	2b10      	cmp	r3, #16
 8108d20:	d103      	bne.n	8108d2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108d22:	68fb      	ldr	r3, [r7, #12]
 8108d24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8108d28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108d2a:	887b      	ldrh	r3, [r7, #2]
 8108d2c:	2b20      	cmp	r3, #32
 8108d2e:	d103      	bne.n	8108d38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8108d30:	68fb      	ldr	r3, [r7, #12]
 8108d32:	f043 0320 	orr.w	r3, r3, #32
 8108d36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108d38:	887b      	ldrh	r3, [r7, #2]
 8108d3a:	2b40      	cmp	r3, #64	@ 0x40
 8108d3c:	d103      	bne.n	8108d46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8108d3e:	68fb      	ldr	r3, [r7, #12]
 8108d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108d44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8108d46:	687b      	ldr	r3, [r7, #4]
 8108d48:	681b      	ldr	r3, [r3, #0]
 8108d4a:	6819      	ldr	r1, [r3, #0]
 8108d4c:	68fb      	ldr	r3, [r7, #12]
 8108d4e:	43da      	mvns	r2, r3
 8108d50:	687b      	ldr	r3, [r7, #4]
 8108d52:	681b      	ldr	r3, [r3, #0]
 8108d54:	400a      	ands	r2, r1
 8108d56:	601a      	str	r2, [r3, #0]
}
 8108d58:	bf00      	nop
 8108d5a:	3714      	adds	r7, #20
 8108d5c:	46bd      	mov	sp, r7
 8108d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d62:	4770      	bx	lr

08108d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8108d64:	b480      	push	{r7}
 8108d66:	b083      	sub	sp, #12
 8108d68:	af00      	add	r7, sp, #0
 8108d6a:	6078      	str	r0, [r7, #4]
 8108d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108d74:	b2db      	uxtb	r3, r3
 8108d76:	2b20      	cmp	r3, #32
 8108d78:	d138      	bne.n	8108dec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108d7a:	687b      	ldr	r3, [r7, #4]
 8108d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8108d80:	2b01      	cmp	r3, #1
 8108d82:	d101      	bne.n	8108d88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8108d84:	2302      	movs	r3, #2
 8108d86:	e032      	b.n	8108dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	2201      	movs	r2, #1
 8108d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108d90:	687b      	ldr	r3, [r7, #4]
 8108d92:	2224      	movs	r2, #36	@ 0x24
 8108d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108d98:	687b      	ldr	r3, [r7, #4]
 8108d9a:	681b      	ldr	r3, [r3, #0]
 8108d9c:	681a      	ldr	r2, [r3, #0]
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	681b      	ldr	r3, [r3, #0]
 8108da2:	f022 0201 	bic.w	r2, r2, #1
 8108da6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	681b      	ldr	r3, [r3, #0]
 8108dac:	681a      	ldr	r2, [r3, #0]
 8108dae:	687b      	ldr	r3, [r7, #4]
 8108db0:	681b      	ldr	r3, [r3, #0]
 8108db2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8108db6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	681b      	ldr	r3, [r3, #0]
 8108dbc:	6819      	ldr	r1, [r3, #0]
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	681b      	ldr	r3, [r3, #0]
 8108dc2:	683a      	ldr	r2, [r7, #0]
 8108dc4:	430a      	orrs	r2, r1
 8108dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108dc8:	687b      	ldr	r3, [r7, #4]
 8108dca:	681b      	ldr	r3, [r3, #0]
 8108dcc:	681a      	ldr	r2, [r3, #0]
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	681b      	ldr	r3, [r3, #0]
 8108dd2:	f042 0201 	orr.w	r2, r2, #1
 8108dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	2220      	movs	r2, #32
 8108ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108de0:	687b      	ldr	r3, [r7, #4]
 8108de2:	2200      	movs	r2, #0
 8108de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8108de8:	2300      	movs	r3, #0
 8108dea:	e000      	b.n	8108dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108dec:	2302      	movs	r3, #2
  }
}
 8108dee:	4618      	mov	r0, r3
 8108df0:	370c      	adds	r7, #12
 8108df2:	46bd      	mov	sp, r7
 8108df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108df8:	4770      	bx	lr

08108dfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8108dfa:	b480      	push	{r7}
 8108dfc:	b085      	sub	sp, #20
 8108dfe:	af00      	add	r7, sp, #0
 8108e00:	6078      	str	r0, [r7, #4]
 8108e02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108e0a:	b2db      	uxtb	r3, r3
 8108e0c:	2b20      	cmp	r3, #32
 8108e0e:	d139      	bne.n	8108e84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108e10:	687b      	ldr	r3, [r7, #4]
 8108e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8108e16:	2b01      	cmp	r3, #1
 8108e18:	d101      	bne.n	8108e1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8108e1a:	2302      	movs	r3, #2
 8108e1c:	e033      	b.n	8108e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	2201      	movs	r2, #1
 8108e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	2224      	movs	r2, #36	@ 0x24
 8108e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	681b      	ldr	r3, [r3, #0]
 8108e32:	681a      	ldr	r2, [r3, #0]
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	f022 0201 	bic.w	r2, r2, #1
 8108e3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8108e3e:	687b      	ldr	r3, [r7, #4]
 8108e40:	681b      	ldr	r3, [r3, #0]
 8108e42:	681b      	ldr	r3, [r3, #0]
 8108e44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8108e46:	68fb      	ldr	r3, [r7, #12]
 8108e48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8108e4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8108e4e:	683b      	ldr	r3, [r7, #0]
 8108e50:	021b      	lsls	r3, r3, #8
 8108e52:	68fa      	ldr	r2, [r7, #12]
 8108e54:	4313      	orrs	r3, r2
 8108e56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	681b      	ldr	r3, [r3, #0]
 8108e5c:	68fa      	ldr	r2, [r7, #12]
 8108e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	681b      	ldr	r3, [r3, #0]
 8108e64:	681a      	ldr	r2, [r3, #0]
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	681b      	ldr	r3, [r3, #0]
 8108e6a:	f042 0201 	orr.w	r2, r2, #1
 8108e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	2220      	movs	r2, #32
 8108e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	2200      	movs	r2, #0
 8108e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8108e80:	2300      	movs	r3, #0
 8108e82:	e000      	b.n	8108e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8108e84:	2302      	movs	r3, #2
  }
}
 8108e86:	4618      	mov	r0, r3
 8108e88:	3714      	adds	r7, #20
 8108e8a:	46bd      	mov	sp, r7
 8108e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e90:	4770      	bx	lr
	...

08108e94 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108e94:	b580      	push	{r7, lr}
 8108e96:	b084      	sub	sp, #16
 8108e98:	af00      	add	r7, sp, #0
 8108e9a:	60f8      	str	r0, [r7, #12]
 8108e9c:	460b      	mov	r3, r1
 8108e9e:	607a      	str	r2, [r7, #4]
 8108ea0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108ea2:	4b37      	ldr	r3, [pc, #220]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108ea4:	681b      	ldr	r3, [r3, #0]
 8108ea6:	f023 0201 	bic.w	r2, r3, #1
 8108eaa:	4935      	ldr	r1, [pc, #212]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108eac:	68fb      	ldr	r3, [r7, #12]
 8108eae:	4313      	orrs	r3, r2
 8108eb0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	2b00      	cmp	r3, #0
 8108eb6:	d123      	bne.n	8108f00 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108eb8:	f7fb fede 	bl	8104c78 <HAL_GetCurrentCPUID>
 8108ebc:	4603      	mov	r3, r0
 8108ebe:	2b03      	cmp	r3, #3
 8108ec0:	d158      	bne.n	8108f74 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108ec4:	691b      	ldr	r3, [r3, #16]
 8108ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108ec8:	f023 0301 	bic.w	r3, r3, #1
 8108ecc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108ece:	4b2d      	ldr	r3, [pc, #180]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ed0:	691b      	ldr	r3, [r3, #16]
 8108ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ed4:	f043 0304 	orr.w	r3, r3, #4
 8108ed8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108eda:	f3bf 8f4f 	dsb	sy
}
 8108ede:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108ee0:	f3bf 8f6f 	isb	sy
}
 8108ee4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108ee6:	7afb      	ldrb	r3, [r7, #11]
 8108ee8:	2b01      	cmp	r3, #1
 8108eea:	d101      	bne.n	8108ef0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108eec:	bf30      	wfi
 8108eee:	e000      	b.n	8108ef2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108ef0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108ef2:	4b24      	ldr	r3, [pc, #144]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ef4:	691b      	ldr	r3, [r3, #16]
 8108ef6:	4a23      	ldr	r2, [pc, #140]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ef8:	f023 0304 	bic.w	r3, r3, #4
 8108efc:	6113      	str	r3, [r2, #16]
 8108efe:	e03c      	b.n	8108f7a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	2b01      	cmp	r3, #1
 8108f04:	d123      	bne.n	8108f4e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108f06:	f7fb feb7 	bl	8104c78 <HAL_GetCurrentCPUID>
 8108f0a:	4603      	mov	r3, r0
 8108f0c:	2b01      	cmp	r3, #1
 8108f0e:	d133      	bne.n	8108f78 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108f10:	4b1b      	ldr	r3, [pc, #108]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f12:	695b      	ldr	r3, [r3, #20]
 8108f14:	4a1a      	ldr	r2, [pc, #104]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f16:	f023 0302 	bic.w	r3, r3, #2
 8108f1a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108f1c:	4b19      	ldr	r3, [pc, #100]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108f1e:	691b      	ldr	r3, [r3, #16]
 8108f20:	4a18      	ldr	r2, [pc, #96]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108f22:	f043 0304 	orr.w	r3, r3, #4
 8108f26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108f28:	f3bf 8f4f 	dsb	sy
}
 8108f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108f2e:	f3bf 8f6f 	isb	sy
}
 8108f32:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108f34:	7afb      	ldrb	r3, [r7, #11]
 8108f36:	2b01      	cmp	r3, #1
 8108f38:	d101      	bne.n	8108f3e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108f3a:	bf30      	wfi
 8108f3c:	e000      	b.n	8108f40 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108f3e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108f40:	4b10      	ldr	r3, [pc, #64]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108f42:	691b      	ldr	r3, [r3, #16]
 8108f44:	4a0f      	ldr	r2, [pc, #60]	@ (8108f84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108f46:	f023 0304 	bic.w	r3, r3, #4
 8108f4a:	6113      	str	r3, [r2, #16]
 8108f4c:	e015      	b.n	8108f7a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108f4e:	f7fb fe93 	bl	8104c78 <HAL_GetCurrentCPUID>
 8108f52:	4603      	mov	r3, r0
 8108f54:	2b03      	cmp	r3, #3
 8108f56:	d106      	bne.n	8108f66 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8108f58:	4b09      	ldr	r3, [pc, #36]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f5a:	691b      	ldr	r3, [r3, #16]
 8108f5c:	4a08      	ldr	r2, [pc, #32]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f5e:	f023 0304 	bic.w	r3, r3, #4
 8108f62:	6113      	str	r3, [r2, #16]
 8108f64:	e009      	b.n	8108f7a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8108f66:	4b06      	ldr	r3, [pc, #24]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f68:	695b      	ldr	r3, [r3, #20]
 8108f6a:	4a05      	ldr	r2, [pc, #20]	@ (8108f80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f6c:	f023 0304 	bic.w	r3, r3, #4
 8108f70:	6153      	str	r3, [r2, #20]
 8108f72:	e002      	b.n	8108f7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108f74:	bf00      	nop
 8108f76:	e000      	b.n	8108f7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108f78:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8108f7a:	3710      	adds	r7, #16
 8108f7c:	46bd      	mov	sp, r7
 8108f7e:	bd80      	pop	{r7, pc}
 8108f80:	58024800 	.word	0x58024800
 8108f84:	e000ed00 	.word	0xe000ed00

08108f88 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108f88:	b580      	push	{r7, lr}
 8108f8a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108f8c:	f7fb fe74 	bl	8104c78 <HAL_GetCurrentCPUID>
 8108f90:	4603      	mov	r3, r0
 8108f92:	2b03      	cmp	r3, #3
 8108f94:	d101      	bne.n	8108f9a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8108f96:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108f98:	e001      	b.n	8108f9e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8108f9a:	bf40      	sev
    __WFE ();
 8108f9c:	bf20      	wfe
}
 8108f9e:	bf00      	nop
 8108fa0:	bd80      	pop	{r7, pc}
	...

08108fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108fa4:	b480      	push	{r7}
 8108fa6:	b089      	sub	sp, #36	@ 0x24
 8108fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108faa:	4bb3      	ldr	r3, [pc, #716]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108fac:	691b      	ldr	r3, [r3, #16]
 8108fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108fb2:	2b18      	cmp	r3, #24
 8108fb4:	f200 8155 	bhi.w	8109262 <HAL_RCC_GetSysClockFreq+0x2be>
 8108fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8108fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8108fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108fbe:	bf00      	nop
 8108fc0:	08109025 	.word	0x08109025
 8108fc4:	08109263 	.word	0x08109263
 8108fc8:	08109263 	.word	0x08109263
 8108fcc:	08109263 	.word	0x08109263
 8108fd0:	08109263 	.word	0x08109263
 8108fd4:	08109263 	.word	0x08109263
 8108fd8:	08109263 	.word	0x08109263
 8108fdc:	08109263 	.word	0x08109263
 8108fe0:	0810904b 	.word	0x0810904b
 8108fe4:	08109263 	.word	0x08109263
 8108fe8:	08109263 	.word	0x08109263
 8108fec:	08109263 	.word	0x08109263
 8108ff0:	08109263 	.word	0x08109263
 8108ff4:	08109263 	.word	0x08109263
 8108ff8:	08109263 	.word	0x08109263
 8108ffc:	08109263 	.word	0x08109263
 8109000:	08109051 	.word	0x08109051
 8109004:	08109263 	.word	0x08109263
 8109008:	08109263 	.word	0x08109263
 810900c:	08109263 	.word	0x08109263
 8109010:	08109263 	.word	0x08109263
 8109014:	08109263 	.word	0x08109263
 8109018:	08109263 	.word	0x08109263
 810901c:	08109263 	.word	0x08109263
 8109020:	08109057 	.word	0x08109057
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109024:	4b94      	ldr	r3, [pc, #592]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109026:	681b      	ldr	r3, [r3, #0]
 8109028:	f003 0320 	and.w	r3, r3, #32
 810902c:	2b00      	cmp	r3, #0
 810902e:	d009      	beq.n	8109044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109030:	4b91      	ldr	r3, [pc, #580]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109032:	681b      	ldr	r3, [r3, #0]
 8109034:	08db      	lsrs	r3, r3, #3
 8109036:	f003 0303 	and.w	r3, r3, #3
 810903a:	4a90      	ldr	r2, [pc, #576]	@ (810927c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810903c:	fa22 f303 	lsr.w	r3, r2, r3
 8109040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8109042:	e111      	b.n	8109268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109044:	4b8d      	ldr	r3, [pc, #564]	@ (810927c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109046:	61bb      	str	r3, [r7, #24]
      break;
 8109048:	e10e      	b.n	8109268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810904a:	4b8d      	ldr	r3, [pc, #564]	@ (8109280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810904c:	61bb      	str	r3, [r7, #24]
      break;
 810904e:	e10b      	b.n	8109268 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8109050:	4b8c      	ldr	r3, [pc, #560]	@ (8109284 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109052:	61bb      	str	r3, [r7, #24]
      break;
 8109054:	e108      	b.n	8109268 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109056:	4b88      	ldr	r3, [pc, #544]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810905a:	f003 0303 	and.w	r3, r3, #3
 810905e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8109060:	4b85      	ldr	r3, [pc, #532]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109064:	091b      	lsrs	r3, r3, #4
 8109066:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810906a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810906c:	4b82      	ldr	r3, [pc, #520]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810906e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109070:	f003 0301 	and.w	r3, r3, #1
 8109074:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8109076:	4b80      	ldr	r3, [pc, #512]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810907a:	08db      	lsrs	r3, r3, #3
 810907c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109080:	68fa      	ldr	r2, [r7, #12]
 8109082:	fb02 f303 	mul.w	r3, r2, r3
 8109086:	ee07 3a90 	vmov	s15, r3
 810908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810908e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8109092:	693b      	ldr	r3, [r7, #16]
 8109094:	2b00      	cmp	r3, #0
 8109096:	f000 80e1 	beq.w	810925c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 810909a:	697b      	ldr	r3, [r7, #20]
 810909c:	2b02      	cmp	r3, #2
 810909e:	f000 8083 	beq.w	81091a8 <HAL_RCC_GetSysClockFreq+0x204>
 81090a2:	697b      	ldr	r3, [r7, #20]
 81090a4:	2b02      	cmp	r3, #2
 81090a6:	f200 80a1 	bhi.w	81091ec <HAL_RCC_GetSysClockFreq+0x248>
 81090aa:	697b      	ldr	r3, [r7, #20]
 81090ac:	2b00      	cmp	r3, #0
 81090ae:	d003      	beq.n	81090b8 <HAL_RCC_GetSysClockFreq+0x114>
 81090b0:	697b      	ldr	r3, [r7, #20]
 81090b2:	2b01      	cmp	r3, #1
 81090b4:	d056      	beq.n	8109164 <HAL_RCC_GetSysClockFreq+0x1c0>
 81090b6:	e099      	b.n	81091ec <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81090b8:	4b6f      	ldr	r3, [pc, #444]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090ba:	681b      	ldr	r3, [r3, #0]
 81090bc:	f003 0320 	and.w	r3, r3, #32
 81090c0:	2b00      	cmp	r3, #0
 81090c2:	d02d      	beq.n	8109120 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81090c4:	4b6c      	ldr	r3, [pc, #432]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090c6:	681b      	ldr	r3, [r3, #0]
 81090c8:	08db      	lsrs	r3, r3, #3
 81090ca:	f003 0303 	and.w	r3, r3, #3
 81090ce:	4a6b      	ldr	r2, [pc, #428]	@ (810927c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81090d0:	fa22 f303 	lsr.w	r3, r2, r3
 81090d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	ee07 3a90 	vmov	s15, r3
 81090dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090e0:	693b      	ldr	r3, [r7, #16]
 81090e2:	ee07 3a90 	vmov	s15, r3
 81090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090ee:	4b62      	ldr	r3, [pc, #392]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090f6:	ee07 3a90 	vmov	s15, r3
 81090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8109102:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8109288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810910e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109116:	ee67 7a27 	vmul.f32	s15, s14, s15
 810911a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810911e:	e087      	b.n	8109230 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109120:	693b      	ldr	r3, [r7, #16]
 8109122:	ee07 3a90 	vmov	s15, r3
 8109126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810912a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810928c <HAL_RCC_GetSysClockFreq+0x2e8>
 810912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109132:	4b51      	ldr	r3, [pc, #324]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810913a:	ee07 3a90 	vmov	s15, r3
 810913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109142:	ed97 6a02 	vldr	s12, [r7, #8]
 8109146:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8109288 <HAL_RCC_GetSysClockFreq+0x2e4>
 810914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810915e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109162:	e065      	b.n	8109230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109164:	693b      	ldr	r3, [r7, #16]
 8109166:	ee07 3a90 	vmov	s15, r3
 810916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810916e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8109290 <HAL_RCC_GetSysClockFreq+0x2ec>
 8109172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109176:	4b40      	ldr	r3, [pc, #256]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810917e:	ee07 3a90 	vmov	s15, r3
 8109182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109186:	ed97 6a02 	vldr	s12, [r7, #8]
 810918a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8109288 <HAL_RCC_GetSysClockFreq+0x2e4>
 810918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81091a6:	e043      	b.n	8109230 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81091a8:	693b      	ldr	r3, [r7, #16]
 81091aa:	ee07 3a90 	vmov	s15, r3
 81091ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8109294 <HAL_RCC_GetSysClockFreq+0x2f0>
 81091b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091ba:	4b2f      	ldr	r3, [pc, #188]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81091bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81091be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091c2:	ee07 3a90 	vmov	s15, r3
 81091c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81091ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8109288 <HAL_RCC_GetSysClockFreq+0x2e4>
 81091d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81091d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81091da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81091de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81091e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81091ea:	e021      	b.n	8109230 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81091ec:	693b      	ldr	r3, [r7, #16]
 81091ee:	ee07 3a90 	vmov	s15, r3
 81091f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8109290 <HAL_RCC_GetSysClockFreq+0x2ec>
 81091fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091fe:	4b1e      	ldr	r3, [pc, #120]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109206:	ee07 3a90 	vmov	s15, r3
 810920a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810920e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109212:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8109288 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810921a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810921e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109226:	ee67 7a27 	vmul.f32	s15, s14, s15
 810922a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810922e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8109230:	4b11      	ldr	r3, [pc, #68]	@ (8109278 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109234:	0a5b      	lsrs	r3, r3, #9
 8109236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810923a:	3301      	adds	r3, #1
 810923c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810923e:	683b      	ldr	r3, [r7, #0]
 8109240:	ee07 3a90 	vmov	s15, r3
 8109244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109248:	edd7 6a07 	vldr	s13, [r7, #28]
 810924c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109254:	ee17 3a90 	vmov	r3, s15
 8109258:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810925a:	e005      	b.n	8109268 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810925c:	2300      	movs	r3, #0
 810925e:	61bb      	str	r3, [r7, #24]
      break;
 8109260:	e002      	b.n	8109268 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8109262:	4b07      	ldr	r3, [pc, #28]	@ (8109280 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109264:	61bb      	str	r3, [r7, #24]
      break;
 8109266:	bf00      	nop
  }

  return sysclockfreq;
 8109268:	69bb      	ldr	r3, [r7, #24]
}
 810926a:	4618      	mov	r0, r3
 810926c:	3724      	adds	r7, #36	@ 0x24
 810926e:	46bd      	mov	sp, r7
 8109270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109274:	4770      	bx	lr
 8109276:	bf00      	nop
 8109278:	58024400 	.word	0x58024400
 810927c:	03d09000 	.word	0x03d09000
 8109280:	003d0900 	.word	0x003d0900
 8109284:	007a1200 	.word	0x007a1200
 8109288:	46000000 	.word	0x46000000
 810928c:	4c742400 	.word	0x4c742400
 8109290:	4a742400 	.word	0x4a742400
 8109294:	4af42400 	.word	0x4af42400

08109298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8109298:	b580      	push	{r7, lr}
 810929a:	b082      	sub	sp, #8
 810929c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810929e:	f7ff fe81 	bl	8108fa4 <HAL_RCC_GetSysClockFreq>
 81092a2:	4602      	mov	r2, r0
 81092a4:	4b11      	ldr	r3, [pc, #68]	@ (81092ec <HAL_RCC_GetHCLKFreq+0x54>)
 81092a6:	699b      	ldr	r3, [r3, #24]
 81092a8:	0a1b      	lsrs	r3, r3, #8
 81092aa:	f003 030f 	and.w	r3, r3, #15
 81092ae:	4910      	ldr	r1, [pc, #64]	@ (81092f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81092b0:	5ccb      	ldrb	r3, [r1, r3]
 81092b2:	f003 031f 	and.w	r3, r3, #31
 81092b6:	fa22 f303 	lsr.w	r3, r2, r3
 81092ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81092bc:	4b0b      	ldr	r3, [pc, #44]	@ (81092ec <HAL_RCC_GetHCLKFreq+0x54>)
 81092be:	699b      	ldr	r3, [r3, #24]
 81092c0:	f003 030f 	and.w	r3, r3, #15
 81092c4:	4a0a      	ldr	r2, [pc, #40]	@ (81092f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81092c6:	5cd3      	ldrb	r3, [r2, r3]
 81092c8:	f003 031f 	and.w	r3, r3, #31
 81092cc:	687a      	ldr	r2, [r7, #4]
 81092ce:	fa22 f303 	lsr.w	r3, r2, r3
 81092d2:	4a08      	ldr	r2, [pc, #32]	@ (81092f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81092d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81092d6:	4b07      	ldr	r3, [pc, #28]	@ (81092f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81092d8:	681b      	ldr	r3, [r3, #0]
 81092da:	4a07      	ldr	r2, [pc, #28]	@ (81092f8 <HAL_RCC_GetHCLKFreq+0x60>)
 81092dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81092de:	4b05      	ldr	r3, [pc, #20]	@ (81092f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81092e0:	681b      	ldr	r3, [r3, #0]
}
 81092e2:	4618      	mov	r0, r3
 81092e4:	3708      	adds	r7, #8
 81092e6:	46bd      	mov	sp, r7
 81092e8:	bd80      	pop	{r7, pc}
 81092ea:	bf00      	nop
 81092ec:	58024400 	.word	0x58024400
 81092f0:	08112094 	.word	0x08112094
 81092f4:	10000004 	.word	0x10000004
 81092f8:	10000000 	.word	0x10000000

081092fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81092fc:	b580      	push	{r7, lr}
 81092fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8109300:	f7ff ffca 	bl	8109298 <HAL_RCC_GetHCLKFreq>
 8109304:	4602      	mov	r2, r0
 8109306:	4b06      	ldr	r3, [pc, #24]	@ (8109320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8109308:	69db      	ldr	r3, [r3, #28]
 810930a:	091b      	lsrs	r3, r3, #4
 810930c:	f003 0307 	and.w	r3, r3, #7
 8109310:	4904      	ldr	r1, [pc, #16]	@ (8109324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8109312:	5ccb      	ldrb	r3, [r1, r3]
 8109314:	f003 031f 	and.w	r3, r3, #31
 8109318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810931c:	4618      	mov	r0, r3
 810931e:	bd80      	pop	{r7, pc}
 8109320:	58024400 	.word	0x58024400
 8109324:	08112094 	.word	0x08112094

08109328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109328:	b580      	push	{r7, lr}
 810932a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810932c:	f7ff ffb4 	bl	8109298 <HAL_RCC_GetHCLKFreq>
 8109330:	4602      	mov	r2, r0
 8109332:	4b06      	ldr	r3, [pc, #24]	@ (810934c <HAL_RCC_GetPCLK2Freq+0x24>)
 8109334:	69db      	ldr	r3, [r3, #28]
 8109336:	0a1b      	lsrs	r3, r3, #8
 8109338:	f003 0307 	and.w	r3, r3, #7
 810933c:	4904      	ldr	r1, [pc, #16]	@ (8109350 <HAL_RCC_GetPCLK2Freq+0x28>)
 810933e:	5ccb      	ldrb	r3, [r1, r3]
 8109340:	f003 031f 	and.w	r3, r3, #31
 8109344:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109348:	4618      	mov	r0, r3
 810934a:	bd80      	pop	{r7, pc}
 810934c:	58024400 	.word	0x58024400
 8109350:	08112094 	.word	0x08112094

08109354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8109354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109358:	b0ca      	sub	sp, #296	@ 0x128
 810935a:	af00      	add	r7, sp, #0
 810935c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109360:	2300      	movs	r3, #0
 8109362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8109366:	2300      	movs	r3, #0
 8109368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109374:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8109378:	2500      	movs	r5, #0
 810937a:	ea54 0305 	orrs.w	r3, r4, r5
 810937e:	d049      	beq.n	8109414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8109380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109386:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810938a:	d02f      	beq.n	81093ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 810938c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8109390:	d828      	bhi.n	81093e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8109392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8109396:	d01a      	beq.n	81093ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8109398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810939c:	d822      	bhi.n	81093e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810939e:	2b00      	cmp	r3, #0
 81093a0:	d003      	beq.n	81093aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 81093a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81093a6:	d007      	beq.n	81093b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81093a8:	e01c      	b.n	81093e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81093aa:	4bb8      	ldr	r3, [pc, #736]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81093ae:	4ab7      	ldr	r2, [pc, #732]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81093b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81093b6:	e01a      	b.n	81093ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81093b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093bc:	3308      	adds	r3, #8
 81093be:	2102      	movs	r1, #2
 81093c0:	4618      	mov	r0, r3
 81093c2:	f002 fb61 	bl	810ba88 <RCCEx_PLL2_Config>
 81093c6:	4603      	mov	r3, r0
 81093c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81093cc:	e00f      	b.n	81093ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093d2:	3328      	adds	r3, #40	@ 0x28
 81093d4:	2102      	movs	r1, #2
 81093d6:	4618      	mov	r0, r3
 81093d8:	f002 fc08 	bl	810bbec <RCCEx_PLL3_Config>
 81093dc:	4603      	mov	r3, r0
 81093de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81093e2:	e004      	b.n	81093ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81093e4:	2301      	movs	r3, #1
 81093e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81093ea:	e000      	b.n	81093ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81093ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81093ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81093f2:	2b00      	cmp	r3, #0
 81093f4:	d10a      	bne.n	810940c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81093f6:	4ba5      	ldr	r3, [pc, #660]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81093fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109404:	4aa1      	ldr	r2, [pc, #644]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109406:	430b      	orrs	r3, r1
 8109408:	6513      	str	r3, [r2, #80]	@ 0x50
 810940a:	e003      	b.n	8109414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810940c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8109414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810941c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8109420:	f04f 0900 	mov.w	r9, #0
 8109424:	ea58 0309 	orrs.w	r3, r8, r9
 8109428:	d047      	beq.n	81094ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810942a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810942e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109430:	2b04      	cmp	r3, #4
 8109432:	d82a      	bhi.n	810948a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8109434:	a201      	add	r2, pc, #4	@ (adr r2, 810943c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8109436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810943a:	bf00      	nop
 810943c:	08109451 	.word	0x08109451
 8109440:	0810945f 	.word	0x0810945f
 8109444:	08109475 	.word	0x08109475
 8109448:	08109493 	.word	0x08109493
 810944c:	08109493 	.word	0x08109493
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109450:	4b8e      	ldr	r3, [pc, #568]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109454:	4a8d      	ldr	r2, [pc, #564]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810945a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810945c:	e01a      	b.n	8109494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810945e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109462:	3308      	adds	r3, #8
 8109464:	2100      	movs	r1, #0
 8109466:	4618      	mov	r0, r3
 8109468:	f002 fb0e 	bl	810ba88 <RCCEx_PLL2_Config>
 810946c:	4603      	mov	r3, r0
 810946e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109472:	e00f      	b.n	8109494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109478:	3328      	adds	r3, #40	@ 0x28
 810947a:	2100      	movs	r1, #0
 810947c:	4618      	mov	r0, r3
 810947e:	f002 fbb5 	bl	810bbec <RCCEx_PLL3_Config>
 8109482:	4603      	mov	r3, r0
 8109484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109488:	e004      	b.n	8109494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810948a:	2301      	movs	r3, #1
 810948c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109490:	e000      	b.n	8109494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8109492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109498:	2b00      	cmp	r3, #0
 810949a:	d10a      	bne.n	81094b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810949c:	4b7b      	ldr	r3, [pc, #492]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810949e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81094a0:	f023 0107 	bic.w	r1, r3, #7
 81094a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81094aa:	4a78      	ldr	r2, [pc, #480]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81094ac:	430b      	orrs	r3, r1
 81094ae:	6513      	str	r3, [r2, #80]	@ 0x50
 81094b0:	e003      	b.n	81094ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81094b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81094c6:	f04f 0b00 	mov.w	fp, #0
 81094ca:	ea5a 030b 	orrs.w	r3, sl, fp
 81094ce:	d04c      	beq.n	810956a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81094d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094da:	d030      	beq.n	810953e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81094dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094e0:	d829      	bhi.n	8109536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81094e2:	2bc0      	cmp	r3, #192	@ 0xc0
 81094e4:	d02d      	beq.n	8109542 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81094e6:	2bc0      	cmp	r3, #192	@ 0xc0
 81094e8:	d825      	bhi.n	8109536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81094ea:	2b80      	cmp	r3, #128	@ 0x80
 81094ec:	d018      	beq.n	8109520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81094ee:	2b80      	cmp	r3, #128	@ 0x80
 81094f0:	d821      	bhi.n	8109536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81094f2:	2b00      	cmp	r3, #0
 81094f4:	d002      	beq.n	81094fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81094f6:	2b40      	cmp	r3, #64	@ 0x40
 81094f8:	d007      	beq.n	810950a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81094fa:	e01c      	b.n	8109536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81094fc:	4b63      	ldr	r3, [pc, #396]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109500:	4a62      	ldr	r2, [pc, #392]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109508:	e01c      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810950e:	3308      	adds	r3, #8
 8109510:	2100      	movs	r1, #0
 8109512:	4618      	mov	r0, r3
 8109514:	f002 fab8 	bl	810ba88 <RCCEx_PLL2_Config>
 8109518:	4603      	mov	r3, r0
 810951a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810951e:	e011      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109524:	3328      	adds	r3, #40	@ 0x28
 8109526:	2100      	movs	r1, #0
 8109528:	4618      	mov	r0, r3
 810952a:	f002 fb5f 	bl	810bbec <RCCEx_PLL3_Config>
 810952e:	4603      	mov	r3, r0
 8109530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109534:	e006      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109536:	2301      	movs	r3, #1
 8109538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810953c:	e002      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810953e:	bf00      	nop
 8109540:	e000      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8109542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109548:	2b00      	cmp	r3, #0
 810954a:	d10a      	bne.n	8109562 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810954c:	4b4f      	ldr	r3, [pc, #316]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810954e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109550:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8109554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810955a:	4a4c      	ldr	r2, [pc, #304]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810955c:	430b      	orrs	r3, r1
 810955e:	6513      	str	r3, [r2, #80]	@ 0x50
 8109560:	e003      	b.n	810956a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109572:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8109576:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810957a:	2300      	movs	r3, #0
 810957c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8109580:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8109584:	460b      	mov	r3, r1
 8109586:	4313      	orrs	r3, r2
 8109588:	d053      	beq.n	8109632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810958e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8109592:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8109596:	d035      	beq.n	8109604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8109598:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810959c:	d82e      	bhi.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810959e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81095a2:	d031      	beq.n	8109608 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81095a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81095a8:	d828      	bhi.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81095aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81095ae:	d01a      	beq.n	81095e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81095b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81095b4:	d822      	bhi.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81095b6:	2b00      	cmp	r3, #0
 81095b8:	d003      	beq.n	81095c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81095ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81095be:	d007      	beq.n	81095d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81095c0:	e01c      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81095c2:	4b32      	ldr	r3, [pc, #200]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81095c6:	4a31      	ldr	r2, [pc, #196]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81095c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81095cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81095ce:	e01c      	b.n	810960a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81095d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095d4:	3308      	adds	r3, #8
 81095d6:	2100      	movs	r1, #0
 81095d8:	4618      	mov	r0, r3
 81095da:	f002 fa55 	bl	810ba88 <RCCEx_PLL2_Config>
 81095de:	4603      	mov	r3, r0
 81095e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81095e4:	e011      	b.n	810960a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095ea:	3328      	adds	r3, #40	@ 0x28
 81095ec:	2100      	movs	r1, #0
 81095ee:	4618      	mov	r0, r3
 81095f0:	f002 fafc 	bl	810bbec <RCCEx_PLL3_Config>
 81095f4:	4603      	mov	r3, r0
 81095f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81095fa:	e006      	b.n	810960a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81095fc:	2301      	movs	r3, #1
 81095fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109602:	e002      	b.n	810960a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8109604:	bf00      	nop
 8109606:	e000      	b.n	810960a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8109608:	bf00      	nop
    }

    if (ret == HAL_OK)
 810960a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810960e:	2b00      	cmp	r3, #0
 8109610:	d10b      	bne.n	810962a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8109612:	4b1e      	ldr	r3, [pc, #120]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109616:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810961e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8109622:	4a1a      	ldr	r2, [pc, #104]	@ (810968c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109624:	430b      	orrs	r3, r1
 8109626:	6593      	str	r3, [r2, #88]	@ 0x58
 8109628:	e003      	b.n	8109632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810962a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810962e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8109632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109636:	e9d3 2300 	ldrd	r2, r3, [r3]
 810963a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810963e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8109642:	2300      	movs	r3, #0
 8109644:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8109648:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810964c:	460b      	mov	r3, r1
 810964e:	4313      	orrs	r3, r2
 8109650:	d056      	beq.n	8109700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8109652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109656:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810965a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810965e:	d038      	beq.n	81096d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8109660:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109664:	d831      	bhi.n	81096ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8109666:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810966a:	d034      	beq.n	81096d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810966c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109670:	d82b      	bhi.n	81096ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8109672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109676:	d01d      	beq.n	81096b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8109678:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810967c:	d825      	bhi.n	81096ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810967e:	2b00      	cmp	r3, #0
 8109680:	d006      	beq.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8109682:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109686:	d00a      	beq.n	810969e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8109688:	e01f      	b.n	81096ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810968a:	bf00      	nop
 810968c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109690:	4ba2      	ldr	r3, [pc, #648]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109694:	4aa1      	ldr	r2, [pc, #644]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810969a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810969c:	e01c      	b.n	81096d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096a2:	3308      	adds	r3, #8
 81096a4:	2100      	movs	r1, #0
 81096a6:	4618      	mov	r0, r3
 81096a8:	f002 f9ee 	bl	810ba88 <RCCEx_PLL2_Config>
 81096ac:	4603      	mov	r3, r0
 81096ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81096b2:	e011      	b.n	81096d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096b8:	3328      	adds	r3, #40	@ 0x28
 81096ba:	2100      	movs	r1, #0
 81096bc:	4618      	mov	r0, r3
 81096be:	f002 fa95 	bl	810bbec <RCCEx_PLL3_Config>
 81096c2:	4603      	mov	r3, r0
 81096c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81096c8:	e006      	b.n	81096d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81096ca:	2301      	movs	r3, #1
 81096cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81096d0:	e002      	b.n	81096d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81096d2:	bf00      	nop
 81096d4:	e000      	b.n	81096d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81096d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81096d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81096dc:	2b00      	cmp	r3, #0
 81096de:	d10b      	bne.n	81096f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81096e0:	4b8e      	ldr	r3, [pc, #568]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81096e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81096e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81096e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81096f0:	4a8a      	ldr	r2, [pc, #552]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81096f2:	430b      	orrs	r3, r1
 81096f4:	6593      	str	r3, [r2, #88]	@ 0x58
 81096f6:	e003      	b.n	8109700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81096f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81096fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8109700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109708:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810970c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8109710:	2300      	movs	r3, #0
 8109712:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8109716:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810971a:	460b      	mov	r3, r1
 810971c:	4313      	orrs	r3, r2
 810971e:	d03a      	beq.n	8109796 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8109720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109726:	2b30      	cmp	r3, #48	@ 0x30
 8109728:	d01f      	beq.n	810976a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810972a:	2b30      	cmp	r3, #48	@ 0x30
 810972c:	d819      	bhi.n	8109762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810972e:	2b20      	cmp	r3, #32
 8109730:	d00c      	beq.n	810974c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8109732:	2b20      	cmp	r3, #32
 8109734:	d815      	bhi.n	8109762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8109736:	2b00      	cmp	r3, #0
 8109738:	d019      	beq.n	810976e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810973a:	2b10      	cmp	r3, #16
 810973c:	d111      	bne.n	8109762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810973e:	4b77      	ldr	r3, [pc, #476]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109742:	4a76      	ldr	r2, [pc, #472]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810974a:	e011      	b.n	8109770 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109750:	3308      	adds	r3, #8
 8109752:	2102      	movs	r1, #2
 8109754:	4618      	mov	r0, r3
 8109756:	f002 f997 	bl	810ba88 <RCCEx_PLL2_Config>
 810975a:	4603      	mov	r3, r0
 810975c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8109760:	e006      	b.n	8109770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8109762:	2301      	movs	r3, #1
 8109764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109768:	e002      	b.n	8109770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810976a:	bf00      	nop
 810976c:	e000      	b.n	8109770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810976e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109774:	2b00      	cmp	r3, #0
 8109776:	d10a      	bne.n	810978e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8109778:	4b68      	ldr	r3, [pc, #416]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810977a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810977c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8109780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109786:	4a65      	ldr	r2, [pc, #404]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109788:	430b      	orrs	r3, r1
 810978a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810978c:	e003      	b.n	8109796 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810978e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8109796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810979e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81097a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81097a6:	2300      	movs	r3, #0
 81097a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81097ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81097b0:	460b      	mov	r3, r1
 81097b2:	4313      	orrs	r3, r2
 81097b4:	d051      	beq.n	810985a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81097ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81097bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81097c0:	d035      	beq.n	810982e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81097c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81097c6:	d82e      	bhi.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81097c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81097cc:	d031      	beq.n	8109832 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81097ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81097d2:	d828      	bhi.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81097d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81097d8:	d01a      	beq.n	8109810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81097da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81097de:	d822      	bhi.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81097e0:	2b00      	cmp	r3, #0
 81097e2:	d003      	beq.n	81097ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 81097e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81097e8:	d007      	beq.n	81097fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81097ea:	e01c      	b.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81097ec:	4b4b      	ldr	r3, [pc, #300]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81097ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097f0:	4a4a      	ldr	r2, [pc, #296]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81097f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81097f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81097f8:	e01c      	b.n	8109834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81097fe:	3308      	adds	r3, #8
 8109800:	2100      	movs	r1, #0
 8109802:	4618      	mov	r0, r3
 8109804:	f002 f940 	bl	810ba88 <RCCEx_PLL2_Config>
 8109808:	4603      	mov	r3, r0
 810980a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810980e:	e011      	b.n	8109834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109814:	3328      	adds	r3, #40	@ 0x28
 8109816:	2100      	movs	r1, #0
 8109818:	4618      	mov	r0, r3
 810981a:	f002 f9e7 	bl	810bbec <RCCEx_PLL3_Config>
 810981e:	4603      	mov	r3, r0
 8109820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8109824:	e006      	b.n	8109834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109826:	2301      	movs	r3, #1
 8109828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810982c:	e002      	b.n	8109834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810982e:	bf00      	nop
 8109830:	e000      	b.n	8109834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8109832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109838:	2b00      	cmp	r3, #0
 810983a:	d10a      	bne.n	8109852 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810983c:	4b37      	ldr	r3, [pc, #220]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810983e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109840:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8109844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810984a:	4a34      	ldr	r2, [pc, #208]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810984c:	430b      	orrs	r3, r1
 810984e:	6513      	str	r3, [r2, #80]	@ 0x50
 8109850:	e003      	b.n	810985a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109862:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8109866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810986a:	2300      	movs	r3, #0
 810986c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8109870:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8109874:	460b      	mov	r3, r1
 8109876:	4313      	orrs	r3, r2
 8109878:	d056      	beq.n	8109928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810987e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8109884:	d033      	beq.n	81098ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8109886:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810988a:	d82c      	bhi.n	81098e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810988c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109890:	d02f      	beq.n	81098f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8109892:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109896:	d826      	bhi.n	81098e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8109898:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810989c:	d02b      	beq.n	81098f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810989e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81098a2:	d820      	bhi.n	81098e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81098a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81098a8:	d012      	beq.n	81098d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81098aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81098ae:	d81a      	bhi.n	81098e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81098b0:	2b00      	cmp	r3, #0
 81098b2:	d022      	beq.n	81098fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81098b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81098b8:	d115      	bne.n	81098e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81098be:	3308      	adds	r3, #8
 81098c0:	2101      	movs	r1, #1
 81098c2:	4618      	mov	r0, r3
 81098c4:	f002 f8e0 	bl	810ba88 <RCCEx_PLL2_Config>
 81098c8:	4603      	mov	r3, r0
 81098ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81098ce:	e015      	b.n	81098fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81098d4:	3328      	adds	r3, #40	@ 0x28
 81098d6:	2101      	movs	r1, #1
 81098d8:	4618      	mov	r0, r3
 81098da:	f002 f987 	bl	810bbec <RCCEx_PLL3_Config>
 81098de:	4603      	mov	r3, r0
 81098e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81098e4:	e00a      	b.n	81098fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81098e6:	2301      	movs	r3, #1
 81098e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81098ec:	e006      	b.n	81098fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098ee:	bf00      	nop
 81098f0:	e004      	b.n	81098fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098f2:	bf00      	nop
 81098f4:	e002      	b.n	81098fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098f6:	bf00      	nop
 81098f8:	e000      	b.n	81098fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81098fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109900:	2b00      	cmp	r3, #0
 8109902:	d10d      	bne.n	8109920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8109904:	4b05      	ldr	r3, [pc, #20]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109908:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109912:	4a02      	ldr	r2, [pc, #8]	@ (810991c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109914:	430b      	orrs	r3, r1
 8109916:	6513      	str	r3, [r2, #80]	@ 0x50
 8109918:	e006      	b.n	8109928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810991a:	bf00      	nop
 810991c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8109928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109930:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8109934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8109938:	2300      	movs	r3, #0
 810993a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810993e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8109942:	460b      	mov	r3, r1
 8109944:	4313      	orrs	r3, r2
 8109946:	d055      	beq.n	81099f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8109948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810994c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8109950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109954:	d033      	beq.n	81099be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8109956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810995a:	d82c      	bhi.n	81099b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810995c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109960:	d02f      	beq.n	81099c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8109962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109966:	d826      	bhi.n	81099b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8109968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810996c:	d02b      	beq.n	81099c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810996e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109972:	d820      	bhi.n	81099b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8109974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109978:	d012      	beq.n	81099a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810997a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810997e:	d81a      	bhi.n	81099b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8109980:	2b00      	cmp	r3, #0
 8109982:	d022      	beq.n	81099ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8109984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109988:	d115      	bne.n	81099b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810998e:	3308      	adds	r3, #8
 8109990:	2101      	movs	r1, #1
 8109992:	4618      	mov	r0, r3
 8109994:	f002 f878 	bl	810ba88 <RCCEx_PLL2_Config>
 8109998:	4603      	mov	r3, r0
 810999a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810999e:	e015      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81099a4:	3328      	adds	r3, #40	@ 0x28
 81099a6:	2101      	movs	r1, #1
 81099a8:	4618      	mov	r0, r3
 81099aa:	f002 f91f 	bl	810bbec <RCCEx_PLL3_Config>
 81099ae:	4603      	mov	r3, r0
 81099b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81099b4:	e00a      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81099b6:	2301      	movs	r3, #1
 81099b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81099bc:	e006      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099be:	bf00      	nop
 81099c0:	e004      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099c2:	bf00      	nop
 81099c4:	e002      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099c6:	bf00      	nop
 81099c8:	e000      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81099cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81099d0:	2b00      	cmp	r3, #0
 81099d2:	d10b      	bne.n	81099ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81099d4:	4ba4      	ldr	r3, [pc, #656]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81099d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81099d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81099e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81099e4:	4aa0      	ldr	r2, [pc, #640]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81099e6:	430b      	orrs	r3, r1
 81099e8:	6593      	str	r3, [r2, #88]	@ 0x58
 81099ea:	e003      	b.n	81099f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81099ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81099f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8109a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8109a04:	2300      	movs	r3, #0
 8109a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8109a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8109a0e:	460b      	mov	r3, r1
 8109a10:	4313      	orrs	r3, r2
 8109a12:	d037      	beq.n	8109a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8109a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a1e:	d00e      	beq.n	8109a3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8109a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a24:	d816      	bhi.n	8109a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8109a26:	2b00      	cmp	r3, #0
 8109a28:	d018      	beq.n	8109a5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8109a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109a2e:	d111      	bne.n	8109a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109a30:	4b8d      	ldr	r3, [pc, #564]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109a34:	4a8c      	ldr	r2, [pc, #560]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8109a3c:	e00f      	b.n	8109a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a42:	3308      	adds	r3, #8
 8109a44:	2101      	movs	r1, #1
 8109a46:	4618      	mov	r0, r3
 8109a48:	f002 f81e 	bl	810ba88 <RCCEx_PLL2_Config>
 8109a4c:	4603      	mov	r3, r0
 8109a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8109a52:	e004      	b.n	8109a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109a54:	2301      	movs	r3, #1
 8109a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109a5a:	e000      	b.n	8109a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8109a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109a62:	2b00      	cmp	r3, #0
 8109a64:	d10a      	bne.n	8109a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109a66:	4b80      	ldr	r3, [pc, #512]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109a6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8109a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109a74:	4a7c      	ldr	r2, [pc, #496]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a76:	430b      	orrs	r3, r1
 8109a78:	6513      	str	r3, [r2, #80]	@ 0x50
 8109a7a:	e003      	b.n	8109a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8109a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8109a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8109a94:	2300      	movs	r3, #0
 8109a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8109a9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8109a9e:	460b      	mov	r3, r1
 8109aa0:	4313      	orrs	r3, r2
 8109aa2:	d039      	beq.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8109aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109aaa:	2b03      	cmp	r3, #3
 8109aac:	d81c      	bhi.n	8109ae8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8109aae:	a201      	add	r2, pc, #4	@ (adr r2, 8109ab4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8109ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ab4:	08109af1 	.word	0x08109af1
 8109ab8:	08109ac5 	.word	0x08109ac5
 8109abc:	08109ad3 	.word	0x08109ad3
 8109ac0:	08109af1 	.word	0x08109af1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ac4:	4b68      	ldr	r3, [pc, #416]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109ac8:	4a67      	ldr	r2, [pc, #412]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8109ad0:	e00f      	b.n	8109af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8109ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109ad6:	3308      	adds	r3, #8
 8109ad8:	2102      	movs	r1, #2
 8109ada:	4618      	mov	r0, r3
 8109adc:	f001 ffd4 	bl	810ba88 <RCCEx_PLL2_Config>
 8109ae0:	4603      	mov	r3, r0
 8109ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8109ae6:	e004      	b.n	8109af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8109ae8:	2301      	movs	r3, #1
 8109aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109aee:	e000      	b.n	8109af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8109af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109af6:	2b00      	cmp	r3, #0
 8109af8:	d10a      	bne.n	8109b10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8109afa:	4b5b      	ldr	r3, [pc, #364]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109afe:	f023 0103 	bic.w	r1, r3, #3
 8109b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109b08:	4a57      	ldr	r2, [pc, #348]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b0a:	430b      	orrs	r3, r1
 8109b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8109b0e:	e003      	b.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8109b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8109b24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8109b28:	2300      	movs	r3, #0
 8109b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8109b2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8109b32:	460b      	mov	r3, r1
 8109b34:	4313      	orrs	r3, r2
 8109b36:	f000 809f 	beq.w	8109c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8109b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8109c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	4a4b      	ldr	r2, [pc, #300]	@ (8109c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8109b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109b44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8109b46:	f7f8 ffff 	bl	8102b48 <HAL_GetTick>
 8109b4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109b4e:	e00b      	b.n	8109b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8109b50:	f7f8 fffa 	bl	8102b48 <HAL_GetTick>
 8109b54:	4602      	mov	r2, r0
 8109b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8109b5a:	1ad3      	subs	r3, r2, r3
 8109b5c:	2b64      	cmp	r3, #100	@ 0x64
 8109b5e:	d903      	bls.n	8109b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8109b60:	2303      	movs	r3, #3
 8109b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109b66:	e005      	b.n	8109b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109b68:	4b40      	ldr	r3, [pc, #256]	@ (8109c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8109b6a:	681b      	ldr	r3, [r3, #0]
 8109b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d0ed      	beq.n	8109b50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8109b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109b78:	2b00      	cmp	r3, #0
 8109b7a:	d179      	bne.n	8109c70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8109b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8109b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109b88:	4053      	eors	r3, r2
 8109b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109b8e:	2b00      	cmp	r3, #0
 8109b90:	d015      	beq.n	8109bbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8109b92:	4b35      	ldr	r3, [pc, #212]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109b9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109b9e:	4b32      	ldr	r3, [pc, #200]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109ba2:	4a31      	ldr	r2, [pc, #196]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8109ba8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109baa:	4b2f      	ldr	r3, [pc, #188]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109bae:	4a2e      	ldr	r2, [pc, #184]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109bb4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8109bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109bbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8109bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109bca:	d118      	bne.n	8109bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8109bcc:	f7f8 ffbc 	bl	8102b48 <HAL_GetTick>
 8109bd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109bd4:	e00d      	b.n	8109bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109bd6:	f7f8 ffb7 	bl	8102b48 <HAL_GetTick>
 8109bda:	4602      	mov	r2, r0
 8109bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8109be0:	1ad2      	subs	r2, r2, r3
 8109be2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8109be6:	429a      	cmp	r2, r3
 8109be8:	d903      	bls.n	8109bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8109bea:	2303      	movs	r3, #3
 8109bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8109bf0:	e005      	b.n	8109bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109bf6:	f003 0302 	and.w	r3, r3, #2
 8109bfa:	2b00      	cmp	r3, #0
 8109bfc:	d0eb      	beq.n	8109bd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8109bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109c02:	2b00      	cmp	r3, #0
 8109c04:	d12b      	bne.n	8109c5e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8109c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8109c16:	d110      	bne.n	8109c3a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8109c18:	4b13      	ldr	r3, [pc, #76]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c1a:	691b      	ldr	r3, [r3, #16]
 8109c1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8109c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109c28:	091b      	lsrs	r3, r3, #4
 8109c2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8109c2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8109c32:	4a0d      	ldr	r2, [pc, #52]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c34:	430b      	orrs	r3, r1
 8109c36:	6113      	str	r3, [r2, #16]
 8109c38:	e005      	b.n	8109c46 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8109c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c3c:	691b      	ldr	r3, [r3, #16]
 8109c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8109c44:	6113      	str	r3, [r2, #16]
 8109c46:	4b08      	ldr	r3, [pc, #32]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8109c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8109c56:	4a04      	ldr	r2, [pc, #16]	@ (8109c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c58:	430b      	orrs	r3, r1
 8109c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8109c5c:	e00c      	b.n	8109c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8109c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8109c66:	e007      	b.n	8109c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8109c68:	58024400 	.word	0x58024400
 8109c6c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8109c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c80:	f002 0301 	and.w	r3, r2, #1
 8109c84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8109c88:	2300      	movs	r3, #0
 8109c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8109c8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8109c92:	460b      	mov	r3, r1
 8109c94:	4313      	orrs	r3, r2
 8109c96:	f000 8089 	beq.w	8109dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8109c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109ca0:	2b28      	cmp	r3, #40	@ 0x28
 8109ca2:	d86b      	bhi.n	8109d7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8109ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8109cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8109ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109caa:	bf00      	nop
 8109cac:	08109d85 	.word	0x08109d85
 8109cb0:	08109d7d 	.word	0x08109d7d
 8109cb4:	08109d7d 	.word	0x08109d7d
 8109cb8:	08109d7d 	.word	0x08109d7d
 8109cbc:	08109d7d 	.word	0x08109d7d
 8109cc0:	08109d7d 	.word	0x08109d7d
 8109cc4:	08109d7d 	.word	0x08109d7d
 8109cc8:	08109d7d 	.word	0x08109d7d
 8109ccc:	08109d51 	.word	0x08109d51
 8109cd0:	08109d7d 	.word	0x08109d7d
 8109cd4:	08109d7d 	.word	0x08109d7d
 8109cd8:	08109d7d 	.word	0x08109d7d
 8109cdc:	08109d7d 	.word	0x08109d7d
 8109ce0:	08109d7d 	.word	0x08109d7d
 8109ce4:	08109d7d 	.word	0x08109d7d
 8109ce8:	08109d7d 	.word	0x08109d7d
 8109cec:	08109d67 	.word	0x08109d67
 8109cf0:	08109d7d 	.word	0x08109d7d
 8109cf4:	08109d7d 	.word	0x08109d7d
 8109cf8:	08109d7d 	.word	0x08109d7d
 8109cfc:	08109d7d 	.word	0x08109d7d
 8109d00:	08109d7d 	.word	0x08109d7d
 8109d04:	08109d7d 	.word	0x08109d7d
 8109d08:	08109d7d 	.word	0x08109d7d
 8109d0c:	08109d85 	.word	0x08109d85
 8109d10:	08109d7d 	.word	0x08109d7d
 8109d14:	08109d7d 	.word	0x08109d7d
 8109d18:	08109d7d 	.word	0x08109d7d
 8109d1c:	08109d7d 	.word	0x08109d7d
 8109d20:	08109d7d 	.word	0x08109d7d
 8109d24:	08109d7d 	.word	0x08109d7d
 8109d28:	08109d7d 	.word	0x08109d7d
 8109d2c:	08109d85 	.word	0x08109d85
 8109d30:	08109d7d 	.word	0x08109d7d
 8109d34:	08109d7d 	.word	0x08109d7d
 8109d38:	08109d7d 	.word	0x08109d7d
 8109d3c:	08109d7d 	.word	0x08109d7d
 8109d40:	08109d7d 	.word	0x08109d7d
 8109d44:	08109d7d 	.word	0x08109d7d
 8109d48:	08109d7d 	.word	0x08109d7d
 8109d4c:	08109d85 	.word	0x08109d85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109d54:	3308      	adds	r3, #8
 8109d56:	2101      	movs	r1, #1
 8109d58:	4618      	mov	r0, r3
 8109d5a:	f001 fe95 	bl	810ba88 <RCCEx_PLL2_Config>
 8109d5e:	4603      	mov	r3, r0
 8109d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8109d64:	e00f      	b.n	8109d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109d6a:	3328      	adds	r3, #40	@ 0x28
 8109d6c:	2101      	movs	r1, #1
 8109d6e:	4618      	mov	r0, r3
 8109d70:	f001 ff3c 	bl	810bbec <RCCEx_PLL3_Config>
 8109d74:	4603      	mov	r3, r0
 8109d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8109d7a:	e004      	b.n	8109d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109d7c:	2301      	movs	r3, #1
 8109d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109d82:	e000      	b.n	8109d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8109d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109d8a:	2b00      	cmp	r3, #0
 8109d8c:	d10a      	bne.n	8109da4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8109d8e:	4bbf      	ldr	r3, [pc, #764]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109d92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8109d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109d9c:	4abb      	ldr	r2, [pc, #748]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109d9e:	430b      	orrs	r3, r1
 8109da0:	6553      	str	r3, [r2, #84]	@ 0x54
 8109da2:	e003      	b.n	8109dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8109dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109db4:	f002 0302 	and.w	r3, r2, #2
 8109db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8109dbc:	2300      	movs	r3, #0
 8109dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8109dc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8109dc6:	460b      	mov	r3, r1
 8109dc8:	4313      	orrs	r3, r2
 8109dca:	d041      	beq.n	8109e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8109dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109dd2:	2b05      	cmp	r3, #5
 8109dd4:	d824      	bhi.n	8109e20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8109dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8109ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8109dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ddc:	08109e29 	.word	0x08109e29
 8109de0:	08109df5 	.word	0x08109df5
 8109de4:	08109e0b 	.word	0x08109e0b
 8109de8:	08109e29 	.word	0x08109e29
 8109dec:	08109e29 	.word	0x08109e29
 8109df0:	08109e29 	.word	0x08109e29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109df8:	3308      	adds	r3, #8
 8109dfa:	2101      	movs	r1, #1
 8109dfc:	4618      	mov	r0, r3
 8109dfe:	f001 fe43 	bl	810ba88 <RCCEx_PLL2_Config>
 8109e02:	4603      	mov	r3, r0
 8109e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8109e08:	e00f      	b.n	8109e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e0e:	3328      	adds	r3, #40	@ 0x28
 8109e10:	2101      	movs	r1, #1
 8109e12:	4618      	mov	r0, r3
 8109e14:	f001 feea 	bl	810bbec <RCCEx_PLL3_Config>
 8109e18:	4603      	mov	r3, r0
 8109e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8109e1e:	e004      	b.n	8109e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109e20:	2301      	movs	r3, #1
 8109e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109e26:	e000      	b.n	8109e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8109e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109e2e:	2b00      	cmp	r3, #0
 8109e30:	d10a      	bne.n	8109e48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8109e32:	4b96      	ldr	r3, [pc, #600]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109e36:	f023 0107 	bic.w	r1, r3, #7
 8109e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109e40:	4a92      	ldr	r2, [pc, #584]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109e42:	430b      	orrs	r3, r1
 8109e44:	6553      	str	r3, [r2, #84]	@ 0x54
 8109e46:	e003      	b.n	8109e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8109e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109e58:	f002 0304 	and.w	r3, r2, #4
 8109e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8109e60:	2300      	movs	r3, #0
 8109e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8109e66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8109e6a:	460b      	mov	r3, r1
 8109e6c:	4313      	orrs	r3, r2
 8109e6e:	d044      	beq.n	8109efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8109e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8109e78:	2b05      	cmp	r3, #5
 8109e7a:	d825      	bhi.n	8109ec8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8109e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8109e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8109e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e82:	bf00      	nop
 8109e84:	08109ed1 	.word	0x08109ed1
 8109e88:	08109e9d 	.word	0x08109e9d
 8109e8c:	08109eb3 	.word	0x08109eb3
 8109e90:	08109ed1 	.word	0x08109ed1
 8109e94:	08109ed1 	.word	0x08109ed1
 8109e98:	08109ed1 	.word	0x08109ed1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109ea0:	3308      	adds	r3, #8
 8109ea2:	2101      	movs	r1, #1
 8109ea4:	4618      	mov	r0, r3
 8109ea6:	f001 fdef 	bl	810ba88 <RCCEx_PLL2_Config>
 8109eaa:	4603      	mov	r3, r0
 8109eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8109eb0:	e00f      	b.n	8109ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109eb6:	3328      	adds	r3, #40	@ 0x28
 8109eb8:	2101      	movs	r1, #1
 8109eba:	4618      	mov	r0, r3
 8109ebc:	f001 fe96 	bl	810bbec <RCCEx_PLL3_Config>
 8109ec0:	4603      	mov	r3, r0
 8109ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8109ec6:	e004      	b.n	8109ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109ec8:	2301      	movs	r3, #1
 8109eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109ece:	e000      	b.n	8109ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8109ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109ed6:	2b00      	cmp	r3, #0
 8109ed8:	d10b      	bne.n	8109ef2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8109eda:	4b6c      	ldr	r3, [pc, #432]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109ede:	f023 0107 	bic.w	r1, r3, #7
 8109ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8109eea:	4a68      	ldr	r2, [pc, #416]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109eec:	430b      	orrs	r3, r1
 8109eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8109ef0:	e003      	b.n	8109efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f02:	f002 0320 	and.w	r3, r2, #32
 8109f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8109f0a:	2300      	movs	r3, #0
 8109f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8109f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8109f14:	460b      	mov	r3, r1
 8109f16:	4313      	orrs	r3, r2
 8109f18:	d055      	beq.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8109f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109f26:	d033      	beq.n	8109f90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8109f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109f2c:	d82c      	bhi.n	8109f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109f32:	d02f      	beq.n	8109f94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8109f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109f38:	d826      	bhi.n	8109f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109f3e:	d02b      	beq.n	8109f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8109f40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109f44:	d820      	bhi.n	8109f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109f4a:	d012      	beq.n	8109f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8109f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109f50:	d81a      	bhi.n	8109f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f52:	2b00      	cmp	r3, #0
 8109f54:	d022      	beq.n	8109f9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8109f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109f5a:	d115      	bne.n	8109f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109f60:	3308      	adds	r3, #8
 8109f62:	2100      	movs	r1, #0
 8109f64:	4618      	mov	r0, r3
 8109f66:	f001 fd8f 	bl	810ba88 <RCCEx_PLL2_Config>
 8109f6a:	4603      	mov	r3, r0
 8109f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8109f70:	e015      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8109f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109f76:	3328      	adds	r3, #40	@ 0x28
 8109f78:	2102      	movs	r1, #2
 8109f7a:	4618      	mov	r0, r3
 8109f7c:	f001 fe36 	bl	810bbec <RCCEx_PLL3_Config>
 8109f80:	4603      	mov	r3, r0
 8109f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8109f86:	e00a      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109f88:	2301      	movs	r3, #1
 8109f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109f8e:	e006      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f90:	bf00      	nop
 8109f92:	e004      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f94:	bf00      	nop
 8109f96:	e002      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f98:	bf00      	nop
 8109f9a:	e000      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109fa2:	2b00      	cmp	r3, #0
 8109fa4:	d10b      	bne.n	8109fbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8109fa6:	4b39      	ldr	r3, [pc, #228]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109faa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8109fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109fb6:	4a35      	ldr	r2, [pc, #212]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109fb8:	430b      	orrs	r3, r1
 8109fba:	6553      	str	r3, [r2, #84]	@ 0x54
 8109fbc:	e003      	b.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8109fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109fce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8109fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8109fd6:	2300      	movs	r3, #0
 8109fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8109fdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8109fe0:	460b      	mov	r3, r1
 8109fe2:	4313      	orrs	r3, r2
 8109fe4:	d058      	beq.n	810a098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8109fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8109fee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8109ff2:	d033      	beq.n	810a05c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8109ff4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8109ff8:	d82c      	bhi.n	810a054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8109ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109ffe:	d02f      	beq.n	810a060 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810a000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a004:	d826      	bhi.n	810a054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810a006:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810a00a:	d02b      	beq.n	810a064 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810a00c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810a010:	d820      	bhi.n	810a054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810a012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a016:	d012      	beq.n	810a03e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810a018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a01c:	d81a      	bhi.n	810a054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810a01e:	2b00      	cmp	r3, #0
 810a020:	d022      	beq.n	810a068 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810a022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810a026:	d115      	bne.n	810a054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a02c:	3308      	adds	r3, #8
 810a02e:	2100      	movs	r1, #0
 810a030:	4618      	mov	r0, r3
 810a032:	f001 fd29 	bl	810ba88 <RCCEx_PLL2_Config>
 810a036:	4603      	mov	r3, r0
 810a038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810a03c:	e015      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a042:	3328      	adds	r3, #40	@ 0x28
 810a044:	2102      	movs	r1, #2
 810a046:	4618      	mov	r0, r3
 810a048:	f001 fdd0 	bl	810bbec <RCCEx_PLL3_Config>
 810a04c:	4603      	mov	r3, r0
 810a04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810a052:	e00a      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a054:	2301      	movs	r3, #1
 810a056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a05a:	e006      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a05c:	bf00      	nop
 810a05e:	e004      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a060:	bf00      	nop
 810a062:	e002      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a064:	bf00      	nop
 810a066:	e000      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a068:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a06a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a06e:	2b00      	cmp	r3, #0
 810a070:	d10e      	bne.n	810a090 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810a072:	4b06      	ldr	r3, [pc, #24]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810a074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a076:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a07e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810a082:	4a02      	ldr	r2, [pc, #8]	@ (810a08c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810a084:	430b      	orrs	r3, r1
 810a086:	6593      	str	r3, [r2, #88]	@ 0x58
 810a088:	e006      	b.n	810a098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810a08a:	bf00      	nop
 810a08c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810a098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a0a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810a0a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810a0a8:	2300      	movs	r3, #0
 810a0aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810a0ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810a0b2:	460b      	mov	r3, r1
 810a0b4:	4313      	orrs	r3, r2
 810a0b6:	d055      	beq.n	810a164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a0bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810a0c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810a0c4:	d033      	beq.n	810a12e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810a0c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810a0ca:	d82c      	bhi.n	810a126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a0d0:	d02f      	beq.n	810a132 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810a0d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a0d6:	d826      	bhi.n	810a126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810a0dc:	d02b      	beq.n	810a136 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810a0de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810a0e2:	d820      	bhi.n	810a126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a0e8:	d012      	beq.n	810a110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810a0ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a0ee:	d81a      	bhi.n	810a126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0f0:	2b00      	cmp	r3, #0
 810a0f2:	d022      	beq.n	810a13a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810a0f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a0f8:	d115      	bne.n	810a126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a0fe:	3308      	adds	r3, #8
 810a100:	2100      	movs	r1, #0
 810a102:	4618      	mov	r0, r3
 810a104:	f001 fcc0 	bl	810ba88 <RCCEx_PLL2_Config>
 810a108:	4603      	mov	r3, r0
 810a10a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810a10e:	e015      	b.n	810a13c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a114:	3328      	adds	r3, #40	@ 0x28
 810a116:	2102      	movs	r1, #2
 810a118:	4618      	mov	r0, r3
 810a11a:	f001 fd67 	bl	810bbec <RCCEx_PLL3_Config>
 810a11e:	4603      	mov	r3, r0
 810a120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810a124:	e00a      	b.n	810a13c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a126:	2301      	movs	r3, #1
 810a128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a12c:	e006      	b.n	810a13c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a12e:	bf00      	nop
 810a130:	e004      	b.n	810a13c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a132:	bf00      	nop
 810a134:	e002      	b.n	810a13c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a136:	bf00      	nop
 810a138:	e000      	b.n	810a13c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a13a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a13c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a140:	2b00      	cmp	r3, #0
 810a142:	d10b      	bne.n	810a15c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810a144:	4ba1      	ldr	r3, [pc, #644]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a148:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810a14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810a154:	4a9d      	ldr	r2, [pc, #628]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a156:	430b      	orrs	r3, r1
 810a158:	6593      	str	r3, [r2, #88]	@ 0x58
 810a15a:	e003      	b.n	810a164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a15c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810a164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a16c:	f002 0308 	and.w	r3, r2, #8
 810a170:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810a174:	2300      	movs	r3, #0
 810a176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810a17a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810a17e:	460b      	mov	r3, r1
 810a180:	4313      	orrs	r3, r2
 810a182:	d01e      	beq.n	810a1c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810a184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a18c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a190:	d10c      	bne.n	810a1ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a196:	3328      	adds	r3, #40	@ 0x28
 810a198:	2102      	movs	r1, #2
 810a19a:	4618      	mov	r0, r3
 810a19c:	f001 fd26 	bl	810bbec <RCCEx_PLL3_Config>
 810a1a0:	4603      	mov	r3, r0
 810a1a2:	2b00      	cmp	r3, #0
 810a1a4:	d002      	beq.n	810a1ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810a1a6:	2301      	movs	r3, #1
 810a1a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810a1ac:	4b87      	ldr	r3, [pc, #540]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a1ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a1b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810a1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a1bc:	4a83      	ldr	r2, [pc, #524]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a1be:	430b      	orrs	r3, r1
 810a1c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810a1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a1ca:	f002 0310 	and.w	r3, r2, #16
 810a1ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810a1d2:	2300      	movs	r3, #0
 810a1d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810a1d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810a1dc:	460b      	mov	r3, r1
 810a1de:	4313      	orrs	r3, r2
 810a1e0:	d01e      	beq.n	810a220 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810a1ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a1ee:	d10c      	bne.n	810a20a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1f4:	3328      	adds	r3, #40	@ 0x28
 810a1f6:	2102      	movs	r1, #2
 810a1f8:	4618      	mov	r0, r3
 810a1fa:	f001 fcf7 	bl	810bbec <RCCEx_PLL3_Config>
 810a1fe:	4603      	mov	r3, r0
 810a200:	2b00      	cmp	r3, #0
 810a202:	d002      	beq.n	810a20a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810a204:	2301      	movs	r3, #1
 810a206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810a20a:	4b70      	ldr	r3, [pc, #448]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a20e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810a21a:	4a6c      	ldr	r2, [pc, #432]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a21c:	430b      	orrs	r3, r1
 810a21e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810a220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a228:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810a22c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810a230:	2300      	movs	r3, #0
 810a232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810a236:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810a23a:	460b      	mov	r3, r1
 810a23c:	4313      	orrs	r3, r2
 810a23e:	d03e      	beq.n	810a2be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810a240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810a248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a24c:	d022      	beq.n	810a294 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a252:	d81b      	bhi.n	810a28c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810a254:	2b00      	cmp	r3, #0
 810a256:	d003      	beq.n	810a260 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810a258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a25c:	d00b      	beq.n	810a276 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810a25e:	e015      	b.n	810a28c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a264:	3308      	adds	r3, #8
 810a266:	2100      	movs	r1, #0
 810a268:	4618      	mov	r0, r3
 810a26a:	f001 fc0d 	bl	810ba88 <RCCEx_PLL2_Config>
 810a26e:	4603      	mov	r3, r0
 810a270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810a274:	e00f      	b.n	810a296 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a27a:	3328      	adds	r3, #40	@ 0x28
 810a27c:	2102      	movs	r1, #2
 810a27e:	4618      	mov	r0, r3
 810a280:	f001 fcb4 	bl	810bbec <RCCEx_PLL3_Config>
 810a284:	4603      	mov	r3, r0
 810a286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810a28a:	e004      	b.n	810a296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a28c:	2301      	movs	r3, #1
 810a28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a292:	e000      	b.n	810a296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810a294:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a29a:	2b00      	cmp	r3, #0
 810a29c:	d10b      	bne.n	810a2b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810a29e:	4b4b      	ldr	r3, [pc, #300]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a2a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a2a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810a2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810a2ae:	4a47      	ldr	r2, [pc, #284]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a2b0:	430b      	orrs	r3, r1
 810a2b2:	6593      	str	r3, [r2, #88]	@ 0x58
 810a2b4:	e003      	b.n	810a2be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a2ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810a2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810a2ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 810a2cc:	2300      	movs	r3, #0
 810a2ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810a2d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810a2d4:	460b      	mov	r3, r1
 810a2d6:	4313      	orrs	r3, r2
 810a2d8:	d03b      	beq.n	810a352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a2e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2e6:	d01f      	beq.n	810a328 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810a2e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2ec:	d818      	bhi.n	810a320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810a2ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a2f2:	d003      	beq.n	810a2fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810a2f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a2f8:	d007      	beq.n	810a30a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810a2fa:	e011      	b.n	810a320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2fc:	4b33      	ldr	r3, [pc, #204]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a300:	4a32      	ldr	r2, [pc, #200]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810a308:	e00f      	b.n	810a32a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a30e:	3328      	adds	r3, #40	@ 0x28
 810a310:	2101      	movs	r1, #1
 810a312:	4618      	mov	r0, r3
 810a314:	f001 fc6a 	bl	810bbec <RCCEx_PLL3_Config>
 810a318:	4603      	mov	r3, r0
 810a31a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810a31e:	e004      	b.n	810a32a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a320:	2301      	movs	r3, #1
 810a322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a326:	e000      	b.n	810a32a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 810a328:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a32e:	2b00      	cmp	r3, #0
 810a330:	d10b      	bne.n	810a34a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810a332:	4b26      	ldr	r3, [pc, #152]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a336:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810a33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a342:	4a22      	ldr	r2, [pc, #136]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a344:	430b      	orrs	r3, r1
 810a346:	6553      	str	r3, [r2, #84]	@ 0x54
 810a348:	e003      	b.n	810a352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a34a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a34e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810a352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a35a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810a35e:	673b      	str	r3, [r7, #112]	@ 0x70
 810a360:	2300      	movs	r3, #0
 810a362:	677b      	str	r3, [r7, #116]	@ 0x74
 810a364:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810a368:	460b      	mov	r3, r1
 810a36a:	4313      	orrs	r3, r2
 810a36c:	d034      	beq.n	810a3d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a374:	2b00      	cmp	r3, #0
 810a376:	d003      	beq.n	810a380 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 810a378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a37c:	d007      	beq.n	810a38e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810a37e:	e011      	b.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a380:	4b12      	ldr	r3, [pc, #72]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a384:	4a11      	ldr	r2, [pc, #68]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a38a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810a38c:	e00e      	b.n	810a3ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a392:	3308      	adds	r3, #8
 810a394:	2102      	movs	r1, #2
 810a396:	4618      	mov	r0, r3
 810a398:	f001 fb76 	bl	810ba88 <RCCEx_PLL2_Config>
 810a39c:	4603      	mov	r3, r0
 810a39e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810a3a2:	e003      	b.n	810a3ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810a3a4:	2301      	movs	r3, #1
 810a3a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a3aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a3ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3b0:	2b00      	cmp	r3, #0
 810a3b2:	d10d      	bne.n	810a3d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810a3b4:	4b05      	ldr	r3, [pc, #20]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a3b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a3b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810a3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a3c2:	4a02      	ldr	r2, [pc, #8]	@ (810a3cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a3c4:	430b      	orrs	r3, r1
 810a3c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a3c8:	e006      	b.n	810a3d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810a3ca:	bf00      	nop
 810a3cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a3d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810a3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810a3e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 810a3e6:	2300      	movs	r3, #0
 810a3e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810a3ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810a3ee:	460b      	mov	r3, r1
 810a3f0:	4313      	orrs	r3, r2
 810a3f2:	d00c      	beq.n	810a40e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810a3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3f8:	3328      	adds	r3, #40	@ 0x28
 810a3fa:	2102      	movs	r1, #2
 810a3fc:	4618      	mov	r0, r3
 810a3fe:	f001 fbf5 	bl	810bbec <RCCEx_PLL3_Config>
 810a402:	4603      	mov	r3, r0
 810a404:	2b00      	cmp	r3, #0
 810a406:	d002      	beq.n	810a40e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 810a408:	2301      	movs	r3, #1
 810a40a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810a40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a416:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810a41a:	663b      	str	r3, [r7, #96]	@ 0x60
 810a41c:	2300      	movs	r3, #0
 810a41e:	667b      	str	r3, [r7, #100]	@ 0x64
 810a420:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810a424:	460b      	mov	r3, r1
 810a426:	4313      	orrs	r3, r2
 810a428:	d038      	beq.n	810a49c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810a42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810a432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a436:	d018      	beq.n	810a46a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 810a438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a43c:	d811      	bhi.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810a43e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a442:	d014      	beq.n	810a46e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810a444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a448:	d80b      	bhi.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810a44a:	2b00      	cmp	r3, #0
 810a44c:	d011      	beq.n	810a472 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810a44e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a452:	d106      	bne.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a454:	4bc3      	ldr	r3, [pc, #780]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a458:	4ac2      	ldr	r2, [pc, #776]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a45a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a45e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810a460:	e008      	b.n	810a474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a462:	2301      	movs	r3, #1
 810a464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a468:	e004      	b.n	810a474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810a46a:	bf00      	nop
 810a46c:	e002      	b.n	810a474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810a46e:	bf00      	nop
 810a470:	e000      	b.n	810a474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810a472:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a478:	2b00      	cmp	r3, #0
 810a47a:	d10b      	bne.n	810a494 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810a47c:	4bb9      	ldr	r3, [pc, #740]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a480:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810a484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810a48c:	4ab5      	ldr	r2, [pc, #724]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a48e:	430b      	orrs	r3, r1
 810a490:	6553      	str	r3, [r2, #84]	@ 0x54
 810a492:	e003      	b.n	810a49c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810a4a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 810a4aa:	2300      	movs	r3, #0
 810a4ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810a4ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810a4b2:	460b      	mov	r3, r1
 810a4b4:	4313      	orrs	r3, r2
 810a4b6:	d009      	beq.n	810a4cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810a4b8:	4baa      	ldr	r3, [pc, #680]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a4bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810a4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810a4c6:	4aa7      	ldr	r2, [pc, #668]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4c8:	430b      	orrs	r3, r1
 810a4ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810a4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810a4d8:	653b      	str	r3, [r7, #80]	@ 0x50
 810a4da:	2300      	movs	r3, #0
 810a4dc:	657b      	str	r3, [r7, #84]	@ 0x54
 810a4de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810a4e2:	460b      	mov	r3, r1
 810a4e4:	4313      	orrs	r3, r2
 810a4e6:	d00a      	beq.n	810a4fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810a4e8:	4b9e      	ldr	r3, [pc, #632]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4ea:	691b      	ldr	r3, [r3, #16]
 810a4ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810a4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a4f8:	4a9a      	ldr	r2, [pc, #616]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4fa:	430b      	orrs	r3, r1
 810a4fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a506:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810a50a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a50c:	2300      	movs	r3, #0
 810a50e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a510:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810a514:	460b      	mov	r3, r1
 810a516:	4313      	orrs	r3, r2
 810a518:	d009      	beq.n	810a52e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810a51a:	4b92      	ldr	r3, [pc, #584]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a51c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a51e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810a522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a528:	4a8e      	ldr	r2, [pc, #568]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a52a:	430b      	orrs	r3, r1
 810a52c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810a52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a536:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810a53a:	643b      	str	r3, [r7, #64]	@ 0x40
 810a53c:	2300      	movs	r3, #0
 810a53e:	647b      	str	r3, [r7, #68]	@ 0x44
 810a540:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810a544:	460b      	mov	r3, r1
 810a546:	4313      	orrs	r3, r2
 810a548:	d00e      	beq.n	810a568 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810a54a:	4b86      	ldr	r3, [pc, #536]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a54c:	691b      	ldr	r3, [r3, #16]
 810a54e:	4a85      	ldr	r2, [pc, #532]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a550:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810a554:	6113      	str	r3, [r2, #16]
 810a556:	4b83      	ldr	r3, [pc, #524]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a558:	6919      	ldr	r1, [r3, #16]
 810a55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a55e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810a562:	4a80      	ldr	r2, [pc, #512]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a564:	430b      	orrs	r3, r1
 810a566:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810a568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a570:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810a574:	63bb      	str	r3, [r7, #56]	@ 0x38
 810a576:	2300      	movs	r3, #0
 810a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a57a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810a57e:	460b      	mov	r3, r1
 810a580:	4313      	orrs	r3, r2
 810a582:	d009      	beq.n	810a598 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810a584:	4b77      	ldr	r3, [pc, #476]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a588:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810a58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a592:	4a74      	ldr	r2, [pc, #464]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a594:	430b      	orrs	r3, r1
 810a596:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810a598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a5a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810a5a4:	633b      	str	r3, [r7, #48]	@ 0x30
 810a5a6:	2300      	movs	r3, #0
 810a5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 810a5aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810a5ae:	460b      	mov	r3, r1
 810a5b0:	4313      	orrs	r3, r2
 810a5b2:	d00a      	beq.n	810a5ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810a5b4:	4b6b      	ldr	r3, [pc, #428]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a5b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a5b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810a5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a5c4:	4a67      	ldr	r2, [pc, #412]	@ (810a764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a5c6:	430b      	orrs	r3, r1
 810a5c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a5d2:	2100      	movs	r1, #0
 810a5d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 810a5d6:	f003 0301 	and.w	r3, r3, #1
 810a5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a5dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810a5e0:	460b      	mov	r3, r1
 810a5e2:	4313      	orrs	r3, r2
 810a5e4:	d011      	beq.n	810a60a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5ea:	3308      	adds	r3, #8
 810a5ec:	2100      	movs	r1, #0
 810a5ee:	4618      	mov	r0, r3
 810a5f0:	f001 fa4a 	bl	810ba88 <RCCEx_PLL2_Config>
 810a5f4:	4603      	mov	r3, r0
 810a5f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a5fe:	2b00      	cmp	r3, #0
 810a600:	d003      	beq.n	810a60a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a612:	2100      	movs	r1, #0
 810a614:	6239      	str	r1, [r7, #32]
 810a616:	f003 0302 	and.w	r3, r3, #2
 810a61a:	627b      	str	r3, [r7, #36]	@ 0x24
 810a61c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810a620:	460b      	mov	r3, r1
 810a622:	4313      	orrs	r3, r2
 810a624:	d011      	beq.n	810a64a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a62a:	3308      	adds	r3, #8
 810a62c:	2101      	movs	r1, #1
 810a62e:	4618      	mov	r0, r3
 810a630:	f001 fa2a 	bl	810ba88 <RCCEx_PLL2_Config>
 810a634:	4603      	mov	r3, r0
 810a636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a63e:	2b00      	cmp	r3, #0
 810a640:	d003      	beq.n	810a64a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a652:	2100      	movs	r1, #0
 810a654:	61b9      	str	r1, [r7, #24]
 810a656:	f003 0304 	and.w	r3, r3, #4
 810a65a:	61fb      	str	r3, [r7, #28]
 810a65c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810a660:	460b      	mov	r3, r1
 810a662:	4313      	orrs	r3, r2
 810a664:	d011      	beq.n	810a68a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a66a:	3308      	adds	r3, #8
 810a66c:	2102      	movs	r1, #2
 810a66e:	4618      	mov	r0, r3
 810a670:	f001 fa0a 	bl	810ba88 <RCCEx_PLL2_Config>
 810a674:	4603      	mov	r3, r0
 810a676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a67a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a67e:	2b00      	cmp	r3, #0
 810a680:	d003      	beq.n	810a68a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a692:	2100      	movs	r1, #0
 810a694:	6139      	str	r1, [r7, #16]
 810a696:	f003 0308 	and.w	r3, r3, #8
 810a69a:	617b      	str	r3, [r7, #20]
 810a69c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810a6a0:	460b      	mov	r3, r1
 810a6a2:	4313      	orrs	r3, r2
 810a6a4:	d011      	beq.n	810a6ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6aa:	3328      	adds	r3, #40	@ 0x28
 810a6ac:	2100      	movs	r1, #0
 810a6ae:	4618      	mov	r0, r3
 810a6b0:	f001 fa9c 	bl	810bbec <RCCEx_PLL3_Config>
 810a6b4:	4603      	mov	r3, r0
 810a6b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810a6ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6be:	2b00      	cmp	r3, #0
 810a6c0:	d003      	beq.n	810a6ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810a6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a6d2:	2100      	movs	r1, #0
 810a6d4:	60b9      	str	r1, [r7, #8]
 810a6d6:	f003 0310 	and.w	r3, r3, #16
 810a6da:	60fb      	str	r3, [r7, #12]
 810a6dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810a6e0:	460b      	mov	r3, r1
 810a6e2:	4313      	orrs	r3, r2
 810a6e4:	d011      	beq.n	810a70a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6ea:	3328      	adds	r3, #40	@ 0x28
 810a6ec:	2101      	movs	r1, #1
 810a6ee:	4618      	mov	r0, r3
 810a6f0:	f001 fa7c 	bl	810bbec <RCCEx_PLL3_Config>
 810a6f4:	4603      	mov	r3, r0
 810a6f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6fe:	2b00      	cmp	r3, #0
 810a700:	d003      	beq.n	810a70a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a712:	2100      	movs	r1, #0
 810a714:	6039      	str	r1, [r7, #0]
 810a716:	f003 0320 	and.w	r3, r3, #32
 810a71a:	607b      	str	r3, [r7, #4]
 810a71c:	e9d7 1200 	ldrd	r1, r2, [r7]
 810a720:	460b      	mov	r3, r1
 810a722:	4313      	orrs	r3, r2
 810a724:	d011      	beq.n	810a74a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a72a:	3328      	adds	r3, #40	@ 0x28
 810a72c:	2102      	movs	r1, #2
 810a72e:	4618      	mov	r0, r3
 810a730:	f001 fa5c 	bl	810bbec <RCCEx_PLL3_Config>
 810a734:	4603      	mov	r3, r0
 810a736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a73e:	2b00      	cmp	r3, #0
 810a740:	d003      	beq.n	810a74a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810a74a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810a74e:	2b00      	cmp	r3, #0
 810a750:	d101      	bne.n	810a756 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810a752:	2300      	movs	r3, #0
 810a754:	e000      	b.n	810a758 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810a756:	2301      	movs	r3, #1
}
 810a758:	4618      	mov	r0, r3
 810a75a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810a75e:	46bd      	mov	sp, r7
 810a760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a764:	58024400 	.word	0x58024400

0810a768 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810a768:	b580      	push	{r7, lr}
 810a76a:	b090      	sub	sp, #64	@ 0x40
 810a76c:	af00      	add	r7, sp, #0
 810a76e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810a772:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a776:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810a77a:	430b      	orrs	r3, r1
 810a77c:	f040 8094 	bne.w	810a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810a780:	4b9e      	ldr	r3, [pc, #632]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a784:	f003 0307 	and.w	r3, r3, #7
 810a788:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a78c:	2b04      	cmp	r3, #4
 810a78e:	f200 8087 	bhi.w	810a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810a792:	a201      	add	r2, pc, #4	@ (adr r2, 810a798 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a798:	0810a7ad 	.word	0x0810a7ad
 810a79c:	0810a7d5 	.word	0x0810a7d5
 810a7a0:	0810a7fd 	.word	0x0810a7fd
 810a7a4:	0810a899 	.word	0x0810a899
 810a7a8:	0810a825 	.word	0x0810a825
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a7ac:	4b93      	ldr	r3, [pc, #588]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a7ae:	681b      	ldr	r3, [r3, #0]
 810a7b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a7b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a7b8:	d108      	bne.n	810a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a7ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a7be:	4618      	mov	r0, r3
 810a7c0:	f001 f810 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810a7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a7c8:	f000 bd45 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a7cc:	2300      	movs	r3, #0
 810a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a7d0:	f000 bd41 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a7d4:	4b89      	ldr	r3, [pc, #548]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a7d6:	681b      	ldr	r3, [r3, #0]
 810a7d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a7dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810a7e0:	d108      	bne.n	810a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a7e2:	f107 0318 	add.w	r3, r7, #24
 810a7e6:	4618      	mov	r0, r3
 810a7e8:	f000 fd54 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810a7ec:	69bb      	ldr	r3, [r7, #24]
 810a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a7f0:	f000 bd31 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a7f4:	2300      	movs	r3, #0
 810a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a7f8:	f000 bd2d 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810a7fc:	4b7f      	ldr	r3, [pc, #508]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a7fe:	681b      	ldr	r3, [r3, #0]
 810a800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a808:	d108      	bne.n	810a81c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a80a:	f107 030c 	add.w	r3, r7, #12
 810a80e:	4618      	mov	r0, r3
 810a810:	f000 fe94 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810a814:	68fb      	ldr	r3, [r7, #12]
 810a816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a818:	f000 bd1d 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a81c:	2300      	movs	r3, #0
 810a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a820:	f000 bd19 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810a824:	4b75      	ldr	r3, [pc, #468]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810a82c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810a82e:	4b73      	ldr	r3, [pc, #460]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a830:	681b      	ldr	r3, [r3, #0]
 810a832:	f003 0304 	and.w	r3, r3, #4
 810a836:	2b04      	cmp	r3, #4
 810a838:	d10c      	bne.n	810a854 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810a83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a83c:	2b00      	cmp	r3, #0
 810a83e:	d109      	bne.n	810a854 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a840:	4b6e      	ldr	r3, [pc, #440]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a842:	681b      	ldr	r3, [r3, #0]
 810a844:	08db      	lsrs	r3, r3, #3
 810a846:	f003 0303 	and.w	r3, r3, #3
 810a84a:	4a6d      	ldr	r2, [pc, #436]	@ (810aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810a84c:	fa22 f303 	lsr.w	r3, r2, r3
 810a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a852:	e01f      	b.n	810a894 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810a854:	4b69      	ldr	r3, [pc, #420]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a856:	681b      	ldr	r3, [r3, #0]
 810a858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a85c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a860:	d106      	bne.n	810a870 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810a862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a868:	d102      	bne.n	810a870 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810a86a:	4b66      	ldr	r3, [pc, #408]	@ (810aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a86e:	e011      	b.n	810a894 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810a870:	4b62      	ldr	r3, [pc, #392]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a87c:	d106      	bne.n	810a88c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810a87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a884:	d102      	bne.n	810a88c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810a886:	4b60      	ldr	r3, [pc, #384]	@ (810aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a88a:	e003      	b.n	810a894 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810a88c:	2300      	movs	r3, #0
 810a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810a890:	f000 bce1 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810a894:	f000 bcdf 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810a898:	4b5c      	ldr	r3, [pc, #368]	@ (810aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a89c:	f000 bcdb 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810a8a0:	2300      	movs	r3, #0
 810a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8a4:	f000 bcd7 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810a8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a8ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 810a8b0:	430b      	orrs	r3, r1
 810a8b2:	f040 80ad 	bne.w	810aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810a8b6:	4b51      	ldr	r3, [pc, #324]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a8b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a8ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810a8be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a8c6:	d056      	beq.n	810a976 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a8ce:	f200 8090 	bhi.w	810a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8d4:	2bc0      	cmp	r3, #192	@ 0xc0
 810a8d6:	f000 8088 	beq.w	810a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8dc:	2bc0      	cmp	r3, #192	@ 0xc0
 810a8de:	f200 8088 	bhi.w	810a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8e4:	2b80      	cmp	r3, #128	@ 0x80
 810a8e6:	d032      	beq.n	810a94e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8ea:	2b80      	cmp	r3, #128	@ 0x80
 810a8ec:	f200 8081 	bhi.w	810a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8f2:	2b00      	cmp	r3, #0
 810a8f4:	d003      	beq.n	810a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a8f8:	2b40      	cmp	r3, #64	@ 0x40
 810a8fa:	d014      	beq.n	810a926 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810a8fc:	e079      	b.n	810a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a8fe:	4b3f      	ldr	r3, [pc, #252]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a900:	681b      	ldr	r3, [r3, #0]
 810a902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a90a:	d108      	bne.n	810a91e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a90c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a910:	4618      	mov	r0, r3
 810a912:	f000 ff67 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810a916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a91a:	f000 bc9c 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a91e:	2300      	movs	r3, #0
 810a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a922:	f000 bc98 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a926:	4b35      	ldr	r3, [pc, #212]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a928:	681b      	ldr	r3, [r3, #0]
 810a92a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a92e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810a932:	d108      	bne.n	810a946 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a934:	f107 0318 	add.w	r3, r7, #24
 810a938:	4618      	mov	r0, r3
 810a93a:	f000 fcab 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810a93e:	69bb      	ldr	r3, [r7, #24]
 810a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a942:	f000 bc88 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a946:	2300      	movs	r3, #0
 810a948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a94a:	f000 bc84 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810a94e:	4b2b      	ldr	r3, [pc, #172]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a950:	681b      	ldr	r3, [r3, #0]
 810a952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a95a:	d108      	bne.n	810a96e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a95c:	f107 030c 	add.w	r3, r7, #12
 810a960:	4618      	mov	r0, r3
 810a962:	f000 fdeb 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810a966:	68fb      	ldr	r3, [r7, #12]
 810a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a96a:	f000 bc74 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a96e:	2300      	movs	r3, #0
 810a970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a972:	f000 bc70 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810a976:	4b21      	ldr	r3, [pc, #132]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a97a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810a97e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810a980:	4b1e      	ldr	r3, [pc, #120]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a982:	681b      	ldr	r3, [r3, #0]
 810a984:	f003 0304 	and.w	r3, r3, #4
 810a988:	2b04      	cmp	r3, #4
 810a98a:	d10c      	bne.n	810a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810a98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a98e:	2b00      	cmp	r3, #0
 810a990:	d109      	bne.n	810a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a992:	4b1a      	ldr	r3, [pc, #104]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a994:	681b      	ldr	r3, [r3, #0]
 810a996:	08db      	lsrs	r3, r3, #3
 810a998:	f003 0303 	and.w	r3, r3, #3
 810a99c:	4a18      	ldr	r2, [pc, #96]	@ (810aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810a99e:	fa22 f303 	lsr.w	r3, r2, r3
 810a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a9a4:	e01f      	b.n	810a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810a9a6:	4b15      	ldr	r3, [pc, #84]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a9a8:	681b      	ldr	r3, [r3, #0]
 810a9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a9ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a9b2:	d106      	bne.n	810a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810a9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a9b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a9ba:	d102      	bne.n	810a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810a9bc:	4b11      	ldr	r3, [pc, #68]	@ (810aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a9c0:	e011      	b.n	810a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810a9c2:	4b0e      	ldr	r3, [pc, #56]	@ (810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810a9c4:	681b      	ldr	r3, [r3, #0]
 810a9c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a9ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a9ce:	d106      	bne.n	810a9de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 810a9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a9d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a9d6:	d102      	bne.n	810a9de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810a9d8:	4b0b      	ldr	r3, [pc, #44]	@ (810aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810a9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a9dc:	e003      	b.n	810a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810a9de:	2300      	movs	r3, #0
 810a9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810a9e2:	f000 bc38 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810a9e6:	f000 bc36 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810a9ea:	4b08      	ldr	r3, [pc, #32]	@ (810aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810a9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9ee:	f000 bc32 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810a9f2:	2300      	movs	r3, #0
 810a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a9f6:	f000 bc2e 	b.w	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810a9fa:	bf00      	nop
 810a9fc:	58024400 	.word	0x58024400
 810aa00:	03d09000 	.word	0x03d09000
 810aa04:	003d0900 	.word	0x003d0900
 810aa08:	007a1200 	.word	0x007a1200
 810aa0c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810aa10:	e9d7 2300 	ldrd	r2, r3, [r7]
 810aa14:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810aa18:	430b      	orrs	r3, r1
 810aa1a:	f040 809c 	bne.w	810ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810aa1e:	4b9e      	ldr	r3, [pc, #632]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aa20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aa22:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810aa26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810aa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810aa2e:	d054      	beq.n	810aada <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810aa30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810aa36:	f200 808b 	bhi.w	810ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810aa40:	f000 8083 	beq.w	810ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810aa44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810aa4a:	f200 8081 	bhi.w	810ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810aa54:	d02f      	beq.n	810aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810aa5c:	d878      	bhi.n	810ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa60:	2b00      	cmp	r3, #0
 810aa62:	d004      	beq.n	810aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810aa6a:	d012      	beq.n	810aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810aa6c:	e070      	b.n	810ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810aa6e:	4b8a      	ldr	r3, [pc, #552]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aa70:	681b      	ldr	r3, [r3, #0]
 810aa72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810aa76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810aa7a:	d107      	bne.n	810aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810aa7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810aa80:	4618      	mov	r0, r3
 810aa82:	f000 feaf 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810aa8a:	e3e4      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810aa8c:	2300      	movs	r3, #0
 810aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aa90:	e3e1      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810aa92:	4b81      	ldr	r3, [pc, #516]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aa94:	681b      	ldr	r3, [r3, #0]
 810aa96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810aa9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810aa9e:	d107      	bne.n	810aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810aaa0:	f107 0318 	add.w	r3, r7, #24
 810aaa4:	4618      	mov	r0, r3
 810aaa6:	f000 fbf5 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810aaaa:	69bb      	ldr	r3, [r7, #24]
 810aaac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810aaae:	e3d2      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810aab0:	2300      	movs	r3, #0
 810aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aab4:	e3cf      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810aab6:	4b78      	ldr	r3, [pc, #480]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aab8:	681b      	ldr	r3, [r3, #0]
 810aaba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810aabe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aac2:	d107      	bne.n	810aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aac4:	f107 030c 	add.w	r3, r7, #12
 810aac8:	4618      	mov	r0, r3
 810aaca:	f000 fd37 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810aace:	68fb      	ldr	r3, [r7, #12]
 810aad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810aad2:	e3c0      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810aad4:	2300      	movs	r3, #0
 810aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aad8:	e3bd      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810aada:	4b6f      	ldr	r3, [pc, #444]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aadc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810aae2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810aae4:	4b6c      	ldr	r3, [pc, #432]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aae6:	681b      	ldr	r3, [r3, #0]
 810aae8:	f003 0304 	and.w	r3, r3, #4
 810aaec:	2b04      	cmp	r3, #4
 810aaee:	d10c      	bne.n	810ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 810aaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810aaf2:	2b00      	cmp	r3, #0
 810aaf4:	d109      	bne.n	810ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810aaf6:	4b68      	ldr	r3, [pc, #416]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810aaf8:	681b      	ldr	r3, [r3, #0]
 810aafa:	08db      	lsrs	r3, r3, #3
 810aafc:	f003 0303 	and.w	r3, r3, #3
 810ab00:	4a66      	ldr	r2, [pc, #408]	@ (810ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810ab02:	fa22 f303 	lsr.w	r3, r2, r3
 810ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ab08:	e01e      	b.n	810ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ab0a:	4b63      	ldr	r3, [pc, #396]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ab0c:	681b      	ldr	r3, [r3, #0]
 810ab0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ab12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ab16:	d106      	bne.n	810ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810ab18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ab1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ab1e:	d102      	bne.n	810ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810ab20:	4b5f      	ldr	r3, [pc, #380]	@ (810aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ab24:	e010      	b.n	810ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ab26:	4b5c      	ldr	r3, [pc, #368]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ab28:	681b      	ldr	r3, [r3, #0]
 810ab2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810ab2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ab32:	d106      	bne.n	810ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810ab34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ab36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ab3a:	d102      	bne.n	810ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810ab3c:	4b59      	ldr	r3, [pc, #356]	@ (810aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ab40:	e002      	b.n	810ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810ab42:	2300      	movs	r3, #0
 810ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810ab46:	e386      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ab48:	e385      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810ab4a:	4b57      	ldr	r3, [pc, #348]	@ (810aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810ab4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ab4e:	e382      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810ab50:	2300      	movs	r3, #0
 810ab52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ab54:	e37f      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810ab56:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ab5a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810ab5e:	430b      	orrs	r3, r1
 810ab60:	f040 80a7 	bne.w	810acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810ab64:	4b4c      	ldr	r3, [pc, #304]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ab66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ab68:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810ab6c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810ab74:	d055      	beq.n	810ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810ab7c:	f200 8096 	bhi.w	810acac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810ab86:	f000 8084 	beq.w	810ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810ab90:	f200 808c 	bhi.w	810acac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810ab9a:	d030      	beq.n	810abfe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810aba2:	f200 8083 	bhi.w	810acac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aba8:	2b00      	cmp	r3, #0
 810abaa:	d004      	beq.n	810abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810abb2:	d012      	beq.n	810abda <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810abb4:	e07a      	b.n	810acac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810abb6:	4b38      	ldr	r3, [pc, #224]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810abb8:	681b      	ldr	r3, [r3, #0]
 810abba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810abbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810abc2:	d107      	bne.n	810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810abc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810abc8:	4618      	mov	r0, r3
 810abca:	f000 fe0b 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810abce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810abd2:	e340      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810abd4:	2300      	movs	r3, #0
 810abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810abd8:	e33d      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810abda:	4b2f      	ldr	r3, [pc, #188]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810abdc:	681b      	ldr	r3, [r3, #0]
 810abde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810abe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810abe6:	d107      	bne.n	810abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810abe8:	f107 0318 	add.w	r3, r7, #24
 810abec:	4618      	mov	r0, r3
 810abee:	f000 fb51 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810abf2:	69bb      	ldr	r3, [r7, #24]
 810abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810abf6:	e32e      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810abf8:	2300      	movs	r3, #0
 810abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810abfc:	e32b      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810abfe:	4b26      	ldr	r3, [pc, #152]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ac00:	681b      	ldr	r3, [r3, #0]
 810ac02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ac06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ac0a:	d107      	bne.n	810ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ac0c:	f107 030c 	add.w	r3, r7, #12
 810ac10:	4618      	mov	r0, r3
 810ac12:	f000 fc93 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ac16:	68fb      	ldr	r3, [r7, #12]
 810ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ac1a:	e31c      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ac1c:	2300      	movs	r3, #0
 810ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac20:	e319      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810ac22:	4b1d      	ldr	r3, [pc, #116]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ac24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ac26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810ac2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ac2c:	4b1a      	ldr	r3, [pc, #104]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ac2e:	681b      	ldr	r3, [r3, #0]
 810ac30:	f003 0304 	and.w	r3, r3, #4
 810ac34:	2b04      	cmp	r3, #4
 810ac36:	d10c      	bne.n	810ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810ac38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ac3a:	2b00      	cmp	r3, #0
 810ac3c:	d109      	bne.n	810ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810ac3e:	4b16      	ldr	r3, [pc, #88]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ac40:	681b      	ldr	r3, [r3, #0]
 810ac42:	08db      	lsrs	r3, r3, #3
 810ac44:	f003 0303 	and.w	r3, r3, #3
 810ac48:	4a14      	ldr	r2, [pc, #80]	@ (810ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810ac4a:	fa22 f303 	lsr.w	r3, r2, r3
 810ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ac50:	e01e      	b.n	810ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ac52:	4b11      	ldr	r3, [pc, #68]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ac54:	681b      	ldr	r3, [r3, #0]
 810ac56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ac5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ac5e:	d106      	bne.n	810ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810ac60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ac62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ac66:	d102      	bne.n	810ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810ac68:	4b0d      	ldr	r3, [pc, #52]	@ (810aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ac6c:	e010      	b.n	810ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ac6e:	4b0a      	ldr	r3, [pc, #40]	@ (810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ac70:	681b      	ldr	r3, [r3, #0]
 810ac72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810ac76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ac7a:	d106      	bne.n	810ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810ac7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ac7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ac82:	d102      	bne.n	810ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810ac84:	4b07      	ldr	r3, [pc, #28]	@ (810aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ac88:	e002      	b.n	810ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810ac8a:	2300      	movs	r3, #0
 810ac8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810ac8e:	e2e2      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ac90:	e2e1      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810ac92:	4b05      	ldr	r3, [pc, #20]	@ (810aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810ac94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac96:	e2de      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ac98:	58024400 	.word	0x58024400
 810ac9c:	03d09000 	.word	0x03d09000
 810aca0:	003d0900 	.word	0x003d0900
 810aca4:	007a1200 	.word	0x007a1200
 810aca8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810acac:	2300      	movs	r3, #0
 810acae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810acb0:	e2d1      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810acb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 810acb6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810acba:	430b      	orrs	r3, r1
 810acbc:	f040 809c 	bne.w	810adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810acc0:	4b93      	ldr	r3, [pc, #588]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810acc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810acc4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810acc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810acca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810accc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810acd0:	d054      	beq.n	810ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810acd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810acd8:	f200 808b 	bhi.w	810adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810ace2:	f000 8083 	beq.w	810adec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ace8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810acec:	f200 8081 	bhi.w	810adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810acf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810acf6:	d02f      	beq.n	810ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810acf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810acfe:	d878      	bhi.n	810adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810ad00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ad02:	2b00      	cmp	r3, #0
 810ad04:	d004      	beq.n	810ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810ad06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ad08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ad0c:	d012      	beq.n	810ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810ad0e:	e070      	b.n	810adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810ad10:	4b7f      	ldr	r3, [pc, #508]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ad12:	681b      	ldr	r3, [r3, #0]
 810ad14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810ad18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810ad1c:	d107      	bne.n	810ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810ad1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810ad22:	4618      	mov	r0, r3
 810ad24:	f000 fd5e 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810ad28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ad2c:	e293      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ad2e:	2300      	movs	r3, #0
 810ad30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ad32:	e290      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ad34:	4b76      	ldr	r3, [pc, #472]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ad36:	681b      	ldr	r3, [r3, #0]
 810ad38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ad3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810ad40:	d107      	bne.n	810ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ad42:	f107 0318 	add.w	r3, r7, #24
 810ad46:	4618      	mov	r0, r3
 810ad48:	f000 faa4 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ad4c:	69bb      	ldr	r3, [r7, #24]
 810ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ad50:	e281      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ad52:	2300      	movs	r3, #0
 810ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ad56:	e27e      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ad58:	4b6d      	ldr	r3, [pc, #436]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ad5a:	681b      	ldr	r3, [r3, #0]
 810ad5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ad60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ad64:	d107      	bne.n	810ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ad66:	f107 030c 	add.w	r3, r7, #12
 810ad6a:	4618      	mov	r0, r3
 810ad6c:	f000 fbe6 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ad70:	68fb      	ldr	r3, [r7, #12]
 810ad72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ad74:	e26f      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ad76:	2300      	movs	r3, #0
 810ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ad7a:	e26c      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810ad7c:	4b64      	ldr	r3, [pc, #400]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ad7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ad80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810ad84:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ad86:	4b62      	ldr	r3, [pc, #392]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ad88:	681b      	ldr	r3, [r3, #0]
 810ad8a:	f003 0304 	and.w	r3, r3, #4
 810ad8e:	2b04      	cmp	r3, #4
 810ad90:	d10c      	bne.n	810adac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810ad92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ad94:	2b00      	cmp	r3, #0
 810ad96:	d109      	bne.n	810adac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810ad98:	4b5d      	ldr	r3, [pc, #372]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ad9a:	681b      	ldr	r3, [r3, #0]
 810ad9c:	08db      	lsrs	r3, r3, #3
 810ad9e:	f003 0303 	and.w	r3, r3, #3
 810ada2:	4a5c      	ldr	r2, [pc, #368]	@ (810af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810ada4:	fa22 f303 	lsr.w	r3, r2, r3
 810ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810adaa:	e01e      	b.n	810adea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810adac:	4b58      	ldr	r3, [pc, #352]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810adae:	681b      	ldr	r3, [r3, #0]
 810adb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810adb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810adb8:	d106      	bne.n	810adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810adba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810adbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810adc0:	d102      	bne.n	810adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810adc2:	4b55      	ldr	r3, [pc, #340]	@ (810af18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810adc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810adc6:	e010      	b.n	810adea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810adc8:	4b51      	ldr	r3, [pc, #324]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810adca:	681b      	ldr	r3, [r3, #0]
 810adcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810add0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810add4:	d106      	bne.n	810ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810add6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810add8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810addc:	d102      	bne.n	810ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810adde:	4b4f      	ldr	r3, [pc, #316]	@ (810af1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810ade0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ade2:	e002      	b.n	810adea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810ade4:	2300      	movs	r3, #0
 810ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810ade8:	e235      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810adea:	e234      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810adec:	4b4c      	ldr	r3, [pc, #304]	@ (810af20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810adee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810adf0:	e231      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810adf2:	2300      	movs	r3, #0
 810adf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810adf6:	e22e      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810adf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810adfc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 810ae00:	430b      	orrs	r3, r1
 810ae02:	f040 808f 	bne.w	810af24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810ae06:	4b42      	ldr	r3, [pc, #264]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ae08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ae0a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810ae0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 810ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810ae16:	d06b      	beq.n	810aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810ae1e:	d874      	bhi.n	810af0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810ae26:	d056      	beq.n	810aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810ae2e:	d86c      	bhi.n	810af0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810ae36:	d03b      	beq.n	810aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810ae3e:	d864      	bhi.n	810af0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810ae40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ae46:	d021      	beq.n	810ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ae4e:	d85c      	bhi.n	810af0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae52:	2b00      	cmp	r3, #0
 810ae54:	d004      	beq.n	810ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810ae56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ae5c:	d004      	beq.n	810ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810ae5e:	e054      	b.n	810af0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810ae60:	f7fe fa4c 	bl	81092fc <HAL_RCC_GetPCLK1Freq>
 810ae64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810ae66:	e1f6      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ae68:	4b29      	ldr	r3, [pc, #164]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ae6a:	681b      	ldr	r3, [r3, #0]
 810ae6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ae70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810ae74:	d107      	bne.n	810ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ae76:	f107 0318 	add.w	r3, r7, #24
 810ae7a:	4618      	mov	r0, r3
 810ae7c:	f000 fa0a 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810ae80:	69fb      	ldr	r3, [r7, #28]
 810ae82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ae84:	e1e7      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ae86:	2300      	movs	r3, #0
 810ae88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ae8a:	e1e4      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ae8c:	4b20      	ldr	r3, [pc, #128]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810ae8e:	681b      	ldr	r3, [r3, #0]
 810ae90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ae94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ae98:	d107      	bne.n	810aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ae9a:	f107 030c 	add.w	r3, r7, #12
 810ae9e:	4618      	mov	r0, r3
 810aea0:	f000 fb4c 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810aea4:	693b      	ldr	r3, [r7, #16]
 810aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810aea8:	e1d5      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810aeaa:	2300      	movs	r3, #0
 810aeac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aeae:	e1d2      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810aeb0:	4b17      	ldr	r3, [pc, #92]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810aeb2:	681b      	ldr	r3, [r3, #0]
 810aeb4:	f003 0304 	and.w	r3, r3, #4
 810aeb8:	2b04      	cmp	r3, #4
 810aeba:	d109      	bne.n	810aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810aebc:	4b14      	ldr	r3, [pc, #80]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810aebe:	681b      	ldr	r3, [r3, #0]
 810aec0:	08db      	lsrs	r3, r3, #3
 810aec2:	f003 0303 	and.w	r3, r3, #3
 810aec6:	4a13      	ldr	r2, [pc, #76]	@ (810af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810aec8:	fa22 f303 	lsr.w	r3, r2, r3
 810aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810aece:	e1c2      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810aed0:	2300      	movs	r3, #0
 810aed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aed4:	e1bf      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810aed6:	4b0e      	ldr	r3, [pc, #56]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810aed8:	681b      	ldr	r3, [r3, #0]
 810aeda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810aede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810aee2:	d102      	bne.n	810aeea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810aee4:	4b0c      	ldr	r3, [pc, #48]	@ (810af18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810aee8:	e1b5      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810aeea:	2300      	movs	r3, #0
 810aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aeee:	e1b2      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810aef0:	4b07      	ldr	r3, [pc, #28]	@ (810af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810aef2:	681b      	ldr	r3, [r3, #0]
 810aef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810aef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810aefc:	d102      	bne.n	810af04 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810aefe:	4b07      	ldr	r3, [pc, #28]	@ (810af1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810af02:	e1a8      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810af04:	2300      	movs	r3, #0
 810af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810af08:	e1a5      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810af0a:	2300      	movs	r3, #0
 810af0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810af0e:	e1a2      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810af10:	58024400 	.word	0x58024400
 810af14:	03d09000 	.word	0x03d09000
 810af18:	003d0900 	.word	0x003d0900
 810af1c:	007a1200 	.word	0x007a1200
 810af20:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810af24:	e9d7 2300 	ldrd	r2, r3, [r7]
 810af28:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810af2c:	430b      	orrs	r3, r1
 810af2e:	d173      	bne.n	810b018 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810af30:	4b9c      	ldr	r3, [pc, #624]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810af32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810af34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810af38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810af3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810af40:	d02f      	beq.n	810afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810af42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810af48:	d863      	bhi.n	810b012 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810af4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af4c:	2b00      	cmp	r3, #0
 810af4e:	d004      	beq.n	810af5a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810af50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810af56:	d012      	beq.n	810af7e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810af58:	e05b      	b.n	810b012 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810af5a:	4b92      	ldr	r3, [pc, #584]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810af5c:	681b      	ldr	r3, [r3, #0]
 810af5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810af62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810af66:	d107      	bne.n	810af78 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810af68:	f107 0318 	add.w	r3, r7, #24
 810af6c:	4618      	mov	r0, r3
 810af6e:	f000 f991 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810af72:	69bb      	ldr	r3, [r7, #24]
 810af74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810af76:	e16e      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810af78:	2300      	movs	r3, #0
 810af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810af7c:	e16b      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810af7e:	4b89      	ldr	r3, [pc, #548]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810af80:	681b      	ldr	r3, [r3, #0]
 810af82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810af86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810af8a:	d107      	bne.n	810af9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810af8c:	f107 030c 	add.w	r3, r7, #12
 810af90:	4618      	mov	r0, r3
 810af92:	f000 fad3 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810af96:	697b      	ldr	r3, [r7, #20]
 810af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810af9a:	e15c      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810af9c:	2300      	movs	r3, #0
 810af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810afa0:	e159      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810afa2:	4b80      	ldr	r3, [pc, #512]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810afa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810afa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810afaa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810afac:	4b7d      	ldr	r3, [pc, #500]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810afae:	681b      	ldr	r3, [r3, #0]
 810afb0:	f003 0304 	and.w	r3, r3, #4
 810afb4:	2b04      	cmp	r3, #4
 810afb6:	d10c      	bne.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810afb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810afba:	2b00      	cmp	r3, #0
 810afbc:	d109      	bne.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810afbe:	4b79      	ldr	r3, [pc, #484]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810afc0:	681b      	ldr	r3, [r3, #0]
 810afc2:	08db      	lsrs	r3, r3, #3
 810afc4:	f003 0303 	and.w	r3, r3, #3
 810afc8:	4a77      	ldr	r2, [pc, #476]	@ (810b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810afca:	fa22 f303 	lsr.w	r3, r2, r3
 810afce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810afd0:	e01e      	b.n	810b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810afd2:	4b74      	ldr	r3, [pc, #464]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810afd4:	681b      	ldr	r3, [r3, #0]
 810afd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810afda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810afde:	d106      	bne.n	810afee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810afe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810afe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810afe6:	d102      	bne.n	810afee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810afe8:	4b70      	ldr	r3, [pc, #448]	@ (810b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810afec:	e010      	b.n	810b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810afee:	4b6d      	ldr	r3, [pc, #436]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810aff0:	681b      	ldr	r3, [r3, #0]
 810aff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810aff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810affa:	d106      	bne.n	810b00a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810affc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810affe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b002:	d102      	bne.n	810b00a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b004:	4b6a      	ldr	r3, [pc, #424]	@ (810b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b008:	e002      	b.n	810b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b00a:	2300      	movs	r3, #0
 810b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b00e:	e122      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b010:	e121      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810b012:	2300      	movs	r3, #0
 810b014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b016:	e11e      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810b018:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b01c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810b020:	430b      	orrs	r3, r1
 810b022:	d133      	bne.n	810b08c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810b024:	4b5f      	ldr	r3, [pc, #380]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810b02c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810b02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b030:	2b00      	cmp	r3, #0
 810b032:	d004      	beq.n	810b03e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810b034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b03a:	d012      	beq.n	810b062 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810b03c:	e023      	b.n	810b086 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b03e:	4b59      	ldr	r3, [pc, #356]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b040:	681b      	ldr	r3, [r3, #0]
 810b042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b04a:	d107      	bne.n	810b05c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b04c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b050:	4618      	mov	r0, r3
 810b052:	f000 fbc7 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b05a:	e0fc      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b05c:	2300      	movs	r3, #0
 810b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b060:	e0f9      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b062:	4b50      	ldr	r3, [pc, #320]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b064:	681b      	ldr	r3, [r3, #0]
 810b066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b06a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b06e:	d107      	bne.n	810b080 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b070:	f107 0318 	add.w	r3, r7, #24
 810b074:	4618      	mov	r0, r3
 810b076:	f000 f90d 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810b07a:	6a3b      	ldr	r3, [r7, #32]
 810b07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b07e:	e0ea      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b080:	2300      	movs	r3, #0
 810b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b084:	e0e7      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810b086:	2300      	movs	r3, #0
 810b088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b08a:	e0e4      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810b08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b090:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 810b094:	430b      	orrs	r3, r1
 810b096:	f040 808d 	bne.w	810b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810b09a:	4b42      	ldr	r3, [pc, #264]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b09c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b09e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810b0a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810b0aa:	d06b      	beq.n	810b184 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810b0b2:	d874      	bhi.n	810b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b0ba:	d056      	beq.n	810b16a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810b0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b0c2:	d86c      	bhi.n	810b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810b0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810b0ca:	d03b      	beq.n	810b144 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810b0d2:	d864      	bhi.n	810b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810b0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b0da:	d021      	beq.n	810b120 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b0e2:	d85c      	bhi.n	810b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	d004      	beq.n	810b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b0f0:	d004      	beq.n	810b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810b0f2:	e054      	b.n	810b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810b0f4:	f000 f8b8 	bl	810b268 <HAL_RCCEx_GetD3PCLK1Freq>
 810b0f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b0fa:	e0ac      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b0fc:	4b29      	ldr	r3, [pc, #164]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b0fe:	681b      	ldr	r3, [r3, #0]
 810b100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b108:	d107      	bne.n	810b11a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b10a:	f107 0318 	add.w	r3, r7, #24
 810b10e:	4618      	mov	r0, r3
 810b110:	f000 f8c0 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b114:	69fb      	ldr	r3, [r7, #28]
 810b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b118:	e09d      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b11a:	2300      	movs	r3, #0
 810b11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b11e:	e09a      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b120:	4b20      	ldr	r3, [pc, #128]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b122:	681b      	ldr	r3, [r3, #0]
 810b124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b12c:	d107      	bne.n	810b13e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b12e:	f107 030c 	add.w	r3, r7, #12
 810b132:	4618      	mov	r0, r3
 810b134:	f000 fa02 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810b138:	693b      	ldr	r3, [r7, #16]
 810b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b13c:	e08b      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b13e:	2300      	movs	r3, #0
 810b140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b142:	e088      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810b144:	4b17      	ldr	r3, [pc, #92]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b146:	681b      	ldr	r3, [r3, #0]
 810b148:	f003 0304 	and.w	r3, r3, #4
 810b14c:	2b04      	cmp	r3, #4
 810b14e:	d109      	bne.n	810b164 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b150:	4b14      	ldr	r3, [pc, #80]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b152:	681b      	ldr	r3, [r3, #0]
 810b154:	08db      	lsrs	r3, r3, #3
 810b156:	f003 0303 	and.w	r3, r3, #3
 810b15a:	4a13      	ldr	r2, [pc, #76]	@ (810b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810b15c:	fa22 f303 	lsr.w	r3, r2, r3
 810b160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b162:	e078      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b164:	2300      	movs	r3, #0
 810b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b168:	e075      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810b16a:	4b0e      	ldr	r3, [pc, #56]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b16c:	681b      	ldr	r3, [r3, #0]
 810b16e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b176:	d102      	bne.n	810b17e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810b178:	4b0c      	ldr	r3, [pc, #48]	@ (810b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810b17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b17c:	e06b      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b17e:	2300      	movs	r3, #0
 810b180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b182:	e068      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b184:	4b07      	ldr	r3, [pc, #28]	@ (810b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810b186:	681b      	ldr	r3, [r3, #0]
 810b188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b18c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b190:	d102      	bne.n	810b198 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810b192:	4b07      	ldr	r3, [pc, #28]	@ (810b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810b194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b196:	e05e      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b198:	2300      	movs	r3, #0
 810b19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b19c:	e05b      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810b19e:	2300      	movs	r3, #0
 810b1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b1a2:	e058      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b1a4:	58024400 	.word	0x58024400
 810b1a8:	03d09000 	.word	0x03d09000
 810b1ac:	003d0900 	.word	0x003d0900
 810b1b0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810b1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b1b8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810b1bc:	430b      	orrs	r3, r1
 810b1be:	d148      	bne.n	810b252 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810b1c0:	4b27      	ldr	r3, [pc, #156]	@ (810b260 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810b1c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b1c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b1c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810b1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b1cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b1d0:	d02a      	beq.n	810b228 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810b1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b1d8:	d838      	bhi.n	810b24c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810b1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b1dc:	2b00      	cmp	r3, #0
 810b1de:	d004      	beq.n	810b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810b1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b1e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b1e6:	d00d      	beq.n	810b204 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810b1e8:	e030      	b.n	810b24c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b1ea:	4b1d      	ldr	r3, [pc, #116]	@ (810b260 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810b1ec:	681b      	ldr	r3, [r3, #0]
 810b1ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b1f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b1f6:	d102      	bne.n	810b1fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810b1f8:	4b1a      	ldr	r3, [pc, #104]	@ (810b264 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b1fc:	e02b      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b1fe:	2300      	movs	r3, #0
 810b200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b202:	e028      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b204:	4b16      	ldr	r3, [pc, #88]	@ (810b260 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810b206:	681b      	ldr	r3, [r3, #0]
 810b208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b20c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b210:	d107      	bne.n	810b222 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b216:	4618      	mov	r0, r3
 810b218:	f000 fae4 	bl	810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b220:	e019      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b222:	2300      	movs	r3, #0
 810b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b226:	e016      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b228:	4b0d      	ldr	r3, [pc, #52]	@ (810b260 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810b22a:	681b      	ldr	r3, [r3, #0]
 810b22c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b234:	d107      	bne.n	810b246 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b236:	f107 0318 	add.w	r3, r7, #24
 810b23a:	4618      	mov	r0, r3
 810b23c:	f000 f82a 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b240:	69fb      	ldr	r3, [r7, #28]
 810b242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b244:	e007      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b246:	2300      	movs	r3, #0
 810b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b24a:	e004      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b24c:	2300      	movs	r3, #0
 810b24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b250:	e001      	b.n	810b256 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810b252:	2300      	movs	r3, #0
 810b254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810b256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810b258:	4618      	mov	r0, r3
 810b25a:	3740      	adds	r7, #64	@ 0x40
 810b25c:	46bd      	mov	sp, r7
 810b25e:	bd80      	pop	{r7, pc}
 810b260:	58024400 	.word	0x58024400
 810b264:	007a1200 	.word	0x007a1200

0810b268 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810b268:	b580      	push	{r7, lr}
 810b26a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810b26c:	f7fe f814 	bl	8109298 <HAL_RCC_GetHCLKFreq>
 810b270:	4602      	mov	r2, r0
 810b272:	4b06      	ldr	r3, [pc, #24]	@ (810b28c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810b274:	6a1b      	ldr	r3, [r3, #32]
 810b276:	091b      	lsrs	r3, r3, #4
 810b278:	f003 0307 	and.w	r3, r3, #7
 810b27c:	4904      	ldr	r1, [pc, #16]	@ (810b290 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810b27e:	5ccb      	ldrb	r3, [r1, r3]
 810b280:	f003 031f 	and.w	r3, r3, #31
 810b284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810b288:	4618      	mov	r0, r3
 810b28a:	bd80      	pop	{r7, pc}
 810b28c:	58024400 	.word	0x58024400
 810b290:	08112094 	.word	0x08112094

0810b294 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810b294:	b480      	push	{r7}
 810b296:	b089      	sub	sp, #36	@ 0x24
 810b298:	af00      	add	r7, sp, #0
 810b29a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b29c:	4ba1      	ldr	r3, [pc, #644]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b2a0:	f003 0303 	and.w	r3, r3, #3
 810b2a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810b2a6:	4b9f      	ldr	r3, [pc, #636]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b2aa:	0b1b      	lsrs	r3, r3, #12
 810b2ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810b2b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810b2b2:	4b9c      	ldr	r3, [pc, #624]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b2b6:	091b      	lsrs	r3, r3, #4
 810b2b8:	f003 0301 	and.w	r3, r3, #1
 810b2bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810b2be:	4b99      	ldr	r3, [pc, #612]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b2c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810b2c2:	08db      	lsrs	r3, r3, #3
 810b2c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b2c8:	693a      	ldr	r2, [r7, #16]
 810b2ca:	fb02 f303 	mul.w	r3, r2, r3
 810b2ce:	ee07 3a90 	vmov	s15, r3
 810b2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b2d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810b2da:	697b      	ldr	r3, [r7, #20]
 810b2dc:	2b00      	cmp	r3, #0
 810b2de:	f000 8111 	beq.w	810b504 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810b2e2:	69bb      	ldr	r3, [r7, #24]
 810b2e4:	2b02      	cmp	r3, #2
 810b2e6:	f000 8083 	beq.w	810b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810b2ea:	69bb      	ldr	r3, [r7, #24]
 810b2ec:	2b02      	cmp	r3, #2
 810b2ee:	f200 80a1 	bhi.w	810b434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810b2f2:	69bb      	ldr	r3, [r7, #24]
 810b2f4:	2b00      	cmp	r3, #0
 810b2f6:	d003      	beq.n	810b300 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810b2f8:	69bb      	ldr	r3, [r7, #24]
 810b2fa:	2b01      	cmp	r3, #1
 810b2fc:	d056      	beq.n	810b3ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810b2fe:	e099      	b.n	810b434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b300:	4b88      	ldr	r3, [pc, #544]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b302:	681b      	ldr	r3, [r3, #0]
 810b304:	f003 0320 	and.w	r3, r3, #32
 810b308:	2b00      	cmp	r3, #0
 810b30a:	d02d      	beq.n	810b368 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b30c:	4b85      	ldr	r3, [pc, #532]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b30e:	681b      	ldr	r3, [r3, #0]
 810b310:	08db      	lsrs	r3, r3, #3
 810b312:	f003 0303 	and.w	r3, r3, #3
 810b316:	4a84      	ldr	r2, [pc, #528]	@ (810b528 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810b318:	fa22 f303 	lsr.w	r3, r2, r3
 810b31c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810b31e:	68bb      	ldr	r3, [r7, #8]
 810b320:	ee07 3a90 	vmov	s15, r3
 810b324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b328:	697b      	ldr	r3, [r7, #20]
 810b32a:	ee07 3a90 	vmov	s15, r3
 810b32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b336:	4b7b      	ldr	r3, [pc, #492]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b33e:	ee07 3a90 	vmov	s15, r3
 810b342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b346:	ed97 6a03 	vldr	s12, [r7, #12]
 810b34a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810b52c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b362:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810b366:	e087      	b.n	810b478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810b368:	697b      	ldr	r3, [r7, #20]
 810b36a:	ee07 3a90 	vmov	s15, r3
 810b36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b372:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810b530 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810b376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b37a:	4b6a      	ldr	r3, [pc, #424]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b382:	ee07 3a90 	vmov	s15, r3
 810b386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b38a:	ed97 6a03 	vldr	s12, [r7, #12]
 810b38e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810b52c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b3aa:	e065      	b.n	810b478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810b3ac:	697b      	ldr	r3, [r7, #20]
 810b3ae:	ee07 3a90 	vmov	s15, r3
 810b3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b3b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810b534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b3be:	4b59      	ldr	r3, [pc, #356]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b3c6:	ee07 3a90 	vmov	s15, r3
 810b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 810b3d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810b52c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b3ee:	e043      	b.n	810b478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810b3f0:	697b      	ldr	r3, [r7, #20]
 810b3f2:	ee07 3a90 	vmov	s15, r3
 810b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b3fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810b538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b402:	4b48      	ldr	r3, [pc, #288]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b40a:	ee07 3a90 	vmov	s15, r3
 810b40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b412:	ed97 6a03 	vldr	s12, [r7, #12]
 810b416:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810b52c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b432:	e021      	b.n	810b478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810b434:	697b      	ldr	r3, [r7, #20]
 810b436:	ee07 3a90 	vmov	s15, r3
 810b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b43e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810b534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b446:	4b37      	ldr	r3, [pc, #220]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b44e:	ee07 3a90 	vmov	s15, r3
 810b452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b456:	ed97 6a03 	vldr	s12, [r7, #12]
 810b45a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810b52c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b476:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810b478:	4b2a      	ldr	r3, [pc, #168]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b47c:	0a5b      	lsrs	r3, r3, #9
 810b47e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b482:	ee07 3a90 	vmov	s15, r3
 810b486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b48a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b48e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b492:	edd7 6a07 	vldr	s13, [r7, #28]
 810b496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b49e:	ee17 2a90 	vmov	r2, s15
 810b4a2:	687b      	ldr	r3, [r7, #4]
 810b4a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810b4a6:	4b1f      	ldr	r3, [pc, #124]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b4aa:	0c1b      	lsrs	r3, r3, #16
 810b4ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b4b0:	ee07 3a90 	vmov	s15, r3
 810b4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b4b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b4bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b4c0:	edd7 6a07 	vldr	s13, [r7, #28]
 810b4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b4cc:	ee17 2a90 	vmov	r2, s15
 810b4d0:	687b      	ldr	r3, [r7, #4]
 810b4d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810b4d4:	4b13      	ldr	r3, [pc, #76]	@ (810b524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b4d8:	0e1b      	lsrs	r3, r3, #24
 810b4da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b4de:	ee07 3a90 	vmov	s15, r3
 810b4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b4e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b4ee:	edd7 6a07 	vldr	s13, [r7, #28]
 810b4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b4fa:	ee17 2a90 	vmov	r2, s15
 810b4fe:	687b      	ldr	r3, [r7, #4]
 810b500:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810b502:	e008      	b.n	810b516 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810b504:	687b      	ldr	r3, [r7, #4]
 810b506:	2200      	movs	r2, #0
 810b508:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810b50a:	687b      	ldr	r3, [r7, #4]
 810b50c:	2200      	movs	r2, #0
 810b50e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810b510:	687b      	ldr	r3, [r7, #4]
 810b512:	2200      	movs	r2, #0
 810b514:	609a      	str	r2, [r3, #8]
}
 810b516:	bf00      	nop
 810b518:	3724      	adds	r7, #36	@ 0x24
 810b51a:	46bd      	mov	sp, r7
 810b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b520:	4770      	bx	lr
 810b522:	bf00      	nop
 810b524:	58024400 	.word	0x58024400
 810b528:	03d09000 	.word	0x03d09000
 810b52c:	46000000 	.word	0x46000000
 810b530:	4c742400 	.word	0x4c742400
 810b534:	4a742400 	.word	0x4a742400
 810b538:	4af42400 	.word	0x4af42400

0810b53c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810b53c:	b480      	push	{r7}
 810b53e:	b089      	sub	sp, #36	@ 0x24
 810b540:	af00      	add	r7, sp, #0
 810b542:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b544:	4ba1      	ldr	r3, [pc, #644]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b548:	f003 0303 	and.w	r3, r3, #3
 810b54c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810b54e:	4b9f      	ldr	r3, [pc, #636]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b552:	0d1b      	lsrs	r3, r3, #20
 810b554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810b558:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810b55a:	4b9c      	ldr	r3, [pc, #624]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b55e:	0a1b      	lsrs	r3, r3, #8
 810b560:	f003 0301 	and.w	r3, r3, #1
 810b564:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810b566:	4b99      	ldr	r3, [pc, #612]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810b56a:	08db      	lsrs	r3, r3, #3
 810b56c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b570:	693a      	ldr	r2, [r7, #16]
 810b572:	fb02 f303 	mul.w	r3, r2, r3
 810b576:	ee07 3a90 	vmov	s15, r3
 810b57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b57e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810b582:	697b      	ldr	r3, [r7, #20]
 810b584:	2b00      	cmp	r3, #0
 810b586:	f000 8111 	beq.w	810b7ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810b58a:	69bb      	ldr	r3, [r7, #24]
 810b58c:	2b02      	cmp	r3, #2
 810b58e:	f000 8083 	beq.w	810b698 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810b592:	69bb      	ldr	r3, [r7, #24]
 810b594:	2b02      	cmp	r3, #2
 810b596:	f200 80a1 	bhi.w	810b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810b59a:	69bb      	ldr	r3, [r7, #24]
 810b59c:	2b00      	cmp	r3, #0
 810b59e:	d003      	beq.n	810b5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810b5a0:	69bb      	ldr	r3, [r7, #24]
 810b5a2:	2b01      	cmp	r3, #1
 810b5a4:	d056      	beq.n	810b654 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810b5a6:	e099      	b.n	810b6dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b5a8:	4b88      	ldr	r3, [pc, #544]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	f003 0320 	and.w	r3, r3, #32
 810b5b0:	2b00      	cmp	r3, #0
 810b5b2:	d02d      	beq.n	810b610 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b5b4:	4b85      	ldr	r3, [pc, #532]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b5b6:	681b      	ldr	r3, [r3, #0]
 810b5b8:	08db      	lsrs	r3, r3, #3
 810b5ba:	f003 0303 	and.w	r3, r3, #3
 810b5be:	4a84      	ldr	r2, [pc, #528]	@ (810b7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810b5c0:	fa22 f303 	lsr.w	r3, r2, r3
 810b5c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810b5c6:	68bb      	ldr	r3, [r7, #8]
 810b5c8:	ee07 3a90 	vmov	s15, r3
 810b5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b5d0:	697b      	ldr	r3, [r7, #20]
 810b5d2:	ee07 3a90 	vmov	s15, r3
 810b5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b5de:	4b7b      	ldr	r3, [pc, #492]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b5e6:	ee07 3a90 	vmov	s15, r3
 810b5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 810b5f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b606:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b60a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810b60e:	e087      	b.n	810b720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810b610:	697b      	ldr	r3, [r7, #20]
 810b612:	ee07 3a90 	vmov	s15, r3
 810b616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b61a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810b7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810b61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b622:	4b6a      	ldr	r3, [pc, #424]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b62a:	ee07 3a90 	vmov	s15, r3
 810b62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b632:	ed97 6a03 	vldr	s12, [r7, #12]
 810b636:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b652:	e065      	b.n	810b720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810b654:	697b      	ldr	r3, [r7, #20]
 810b656:	ee07 3a90 	vmov	s15, r3
 810b65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b65e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810b7dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b666:	4b59      	ldr	r3, [pc, #356]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b66e:	ee07 3a90 	vmov	s15, r3
 810b672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b676:	ed97 6a03 	vldr	s12, [r7, #12]
 810b67a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b696:	e043      	b.n	810b720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810b698:	697b      	ldr	r3, [r7, #20]
 810b69a:	ee07 3a90 	vmov	s15, r3
 810b69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810b7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810b6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b6aa:	4b48      	ldr	r3, [pc, #288]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b6b2:	ee07 3a90 	vmov	s15, r3
 810b6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 810b6be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b6ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b6d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b6da:	e021      	b.n	810b720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810b6dc:	697b      	ldr	r3, [r7, #20]
 810b6de:	ee07 3a90 	vmov	s15, r3
 810b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810b7dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b6ee:	4b37      	ldr	r3, [pc, #220]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b6f6:	ee07 3a90 	vmov	s15, r3
 810b6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 810b702:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b70e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b716:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b71a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b71e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810b720:	4b2a      	ldr	r3, [pc, #168]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b724:	0a5b      	lsrs	r3, r3, #9
 810b726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b72a:	ee07 3a90 	vmov	s15, r3
 810b72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b736:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b73a:	edd7 6a07 	vldr	s13, [r7, #28]
 810b73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b746:	ee17 2a90 	vmov	r2, s15
 810b74a:	687b      	ldr	r3, [r7, #4]
 810b74c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810b74e:	4b1f      	ldr	r3, [pc, #124]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b752:	0c1b      	lsrs	r3, r3, #16
 810b754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b758:	ee07 3a90 	vmov	s15, r3
 810b75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b764:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b768:	edd7 6a07 	vldr	s13, [r7, #28]
 810b76c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b774:	ee17 2a90 	vmov	r2, s15
 810b778:	687b      	ldr	r3, [r7, #4]
 810b77a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810b77c:	4b13      	ldr	r3, [pc, #76]	@ (810b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810b780:	0e1b      	lsrs	r3, r3, #24
 810b782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b786:	ee07 3a90 	vmov	s15, r3
 810b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b78e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b792:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b796:	edd7 6a07 	vldr	s13, [r7, #28]
 810b79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b79e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b7a2:	ee17 2a90 	vmov	r2, s15
 810b7a6:	687b      	ldr	r3, [r7, #4]
 810b7a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810b7aa:	e008      	b.n	810b7be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810b7ac:	687b      	ldr	r3, [r7, #4]
 810b7ae:	2200      	movs	r2, #0
 810b7b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810b7b2:	687b      	ldr	r3, [r7, #4]
 810b7b4:	2200      	movs	r2, #0
 810b7b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810b7b8:	687b      	ldr	r3, [r7, #4]
 810b7ba:	2200      	movs	r2, #0
 810b7bc:	609a      	str	r2, [r3, #8]
}
 810b7be:	bf00      	nop
 810b7c0:	3724      	adds	r7, #36	@ 0x24
 810b7c2:	46bd      	mov	sp, r7
 810b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7c8:	4770      	bx	lr
 810b7ca:	bf00      	nop
 810b7cc:	58024400 	.word	0x58024400
 810b7d0:	03d09000 	.word	0x03d09000
 810b7d4:	46000000 	.word	0x46000000
 810b7d8:	4c742400 	.word	0x4c742400
 810b7dc:	4a742400 	.word	0x4a742400
 810b7e0:	4af42400 	.word	0x4af42400

0810b7e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810b7e4:	b480      	push	{r7}
 810b7e6:	b089      	sub	sp, #36	@ 0x24
 810b7e8:	af00      	add	r7, sp, #0
 810b7ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b7ec:	4ba0      	ldr	r3, [pc, #640]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b7f0:	f003 0303 	and.w	r3, r3, #3
 810b7f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810b7f6:	4b9e      	ldr	r3, [pc, #632]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b7fa:	091b      	lsrs	r3, r3, #4
 810b7fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810b800:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810b802:	4b9b      	ldr	r3, [pc, #620]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b806:	f003 0301 	and.w	r3, r3, #1
 810b80a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810b80c:	4b98      	ldr	r3, [pc, #608]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b80e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810b810:	08db      	lsrs	r3, r3, #3
 810b812:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b816:	693a      	ldr	r2, [r7, #16]
 810b818:	fb02 f303 	mul.w	r3, r2, r3
 810b81c:	ee07 3a90 	vmov	s15, r3
 810b820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b824:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810b828:	697b      	ldr	r3, [r7, #20]
 810b82a:	2b00      	cmp	r3, #0
 810b82c:	f000 8111 	beq.w	810ba52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810b830:	69bb      	ldr	r3, [r7, #24]
 810b832:	2b02      	cmp	r3, #2
 810b834:	f000 8083 	beq.w	810b93e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810b838:	69bb      	ldr	r3, [r7, #24]
 810b83a:	2b02      	cmp	r3, #2
 810b83c:	f200 80a1 	bhi.w	810b982 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810b840:	69bb      	ldr	r3, [r7, #24]
 810b842:	2b00      	cmp	r3, #0
 810b844:	d003      	beq.n	810b84e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810b846:	69bb      	ldr	r3, [r7, #24]
 810b848:	2b01      	cmp	r3, #1
 810b84a:	d056      	beq.n	810b8fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810b84c:	e099      	b.n	810b982 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b84e:	4b88      	ldr	r3, [pc, #544]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b850:	681b      	ldr	r3, [r3, #0]
 810b852:	f003 0320 	and.w	r3, r3, #32
 810b856:	2b00      	cmp	r3, #0
 810b858:	d02d      	beq.n	810b8b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b85a:	4b85      	ldr	r3, [pc, #532]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b85c:	681b      	ldr	r3, [r3, #0]
 810b85e:	08db      	lsrs	r3, r3, #3
 810b860:	f003 0303 	and.w	r3, r3, #3
 810b864:	4a83      	ldr	r2, [pc, #524]	@ (810ba74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810b866:	fa22 f303 	lsr.w	r3, r2, r3
 810b86a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b86c:	68bb      	ldr	r3, [r7, #8]
 810b86e:	ee07 3a90 	vmov	s15, r3
 810b872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b876:	697b      	ldr	r3, [r7, #20]
 810b878:	ee07 3a90 	vmov	s15, r3
 810b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b884:	4b7a      	ldr	r3, [pc, #488]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b88c:	ee07 3a90 	vmov	s15, r3
 810b890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b894:	ed97 6a03 	vldr	s12, [r7, #12]
 810b898:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810ba78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b89c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b8a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b8a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b8a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b8ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b8b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810b8b4:	e087      	b.n	810b9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b8b6:	697b      	ldr	r3, [r7, #20]
 810b8b8:	ee07 3a90 	vmov	s15, r3
 810b8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b8c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810ba7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810b8c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b8c8:	4b69      	ldr	r3, [pc, #420]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b8d0:	ee07 3a90 	vmov	s15, r3
 810b8d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b8d8:	ed97 6a03 	vldr	s12, [r7, #12]
 810b8dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810ba78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b8e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b8e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b8e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b8ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b8f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b8f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b8f8:	e065      	b.n	810b9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b8fa:	697b      	ldr	r3, [r7, #20]
 810b8fc:	ee07 3a90 	vmov	s15, r3
 810b900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b904:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810ba80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810b908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b90c:	4b58      	ldr	r3, [pc, #352]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b914:	ee07 3a90 	vmov	s15, r3
 810b918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b91c:	ed97 6a03 	vldr	s12, [r7, #12]
 810b920:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810ba78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b92c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b934:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b93c:	e043      	b.n	810b9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b93e:	697b      	ldr	r3, [r7, #20]
 810b940:	ee07 3a90 	vmov	s15, r3
 810b944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b948:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810ba84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810b94c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b950:	4b47      	ldr	r3, [pc, #284]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b958:	ee07 3a90 	vmov	s15, r3
 810b95c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b960:	ed97 6a03 	vldr	s12, [r7, #12]
 810b964:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810ba78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b96c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b970:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b978:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b97c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b980:	e021      	b.n	810b9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b982:	697b      	ldr	r3, [r7, #20]
 810b984:	ee07 3a90 	vmov	s15, r3
 810b988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b98c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810ba7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810b990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b994:	4b36      	ldr	r3, [pc, #216]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b99c:	ee07 3a90 	vmov	s15, r3
 810b9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b9a4:	ed97 6a03 	vldr	s12, [r7, #12]
 810b9a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810ba78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b9ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b9b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b9b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b9b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b9bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b9c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810b9c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810b9c6:	4b2a      	ldr	r3, [pc, #168]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b9ca:	0a5b      	lsrs	r3, r3, #9
 810b9cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b9d0:	ee07 3a90 	vmov	s15, r3
 810b9d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b9d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810b9dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b9e0:	edd7 6a07 	vldr	s13, [r7, #28]
 810b9e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b9ec:	ee17 2a90 	vmov	r2, s15
 810b9f0:	687b      	ldr	r3, [r7, #4]
 810b9f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810b9f4:	4b1e      	ldr	r3, [pc, #120]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b9f8:	0c1b      	lsrs	r3, r3, #16
 810b9fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b9fe:	ee07 3a90 	vmov	s15, r3
 810ba02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ba06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810ba0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810ba0e:	edd7 6a07 	vldr	s13, [r7, #28]
 810ba12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810ba16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810ba1a:	ee17 2a90 	vmov	r2, s15
 810ba1e:	687b      	ldr	r3, [r7, #4]
 810ba20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810ba22:	4b13      	ldr	r3, [pc, #76]	@ (810ba70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ba26:	0e1b      	lsrs	r3, r3, #24
 810ba28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810ba2c:	ee07 3a90 	vmov	s15, r3
 810ba30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ba34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810ba38:	ee37 7a87 	vadd.f32	s14, s15, s14
 810ba3c:	edd7 6a07 	vldr	s13, [r7, #28]
 810ba40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810ba44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810ba48:	ee17 2a90 	vmov	r2, s15
 810ba4c:	687b      	ldr	r3, [r7, #4]
 810ba4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810ba50:	e008      	b.n	810ba64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810ba52:	687b      	ldr	r3, [r7, #4]
 810ba54:	2200      	movs	r2, #0
 810ba56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810ba58:	687b      	ldr	r3, [r7, #4]
 810ba5a:	2200      	movs	r2, #0
 810ba5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	2200      	movs	r2, #0
 810ba62:	609a      	str	r2, [r3, #8]
}
 810ba64:	bf00      	nop
 810ba66:	3724      	adds	r7, #36	@ 0x24
 810ba68:	46bd      	mov	sp, r7
 810ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba6e:	4770      	bx	lr
 810ba70:	58024400 	.word	0x58024400
 810ba74:	03d09000 	.word	0x03d09000
 810ba78:	46000000 	.word	0x46000000
 810ba7c:	4c742400 	.word	0x4c742400
 810ba80:	4a742400 	.word	0x4a742400
 810ba84:	4af42400 	.word	0x4af42400

0810ba88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810ba88:	b580      	push	{r7, lr}
 810ba8a:	b084      	sub	sp, #16
 810ba8c:	af00      	add	r7, sp, #0
 810ba8e:	6078      	str	r0, [r7, #4]
 810ba90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810ba92:	2300      	movs	r3, #0
 810ba94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810ba96:	4b54      	ldr	r3, [pc, #336]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810ba98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ba9a:	f003 0303 	and.w	r3, r3, #3
 810ba9e:	2b03      	cmp	r3, #3
 810baa0:	d101      	bne.n	810baa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810baa2:	2301      	movs	r3, #1
 810baa4:	e09b      	b.n	810bbde <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810baa6:	4b50      	ldr	r3, [pc, #320]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810baa8:	681b      	ldr	r3, [r3, #0]
 810baaa:	4a4f      	ldr	r2, [pc, #316]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810baac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810bab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bab2:	f7f7 f849 	bl	8102b48 <HAL_GetTick>
 810bab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810bab8:	e008      	b.n	810bacc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810baba:	f7f7 f845 	bl	8102b48 <HAL_GetTick>
 810babe:	4602      	mov	r2, r0
 810bac0:	68bb      	ldr	r3, [r7, #8]
 810bac2:	1ad3      	subs	r3, r2, r3
 810bac4:	2b02      	cmp	r3, #2
 810bac6:	d901      	bls.n	810bacc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810bac8:	2303      	movs	r3, #3
 810baca:	e088      	b.n	810bbde <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810bacc:	4b46      	ldr	r3, [pc, #280]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bace:	681b      	ldr	r3, [r3, #0]
 810bad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bad4:	2b00      	cmp	r3, #0
 810bad6:	d1f0      	bne.n	810baba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810bad8:	4b43      	ldr	r3, [pc, #268]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810badc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810bae0:	687b      	ldr	r3, [r7, #4]
 810bae2:	681b      	ldr	r3, [r3, #0]
 810bae4:	031b      	lsls	r3, r3, #12
 810bae6:	4940      	ldr	r1, [pc, #256]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bae8:	4313      	orrs	r3, r2
 810baea:	628b      	str	r3, [r1, #40]	@ 0x28
 810baec:	687b      	ldr	r3, [r7, #4]
 810baee:	685b      	ldr	r3, [r3, #4]
 810baf0:	3b01      	subs	r3, #1
 810baf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810baf6:	687b      	ldr	r3, [r7, #4]
 810baf8:	689b      	ldr	r3, [r3, #8]
 810bafa:	3b01      	subs	r3, #1
 810bafc:	025b      	lsls	r3, r3, #9
 810bafe:	b29b      	uxth	r3, r3
 810bb00:	431a      	orrs	r2, r3
 810bb02:	687b      	ldr	r3, [r7, #4]
 810bb04:	68db      	ldr	r3, [r3, #12]
 810bb06:	3b01      	subs	r3, #1
 810bb08:	041b      	lsls	r3, r3, #16
 810bb0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810bb0e:	431a      	orrs	r2, r3
 810bb10:	687b      	ldr	r3, [r7, #4]
 810bb12:	691b      	ldr	r3, [r3, #16]
 810bb14:	3b01      	subs	r3, #1
 810bb16:	061b      	lsls	r3, r3, #24
 810bb18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810bb1c:	4932      	ldr	r1, [pc, #200]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb1e:	4313      	orrs	r3, r2
 810bb20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810bb22:	4b31      	ldr	r3, [pc, #196]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810bb2a:	687b      	ldr	r3, [r7, #4]
 810bb2c:	695b      	ldr	r3, [r3, #20]
 810bb2e:	492e      	ldr	r1, [pc, #184]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb30:	4313      	orrs	r3, r2
 810bb32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810bb34:	4b2c      	ldr	r3, [pc, #176]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb38:	f023 0220 	bic.w	r2, r3, #32
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	699b      	ldr	r3, [r3, #24]
 810bb40:	4929      	ldr	r1, [pc, #164]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb42:	4313      	orrs	r3, r2
 810bb44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810bb46:	4b28      	ldr	r3, [pc, #160]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb4a:	4a27      	ldr	r2, [pc, #156]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb4c:	f023 0310 	bic.w	r3, r3, #16
 810bb50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810bb52:	4b25      	ldr	r3, [pc, #148]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810bb56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810bb5a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810bb5e:	687a      	ldr	r2, [r7, #4]
 810bb60:	69d2      	ldr	r2, [r2, #28]
 810bb62:	00d2      	lsls	r2, r2, #3
 810bb64:	4920      	ldr	r1, [pc, #128]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb66:	4313      	orrs	r3, r2
 810bb68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810bb6a:	4b1f      	ldr	r3, [pc, #124]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb6e:	4a1e      	ldr	r2, [pc, #120]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb70:	f043 0310 	orr.w	r3, r3, #16
 810bb74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810bb76:	683b      	ldr	r3, [r7, #0]
 810bb78:	2b00      	cmp	r3, #0
 810bb7a:	d106      	bne.n	810bb8a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810bb7c:	4b1a      	ldr	r3, [pc, #104]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb80:	4a19      	ldr	r2, [pc, #100]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810bb86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bb88:	e00f      	b.n	810bbaa <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810bb8a:	683b      	ldr	r3, [r7, #0]
 810bb8c:	2b01      	cmp	r3, #1
 810bb8e:	d106      	bne.n	810bb9e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810bb90:	4b15      	ldr	r3, [pc, #84]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb94:	4a14      	ldr	r2, [pc, #80]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bb96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810bb9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bb9c:	e005      	b.n	810bbaa <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810bb9e:	4b12      	ldr	r3, [pc, #72]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bba2:	4a11      	ldr	r2, [pc, #68]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810bba8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810bbaa:	4b0f      	ldr	r3, [pc, #60]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bbac:	681b      	ldr	r3, [r3, #0]
 810bbae:	4a0e      	ldr	r2, [pc, #56]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bbb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810bbb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bbb6:	f7f6 ffc7 	bl	8102b48 <HAL_GetTick>
 810bbba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810bbbc:	e008      	b.n	810bbd0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810bbbe:	f7f6 ffc3 	bl	8102b48 <HAL_GetTick>
 810bbc2:	4602      	mov	r2, r0
 810bbc4:	68bb      	ldr	r3, [r7, #8]
 810bbc6:	1ad3      	subs	r3, r2, r3
 810bbc8:	2b02      	cmp	r3, #2
 810bbca:	d901      	bls.n	810bbd0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bbcc:	2303      	movs	r3, #3
 810bbce:	e006      	b.n	810bbde <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810bbd0:	4b05      	ldr	r3, [pc, #20]	@ (810bbe8 <RCCEx_PLL2_Config+0x160>)
 810bbd2:	681b      	ldr	r3, [r3, #0]
 810bbd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bbd8:	2b00      	cmp	r3, #0
 810bbda:	d0f0      	beq.n	810bbbe <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810bbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 810bbde:	4618      	mov	r0, r3
 810bbe0:	3710      	adds	r7, #16
 810bbe2:	46bd      	mov	sp, r7
 810bbe4:	bd80      	pop	{r7, pc}
 810bbe6:	bf00      	nop
 810bbe8:	58024400 	.word	0x58024400

0810bbec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810bbec:	b580      	push	{r7, lr}
 810bbee:	b084      	sub	sp, #16
 810bbf0:	af00      	add	r7, sp, #0
 810bbf2:	6078      	str	r0, [r7, #4]
 810bbf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810bbf6:	2300      	movs	r3, #0
 810bbf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810bbfa:	4b54      	ldr	r3, [pc, #336]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bbfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bbfe:	f003 0303 	and.w	r3, r3, #3
 810bc02:	2b03      	cmp	r3, #3
 810bc04:	d101      	bne.n	810bc0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810bc06:	2301      	movs	r3, #1
 810bc08:	e09b      	b.n	810bd42 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810bc0a:	4b50      	ldr	r3, [pc, #320]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc0c:	681b      	ldr	r3, [r3, #0]
 810bc0e:	4a4f      	ldr	r2, [pc, #316]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810bc14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bc16:	f7f6 ff97 	bl	8102b48 <HAL_GetTick>
 810bc1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810bc1c:	e008      	b.n	810bc30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810bc1e:	f7f6 ff93 	bl	8102b48 <HAL_GetTick>
 810bc22:	4602      	mov	r2, r0
 810bc24:	68bb      	ldr	r3, [r7, #8]
 810bc26:	1ad3      	subs	r3, r2, r3
 810bc28:	2b02      	cmp	r3, #2
 810bc2a:	d901      	bls.n	810bc30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810bc2c:	2303      	movs	r3, #3
 810bc2e:	e088      	b.n	810bd42 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810bc30:	4b46      	ldr	r3, [pc, #280]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc32:	681b      	ldr	r3, [r3, #0]
 810bc34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bc38:	2b00      	cmp	r3, #0
 810bc3a:	d1f0      	bne.n	810bc1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810bc3c:	4b43      	ldr	r3, [pc, #268]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bc40:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810bc44:	687b      	ldr	r3, [r7, #4]
 810bc46:	681b      	ldr	r3, [r3, #0]
 810bc48:	051b      	lsls	r3, r3, #20
 810bc4a:	4940      	ldr	r1, [pc, #256]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc4c:	4313      	orrs	r3, r2
 810bc4e:	628b      	str	r3, [r1, #40]	@ 0x28
 810bc50:	687b      	ldr	r3, [r7, #4]
 810bc52:	685b      	ldr	r3, [r3, #4]
 810bc54:	3b01      	subs	r3, #1
 810bc56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bc5a:	687b      	ldr	r3, [r7, #4]
 810bc5c:	689b      	ldr	r3, [r3, #8]
 810bc5e:	3b01      	subs	r3, #1
 810bc60:	025b      	lsls	r3, r3, #9
 810bc62:	b29b      	uxth	r3, r3
 810bc64:	431a      	orrs	r2, r3
 810bc66:	687b      	ldr	r3, [r7, #4]
 810bc68:	68db      	ldr	r3, [r3, #12]
 810bc6a:	3b01      	subs	r3, #1
 810bc6c:	041b      	lsls	r3, r3, #16
 810bc6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810bc72:	431a      	orrs	r2, r3
 810bc74:	687b      	ldr	r3, [r7, #4]
 810bc76:	691b      	ldr	r3, [r3, #16]
 810bc78:	3b01      	subs	r3, #1
 810bc7a:	061b      	lsls	r3, r3, #24
 810bc7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810bc80:	4932      	ldr	r1, [pc, #200]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc82:	4313      	orrs	r3, r2
 810bc84:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810bc86:	4b31      	ldr	r3, [pc, #196]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bc8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810bc8e:	687b      	ldr	r3, [r7, #4]
 810bc90:	695b      	ldr	r3, [r3, #20]
 810bc92:	492e      	ldr	r1, [pc, #184]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc94:	4313      	orrs	r3, r2
 810bc96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810bc98:	4b2c      	ldr	r3, [pc, #176]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bc9c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810bca0:	687b      	ldr	r3, [r7, #4]
 810bca2:	699b      	ldr	r3, [r3, #24]
 810bca4:	4929      	ldr	r1, [pc, #164]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bca6:	4313      	orrs	r3, r2
 810bca8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810bcaa:	4b28      	ldr	r3, [pc, #160]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bcae:	4a27      	ldr	r2, [pc, #156]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810bcb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810bcb6:	4b25      	ldr	r3, [pc, #148]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810bcba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810bcbe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810bcc2:	687a      	ldr	r2, [r7, #4]
 810bcc4:	69d2      	ldr	r2, [r2, #28]
 810bcc6:	00d2      	lsls	r2, r2, #3
 810bcc8:	4920      	ldr	r1, [pc, #128]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcca:	4313      	orrs	r3, r2
 810bccc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810bcce:	4b1f      	ldr	r3, [pc, #124]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bcd2:	4a1e      	ldr	r2, [pc, #120]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810bcd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810bcda:	683b      	ldr	r3, [r7, #0]
 810bcdc:	2b00      	cmp	r3, #0
 810bcde:	d106      	bne.n	810bcee <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810bce0:	4b1a      	ldr	r3, [pc, #104]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bce4:	4a19      	ldr	r2, [pc, #100]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bce6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810bcea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bcec:	e00f      	b.n	810bd0e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810bcee:	683b      	ldr	r3, [r7, #0]
 810bcf0:	2b01      	cmp	r3, #1
 810bcf2:	d106      	bne.n	810bd02 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810bcf4:	4b15      	ldr	r3, [pc, #84]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bcf8:	4a14      	ldr	r2, [pc, #80]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bcfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810bcfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bd00:	e005      	b.n	810bd0e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810bd02:	4b12      	ldr	r3, [pc, #72]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bd06:	4a11      	ldr	r2, [pc, #68]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bd08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810bd0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810bd0e:	4b0f      	ldr	r3, [pc, #60]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bd10:	681b      	ldr	r3, [r3, #0]
 810bd12:	4a0e      	ldr	r2, [pc, #56]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bd14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bd18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bd1a:	f7f6 ff15 	bl	8102b48 <HAL_GetTick>
 810bd1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bd20:	e008      	b.n	810bd34 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810bd22:	f7f6 ff11 	bl	8102b48 <HAL_GetTick>
 810bd26:	4602      	mov	r2, r0
 810bd28:	68bb      	ldr	r3, [r7, #8]
 810bd2a:	1ad3      	subs	r3, r2, r3
 810bd2c:	2b02      	cmp	r3, #2
 810bd2e:	d901      	bls.n	810bd34 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bd30:	2303      	movs	r3, #3
 810bd32:	e006      	b.n	810bd42 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bd34:	4b05      	ldr	r3, [pc, #20]	@ (810bd4c <RCCEx_PLL3_Config+0x160>)
 810bd36:	681b      	ldr	r3, [r3, #0]
 810bd38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bd3c:	2b00      	cmp	r3, #0
 810bd3e:	d0f0      	beq.n	810bd22 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810bd40:	7bfb      	ldrb	r3, [r7, #15]
}
 810bd42:	4618      	mov	r0, r3
 810bd44:	3710      	adds	r7, #16
 810bd46:	46bd      	mov	sp, r7
 810bd48:	bd80      	pop	{r7, pc}
 810bd4a:	bf00      	nop
 810bd4c:	58024400 	.word	0x58024400

0810bd50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810bd50:	b580      	push	{r7, lr}
 810bd52:	b082      	sub	sp, #8
 810bd54:	af00      	add	r7, sp, #0
 810bd56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810bd58:	687b      	ldr	r3, [r7, #4]
 810bd5a:	2b00      	cmp	r3, #0
 810bd5c:	d101      	bne.n	810bd62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810bd5e:	2301      	movs	r3, #1
 810bd60:	e049      	b.n	810bdf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810bd62:	687b      	ldr	r3, [r7, #4]
 810bd64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810bd68:	b2db      	uxtb	r3, r3
 810bd6a:	2b00      	cmp	r3, #0
 810bd6c:	d106      	bne.n	810bd7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810bd6e:	687b      	ldr	r3, [r7, #4]
 810bd70:	2200      	movs	r2, #0
 810bd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810bd76:	6878      	ldr	r0, [r7, #4]
 810bd78:	f7f6 fcbc 	bl	81026f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	2202      	movs	r2, #2
 810bd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810bd84:	687b      	ldr	r3, [r7, #4]
 810bd86:	681a      	ldr	r2, [r3, #0]
 810bd88:	687b      	ldr	r3, [r7, #4]
 810bd8a:	3304      	adds	r3, #4
 810bd8c:	4619      	mov	r1, r3
 810bd8e:	4610      	mov	r0, r2
 810bd90:	f000 f96e 	bl	810c070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	2201      	movs	r2, #1
 810bd98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810bd9c:	687b      	ldr	r3, [r7, #4]
 810bd9e:	2201      	movs	r2, #1
 810bda0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810bda4:	687b      	ldr	r3, [r7, #4]
 810bda6:	2201      	movs	r2, #1
 810bda8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810bdac:	687b      	ldr	r3, [r7, #4]
 810bdae:	2201      	movs	r2, #1
 810bdb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810bdb4:	687b      	ldr	r3, [r7, #4]
 810bdb6:	2201      	movs	r2, #1
 810bdb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810bdbc:	687b      	ldr	r3, [r7, #4]
 810bdbe:	2201      	movs	r2, #1
 810bdc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810bdc4:	687b      	ldr	r3, [r7, #4]
 810bdc6:	2201      	movs	r2, #1
 810bdc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810bdcc:	687b      	ldr	r3, [r7, #4]
 810bdce:	2201      	movs	r2, #1
 810bdd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810bdd4:	687b      	ldr	r3, [r7, #4]
 810bdd6:	2201      	movs	r2, #1
 810bdd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810bddc:	687b      	ldr	r3, [r7, #4]
 810bdde:	2201      	movs	r2, #1
 810bde0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810bde4:	687b      	ldr	r3, [r7, #4]
 810bde6:	2201      	movs	r2, #1
 810bde8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810bdec:	687b      	ldr	r3, [r7, #4]
 810bdee:	2201      	movs	r2, #1
 810bdf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810bdf4:	2300      	movs	r3, #0
}
 810bdf6:	4618      	mov	r0, r3
 810bdf8:	3708      	adds	r7, #8
 810bdfa:	46bd      	mov	sp, r7
 810bdfc:	bd80      	pop	{r7, pc}

0810bdfe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810bdfe:	b580      	push	{r7, lr}
 810be00:	b084      	sub	sp, #16
 810be02:	af00      	add	r7, sp, #0
 810be04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810be06:	687b      	ldr	r3, [r7, #4]
 810be08:	681b      	ldr	r3, [r3, #0]
 810be0a:	68db      	ldr	r3, [r3, #12]
 810be0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	681b      	ldr	r3, [r3, #0]
 810be12:	691b      	ldr	r3, [r3, #16]
 810be14:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810be16:	68bb      	ldr	r3, [r7, #8]
 810be18:	f003 0302 	and.w	r3, r3, #2
 810be1c:	2b00      	cmp	r3, #0
 810be1e:	d020      	beq.n	810be62 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810be20:	68fb      	ldr	r3, [r7, #12]
 810be22:	f003 0302 	and.w	r3, r3, #2
 810be26:	2b00      	cmp	r3, #0
 810be28:	d01b      	beq.n	810be62 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810be2a:	687b      	ldr	r3, [r7, #4]
 810be2c:	681b      	ldr	r3, [r3, #0]
 810be2e:	f06f 0202 	mvn.w	r2, #2
 810be32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810be34:	687b      	ldr	r3, [r7, #4]
 810be36:	2201      	movs	r2, #1
 810be38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810be3a:	687b      	ldr	r3, [r7, #4]
 810be3c:	681b      	ldr	r3, [r3, #0]
 810be3e:	699b      	ldr	r3, [r3, #24]
 810be40:	f003 0303 	and.w	r3, r3, #3
 810be44:	2b00      	cmp	r3, #0
 810be46:	d003      	beq.n	810be50 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810be48:	6878      	ldr	r0, [r7, #4]
 810be4a:	f000 f8f3 	bl	810c034 <HAL_TIM_IC_CaptureCallback>
 810be4e:	e005      	b.n	810be5c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810be50:	6878      	ldr	r0, [r7, #4]
 810be52:	f000 f8e5 	bl	810c020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810be56:	6878      	ldr	r0, [r7, #4]
 810be58:	f000 f8f6 	bl	810c048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810be5c:	687b      	ldr	r3, [r7, #4]
 810be5e:	2200      	movs	r2, #0
 810be60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810be62:	68bb      	ldr	r3, [r7, #8]
 810be64:	f003 0304 	and.w	r3, r3, #4
 810be68:	2b00      	cmp	r3, #0
 810be6a:	d020      	beq.n	810beae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810be6c:	68fb      	ldr	r3, [r7, #12]
 810be6e:	f003 0304 	and.w	r3, r3, #4
 810be72:	2b00      	cmp	r3, #0
 810be74:	d01b      	beq.n	810beae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810be76:	687b      	ldr	r3, [r7, #4]
 810be78:	681b      	ldr	r3, [r3, #0]
 810be7a:	f06f 0204 	mvn.w	r2, #4
 810be7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810be80:	687b      	ldr	r3, [r7, #4]
 810be82:	2202      	movs	r2, #2
 810be84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810be86:	687b      	ldr	r3, [r7, #4]
 810be88:	681b      	ldr	r3, [r3, #0]
 810be8a:	699b      	ldr	r3, [r3, #24]
 810be8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810be90:	2b00      	cmp	r3, #0
 810be92:	d003      	beq.n	810be9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810be94:	6878      	ldr	r0, [r7, #4]
 810be96:	f000 f8cd 	bl	810c034 <HAL_TIM_IC_CaptureCallback>
 810be9a:	e005      	b.n	810bea8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810be9c:	6878      	ldr	r0, [r7, #4]
 810be9e:	f000 f8bf 	bl	810c020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810bea2:	6878      	ldr	r0, [r7, #4]
 810bea4:	f000 f8d0 	bl	810c048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810bea8:	687b      	ldr	r3, [r7, #4]
 810beaa:	2200      	movs	r2, #0
 810beac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810beae:	68bb      	ldr	r3, [r7, #8]
 810beb0:	f003 0308 	and.w	r3, r3, #8
 810beb4:	2b00      	cmp	r3, #0
 810beb6:	d020      	beq.n	810befa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810beb8:	68fb      	ldr	r3, [r7, #12]
 810beba:	f003 0308 	and.w	r3, r3, #8
 810bebe:	2b00      	cmp	r3, #0
 810bec0:	d01b      	beq.n	810befa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810bec2:	687b      	ldr	r3, [r7, #4]
 810bec4:	681b      	ldr	r3, [r3, #0]
 810bec6:	f06f 0208 	mvn.w	r2, #8
 810beca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810becc:	687b      	ldr	r3, [r7, #4]
 810bece:	2204      	movs	r2, #4
 810bed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810bed2:	687b      	ldr	r3, [r7, #4]
 810bed4:	681b      	ldr	r3, [r3, #0]
 810bed6:	69db      	ldr	r3, [r3, #28]
 810bed8:	f003 0303 	and.w	r3, r3, #3
 810bedc:	2b00      	cmp	r3, #0
 810bede:	d003      	beq.n	810bee8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810bee0:	6878      	ldr	r0, [r7, #4]
 810bee2:	f000 f8a7 	bl	810c034 <HAL_TIM_IC_CaptureCallback>
 810bee6:	e005      	b.n	810bef4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810bee8:	6878      	ldr	r0, [r7, #4]
 810beea:	f000 f899 	bl	810c020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810beee:	6878      	ldr	r0, [r7, #4]
 810bef0:	f000 f8aa 	bl	810c048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810bef4:	687b      	ldr	r3, [r7, #4]
 810bef6:	2200      	movs	r2, #0
 810bef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810befa:	68bb      	ldr	r3, [r7, #8]
 810befc:	f003 0310 	and.w	r3, r3, #16
 810bf00:	2b00      	cmp	r3, #0
 810bf02:	d020      	beq.n	810bf46 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810bf04:	68fb      	ldr	r3, [r7, #12]
 810bf06:	f003 0310 	and.w	r3, r3, #16
 810bf0a:	2b00      	cmp	r3, #0
 810bf0c:	d01b      	beq.n	810bf46 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810bf0e:	687b      	ldr	r3, [r7, #4]
 810bf10:	681b      	ldr	r3, [r3, #0]
 810bf12:	f06f 0210 	mvn.w	r2, #16
 810bf16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810bf18:	687b      	ldr	r3, [r7, #4]
 810bf1a:	2208      	movs	r2, #8
 810bf1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810bf1e:	687b      	ldr	r3, [r7, #4]
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	69db      	ldr	r3, [r3, #28]
 810bf24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810bf28:	2b00      	cmp	r3, #0
 810bf2a:	d003      	beq.n	810bf34 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810bf2c:	6878      	ldr	r0, [r7, #4]
 810bf2e:	f000 f881 	bl	810c034 <HAL_TIM_IC_CaptureCallback>
 810bf32:	e005      	b.n	810bf40 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810bf34:	6878      	ldr	r0, [r7, #4]
 810bf36:	f000 f873 	bl	810c020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810bf3a:	6878      	ldr	r0, [r7, #4]
 810bf3c:	f000 f884 	bl	810c048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810bf40:	687b      	ldr	r3, [r7, #4]
 810bf42:	2200      	movs	r2, #0
 810bf44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810bf46:	68bb      	ldr	r3, [r7, #8]
 810bf48:	f003 0301 	and.w	r3, r3, #1
 810bf4c:	2b00      	cmp	r3, #0
 810bf4e:	d00c      	beq.n	810bf6a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810bf50:	68fb      	ldr	r3, [r7, #12]
 810bf52:	f003 0301 	and.w	r3, r3, #1
 810bf56:	2b00      	cmp	r3, #0
 810bf58:	d007      	beq.n	810bf6a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	f06f 0201 	mvn.w	r2, #1
 810bf62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810bf64:	6878      	ldr	r0, [r7, #4]
 810bf66:	f000 f851 	bl	810c00c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810bf6a:	68bb      	ldr	r3, [r7, #8]
 810bf6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bf70:	2b00      	cmp	r3, #0
 810bf72:	d104      	bne.n	810bf7e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810bf74:	68bb      	ldr	r3, [r7, #8]
 810bf76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810bf7a:	2b00      	cmp	r3, #0
 810bf7c:	d00c      	beq.n	810bf98 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810bf7e:	68fb      	ldr	r3, [r7, #12]
 810bf80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bf84:	2b00      	cmp	r3, #0
 810bf86:	d007      	beq.n	810bf98 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	681b      	ldr	r3, [r3, #0]
 810bf8c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810bf90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810bf92:	6878      	ldr	r0, [r7, #4]
 810bf94:	f000 f9a4 	bl	810c2e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810bf98:	68bb      	ldr	r3, [r7, #8]
 810bf9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bf9e:	2b00      	cmp	r3, #0
 810bfa0:	d00c      	beq.n	810bfbc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810bfa2:	68fb      	ldr	r3, [r7, #12]
 810bfa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bfa8:	2b00      	cmp	r3, #0
 810bfaa:	d007      	beq.n	810bfbc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810bfac:	687b      	ldr	r3, [r7, #4]
 810bfae:	681b      	ldr	r3, [r3, #0]
 810bfb0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810bfb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810bfb6:	6878      	ldr	r0, [r7, #4]
 810bfb8:	f000 f99c 	bl	810c2f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810bfbc:	68bb      	ldr	r3, [r7, #8]
 810bfbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bfc2:	2b00      	cmp	r3, #0
 810bfc4:	d00c      	beq.n	810bfe0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810bfc6:	68fb      	ldr	r3, [r7, #12]
 810bfc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bfcc:	2b00      	cmp	r3, #0
 810bfce:	d007      	beq.n	810bfe0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810bfd0:	687b      	ldr	r3, [r7, #4]
 810bfd2:	681b      	ldr	r3, [r3, #0]
 810bfd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810bfd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810bfda:	6878      	ldr	r0, [r7, #4]
 810bfdc:	f000 f83e 	bl	810c05c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810bfe0:	68bb      	ldr	r3, [r7, #8]
 810bfe2:	f003 0320 	and.w	r3, r3, #32
 810bfe6:	2b00      	cmp	r3, #0
 810bfe8:	d00c      	beq.n	810c004 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810bfea:	68fb      	ldr	r3, [r7, #12]
 810bfec:	f003 0320 	and.w	r3, r3, #32
 810bff0:	2b00      	cmp	r3, #0
 810bff2:	d007      	beq.n	810c004 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810bff4:	687b      	ldr	r3, [r7, #4]
 810bff6:	681b      	ldr	r3, [r3, #0]
 810bff8:	f06f 0220 	mvn.w	r2, #32
 810bffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810bffe:	6878      	ldr	r0, [r7, #4]
 810c000:	f000 f964 	bl	810c2cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810c004:	bf00      	nop
 810c006:	3710      	adds	r7, #16
 810c008:	46bd      	mov	sp, r7
 810c00a:	bd80      	pop	{r7, pc}

0810c00c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810c00c:	b480      	push	{r7}
 810c00e:	b083      	sub	sp, #12
 810c010:	af00      	add	r7, sp, #0
 810c012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 810c014:	bf00      	nop
 810c016:	370c      	adds	r7, #12
 810c018:	46bd      	mov	sp, r7
 810c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c01e:	4770      	bx	lr

0810c020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810c020:	b480      	push	{r7}
 810c022:	b083      	sub	sp, #12
 810c024:	af00      	add	r7, sp, #0
 810c026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810c028:	bf00      	nop
 810c02a:	370c      	adds	r7, #12
 810c02c:	46bd      	mov	sp, r7
 810c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c032:	4770      	bx	lr

0810c034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810c034:	b480      	push	{r7}
 810c036:	b083      	sub	sp, #12
 810c038:	af00      	add	r7, sp, #0
 810c03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810c03c:	bf00      	nop
 810c03e:	370c      	adds	r7, #12
 810c040:	46bd      	mov	sp, r7
 810c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c046:	4770      	bx	lr

0810c048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810c048:	b480      	push	{r7}
 810c04a:	b083      	sub	sp, #12
 810c04c:	af00      	add	r7, sp, #0
 810c04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810c050:	bf00      	nop
 810c052:	370c      	adds	r7, #12
 810c054:	46bd      	mov	sp, r7
 810c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c05a:	4770      	bx	lr

0810c05c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810c05c:	b480      	push	{r7}
 810c05e:	b083      	sub	sp, #12
 810c060:	af00      	add	r7, sp, #0
 810c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810c064:	bf00      	nop
 810c066:	370c      	adds	r7, #12
 810c068:	46bd      	mov	sp, r7
 810c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c06e:	4770      	bx	lr

0810c070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810c070:	b480      	push	{r7}
 810c072:	b085      	sub	sp, #20
 810c074:	af00      	add	r7, sp, #0
 810c076:	6078      	str	r0, [r7, #4]
 810c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810c07a:	687b      	ldr	r3, [r7, #4]
 810c07c:	681b      	ldr	r3, [r3, #0]
 810c07e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	4a43      	ldr	r2, [pc, #268]	@ (810c190 <TIM_Base_SetConfig+0x120>)
 810c084:	4293      	cmp	r3, r2
 810c086:	d013      	beq.n	810c0b0 <TIM_Base_SetConfig+0x40>
 810c088:	687b      	ldr	r3, [r7, #4]
 810c08a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c08e:	d00f      	beq.n	810c0b0 <TIM_Base_SetConfig+0x40>
 810c090:	687b      	ldr	r3, [r7, #4]
 810c092:	4a40      	ldr	r2, [pc, #256]	@ (810c194 <TIM_Base_SetConfig+0x124>)
 810c094:	4293      	cmp	r3, r2
 810c096:	d00b      	beq.n	810c0b0 <TIM_Base_SetConfig+0x40>
 810c098:	687b      	ldr	r3, [r7, #4]
 810c09a:	4a3f      	ldr	r2, [pc, #252]	@ (810c198 <TIM_Base_SetConfig+0x128>)
 810c09c:	4293      	cmp	r3, r2
 810c09e:	d007      	beq.n	810c0b0 <TIM_Base_SetConfig+0x40>
 810c0a0:	687b      	ldr	r3, [r7, #4]
 810c0a2:	4a3e      	ldr	r2, [pc, #248]	@ (810c19c <TIM_Base_SetConfig+0x12c>)
 810c0a4:	4293      	cmp	r3, r2
 810c0a6:	d003      	beq.n	810c0b0 <TIM_Base_SetConfig+0x40>
 810c0a8:	687b      	ldr	r3, [r7, #4]
 810c0aa:	4a3d      	ldr	r2, [pc, #244]	@ (810c1a0 <TIM_Base_SetConfig+0x130>)
 810c0ac:	4293      	cmp	r3, r2
 810c0ae:	d108      	bne.n	810c0c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810c0b0:	68fb      	ldr	r3, [r7, #12]
 810c0b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810c0b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810c0b8:	683b      	ldr	r3, [r7, #0]
 810c0ba:	685b      	ldr	r3, [r3, #4]
 810c0bc:	68fa      	ldr	r2, [r7, #12]
 810c0be:	4313      	orrs	r3, r2
 810c0c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810c0c2:	687b      	ldr	r3, [r7, #4]
 810c0c4:	4a32      	ldr	r2, [pc, #200]	@ (810c190 <TIM_Base_SetConfig+0x120>)
 810c0c6:	4293      	cmp	r3, r2
 810c0c8:	d01f      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0ca:	687b      	ldr	r3, [r7, #4]
 810c0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c0d0:	d01b      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0d2:	687b      	ldr	r3, [r7, #4]
 810c0d4:	4a2f      	ldr	r2, [pc, #188]	@ (810c194 <TIM_Base_SetConfig+0x124>)
 810c0d6:	4293      	cmp	r3, r2
 810c0d8:	d017      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0da:	687b      	ldr	r3, [r7, #4]
 810c0dc:	4a2e      	ldr	r2, [pc, #184]	@ (810c198 <TIM_Base_SetConfig+0x128>)
 810c0de:	4293      	cmp	r3, r2
 810c0e0:	d013      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0e2:	687b      	ldr	r3, [r7, #4]
 810c0e4:	4a2d      	ldr	r2, [pc, #180]	@ (810c19c <TIM_Base_SetConfig+0x12c>)
 810c0e6:	4293      	cmp	r3, r2
 810c0e8:	d00f      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0ea:	687b      	ldr	r3, [r7, #4]
 810c0ec:	4a2c      	ldr	r2, [pc, #176]	@ (810c1a0 <TIM_Base_SetConfig+0x130>)
 810c0ee:	4293      	cmp	r3, r2
 810c0f0:	d00b      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0f2:	687b      	ldr	r3, [r7, #4]
 810c0f4:	4a2b      	ldr	r2, [pc, #172]	@ (810c1a4 <TIM_Base_SetConfig+0x134>)
 810c0f6:	4293      	cmp	r3, r2
 810c0f8:	d007      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c0fa:	687b      	ldr	r3, [r7, #4]
 810c0fc:	4a2a      	ldr	r2, [pc, #168]	@ (810c1a8 <TIM_Base_SetConfig+0x138>)
 810c0fe:	4293      	cmp	r3, r2
 810c100:	d003      	beq.n	810c10a <TIM_Base_SetConfig+0x9a>
 810c102:	687b      	ldr	r3, [r7, #4]
 810c104:	4a29      	ldr	r2, [pc, #164]	@ (810c1ac <TIM_Base_SetConfig+0x13c>)
 810c106:	4293      	cmp	r3, r2
 810c108:	d108      	bne.n	810c11c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810c10a:	68fb      	ldr	r3, [r7, #12]
 810c10c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810c110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810c112:	683b      	ldr	r3, [r7, #0]
 810c114:	68db      	ldr	r3, [r3, #12]
 810c116:	68fa      	ldr	r2, [r7, #12]
 810c118:	4313      	orrs	r3, r2
 810c11a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810c11c:	68fb      	ldr	r3, [r7, #12]
 810c11e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810c122:	683b      	ldr	r3, [r7, #0]
 810c124:	695b      	ldr	r3, [r3, #20]
 810c126:	4313      	orrs	r3, r2
 810c128:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810c12a:	683b      	ldr	r3, [r7, #0]
 810c12c:	689a      	ldr	r2, [r3, #8]
 810c12e:	687b      	ldr	r3, [r7, #4]
 810c130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810c132:	683b      	ldr	r3, [r7, #0]
 810c134:	681a      	ldr	r2, [r3, #0]
 810c136:	687b      	ldr	r3, [r7, #4]
 810c138:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810c13a:	687b      	ldr	r3, [r7, #4]
 810c13c:	4a14      	ldr	r2, [pc, #80]	@ (810c190 <TIM_Base_SetConfig+0x120>)
 810c13e:	4293      	cmp	r3, r2
 810c140:	d00f      	beq.n	810c162 <TIM_Base_SetConfig+0xf2>
 810c142:	687b      	ldr	r3, [r7, #4]
 810c144:	4a16      	ldr	r2, [pc, #88]	@ (810c1a0 <TIM_Base_SetConfig+0x130>)
 810c146:	4293      	cmp	r3, r2
 810c148:	d00b      	beq.n	810c162 <TIM_Base_SetConfig+0xf2>
 810c14a:	687b      	ldr	r3, [r7, #4]
 810c14c:	4a15      	ldr	r2, [pc, #84]	@ (810c1a4 <TIM_Base_SetConfig+0x134>)
 810c14e:	4293      	cmp	r3, r2
 810c150:	d007      	beq.n	810c162 <TIM_Base_SetConfig+0xf2>
 810c152:	687b      	ldr	r3, [r7, #4]
 810c154:	4a14      	ldr	r2, [pc, #80]	@ (810c1a8 <TIM_Base_SetConfig+0x138>)
 810c156:	4293      	cmp	r3, r2
 810c158:	d003      	beq.n	810c162 <TIM_Base_SetConfig+0xf2>
 810c15a:	687b      	ldr	r3, [r7, #4]
 810c15c:	4a13      	ldr	r2, [pc, #76]	@ (810c1ac <TIM_Base_SetConfig+0x13c>)
 810c15e:	4293      	cmp	r3, r2
 810c160:	d103      	bne.n	810c16a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810c162:	683b      	ldr	r3, [r7, #0]
 810c164:	691a      	ldr	r2, [r3, #16]
 810c166:	687b      	ldr	r3, [r7, #4]
 810c168:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810c16a:	687b      	ldr	r3, [r7, #4]
 810c16c:	681b      	ldr	r3, [r3, #0]
 810c16e:	f043 0204 	orr.w	r2, r3, #4
 810c172:	687b      	ldr	r3, [r7, #4]
 810c174:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810c176:	687b      	ldr	r3, [r7, #4]
 810c178:	2201      	movs	r2, #1
 810c17a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 810c17c:	687b      	ldr	r3, [r7, #4]
 810c17e:	68fa      	ldr	r2, [r7, #12]
 810c180:	601a      	str	r2, [r3, #0]
}
 810c182:	bf00      	nop
 810c184:	3714      	adds	r7, #20
 810c186:	46bd      	mov	sp, r7
 810c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c18c:	4770      	bx	lr
 810c18e:	bf00      	nop
 810c190:	40010000 	.word	0x40010000
 810c194:	40000400 	.word	0x40000400
 810c198:	40000800 	.word	0x40000800
 810c19c:	40000c00 	.word	0x40000c00
 810c1a0:	40010400 	.word	0x40010400
 810c1a4:	40014000 	.word	0x40014000
 810c1a8:	40014400 	.word	0x40014400
 810c1ac:	40014800 	.word	0x40014800

0810c1b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810c1b0:	b480      	push	{r7}
 810c1b2:	b085      	sub	sp, #20
 810c1b4:	af00      	add	r7, sp, #0
 810c1b6:	6078      	str	r0, [r7, #4]
 810c1b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810c1ba:	687b      	ldr	r3, [r7, #4]
 810c1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810c1c0:	2b01      	cmp	r3, #1
 810c1c2:	d101      	bne.n	810c1c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810c1c4:	2302      	movs	r3, #2
 810c1c6:	e06d      	b.n	810c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810c1c8:	687b      	ldr	r3, [r7, #4]
 810c1ca:	2201      	movs	r2, #1
 810c1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810c1d0:	687b      	ldr	r3, [r7, #4]
 810c1d2:	2202      	movs	r2, #2
 810c1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810c1d8:	687b      	ldr	r3, [r7, #4]
 810c1da:	681b      	ldr	r3, [r3, #0]
 810c1dc:	685b      	ldr	r3, [r3, #4]
 810c1de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	681b      	ldr	r3, [r3, #0]
 810c1e4:	689b      	ldr	r3, [r3, #8]
 810c1e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810c1e8:	687b      	ldr	r3, [r7, #4]
 810c1ea:	681b      	ldr	r3, [r3, #0]
 810c1ec:	4a30      	ldr	r2, [pc, #192]	@ (810c2b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810c1ee:	4293      	cmp	r3, r2
 810c1f0:	d004      	beq.n	810c1fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810c1f2:	687b      	ldr	r3, [r7, #4]
 810c1f4:	681b      	ldr	r3, [r3, #0]
 810c1f6:	4a2f      	ldr	r2, [pc, #188]	@ (810c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810c1f8:	4293      	cmp	r3, r2
 810c1fa:	d108      	bne.n	810c20e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810c1fc:	68fb      	ldr	r3, [r7, #12]
 810c1fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810c202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810c204:	683b      	ldr	r3, [r7, #0]
 810c206:	685b      	ldr	r3, [r3, #4]
 810c208:	68fa      	ldr	r2, [r7, #12]
 810c20a:	4313      	orrs	r3, r2
 810c20c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810c20e:	68fb      	ldr	r3, [r7, #12]
 810c210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810c214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810c216:	683b      	ldr	r3, [r7, #0]
 810c218:	681b      	ldr	r3, [r3, #0]
 810c21a:	68fa      	ldr	r2, [r7, #12]
 810c21c:	4313      	orrs	r3, r2
 810c21e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810c220:	687b      	ldr	r3, [r7, #4]
 810c222:	681b      	ldr	r3, [r3, #0]
 810c224:	68fa      	ldr	r2, [r7, #12]
 810c226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810c228:	687b      	ldr	r3, [r7, #4]
 810c22a:	681b      	ldr	r3, [r3, #0]
 810c22c:	4a20      	ldr	r2, [pc, #128]	@ (810c2b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810c22e:	4293      	cmp	r3, r2
 810c230:	d022      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c232:	687b      	ldr	r3, [r7, #4]
 810c234:	681b      	ldr	r3, [r3, #0]
 810c236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c23a:	d01d      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c23c:	687b      	ldr	r3, [r7, #4]
 810c23e:	681b      	ldr	r3, [r3, #0]
 810c240:	4a1d      	ldr	r2, [pc, #116]	@ (810c2b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810c242:	4293      	cmp	r3, r2
 810c244:	d018      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	681b      	ldr	r3, [r3, #0]
 810c24a:	4a1c      	ldr	r2, [pc, #112]	@ (810c2bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810c24c:	4293      	cmp	r3, r2
 810c24e:	d013      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c250:	687b      	ldr	r3, [r7, #4]
 810c252:	681b      	ldr	r3, [r3, #0]
 810c254:	4a1a      	ldr	r2, [pc, #104]	@ (810c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810c256:	4293      	cmp	r3, r2
 810c258:	d00e      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c25a:	687b      	ldr	r3, [r7, #4]
 810c25c:	681b      	ldr	r3, [r3, #0]
 810c25e:	4a15      	ldr	r2, [pc, #84]	@ (810c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810c260:	4293      	cmp	r3, r2
 810c262:	d009      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c264:	687b      	ldr	r3, [r7, #4]
 810c266:	681b      	ldr	r3, [r3, #0]
 810c268:	4a16      	ldr	r2, [pc, #88]	@ (810c2c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810c26a:	4293      	cmp	r3, r2
 810c26c:	d004      	beq.n	810c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c26e:	687b      	ldr	r3, [r7, #4]
 810c270:	681b      	ldr	r3, [r3, #0]
 810c272:	4a15      	ldr	r2, [pc, #84]	@ (810c2c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810c274:	4293      	cmp	r3, r2
 810c276:	d10c      	bne.n	810c292 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810c278:	68bb      	ldr	r3, [r7, #8]
 810c27a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810c27e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810c280:	683b      	ldr	r3, [r7, #0]
 810c282:	689b      	ldr	r3, [r3, #8]
 810c284:	68ba      	ldr	r2, [r7, #8]
 810c286:	4313      	orrs	r3, r2
 810c288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810c28a:	687b      	ldr	r3, [r7, #4]
 810c28c:	681b      	ldr	r3, [r3, #0]
 810c28e:	68ba      	ldr	r2, [r7, #8]
 810c290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810c292:	687b      	ldr	r3, [r7, #4]
 810c294:	2201      	movs	r2, #1
 810c296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810c29a:	687b      	ldr	r3, [r7, #4]
 810c29c:	2200      	movs	r2, #0
 810c29e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810c2a2:	2300      	movs	r3, #0
}
 810c2a4:	4618      	mov	r0, r3
 810c2a6:	3714      	adds	r7, #20
 810c2a8:	46bd      	mov	sp, r7
 810c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2ae:	4770      	bx	lr
 810c2b0:	40010000 	.word	0x40010000
 810c2b4:	40010400 	.word	0x40010400
 810c2b8:	40000400 	.word	0x40000400
 810c2bc:	40000800 	.word	0x40000800
 810c2c0:	40000c00 	.word	0x40000c00
 810c2c4:	40001800 	.word	0x40001800
 810c2c8:	40014000 	.word	0x40014000

0810c2cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810c2cc:	b480      	push	{r7}
 810c2ce:	b083      	sub	sp, #12
 810c2d0:	af00      	add	r7, sp, #0
 810c2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810c2d4:	bf00      	nop
 810c2d6:	370c      	adds	r7, #12
 810c2d8:	46bd      	mov	sp, r7
 810c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2de:	4770      	bx	lr

0810c2e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810c2e0:	b480      	push	{r7}
 810c2e2:	b083      	sub	sp, #12
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810c2e8:	bf00      	nop
 810c2ea:	370c      	adds	r7, #12
 810c2ec:	46bd      	mov	sp, r7
 810c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2f2:	4770      	bx	lr

0810c2f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810c2f4:	b480      	push	{r7}
 810c2f6:	b083      	sub	sp, #12
 810c2f8:	af00      	add	r7, sp, #0
 810c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810c2fc:	bf00      	nop
 810c2fe:	370c      	adds	r7, #12
 810c300:	46bd      	mov	sp, r7
 810c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c306:	4770      	bx	lr

0810c308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810c308:	b580      	push	{r7, lr}
 810c30a:	b082      	sub	sp, #8
 810c30c:	af00      	add	r7, sp, #0
 810c30e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810c310:	687b      	ldr	r3, [r7, #4]
 810c312:	2b00      	cmp	r3, #0
 810c314:	d101      	bne.n	810c31a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810c316:	2301      	movs	r3, #1
 810c318:	e042      	b.n	810c3a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810c31a:	687b      	ldr	r3, [r7, #4]
 810c31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c320:	2b00      	cmp	r3, #0
 810c322:	d106      	bne.n	810c332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810c324:	687b      	ldr	r3, [r7, #4]
 810c326:	2200      	movs	r2, #0
 810c328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810c32c:	6878      	ldr	r0, [r7, #4]
 810c32e:	f7f6 fa09 	bl	8102744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810c332:	687b      	ldr	r3, [r7, #4]
 810c334:	2224      	movs	r2, #36	@ 0x24
 810c336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	681b      	ldr	r3, [r3, #0]
 810c33e:	681a      	ldr	r2, [r3, #0]
 810c340:	687b      	ldr	r3, [r7, #4]
 810c342:	681b      	ldr	r3, [r3, #0]
 810c344:	f022 0201 	bic.w	r2, r2, #1
 810c348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810c34a:	687b      	ldr	r3, [r7, #4]
 810c34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c34e:	2b00      	cmp	r3, #0
 810c350:	d002      	beq.n	810c358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810c352:	6878      	ldr	r0, [r7, #4]
 810c354:	f001 fa14 	bl	810d780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810c358:	6878      	ldr	r0, [r7, #4]
 810c35a:	f000 fca9 	bl	810ccb0 <UART_SetConfig>
 810c35e:	4603      	mov	r3, r0
 810c360:	2b01      	cmp	r3, #1
 810c362:	d101      	bne.n	810c368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810c364:	2301      	movs	r3, #1
 810c366:	e01b      	b.n	810c3a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810c368:	687b      	ldr	r3, [r7, #4]
 810c36a:	681b      	ldr	r3, [r3, #0]
 810c36c:	685a      	ldr	r2, [r3, #4]
 810c36e:	687b      	ldr	r3, [r7, #4]
 810c370:	681b      	ldr	r3, [r3, #0]
 810c372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810c376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810c378:	687b      	ldr	r3, [r7, #4]
 810c37a:	681b      	ldr	r3, [r3, #0]
 810c37c:	689a      	ldr	r2, [r3, #8]
 810c37e:	687b      	ldr	r3, [r7, #4]
 810c380:	681b      	ldr	r3, [r3, #0]
 810c382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810c386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810c388:	687b      	ldr	r3, [r7, #4]
 810c38a:	681b      	ldr	r3, [r3, #0]
 810c38c:	681a      	ldr	r2, [r3, #0]
 810c38e:	687b      	ldr	r3, [r7, #4]
 810c390:	681b      	ldr	r3, [r3, #0]
 810c392:	f042 0201 	orr.w	r2, r2, #1
 810c396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810c398:	6878      	ldr	r0, [r7, #4]
 810c39a:	f001 fa93 	bl	810d8c4 <UART_CheckIdleState>
 810c39e:	4603      	mov	r3, r0
}
 810c3a0:	4618      	mov	r0, r3
 810c3a2:	3708      	adds	r7, #8
 810c3a4:	46bd      	mov	sp, r7
 810c3a6:	bd80      	pop	{r7, pc}

0810c3a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c3a8:	b580      	push	{r7, lr}
 810c3aa:	b08a      	sub	sp, #40	@ 0x28
 810c3ac:	af02      	add	r7, sp, #8
 810c3ae:	60f8      	str	r0, [r7, #12]
 810c3b0:	60b9      	str	r1, [r7, #8]
 810c3b2:	603b      	str	r3, [r7, #0]
 810c3b4:	4613      	mov	r3, r2
 810c3b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810c3b8:	68fb      	ldr	r3, [r7, #12]
 810c3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c3be:	2b20      	cmp	r3, #32
 810c3c0:	d17b      	bne.n	810c4ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810c3c2:	68bb      	ldr	r3, [r7, #8]
 810c3c4:	2b00      	cmp	r3, #0
 810c3c6:	d002      	beq.n	810c3ce <HAL_UART_Transmit+0x26>
 810c3c8:	88fb      	ldrh	r3, [r7, #6]
 810c3ca:	2b00      	cmp	r3, #0
 810c3cc:	d101      	bne.n	810c3d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810c3ce:	2301      	movs	r3, #1
 810c3d0:	e074      	b.n	810c4bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c3d2:	68fb      	ldr	r3, [r7, #12]
 810c3d4:	2200      	movs	r2, #0
 810c3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810c3da:	68fb      	ldr	r3, [r7, #12]
 810c3dc:	2221      	movs	r2, #33	@ 0x21
 810c3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c3e2:	f7f6 fbb1 	bl	8102b48 <HAL_GetTick>
 810c3e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810c3e8:	68fb      	ldr	r3, [r7, #12]
 810c3ea:	88fa      	ldrh	r2, [r7, #6]
 810c3ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810c3f0:	68fb      	ldr	r3, [r7, #12]
 810c3f2:	88fa      	ldrh	r2, [r7, #6]
 810c3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c3f8:	68fb      	ldr	r3, [r7, #12]
 810c3fa:	689b      	ldr	r3, [r3, #8]
 810c3fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c400:	d108      	bne.n	810c414 <HAL_UART_Transmit+0x6c>
 810c402:	68fb      	ldr	r3, [r7, #12]
 810c404:	691b      	ldr	r3, [r3, #16]
 810c406:	2b00      	cmp	r3, #0
 810c408:	d104      	bne.n	810c414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810c40a:	2300      	movs	r3, #0
 810c40c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810c40e:	68bb      	ldr	r3, [r7, #8]
 810c410:	61bb      	str	r3, [r7, #24]
 810c412:	e003      	b.n	810c41c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810c414:	68bb      	ldr	r3, [r7, #8]
 810c416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c418:	2300      	movs	r3, #0
 810c41a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810c41c:	e030      	b.n	810c480 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810c41e:	683b      	ldr	r3, [r7, #0]
 810c420:	9300      	str	r3, [sp, #0]
 810c422:	697b      	ldr	r3, [r7, #20]
 810c424:	2200      	movs	r2, #0
 810c426:	2180      	movs	r1, #128	@ 0x80
 810c428:	68f8      	ldr	r0, [r7, #12]
 810c42a:	f001 faf5 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810c42e:	4603      	mov	r3, r0
 810c430:	2b00      	cmp	r3, #0
 810c432:	d005      	beq.n	810c440 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810c434:	68fb      	ldr	r3, [r7, #12]
 810c436:	2220      	movs	r2, #32
 810c438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810c43c:	2303      	movs	r3, #3
 810c43e:	e03d      	b.n	810c4bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810c440:	69fb      	ldr	r3, [r7, #28]
 810c442:	2b00      	cmp	r3, #0
 810c444:	d10b      	bne.n	810c45e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810c446:	69bb      	ldr	r3, [r7, #24]
 810c448:	881b      	ldrh	r3, [r3, #0]
 810c44a:	461a      	mov	r2, r3
 810c44c:	68fb      	ldr	r3, [r7, #12]
 810c44e:	681b      	ldr	r3, [r3, #0]
 810c450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810c454:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810c456:	69bb      	ldr	r3, [r7, #24]
 810c458:	3302      	adds	r3, #2
 810c45a:	61bb      	str	r3, [r7, #24]
 810c45c:	e007      	b.n	810c46e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810c45e:	69fb      	ldr	r3, [r7, #28]
 810c460:	781a      	ldrb	r2, [r3, #0]
 810c462:	68fb      	ldr	r3, [r7, #12]
 810c464:	681b      	ldr	r3, [r3, #0]
 810c466:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810c468:	69fb      	ldr	r3, [r7, #28]
 810c46a:	3301      	adds	r3, #1
 810c46c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810c46e:	68fb      	ldr	r3, [r7, #12]
 810c470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c474:	b29b      	uxth	r3, r3
 810c476:	3b01      	subs	r3, #1
 810c478:	b29a      	uxth	r2, r3
 810c47a:	68fb      	ldr	r3, [r7, #12]
 810c47c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810c480:	68fb      	ldr	r3, [r7, #12]
 810c482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c486:	b29b      	uxth	r3, r3
 810c488:	2b00      	cmp	r3, #0
 810c48a:	d1c8      	bne.n	810c41e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810c48c:	683b      	ldr	r3, [r7, #0]
 810c48e:	9300      	str	r3, [sp, #0]
 810c490:	697b      	ldr	r3, [r7, #20]
 810c492:	2200      	movs	r2, #0
 810c494:	2140      	movs	r1, #64	@ 0x40
 810c496:	68f8      	ldr	r0, [r7, #12]
 810c498:	f001 fabe 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810c49c:	4603      	mov	r3, r0
 810c49e:	2b00      	cmp	r3, #0
 810c4a0:	d005      	beq.n	810c4ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810c4a2:	68fb      	ldr	r3, [r7, #12]
 810c4a4:	2220      	movs	r2, #32
 810c4a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810c4aa:	2303      	movs	r3, #3
 810c4ac:	e006      	b.n	810c4bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810c4ae:	68fb      	ldr	r3, [r7, #12]
 810c4b0:	2220      	movs	r2, #32
 810c4b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810c4b6:	2300      	movs	r3, #0
 810c4b8:	e000      	b.n	810c4bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810c4ba:	2302      	movs	r3, #2
  }
}
 810c4bc:	4618      	mov	r0, r3
 810c4be:	3720      	adds	r7, #32
 810c4c0:	46bd      	mov	sp, r7
 810c4c2:	bd80      	pop	{r7, pc}

0810c4c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810c4c4:	b580      	push	{r7, lr}
 810c4c6:	b0ba      	sub	sp, #232	@ 0xe8
 810c4c8:	af00      	add	r7, sp, #0
 810c4ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810c4cc:	687b      	ldr	r3, [r7, #4]
 810c4ce:	681b      	ldr	r3, [r3, #0]
 810c4d0:	69db      	ldr	r3, [r3, #28]
 810c4d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810c4d6:	687b      	ldr	r3, [r7, #4]
 810c4d8:	681b      	ldr	r3, [r3, #0]
 810c4da:	681b      	ldr	r3, [r3, #0]
 810c4dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810c4e0:	687b      	ldr	r3, [r7, #4]
 810c4e2:	681b      	ldr	r3, [r3, #0]
 810c4e4:	689b      	ldr	r3, [r3, #8]
 810c4e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810c4ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810c4ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 810c4f2:	4013      	ands	r3, r2
 810c4f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810c4f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c4fc:	2b00      	cmp	r3, #0
 810c4fe:	d11b      	bne.n	810c538 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c504:	f003 0320 	and.w	r3, r3, #32
 810c508:	2b00      	cmp	r3, #0
 810c50a:	d015      	beq.n	810c538 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c510:	f003 0320 	and.w	r3, r3, #32
 810c514:	2b00      	cmp	r3, #0
 810c516:	d105      	bne.n	810c524 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c51c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c520:	2b00      	cmp	r3, #0
 810c522:	d009      	beq.n	810c538 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810c524:	687b      	ldr	r3, [r7, #4]
 810c526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c528:	2b00      	cmp	r3, #0
 810c52a:	f000 8395 	beq.w	810cc58 <HAL_UART_IRQHandler+0x794>
      {
        huart->RxISR(huart);
 810c52e:	687b      	ldr	r3, [r7, #4]
 810c530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c532:	6878      	ldr	r0, [r7, #4]
 810c534:	4798      	blx	r3
      }
      return;
 810c536:	e38f      	b.n	810cc58 <HAL_UART_IRQHandler+0x794>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810c538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c53c:	2b00      	cmp	r3, #0
 810c53e:	f000 8123 	beq.w	810c788 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810c542:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c546:	4b8d      	ldr	r3, [pc, #564]	@ (810c77c <HAL_UART_IRQHandler+0x2b8>)
 810c548:	4013      	ands	r3, r2
 810c54a:	2b00      	cmp	r3, #0
 810c54c:	d106      	bne.n	810c55c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810c54e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810c552:	4b8b      	ldr	r3, [pc, #556]	@ (810c780 <HAL_UART_IRQHandler+0x2bc>)
 810c554:	4013      	ands	r3, r2
 810c556:	2b00      	cmp	r3, #0
 810c558:	f000 8116 	beq.w	810c788 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810c55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c560:	f003 0301 	and.w	r3, r3, #1
 810c564:	2b00      	cmp	r3, #0
 810c566:	d011      	beq.n	810c58c <HAL_UART_IRQHandler+0xc8>
 810c568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c56c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c570:	2b00      	cmp	r3, #0
 810c572:	d00b      	beq.n	810c58c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810c574:	687b      	ldr	r3, [r7, #4]
 810c576:	681b      	ldr	r3, [r3, #0]
 810c578:	2201      	movs	r2, #1
 810c57a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810c57c:	687b      	ldr	r3, [r7, #4]
 810c57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c582:	f043 0201 	orr.w	r2, r3, #1
 810c586:	687b      	ldr	r3, [r7, #4]
 810c588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c590:	f003 0302 	and.w	r3, r3, #2
 810c594:	2b00      	cmp	r3, #0
 810c596:	d011      	beq.n	810c5bc <HAL_UART_IRQHandler+0xf8>
 810c598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c59c:	f003 0301 	and.w	r3, r3, #1
 810c5a0:	2b00      	cmp	r3, #0
 810c5a2:	d00b      	beq.n	810c5bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810c5a4:	687b      	ldr	r3, [r7, #4]
 810c5a6:	681b      	ldr	r3, [r3, #0]
 810c5a8:	2202      	movs	r2, #2
 810c5aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810c5ac:	687b      	ldr	r3, [r7, #4]
 810c5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c5b2:	f043 0204 	orr.w	r2, r3, #4
 810c5b6:	687b      	ldr	r3, [r7, #4]
 810c5b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c5c0:	f003 0304 	and.w	r3, r3, #4
 810c5c4:	2b00      	cmp	r3, #0
 810c5c6:	d011      	beq.n	810c5ec <HAL_UART_IRQHandler+0x128>
 810c5c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c5cc:	f003 0301 	and.w	r3, r3, #1
 810c5d0:	2b00      	cmp	r3, #0
 810c5d2:	d00b      	beq.n	810c5ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810c5d4:	687b      	ldr	r3, [r7, #4]
 810c5d6:	681b      	ldr	r3, [r3, #0]
 810c5d8:	2204      	movs	r2, #4
 810c5da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810c5dc:	687b      	ldr	r3, [r7, #4]
 810c5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c5e2:	f043 0202 	orr.w	r2, r3, #2
 810c5e6:	687b      	ldr	r3, [r7, #4]
 810c5e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810c5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c5f0:	f003 0308 	and.w	r3, r3, #8
 810c5f4:	2b00      	cmp	r3, #0
 810c5f6:	d017      	beq.n	810c628 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c5fc:	f003 0320 	and.w	r3, r3, #32
 810c600:	2b00      	cmp	r3, #0
 810c602:	d105      	bne.n	810c610 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810c604:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c608:	4b5c      	ldr	r3, [pc, #368]	@ (810c77c <HAL_UART_IRQHandler+0x2b8>)
 810c60a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c60c:	2b00      	cmp	r3, #0
 810c60e:	d00b      	beq.n	810c628 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c610:	687b      	ldr	r3, [r7, #4]
 810c612:	681b      	ldr	r3, [r3, #0]
 810c614:	2208      	movs	r2, #8
 810c616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810c618:	687b      	ldr	r3, [r7, #4]
 810c61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c61e:	f043 0208 	orr.w	r2, r3, #8
 810c622:	687b      	ldr	r3, [r7, #4]
 810c624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810c628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c62c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810c630:	2b00      	cmp	r3, #0
 810c632:	d012      	beq.n	810c65a <HAL_UART_IRQHandler+0x196>
 810c634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c638:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810c63c:	2b00      	cmp	r3, #0
 810c63e:	d00c      	beq.n	810c65a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c640:	687b      	ldr	r3, [r7, #4]
 810c642:	681b      	ldr	r3, [r3, #0]
 810c644:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810c64a:	687b      	ldr	r3, [r7, #4]
 810c64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c650:	f043 0220 	orr.w	r2, r3, #32
 810c654:	687b      	ldr	r3, [r7, #4]
 810c656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c660:	2b00      	cmp	r3, #0
 810c662:	f000 82fb 	beq.w	810cc5c <HAL_UART_IRQHandler+0x798>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c66a:	f003 0320 	and.w	r3, r3, #32
 810c66e:	2b00      	cmp	r3, #0
 810c670:	d013      	beq.n	810c69a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c676:	f003 0320 	and.w	r3, r3, #32
 810c67a:	2b00      	cmp	r3, #0
 810c67c:	d105      	bne.n	810c68a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c686:	2b00      	cmp	r3, #0
 810c688:	d007      	beq.n	810c69a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810c68a:	687b      	ldr	r3, [r7, #4]
 810c68c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c68e:	2b00      	cmp	r3, #0
 810c690:	d003      	beq.n	810c69a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810c692:	687b      	ldr	r3, [r7, #4]
 810c694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c696:	6878      	ldr	r0, [r7, #4]
 810c698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810c69a:	687b      	ldr	r3, [r7, #4]
 810c69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c6a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c6a4:	687b      	ldr	r3, [r7, #4]
 810c6a6:	681b      	ldr	r3, [r3, #0]
 810c6a8:	689b      	ldr	r3, [r3, #8]
 810c6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c6ae:	2b40      	cmp	r3, #64	@ 0x40
 810c6b0:	d005      	beq.n	810c6be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810c6b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810c6b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c6ba:	2b00      	cmp	r3, #0
 810c6bc:	d054      	beq.n	810c768 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810c6be:	6878      	ldr	r0, [r7, #4]
 810c6c0:	f001 fa17 	bl	810daf2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c6c4:	687b      	ldr	r3, [r7, #4]
 810c6c6:	681b      	ldr	r3, [r3, #0]
 810c6c8:	689b      	ldr	r3, [r3, #8]
 810c6ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c6ce:	2b40      	cmp	r3, #64	@ 0x40
 810c6d0:	d146      	bne.n	810c760 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c6d2:	687b      	ldr	r3, [r7, #4]
 810c6d4:	681b      	ldr	r3, [r3, #0]
 810c6d6:	3308      	adds	r3, #8
 810c6d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c6dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810c6e0:	e853 3f00 	ldrex	r3, [r3]
 810c6e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810c6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810c6ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810c6f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810c6f4:	687b      	ldr	r3, [r7, #4]
 810c6f6:	681b      	ldr	r3, [r3, #0]
 810c6f8:	3308      	adds	r3, #8
 810c6fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810c6fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810c702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810c70a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810c70e:	e841 2300 	strex	r3, r2, [r1]
 810c712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810c716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810c71a:	2b00      	cmp	r3, #0
 810c71c:	d1d9      	bne.n	810c6d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810c71e:	687b      	ldr	r3, [r7, #4]
 810c720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c724:	2b00      	cmp	r3, #0
 810c726:	d017      	beq.n	810c758 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810c728:	687b      	ldr	r3, [r7, #4]
 810c72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c72e:	4a15      	ldr	r2, [pc, #84]	@ (810c784 <HAL_UART_IRQHandler+0x2c0>)
 810c730:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810c732:	687b      	ldr	r3, [r7, #4]
 810c734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c738:	4618      	mov	r0, r3
 810c73a:	f7f9 f927 	bl	810598c <HAL_DMA_Abort_IT>
 810c73e:	4603      	mov	r3, r0
 810c740:	2b00      	cmp	r3, #0
 810c742:	d019      	beq.n	810c778 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810c744:	687b      	ldr	r3, [r7, #4]
 810c746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c74c:	687a      	ldr	r2, [r7, #4]
 810c74e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810c752:	4610      	mov	r0, r2
 810c754:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c756:	e00f      	b.n	810c778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810c758:	6878      	ldr	r0, [r7, #4]
 810c75a:	f000 fa93 	bl	810cc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c75e:	e00b      	b.n	810c778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810c760:	6878      	ldr	r0, [r7, #4]
 810c762:	f000 fa8f 	bl	810cc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c766:	e007      	b.n	810c778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810c768:	6878      	ldr	r0, [r7, #4]
 810c76a:	f000 fa8b 	bl	810cc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c76e:	687b      	ldr	r3, [r7, #4]
 810c770:	2200      	movs	r2, #0
 810c772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810c776:	e271      	b.n	810cc5c <HAL_UART_IRQHandler+0x798>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c778:	bf00      	nop
    return;
 810c77a:	e26f      	b.n	810cc5c <HAL_UART_IRQHandler+0x798>
 810c77c:	10000001 	.word	0x10000001
 810c780:	04000120 	.word	0x04000120
 810c784:	0810dbbf 	.word	0x0810dbbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c788:	687b      	ldr	r3, [r7, #4]
 810c78a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c78c:	2b01      	cmp	r3, #1
 810c78e:	f040 8205 	bne.w	810cb9c <HAL_UART_IRQHandler+0x6d8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810c792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c796:	f003 0310 	and.w	r3, r3, #16
 810c79a:	2b00      	cmp	r3, #0
 810c79c:	f000 81fe 	beq.w	810cb9c <HAL_UART_IRQHandler+0x6d8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810c7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c7a4:	f003 0310 	and.w	r3, r3, #16
 810c7a8:	2b00      	cmp	r3, #0
 810c7aa:	f000 81f7 	beq.w	810cb9c <HAL_UART_IRQHandler+0x6d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810c7ae:	687b      	ldr	r3, [r7, #4]
 810c7b0:	681b      	ldr	r3, [r3, #0]
 810c7b2:	2210      	movs	r2, #16
 810c7b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c7b6:	687b      	ldr	r3, [r7, #4]
 810c7b8:	681b      	ldr	r3, [r3, #0]
 810c7ba:	689b      	ldr	r3, [r3, #8]
 810c7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c7c0:	2b40      	cmp	r3, #64	@ 0x40
 810c7c2:	f040 816d 	bne.w	810caa0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810c7c6:	687b      	ldr	r3, [r7, #4]
 810c7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c7cc:	681b      	ldr	r3, [r3, #0]
 810c7ce:	4aa4      	ldr	r2, [pc, #656]	@ (810ca60 <HAL_UART_IRQHandler+0x59c>)
 810c7d0:	4293      	cmp	r3, r2
 810c7d2:	d068      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c7d4:	687b      	ldr	r3, [r7, #4]
 810c7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c7da:	681b      	ldr	r3, [r3, #0]
 810c7dc:	4aa1      	ldr	r2, [pc, #644]	@ (810ca64 <HAL_UART_IRQHandler+0x5a0>)
 810c7de:	4293      	cmp	r3, r2
 810c7e0:	d061      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c7e2:	687b      	ldr	r3, [r7, #4]
 810c7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c7e8:	681b      	ldr	r3, [r3, #0]
 810c7ea:	4a9f      	ldr	r2, [pc, #636]	@ (810ca68 <HAL_UART_IRQHandler+0x5a4>)
 810c7ec:	4293      	cmp	r3, r2
 810c7ee:	d05a      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c7f0:	687b      	ldr	r3, [r7, #4]
 810c7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c7f6:	681b      	ldr	r3, [r3, #0]
 810c7f8:	4a9c      	ldr	r2, [pc, #624]	@ (810ca6c <HAL_UART_IRQHandler+0x5a8>)
 810c7fa:	4293      	cmp	r3, r2
 810c7fc:	d053      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c7fe:	687b      	ldr	r3, [r7, #4]
 810c800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c804:	681b      	ldr	r3, [r3, #0]
 810c806:	4a9a      	ldr	r2, [pc, #616]	@ (810ca70 <HAL_UART_IRQHandler+0x5ac>)
 810c808:	4293      	cmp	r3, r2
 810c80a:	d04c      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c80c:	687b      	ldr	r3, [r7, #4]
 810c80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c812:	681b      	ldr	r3, [r3, #0]
 810c814:	4a97      	ldr	r2, [pc, #604]	@ (810ca74 <HAL_UART_IRQHandler+0x5b0>)
 810c816:	4293      	cmp	r3, r2
 810c818:	d045      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c81a:	687b      	ldr	r3, [r7, #4]
 810c81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c820:	681b      	ldr	r3, [r3, #0]
 810c822:	4a95      	ldr	r2, [pc, #596]	@ (810ca78 <HAL_UART_IRQHandler+0x5b4>)
 810c824:	4293      	cmp	r3, r2
 810c826:	d03e      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c828:	687b      	ldr	r3, [r7, #4]
 810c82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c82e:	681b      	ldr	r3, [r3, #0]
 810c830:	4a92      	ldr	r2, [pc, #584]	@ (810ca7c <HAL_UART_IRQHandler+0x5b8>)
 810c832:	4293      	cmp	r3, r2
 810c834:	d037      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c836:	687b      	ldr	r3, [r7, #4]
 810c838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c83c:	681b      	ldr	r3, [r3, #0]
 810c83e:	4a90      	ldr	r2, [pc, #576]	@ (810ca80 <HAL_UART_IRQHandler+0x5bc>)
 810c840:	4293      	cmp	r3, r2
 810c842:	d030      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c844:	687b      	ldr	r3, [r7, #4]
 810c846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c84a:	681b      	ldr	r3, [r3, #0]
 810c84c:	4a8d      	ldr	r2, [pc, #564]	@ (810ca84 <HAL_UART_IRQHandler+0x5c0>)
 810c84e:	4293      	cmp	r3, r2
 810c850:	d029      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c852:	687b      	ldr	r3, [r7, #4]
 810c854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c858:	681b      	ldr	r3, [r3, #0]
 810c85a:	4a8b      	ldr	r2, [pc, #556]	@ (810ca88 <HAL_UART_IRQHandler+0x5c4>)
 810c85c:	4293      	cmp	r3, r2
 810c85e:	d022      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c860:	687b      	ldr	r3, [r7, #4]
 810c862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c866:	681b      	ldr	r3, [r3, #0]
 810c868:	4a88      	ldr	r2, [pc, #544]	@ (810ca8c <HAL_UART_IRQHandler+0x5c8>)
 810c86a:	4293      	cmp	r3, r2
 810c86c:	d01b      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c86e:	687b      	ldr	r3, [r7, #4]
 810c870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c874:	681b      	ldr	r3, [r3, #0]
 810c876:	4a86      	ldr	r2, [pc, #536]	@ (810ca90 <HAL_UART_IRQHandler+0x5cc>)
 810c878:	4293      	cmp	r3, r2
 810c87a:	d014      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c87c:	687b      	ldr	r3, [r7, #4]
 810c87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c882:	681b      	ldr	r3, [r3, #0]
 810c884:	4a83      	ldr	r2, [pc, #524]	@ (810ca94 <HAL_UART_IRQHandler+0x5d0>)
 810c886:	4293      	cmp	r3, r2
 810c888:	d00d      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c88a:	687b      	ldr	r3, [r7, #4]
 810c88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c890:	681b      	ldr	r3, [r3, #0]
 810c892:	4a81      	ldr	r2, [pc, #516]	@ (810ca98 <HAL_UART_IRQHandler+0x5d4>)
 810c894:	4293      	cmp	r3, r2
 810c896:	d006      	beq.n	810c8a6 <HAL_UART_IRQHandler+0x3e2>
 810c898:	687b      	ldr	r3, [r7, #4]
 810c89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c89e:	681b      	ldr	r3, [r3, #0]
 810c8a0:	4a7e      	ldr	r2, [pc, #504]	@ (810ca9c <HAL_UART_IRQHandler+0x5d8>)
 810c8a2:	4293      	cmp	r3, r2
 810c8a4:	d106      	bne.n	810c8b4 <HAL_UART_IRQHandler+0x3f0>
 810c8a6:	687b      	ldr	r3, [r7, #4]
 810c8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8ac:	681b      	ldr	r3, [r3, #0]
 810c8ae:	685b      	ldr	r3, [r3, #4]
 810c8b0:	b29b      	uxth	r3, r3
 810c8b2:	e005      	b.n	810c8c0 <HAL_UART_IRQHandler+0x3fc>
 810c8b4:	687b      	ldr	r3, [r7, #4]
 810c8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8ba:	681b      	ldr	r3, [r3, #0]
 810c8bc:	685b      	ldr	r3, [r3, #4]
 810c8be:	b29b      	uxth	r3, r3
 810c8c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810c8c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810c8c8:	2b00      	cmp	r3, #0
 810c8ca:	f000 80ad 	beq.w	810ca28 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810c8ce:	687b      	ldr	r3, [r7, #4]
 810c8d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810c8d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810c8d8:	429a      	cmp	r2, r3
 810c8da:	f080 80a5 	bcs.w	810ca28 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810c8de:	687b      	ldr	r3, [r7, #4]
 810c8e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810c8e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8ee:	69db      	ldr	r3, [r3, #28]
 810c8f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c8f4:	f000 8087 	beq.w	810ca06 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c8f8:	687b      	ldr	r3, [r7, #4]
 810c8fa:	681b      	ldr	r3, [r3, #0]
 810c8fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810c904:	e853 3f00 	ldrex	r3, [r3]
 810c908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810c90c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810c910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810c914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810c918:	687b      	ldr	r3, [r7, #4]
 810c91a:	681b      	ldr	r3, [r3, #0]
 810c91c:	461a      	mov	r2, r3
 810c91e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810c922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810c926:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c92a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810c92e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810c932:	e841 2300 	strex	r3, r2, [r1]
 810c936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810c93a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810c93e:	2b00      	cmp	r3, #0
 810c940:	d1da      	bne.n	810c8f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c942:	687b      	ldr	r3, [r7, #4]
 810c944:	681b      	ldr	r3, [r3, #0]
 810c946:	3308      	adds	r3, #8
 810c948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c94a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810c94c:	e853 3f00 	ldrex	r3, [r3]
 810c950:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810c952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810c954:	f023 0301 	bic.w	r3, r3, #1
 810c958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810c95c:	687b      	ldr	r3, [r7, #4]
 810c95e:	681b      	ldr	r3, [r3, #0]
 810c960:	3308      	adds	r3, #8
 810c962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810c966:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810c96a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c96c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810c96e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810c972:	e841 2300 	strex	r3, r2, [r1]
 810c976:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810c978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810c97a:	2b00      	cmp	r3, #0
 810c97c:	d1e1      	bne.n	810c942 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c97e:	687b      	ldr	r3, [r7, #4]
 810c980:	681b      	ldr	r3, [r3, #0]
 810c982:	3308      	adds	r3, #8
 810c984:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810c988:	e853 3f00 	ldrex	r3, [r3]
 810c98c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810c98e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810c990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810c994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810c998:	687b      	ldr	r3, [r7, #4]
 810c99a:	681b      	ldr	r3, [r3, #0]
 810c99c:	3308      	adds	r3, #8
 810c99e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810c9a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810c9a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c9a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810c9a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810c9aa:	e841 2300 	strex	r3, r2, [r1]
 810c9ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810c9b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810c9b2:	2b00      	cmp	r3, #0
 810c9b4:	d1e3      	bne.n	810c97e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810c9b6:	687b      	ldr	r3, [r7, #4]
 810c9b8:	2220      	movs	r2, #32
 810c9ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c9be:	687b      	ldr	r3, [r7, #4]
 810c9c0:	2200      	movs	r2, #0
 810c9c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c9c4:	687b      	ldr	r3, [r7, #4]
 810c9c6:	681b      	ldr	r3, [r3, #0]
 810c9c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c9ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810c9cc:	e853 3f00 	ldrex	r3, [r3]
 810c9d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810c9d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810c9d4:	f023 0310 	bic.w	r3, r3, #16
 810c9d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810c9dc:	687b      	ldr	r3, [r7, #4]
 810c9de:	681b      	ldr	r3, [r3, #0]
 810c9e0:	461a      	mov	r2, r3
 810c9e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810c9e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 810c9e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c9ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810c9ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810c9ee:	e841 2300 	strex	r3, r2, [r1]
 810c9f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810c9f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810c9f6:	2b00      	cmp	r3, #0
 810c9f8:	d1e4      	bne.n	810c9c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810c9fa:	687b      	ldr	r3, [r7, #4]
 810c9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ca00:	4618      	mov	r0, r3
 810ca02:	f7f8 fca5 	bl	8105350 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810ca06:	687b      	ldr	r3, [r7, #4]
 810ca08:	2202      	movs	r2, #2
 810ca0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810ca0c:	687b      	ldr	r3, [r7, #4]
 810ca0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810ca12:	687b      	ldr	r3, [r7, #4]
 810ca14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ca18:	b29b      	uxth	r3, r3
 810ca1a:	1ad3      	subs	r3, r2, r3
 810ca1c:	b29b      	uxth	r3, r3
 810ca1e:	4619      	mov	r1, r3
 810ca20:	6878      	ldr	r0, [r7, #4]
 810ca22:	f000 f939 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 810ca26:	e11b      	b.n	810cc60 <HAL_UART_IRQHandler+0x79c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 810ca28:	687b      	ldr	r3, [r7, #4]
 810ca2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ca2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810ca32:	429a      	cmp	r2, r3
 810ca34:	f040 8114 	bne.w	810cc60 <HAL_UART_IRQHandler+0x79c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 810ca38:	687b      	ldr	r3, [r7, #4]
 810ca3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ca3e:	69db      	ldr	r3, [r3, #28]
 810ca40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ca44:	f040 810c 	bne.w	810cc60 <HAL_UART_IRQHandler+0x79c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810ca48:	687b      	ldr	r3, [r7, #4]
 810ca4a:	2202      	movs	r2, #2
 810ca4c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ca4e:	687b      	ldr	r3, [r7, #4]
 810ca50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ca54:	4619      	mov	r1, r3
 810ca56:	6878      	ldr	r0, [r7, #4]
 810ca58:	f000 f91e 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
      return;
 810ca5c:	e100      	b.n	810cc60 <HAL_UART_IRQHandler+0x79c>
 810ca5e:	bf00      	nop
 810ca60:	40020010 	.word	0x40020010
 810ca64:	40020028 	.word	0x40020028
 810ca68:	40020040 	.word	0x40020040
 810ca6c:	40020058 	.word	0x40020058
 810ca70:	40020070 	.word	0x40020070
 810ca74:	40020088 	.word	0x40020088
 810ca78:	400200a0 	.word	0x400200a0
 810ca7c:	400200b8 	.word	0x400200b8
 810ca80:	40020410 	.word	0x40020410
 810ca84:	40020428 	.word	0x40020428
 810ca88:	40020440 	.word	0x40020440
 810ca8c:	40020458 	.word	0x40020458
 810ca90:	40020470 	.word	0x40020470
 810ca94:	40020488 	.word	0x40020488
 810ca98:	400204a0 	.word	0x400204a0
 810ca9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810caa0:	687b      	ldr	r3, [r7, #4]
 810caa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810caa6:	687b      	ldr	r3, [r7, #4]
 810caa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810caac:	b29b      	uxth	r3, r3
 810caae:	1ad3      	subs	r3, r2, r3
 810cab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810cab4:	687b      	ldr	r3, [r7, #4]
 810cab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810caba:	b29b      	uxth	r3, r3
 810cabc:	2b00      	cmp	r3, #0
 810cabe:	f000 80d1 	beq.w	810cc64 <HAL_UART_IRQHandler+0x7a0>
          && (nb_rx_data > 0U))
 810cac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cac6:	2b00      	cmp	r3, #0
 810cac8:	f000 80cc 	beq.w	810cc64 <HAL_UART_IRQHandler+0x7a0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810cacc:	687b      	ldr	r3, [r7, #4]
 810cace:	681b      	ldr	r3, [r3, #0]
 810cad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cad4:	e853 3f00 	ldrex	r3, [r3]
 810cad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810cada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cadc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810cae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810cae4:	687b      	ldr	r3, [r7, #4]
 810cae6:	681b      	ldr	r3, [r3, #0]
 810cae8:	461a      	mov	r2, r3
 810caea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810caee:	647b      	str	r3, [r7, #68]	@ 0x44
 810caf0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810caf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810caf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810caf6:	e841 2300 	strex	r3, r2, [r1]
 810cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810cafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810cafe:	2b00      	cmp	r3, #0
 810cb00:	d1e4      	bne.n	810cacc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cb02:	687b      	ldr	r3, [r7, #4]
 810cb04:	681b      	ldr	r3, [r3, #0]
 810cb06:	3308      	adds	r3, #8
 810cb08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb0c:	e853 3f00 	ldrex	r3, [r3]
 810cb10:	623b      	str	r3, [r7, #32]
   return(result);
 810cb12:	6a3b      	ldr	r3, [r7, #32]
 810cb14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cb18:	f023 0301 	bic.w	r3, r3, #1
 810cb1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810cb20:	687b      	ldr	r3, [r7, #4]
 810cb22:	681b      	ldr	r3, [r3, #0]
 810cb24:	3308      	adds	r3, #8
 810cb26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810cb2a:	633a      	str	r2, [r7, #48]	@ 0x30
 810cb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810cb30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cb32:	e841 2300 	strex	r3, r2, [r1]
 810cb36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810cb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb3a:	2b00      	cmp	r3, #0
 810cb3c:	d1e1      	bne.n	810cb02 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810cb3e:	687b      	ldr	r3, [r7, #4]
 810cb40:	2220      	movs	r2, #32
 810cb42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cb46:	687b      	ldr	r3, [r7, #4]
 810cb48:	2200      	movs	r2, #0
 810cb4a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810cb4c:	687b      	ldr	r3, [r7, #4]
 810cb4e:	2200      	movs	r2, #0
 810cb50:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	681b      	ldr	r3, [r3, #0]
 810cb56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb58:	693b      	ldr	r3, [r7, #16]
 810cb5a:	e853 3f00 	ldrex	r3, [r3]
 810cb5e:	60fb      	str	r3, [r7, #12]
   return(result);
 810cb60:	68fb      	ldr	r3, [r7, #12]
 810cb62:	f023 0310 	bic.w	r3, r3, #16
 810cb66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810cb6a:	687b      	ldr	r3, [r7, #4]
 810cb6c:	681b      	ldr	r3, [r3, #0]
 810cb6e:	461a      	mov	r2, r3
 810cb70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810cb74:	61fb      	str	r3, [r7, #28]
 810cb76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb78:	69b9      	ldr	r1, [r7, #24]
 810cb7a:	69fa      	ldr	r2, [r7, #28]
 810cb7c:	e841 2300 	strex	r3, r2, [r1]
 810cb80:	617b      	str	r3, [r7, #20]
   return(result);
 810cb82:	697b      	ldr	r3, [r7, #20]
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d1e4      	bne.n	810cb52 <HAL_UART_IRQHandler+0x68e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810cb88:	687b      	ldr	r3, [r7, #4]
 810cb8a:	2202      	movs	r2, #2
 810cb8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810cb8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cb92:	4619      	mov	r1, r3
 810cb94:	6878      	ldr	r0, [r7, #4]
 810cb96:	f000 f87f 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810cb9a:	e063      	b.n	810cc64 <HAL_UART_IRQHandler+0x7a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810cb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810cba4:	2b00      	cmp	r3, #0
 810cba6:	d00e      	beq.n	810cbc6 <HAL_UART_IRQHandler+0x702>
 810cba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cbac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cbb0:	2b00      	cmp	r3, #0
 810cbb2:	d008      	beq.n	810cbc6 <HAL_UART_IRQHandler+0x702>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810cbb4:	687b      	ldr	r3, [r7, #4]
 810cbb6:	681b      	ldr	r3, [r3, #0]
 810cbb8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810cbbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810cbbe:	6878      	ldr	r0, [r7, #4]
 810cbc0:	f001 f83a 	bl	810dc38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cbc4:	e051      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810cbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cbca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cbce:	2b00      	cmp	r3, #0
 810cbd0:	d014      	beq.n	810cbfc <HAL_UART_IRQHandler+0x738>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810cbd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cbd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cbda:	2b00      	cmp	r3, #0
 810cbdc:	d105      	bne.n	810cbea <HAL_UART_IRQHandler+0x726>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810cbde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cbe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cbe6:	2b00      	cmp	r3, #0
 810cbe8:	d008      	beq.n	810cbfc <HAL_UART_IRQHandler+0x738>
  {
    if (huart->TxISR != NULL)
 810cbea:	687b      	ldr	r3, [r7, #4]
 810cbec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cbee:	2b00      	cmp	r3, #0
 810cbf0:	d03a      	beq.n	810cc68 <HAL_UART_IRQHandler+0x7a4>
    {
      huart->TxISR(huart);
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cbf6:	6878      	ldr	r0, [r7, #4]
 810cbf8:	4798      	blx	r3
    }
    return;
 810cbfa:	e035      	b.n	810cc68 <HAL_UART_IRQHandler+0x7a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810cbfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cc04:	2b00      	cmp	r3, #0
 810cc06:	d009      	beq.n	810cc1c <HAL_UART_IRQHandler+0x758>
 810cc08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cc10:	2b00      	cmp	r3, #0
 810cc12:	d003      	beq.n	810cc1c <HAL_UART_IRQHandler+0x758>
  {
    UART_EndTransmit_IT(huart);
 810cc14:	6878      	ldr	r0, [r7, #4]
 810cc16:	f000 ffe4 	bl	810dbe2 <UART_EndTransmit_IT>
    return;
 810cc1a:	e026      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810cc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cc24:	2b00      	cmp	r3, #0
 810cc26:	d009      	beq.n	810cc3c <HAL_UART_IRQHandler+0x778>
 810cc28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810cc30:	2b00      	cmp	r3, #0
 810cc32:	d003      	beq.n	810cc3c <HAL_UART_IRQHandler+0x778>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810cc34:	6878      	ldr	r0, [r7, #4]
 810cc36:	f001 f813 	bl	810dc60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cc3a:	e016      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810cc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810cc44:	2b00      	cmp	r3, #0
 810cc46:	d010      	beq.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
 810cc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc4c:	2b00      	cmp	r3, #0
 810cc4e:	da0c      	bge.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810cc50:	6878      	ldr	r0, [r7, #4]
 810cc52:	f000 fffb 	bl	810dc4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cc56:	e008      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
      return;
 810cc58:	bf00      	nop
 810cc5a:	e006      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
    return;
 810cc5c:	bf00      	nop
 810cc5e:	e004      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
      return;
 810cc60:	bf00      	nop
 810cc62:	e002      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
      return;
 810cc64:	bf00      	nop
 810cc66:	e000      	b.n	810cc6a <HAL_UART_IRQHandler+0x7a6>
    return;
 810cc68:	bf00      	nop
  }
}
 810cc6a:	37e8      	adds	r7, #232	@ 0xe8
 810cc6c:	46bd      	mov	sp, r7
 810cc6e:	bd80      	pop	{r7, pc}

0810cc70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810cc70:	b480      	push	{r7}
 810cc72:	b083      	sub	sp, #12
 810cc74:	af00      	add	r7, sp, #0
 810cc76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810cc78:	bf00      	nop
 810cc7a:	370c      	adds	r7, #12
 810cc7c:	46bd      	mov	sp, r7
 810cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc82:	4770      	bx	lr

0810cc84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810cc84:	b480      	push	{r7}
 810cc86:	b083      	sub	sp, #12
 810cc88:	af00      	add	r7, sp, #0
 810cc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810cc8c:	bf00      	nop
 810cc8e:	370c      	adds	r7, #12
 810cc90:	46bd      	mov	sp, r7
 810cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc96:	4770      	bx	lr

0810cc98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810cc98:	b480      	push	{r7}
 810cc9a:	b083      	sub	sp, #12
 810cc9c:	af00      	add	r7, sp, #0
 810cc9e:	6078      	str	r0, [r7, #4]
 810cca0:	460b      	mov	r3, r1
 810cca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810cca4:	bf00      	nop
 810cca6:	370c      	adds	r7, #12
 810cca8:	46bd      	mov	sp, r7
 810ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccae:	4770      	bx	lr

0810ccb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810ccb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810ccb4:	b092      	sub	sp, #72	@ 0x48
 810ccb6:	af00      	add	r7, sp, #0
 810ccb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810ccba:	2300      	movs	r3, #0
 810ccbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810ccc0:	697b      	ldr	r3, [r7, #20]
 810ccc2:	689a      	ldr	r2, [r3, #8]
 810ccc4:	697b      	ldr	r3, [r7, #20]
 810ccc6:	691b      	ldr	r3, [r3, #16]
 810ccc8:	431a      	orrs	r2, r3
 810ccca:	697b      	ldr	r3, [r7, #20]
 810cccc:	695b      	ldr	r3, [r3, #20]
 810ccce:	431a      	orrs	r2, r3
 810ccd0:	697b      	ldr	r3, [r7, #20]
 810ccd2:	69db      	ldr	r3, [r3, #28]
 810ccd4:	4313      	orrs	r3, r2
 810ccd6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810ccd8:	697b      	ldr	r3, [r7, #20]
 810ccda:	681b      	ldr	r3, [r3, #0]
 810ccdc:	681a      	ldr	r2, [r3, #0]
 810ccde:	4bbd      	ldr	r3, [pc, #756]	@ (810cfd4 <UART_SetConfig+0x324>)
 810cce0:	4013      	ands	r3, r2
 810cce2:	697a      	ldr	r2, [r7, #20]
 810cce4:	6812      	ldr	r2, [r2, #0]
 810cce6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810cce8:	430b      	orrs	r3, r1
 810ccea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810ccec:	697b      	ldr	r3, [r7, #20]
 810ccee:	681b      	ldr	r3, [r3, #0]
 810ccf0:	685b      	ldr	r3, [r3, #4]
 810ccf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810ccf6:	697b      	ldr	r3, [r7, #20]
 810ccf8:	68da      	ldr	r2, [r3, #12]
 810ccfa:	697b      	ldr	r3, [r7, #20]
 810ccfc:	681b      	ldr	r3, [r3, #0]
 810ccfe:	430a      	orrs	r2, r1
 810cd00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810cd02:	697b      	ldr	r3, [r7, #20]
 810cd04:	699b      	ldr	r3, [r3, #24]
 810cd06:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810cd08:	697b      	ldr	r3, [r7, #20]
 810cd0a:	681b      	ldr	r3, [r3, #0]
 810cd0c:	4ab2      	ldr	r2, [pc, #712]	@ (810cfd8 <UART_SetConfig+0x328>)
 810cd0e:	4293      	cmp	r3, r2
 810cd10:	d004      	beq.n	810cd1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810cd12:	697b      	ldr	r3, [r7, #20]
 810cd14:	6a1b      	ldr	r3, [r3, #32]
 810cd16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810cd18:	4313      	orrs	r3, r2
 810cd1a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810cd1c:	697b      	ldr	r3, [r7, #20]
 810cd1e:	681b      	ldr	r3, [r3, #0]
 810cd20:	689b      	ldr	r3, [r3, #8]
 810cd22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810cd26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810cd2a:	697a      	ldr	r2, [r7, #20]
 810cd2c:	6812      	ldr	r2, [r2, #0]
 810cd2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810cd30:	430b      	orrs	r3, r1
 810cd32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810cd34:	697b      	ldr	r3, [r7, #20]
 810cd36:	681b      	ldr	r3, [r3, #0]
 810cd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd3a:	f023 010f 	bic.w	r1, r3, #15
 810cd3e:	697b      	ldr	r3, [r7, #20]
 810cd40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810cd42:	697b      	ldr	r3, [r7, #20]
 810cd44:	681b      	ldr	r3, [r3, #0]
 810cd46:	430a      	orrs	r2, r1
 810cd48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810cd4a:	697b      	ldr	r3, [r7, #20]
 810cd4c:	681b      	ldr	r3, [r3, #0]
 810cd4e:	4aa3      	ldr	r2, [pc, #652]	@ (810cfdc <UART_SetConfig+0x32c>)
 810cd50:	4293      	cmp	r3, r2
 810cd52:	d177      	bne.n	810ce44 <UART_SetConfig+0x194>
 810cd54:	4ba2      	ldr	r3, [pc, #648]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cd56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cd58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810cd5c:	2b28      	cmp	r3, #40	@ 0x28
 810cd5e:	d86d      	bhi.n	810ce3c <UART_SetConfig+0x18c>
 810cd60:	a201      	add	r2, pc, #4	@ (adr r2, 810cd68 <UART_SetConfig+0xb8>)
 810cd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cd66:	bf00      	nop
 810cd68:	0810ce0d 	.word	0x0810ce0d
 810cd6c:	0810ce3d 	.word	0x0810ce3d
 810cd70:	0810ce3d 	.word	0x0810ce3d
 810cd74:	0810ce3d 	.word	0x0810ce3d
 810cd78:	0810ce3d 	.word	0x0810ce3d
 810cd7c:	0810ce3d 	.word	0x0810ce3d
 810cd80:	0810ce3d 	.word	0x0810ce3d
 810cd84:	0810ce3d 	.word	0x0810ce3d
 810cd88:	0810ce15 	.word	0x0810ce15
 810cd8c:	0810ce3d 	.word	0x0810ce3d
 810cd90:	0810ce3d 	.word	0x0810ce3d
 810cd94:	0810ce3d 	.word	0x0810ce3d
 810cd98:	0810ce3d 	.word	0x0810ce3d
 810cd9c:	0810ce3d 	.word	0x0810ce3d
 810cda0:	0810ce3d 	.word	0x0810ce3d
 810cda4:	0810ce3d 	.word	0x0810ce3d
 810cda8:	0810ce1d 	.word	0x0810ce1d
 810cdac:	0810ce3d 	.word	0x0810ce3d
 810cdb0:	0810ce3d 	.word	0x0810ce3d
 810cdb4:	0810ce3d 	.word	0x0810ce3d
 810cdb8:	0810ce3d 	.word	0x0810ce3d
 810cdbc:	0810ce3d 	.word	0x0810ce3d
 810cdc0:	0810ce3d 	.word	0x0810ce3d
 810cdc4:	0810ce3d 	.word	0x0810ce3d
 810cdc8:	0810ce25 	.word	0x0810ce25
 810cdcc:	0810ce3d 	.word	0x0810ce3d
 810cdd0:	0810ce3d 	.word	0x0810ce3d
 810cdd4:	0810ce3d 	.word	0x0810ce3d
 810cdd8:	0810ce3d 	.word	0x0810ce3d
 810cddc:	0810ce3d 	.word	0x0810ce3d
 810cde0:	0810ce3d 	.word	0x0810ce3d
 810cde4:	0810ce3d 	.word	0x0810ce3d
 810cde8:	0810ce2d 	.word	0x0810ce2d
 810cdec:	0810ce3d 	.word	0x0810ce3d
 810cdf0:	0810ce3d 	.word	0x0810ce3d
 810cdf4:	0810ce3d 	.word	0x0810ce3d
 810cdf8:	0810ce3d 	.word	0x0810ce3d
 810cdfc:	0810ce3d 	.word	0x0810ce3d
 810ce00:	0810ce3d 	.word	0x0810ce3d
 810ce04:	0810ce3d 	.word	0x0810ce3d
 810ce08:	0810ce35 	.word	0x0810ce35
 810ce0c:	2301      	movs	r3, #1
 810ce0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce12:	e220      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce14:	2304      	movs	r3, #4
 810ce16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce1a:	e21c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce1c:	2308      	movs	r3, #8
 810ce1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce22:	e218      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce24:	2310      	movs	r3, #16
 810ce26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce2a:	e214      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce2c:	2320      	movs	r3, #32
 810ce2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce32:	e210      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce34:	2340      	movs	r3, #64	@ 0x40
 810ce36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce3a:	e20c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce3c:	2380      	movs	r3, #128	@ 0x80
 810ce3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce42:	e208      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce44:	697b      	ldr	r3, [r7, #20]
 810ce46:	681b      	ldr	r3, [r3, #0]
 810ce48:	4a66      	ldr	r2, [pc, #408]	@ (810cfe4 <UART_SetConfig+0x334>)
 810ce4a:	4293      	cmp	r3, r2
 810ce4c:	d130      	bne.n	810ceb0 <UART_SetConfig+0x200>
 810ce4e:	4b64      	ldr	r3, [pc, #400]	@ (810cfe0 <UART_SetConfig+0x330>)
 810ce50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ce52:	f003 0307 	and.w	r3, r3, #7
 810ce56:	2b05      	cmp	r3, #5
 810ce58:	d826      	bhi.n	810cea8 <UART_SetConfig+0x1f8>
 810ce5a:	a201      	add	r2, pc, #4	@ (adr r2, 810ce60 <UART_SetConfig+0x1b0>)
 810ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ce60:	0810ce79 	.word	0x0810ce79
 810ce64:	0810ce81 	.word	0x0810ce81
 810ce68:	0810ce89 	.word	0x0810ce89
 810ce6c:	0810ce91 	.word	0x0810ce91
 810ce70:	0810ce99 	.word	0x0810ce99
 810ce74:	0810cea1 	.word	0x0810cea1
 810ce78:	2300      	movs	r3, #0
 810ce7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce7e:	e1ea      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce80:	2304      	movs	r3, #4
 810ce82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce86:	e1e6      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce88:	2308      	movs	r3, #8
 810ce8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce8e:	e1e2      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce90:	2310      	movs	r3, #16
 810ce92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce96:	e1de      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce98:	2320      	movs	r3, #32
 810ce9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce9e:	e1da      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cea0:	2340      	movs	r3, #64	@ 0x40
 810cea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cea6:	e1d6      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cea8:	2380      	movs	r3, #128	@ 0x80
 810ceaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ceae:	e1d2      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ceb0:	697b      	ldr	r3, [r7, #20]
 810ceb2:	681b      	ldr	r3, [r3, #0]
 810ceb4:	4a4c      	ldr	r2, [pc, #304]	@ (810cfe8 <UART_SetConfig+0x338>)
 810ceb6:	4293      	cmp	r3, r2
 810ceb8:	d130      	bne.n	810cf1c <UART_SetConfig+0x26c>
 810ceba:	4b49      	ldr	r3, [pc, #292]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cebe:	f003 0307 	and.w	r3, r3, #7
 810cec2:	2b05      	cmp	r3, #5
 810cec4:	d826      	bhi.n	810cf14 <UART_SetConfig+0x264>
 810cec6:	a201      	add	r2, pc, #4	@ (adr r2, 810cecc <UART_SetConfig+0x21c>)
 810cec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cecc:	0810cee5 	.word	0x0810cee5
 810ced0:	0810ceed 	.word	0x0810ceed
 810ced4:	0810cef5 	.word	0x0810cef5
 810ced8:	0810cefd 	.word	0x0810cefd
 810cedc:	0810cf05 	.word	0x0810cf05
 810cee0:	0810cf0d 	.word	0x0810cf0d
 810cee4:	2300      	movs	r3, #0
 810cee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ceea:	e1b4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ceec:	2304      	movs	r3, #4
 810ceee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cef2:	e1b0      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cef4:	2308      	movs	r3, #8
 810cef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cefa:	e1ac      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cefc:	2310      	movs	r3, #16
 810cefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf02:	e1a8      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf04:	2320      	movs	r3, #32
 810cf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf0a:	e1a4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf0c:	2340      	movs	r3, #64	@ 0x40
 810cf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf12:	e1a0      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf14:	2380      	movs	r3, #128	@ 0x80
 810cf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf1a:	e19c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf1c:	697b      	ldr	r3, [r7, #20]
 810cf1e:	681b      	ldr	r3, [r3, #0]
 810cf20:	4a32      	ldr	r2, [pc, #200]	@ (810cfec <UART_SetConfig+0x33c>)
 810cf22:	4293      	cmp	r3, r2
 810cf24:	d130      	bne.n	810cf88 <UART_SetConfig+0x2d8>
 810cf26:	4b2e      	ldr	r3, [pc, #184]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cf28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cf2a:	f003 0307 	and.w	r3, r3, #7
 810cf2e:	2b05      	cmp	r3, #5
 810cf30:	d826      	bhi.n	810cf80 <UART_SetConfig+0x2d0>
 810cf32:	a201      	add	r2, pc, #4	@ (adr r2, 810cf38 <UART_SetConfig+0x288>)
 810cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cf38:	0810cf51 	.word	0x0810cf51
 810cf3c:	0810cf59 	.word	0x0810cf59
 810cf40:	0810cf61 	.word	0x0810cf61
 810cf44:	0810cf69 	.word	0x0810cf69
 810cf48:	0810cf71 	.word	0x0810cf71
 810cf4c:	0810cf79 	.word	0x0810cf79
 810cf50:	2300      	movs	r3, #0
 810cf52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf56:	e17e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf58:	2304      	movs	r3, #4
 810cf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf5e:	e17a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf60:	2308      	movs	r3, #8
 810cf62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf66:	e176      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf68:	2310      	movs	r3, #16
 810cf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf6e:	e172      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf70:	2320      	movs	r3, #32
 810cf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf76:	e16e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf78:	2340      	movs	r3, #64	@ 0x40
 810cf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf7e:	e16a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf80:	2380      	movs	r3, #128	@ 0x80
 810cf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf86:	e166      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf88:	697b      	ldr	r3, [r7, #20]
 810cf8a:	681b      	ldr	r3, [r3, #0]
 810cf8c:	4a18      	ldr	r2, [pc, #96]	@ (810cff0 <UART_SetConfig+0x340>)
 810cf8e:	4293      	cmp	r3, r2
 810cf90:	d140      	bne.n	810d014 <UART_SetConfig+0x364>
 810cf92:	4b13      	ldr	r3, [pc, #76]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cf94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cf96:	f003 0307 	and.w	r3, r3, #7
 810cf9a:	2b05      	cmp	r3, #5
 810cf9c:	d836      	bhi.n	810d00c <UART_SetConfig+0x35c>
 810cf9e:	a201      	add	r2, pc, #4	@ (adr r2, 810cfa4 <UART_SetConfig+0x2f4>)
 810cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cfa4:	0810cfbd 	.word	0x0810cfbd
 810cfa8:	0810cfc5 	.word	0x0810cfc5
 810cfac:	0810cfcd 	.word	0x0810cfcd
 810cfb0:	0810cff5 	.word	0x0810cff5
 810cfb4:	0810cffd 	.word	0x0810cffd
 810cfb8:	0810d005 	.word	0x0810d005
 810cfbc:	2300      	movs	r3, #0
 810cfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfc2:	e148      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cfc4:	2304      	movs	r3, #4
 810cfc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfca:	e144      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cfcc:	2308      	movs	r3, #8
 810cfce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfd2:	e140      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cfd4:	cfff69f3 	.word	0xcfff69f3
 810cfd8:	58000c00 	.word	0x58000c00
 810cfdc:	40011000 	.word	0x40011000
 810cfe0:	58024400 	.word	0x58024400
 810cfe4:	40004400 	.word	0x40004400
 810cfe8:	40004800 	.word	0x40004800
 810cfec:	40004c00 	.word	0x40004c00
 810cff0:	40005000 	.word	0x40005000
 810cff4:	2310      	movs	r3, #16
 810cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cffa:	e12c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cffc:	2320      	movs	r3, #32
 810cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d002:	e128      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d004:	2340      	movs	r3, #64	@ 0x40
 810d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d00a:	e124      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d00c:	2380      	movs	r3, #128	@ 0x80
 810d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d012:	e120      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d014:	697b      	ldr	r3, [r7, #20]
 810d016:	681b      	ldr	r3, [r3, #0]
 810d018:	4acb      	ldr	r2, [pc, #812]	@ (810d348 <UART_SetConfig+0x698>)
 810d01a:	4293      	cmp	r3, r2
 810d01c:	d176      	bne.n	810d10c <UART_SetConfig+0x45c>
 810d01e:	4bcb      	ldr	r3, [pc, #812]	@ (810d34c <UART_SetConfig+0x69c>)
 810d020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810d026:	2b28      	cmp	r3, #40	@ 0x28
 810d028:	d86c      	bhi.n	810d104 <UART_SetConfig+0x454>
 810d02a:	a201      	add	r2, pc, #4	@ (adr r2, 810d030 <UART_SetConfig+0x380>)
 810d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d030:	0810d0d5 	.word	0x0810d0d5
 810d034:	0810d105 	.word	0x0810d105
 810d038:	0810d105 	.word	0x0810d105
 810d03c:	0810d105 	.word	0x0810d105
 810d040:	0810d105 	.word	0x0810d105
 810d044:	0810d105 	.word	0x0810d105
 810d048:	0810d105 	.word	0x0810d105
 810d04c:	0810d105 	.word	0x0810d105
 810d050:	0810d0dd 	.word	0x0810d0dd
 810d054:	0810d105 	.word	0x0810d105
 810d058:	0810d105 	.word	0x0810d105
 810d05c:	0810d105 	.word	0x0810d105
 810d060:	0810d105 	.word	0x0810d105
 810d064:	0810d105 	.word	0x0810d105
 810d068:	0810d105 	.word	0x0810d105
 810d06c:	0810d105 	.word	0x0810d105
 810d070:	0810d0e5 	.word	0x0810d0e5
 810d074:	0810d105 	.word	0x0810d105
 810d078:	0810d105 	.word	0x0810d105
 810d07c:	0810d105 	.word	0x0810d105
 810d080:	0810d105 	.word	0x0810d105
 810d084:	0810d105 	.word	0x0810d105
 810d088:	0810d105 	.word	0x0810d105
 810d08c:	0810d105 	.word	0x0810d105
 810d090:	0810d0ed 	.word	0x0810d0ed
 810d094:	0810d105 	.word	0x0810d105
 810d098:	0810d105 	.word	0x0810d105
 810d09c:	0810d105 	.word	0x0810d105
 810d0a0:	0810d105 	.word	0x0810d105
 810d0a4:	0810d105 	.word	0x0810d105
 810d0a8:	0810d105 	.word	0x0810d105
 810d0ac:	0810d105 	.word	0x0810d105
 810d0b0:	0810d0f5 	.word	0x0810d0f5
 810d0b4:	0810d105 	.word	0x0810d105
 810d0b8:	0810d105 	.word	0x0810d105
 810d0bc:	0810d105 	.word	0x0810d105
 810d0c0:	0810d105 	.word	0x0810d105
 810d0c4:	0810d105 	.word	0x0810d105
 810d0c8:	0810d105 	.word	0x0810d105
 810d0cc:	0810d105 	.word	0x0810d105
 810d0d0:	0810d0fd 	.word	0x0810d0fd
 810d0d4:	2301      	movs	r3, #1
 810d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0da:	e0bc      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0dc:	2304      	movs	r3, #4
 810d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0e2:	e0b8      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0e4:	2308      	movs	r3, #8
 810d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0ea:	e0b4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0ec:	2310      	movs	r3, #16
 810d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0f2:	e0b0      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0f4:	2320      	movs	r3, #32
 810d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0fa:	e0ac      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0fc:	2340      	movs	r3, #64	@ 0x40
 810d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d102:	e0a8      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d104:	2380      	movs	r3, #128	@ 0x80
 810d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d10a:	e0a4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d10c:	697b      	ldr	r3, [r7, #20]
 810d10e:	681b      	ldr	r3, [r3, #0]
 810d110:	4a8f      	ldr	r2, [pc, #572]	@ (810d350 <UART_SetConfig+0x6a0>)
 810d112:	4293      	cmp	r3, r2
 810d114:	d130      	bne.n	810d178 <UART_SetConfig+0x4c8>
 810d116:	4b8d      	ldr	r3, [pc, #564]	@ (810d34c <UART_SetConfig+0x69c>)
 810d118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d11a:	f003 0307 	and.w	r3, r3, #7
 810d11e:	2b05      	cmp	r3, #5
 810d120:	d826      	bhi.n	810d170 <UART_SetConfig+0x4c0>
 810d122:	a201      	add	r2, pc, #4	@ (adr r2, 810d128 <UART_SetConfig+0x478>)
 810d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d128:	0810d141 	.word	0x0810d141
 810d12c:	0810d149 	.word	0x0810d149
 810d130:	0810d151 	.word	0x0810d151
 810d134:	0810d159 	.word	0x0810d159
 810d138:	0810d161 	.word	0x0810d161
 810d13c:	0810d169 	.word	0x0810d169
 810d140:	2300      	movs	r3, #0
 810d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d146:	e086      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d148:	2304      	movs	r3, #4
 810d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d14e:	e082      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d150:	2308      	movs	r3, #8
 810d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d156:	e07e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d158:	2310      	movs	r3, #16
 810d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d15e:	e07a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d160:	2320      	movs	r3, #32
 810d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d166:	e076      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d168:	2340      	movs	r3, #64	@ 0x40
 810d16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d16e:	e072      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d170:	2380      	movs	r3, #128	@ 0x80
 810d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d176:	e06e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d178:	697b      	ldr	r3, [r7, #20]
 810d17a:	681b      	ldr	r3, [r3, #0]
 810d17c:	4a75      	ldr	r2, [pc, #468]	@ (810d354 <UART_SetConfig+0x6a4>)
 810d17e:	4293      	cmp	r3, r2
 810d180:	d130      	bne.n	810d1e4 <UART_SetConfig+0x534>
 810d182:	4b72      	ldr	r3, [pc, #456]	@ (810d34c <UART_SetConfig+0x69c>)
 810d184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d186:	f003 0307 	and.w	r3, r3, #7
 810d18a:	2b05      	cmp	r3, #5
 810d18c:	d826      	bhi.n	810d1dc <UART_SetConfig+0x52c>
 810d18e:	a201      	add	r2, pc, #4	@ (adr r2, 810d194 <UART_SetConfig+0x4e4>)
 810d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d194:	0810d1ad 	.word	0x0810d1ad
 810d198:	0810d1b5 	.word	0x0810d1b5
 810d19c:	0810d1bd 	.word	0x0810d1bd
 810d1a0:	0810d1c5 	.word	0x0810d1c5
 810d1a4:	0810d1cd 	.word	0x0810d1cd
 810d1a8:	0810d1d5 	.word	0x0810d1d5
 810d1ac:	2300      	movs	r3, #0
 810d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1b2:	e050      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1b4:	2304      	movs	r3, #4
 810d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1ba:	e04c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1bc:	2308      	movs	r3, #8
 810d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1c2:	e048      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1c4:	2310      	movs	r3, #16
 810d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1ca:	e044      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1cc:	2320      	movs	r3, #32
 810d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1d2:	e040      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1d4:	2340      	movs	r3, #64	@ 0x40
 810d1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1da:	e03c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1dc:	2380      	movs	r3, #128	@ 0x80
 810d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1e2:	e038      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1e4:	697b      	ldr	r3, [r7, #20]
 810d1e6:	681b      	ldr	r3, [r3, #0]
 810d1e8:	4a5b      	ldr	r2, [pc, #364]	@ (810d358 <UART_SetConfig+0x6a8>)
 810d1ea:	4293      	cmp	r3, r2
 810d1ec:	d130      	bne.n	810d250 <UART_SetConfig+0x5a0>
 810d1ee:	4b57      	ldr	r3, [pc, #348]	@ (810d34c <UART_SetConfig+0x69c>)
 810d1f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d1f2:	f003 0307 	and.w	r3, r3, #7
 810d1f6:	2b05      	cmp	r3, #5
 810d1f8:	d826      	bhi.n	810d248 <UART_SetConfig+0x598>
 810d1fa:	a201      	add	r2, pc, #4	@ (adr r2, 810d200 <UART_SetConfig+0x550>)
 810d1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d200:	0810d219 	.word	0x0810d219
 810d204:	0810d221 	.word	0x0810d221
 810d208:	0810d229 	.word	0x0810d229
 810d20c:	0810d231 	.word	0x0810d231
 810d210:	0810d239 	.word	0x0810d239
 810d214:	0810d241 	.word	0x0810d241
 810d218:	2302      	movs	r3, #2
 810d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d21e:	e01a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d220:	2304      	movs	r3, #4
 810d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d226:	e016      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d228:	2308      	movs	r3, #8
 810d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d22e:	e012      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d230:	2310      	movs	r3, #16
 810d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d236:	e00e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d238:	2320      	movs	r3, #32
 810d23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d23e:	e00a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d240:	2340      	movs	r3, #64	@ 0x40
 810d242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d246:	e006      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d248:	2380      	movs	r3, #128	@ 0x80
 810d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d24e:	e002      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d250:	2380      	movs	r3, #128	@ 0x80
 810d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810d256:	697b      	ldr	r3, [r7, #20]
 810d258:	681b      	ldr	r3, [r3, #0]
 810d25a:	4a3f      	ldr	r2, [pc, #252]	@ (810d358 <UART_SetConfig+0x6a8>)
 810d25c:	4293      	cmp	r3, r2
 810d25e:	f040 80f8 	bne.w	810d452 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810d262:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d266:	2b20      	cmp	r3, #32
 810d268:	dc46      	bgt.n	810d2f8 <UART_SetConfig+0x648>
 810d26a:	2b02      	cmp	r3, #2
 810d26c:	f2c0 8082 	blt.w	810d374 <UART_SetConfig+0x6c4>
 810d270:	3b02      	subs	r3, #2
 810d272:	2b1e      	cmp	r3, #30
 810d274:	d87e      	bhi.n	810d374 <UART_SetConfig+0x6c4>
 810d276:	a201      	add	r2, pc, #4	@ (adr r2, 810d27c <UART_SetConfig+0x5cc>)
 810d278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d27c:	0810d2ff 	.word	0x0810d2ff
 810d280:	0810d375 	.word	0x0810d375
 810d284:	0810d307 	.word	0x0810d307
 810d288:	0810d375 	.word	0x0810d375
 810d28c:	0810d375 	.word	0x0810d375
 810d290:	0810d375 	.word	0x0810d375
 810d294:	0810d317 	.word	0x0810d317
 810d298:	0810d375 	.word	0x0810d375
 810d29c:	0810d375 	.word	0x0810d375
 810d2a0:	0810d375 	.word	0x0810d375
 810d2a4:	0810d375 	.word	0x0810d375
 810d2a8:	0810d375 	.word	0x0810d375
 810d2ac:	0810d375 	.word	0x0810d375
 810d2b0:	0810d375 	.word	0x0810d375
 810d2b4:	0810d327 	.word	0x0810d327
 810d2b8:	0810d375 	.word	0x0810d375
 810d2bc:	0810d375 	.word	0x0810d375
 810d2c0:	0810d375 	.word	0x0810d375
 810d2c4:	0810d375 	.word	0x0810d375
 810d2c8:	0810d375 	.word	0x0810d375
 810d2cc:	0810d375 	.word	0x0810d375
 810d2d0:	0810d375 	.word	0x0810d375
 810d2d4:	0810d375 	.word	0x0810d375
 810d2d8:	0810d375 	.word	0x0810d375
 810d2dc:	0810d375 	.word	0x0810d375
 810d2e0:	0810d375 	.word	0x0810d375
 810d2e4:	0810d375 	.word	0x0810d375
 810d2e8:	0810d375 	.word	0x0810d375
 810d2ec:	0810d375 	.word	0x0810d375
 810d2f0:	0810d375 	.word	0x0810d375
 810d2f4:	0810d367 	.word	0x0810d367
 810d2f8:	2b40      	cmp	r3, #64	@ 0x40
 810d2fa:	d037      	beq.n	810d36c <UART_SetConfig+0x6bc>
 810d2fc:	e03a      	b.n	810d374 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810d2fe:	f7fd ffb3 	bl	810b268 <HAL_RCCEx_GetD3PCLK1Freq>
 810d302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d304:	e03c      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d30a:	4618      	mov	r0, r3
 810d30c:	f7fd ffc2 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d314:	e034      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d316:	f107 0318 	add.w	r3, r7, #24
 810d31a:	4618      	mov	r0, r3
 810d31c:	f7fe f90e 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d320:	69fb      	ldr	r3, [r7, #28]
 810d322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d324:	e02c      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d326:	4b09      	ldr	r3, [pc, #36]	@ (810d34c <UART_SetConfig+0x69c>)
 810d328:	681b      	ldr	r3, [r3, #0]
 810d32a:	f003 0320 	and.w	r3, r3, #32
 810d32e:	2b00      	cmp	r3, #0
 810d330:	d016      	beq.n	810d360 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d332:	4b06      	ldr	r3, [pc, #24]	@ (810d34c <UART_SetConfig+0x69c>)
 810d334:	681b      	ldr	r3, [r3, #0]
 810d336:	08db      	lsrs	r3, r3, #3
 810d338:	f003 0303 	and.w	r3, r3, #3
 810d33c:	4a07      	ldr	r2, [pc, #28]	@ (810d35c <UART_SetConfig+0x6ac>)
 810d33e:	fa22 f303 	lsr.w	r3, r2, r3
 810d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d344:	e01c      	b.n	810d380 <UART_SetConfig+0x6d0>
 810d346:	bf00      	nop
 810d348:	40011400 	.word	0x40011400
 810d34c:	58024400 	.word	0x58024400
 810d350:	40007800 	.word	0x40007800
 810d354:	40007c00 	.word	0x40007c00
 810d358:	58000c00 	.word	0x58000c00
 810d35c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810d360:	4b9d      	ldr	r3, [pc, #628]	@ (810d5d8 <UART_SetConfig+0x928>)
 810d362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d364:	e00c      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d366:	4b9d      	ldr	r3, [pc, #628]	@ (810d5dc <UART_SetConfig+0x92c>)
 810d368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d36a:	e009      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d36c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d372:	e005      	b.n	810d380 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810d374:	2300      	movs	r3, #0
 810d376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d378:	2301      	movs	r3, #1
 810d37a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d37e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810d380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d382:	2b00      	cmp	r3, #0
 810d384:	f000 81de 	beq.w	810d744 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810d388:	697b      	ldr	r3, [r7, #20]
 810d38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d38c:	4a94      	ldr	r2, [pc, #592]	@ (810d5e0 <UART_SetConfig+0x930>)
 810d38e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d392:	461a      	mov	r2, r3
 810d394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d396:	fbb3 f3f2 	udiv	r3, r3, r2
 810d39a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d39c:	697b      	ldr	r3, [r7, #20]
 810d39e:	685a      	ldr	r2, [r3, #4]
 810d3a0:	4613      	mov	r3, r2
 810d3a2:	005b      	lsls	r3, r3, #1
 810d3a4:	4413      	add	r3, r2
 810d3a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d3a8:	429a      	cmp	r2, r3
 810d3aa:	d305      	bcc.n	810d3b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810d3ac:	697b      	ldr	r3, [r7, #20]
 810d3ae:	685b      	ldr	r3, [r3, #4]
 810d3b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d3b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d3b4:	429a      	cmp	r2, r3
 810d3b6:	d903      	bls.n	810d3c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810d3b8:	2301      	movs	r3, #1
 810d3ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d3be:	e1c1      	b.n	810d744 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d3c2:	2200      	movs	r2, #0
 810d3c4:	60bb      	str	r3, [r7, #8]
 810d3c6:	60fa      	str	r2, [r7, #12]
 810d3c8:	697b      	ldr	r3, [r7, #20]
 810d3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d3cc:	4a84      	ldr	r2, [pc, #528]	@ (810d5e0 <UART_SetConfig+0x930>)
 810d3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d3d2:	b29b      	uxth	r3, r3
 810d3d4:	2200      	movs	r2, #0
 810d3d6:	603b      	str	r3, [r7, #0]
 810d3d8:	607a      	str	r2, [r7, #4]
 810d3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d3de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810d3e2:	f7f3 f991 	bl	8100708 <__aeabi_uldivmod>
 810d3e6:	4602      	mov	r2, r0
 810d3e8:	460b      	mov	r3, r1
 810d3ea:	4610      	mov	r0, r2
 810d3ec:	4619      	mov	r1, r3
 810d3ee:	f04f 0200 	mov.w	r2, #0
 810d3f2:	f04f 0300 	mov.w	r3, #0
 810d3f6:	020b      	lsls	r3, r1, #8
 810d3f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810d3fc:	0202      	lsls	r2, r0, #8
 810d3fe:	6979      	ldr	r1, [r7, #20]
 810d400:	6849      	ldr	r1, [r1, #4]
 810d402:	0849      	lsrs	r1, r1, #1
 810d404:	2000      	movs	r0, #0
 810d406:	460c      	mov	r4, r1
 810d408:	4605      	mov	r5, r0
 810d40a:	eb12 0804 	adds.w	r8, r2, r4
 810d40e:	eb43 0905 	adc.w	r9, r3, r5
 810d412:	697b      	ldr	r3, [r7, #20]
 810d414:	685b      	ldr	r3, [r3, #4]
 810d416:	2200      	movs	r2, #0
 810d418:	469a      	mov	sl, r3
 810d41a:	4693      	mov	fp, r2
 810d41c:	4652      	mov	r2, sl
 810d41e:	465b      	mov	r3, fp
 810d420:	4640      	mov	r0, r8
 810d422:	4649      	mov	r1, r9
 810d424:	f7f3 f970 	bl	8100708 <__aeabi_uldivmod>
 810d428:	4602      	mov	r2, r0
 810d42a:	460b      	mov	r3, r1
 810d42c:	4613      	mov	r3, r2
 810d42e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810d430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810d436:	d308      	bcc.n	810d44a <UART_SetConfig+0x79a>
 810d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d43a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d43e:	d204      	bcs.n	810d44a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810d440:	697b      	ldr	r3, [r7, #20]
 810d442:	681b      	ldr	r3, [r3, #0]
 810d444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810d446:	60da      	str	r2, [r3, #12]
 810d448:	e17c      	b.n	810d744 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810d44a:	2301      	movs	r3, #1
 810d44c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d450:	e178      	b.n	810d744 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810d452:	697b      	ldr	r3, [r7, #20]
 810d454:	69db      	ldr	r3, [r3, #28]
 810d456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810d45a:	f040 80c5 	bne.w	810d5e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810d45e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d462:	2b20      	cmp	r3, #32
 810d464:	dc48      	bgt.n	810d4f8 <UART_SetConfig+0x848>
 810d466:	2b00      	cmp	r3, #0
 810d468:	db7b      	blt.n	810d562 <UART_SetConfig+0x8b2>
 810d46a:	2b20      	cmp	r3, #32
 810d46c:	d879      	bhi.n	810d562 <UART_SetConfig+0x8b2>
 810d46e:	a201      	add	r2, pc, #4	@ (adr r2, 810d474 <UART_SetConfig+0x7c4>)
 810d470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d474:	0810d4ff 	.word	0x0810d4ff
 810d478:	0810d507 	.word	0x0810d507
 810d47c:	0810d563 	.word	0x0810d563
 810d480:	0810d563 	.word	0x0810d563
 810d484:	0810d50f 	.word	0x0810d50f
 810d488:	0810d563 	.word	0x0810d563
 810d48c:	0810d563 	.word	0x0810d563
 810d490:	0810d563 	.word	0x0810d563
 810d494:	0810d51f 	.word	0x0810d51f
 810d498:	0810d563 	.word	0x0810d563
 810d49c:	0810d563 	.word	0x0810d563
 810d4a0:	0810d563 	.word	0x0810d563
 810d4a4:	0810d563 	.word	0x0810d563
 810d4a8:	0810d563 	.word	0x0810d563
 810d4ac:	0810d563 	.word	0x0810d563
 810d4b0:	0810d563 	.word	0x0810d563
 810d4b4:	0810d52f 	.word	0x0810d52f
 810d4b8:	0810d563 	.word	0x0810d563
 810d4bc:	0810d563 	.word	0x0810d563
 810d4c0:	0810d563 	.word	0x0810d563
 810d4c4:	0810d563 	.word	0x0810d563
 810d4c8:	0810d563 	.word	0x0810d563
 810d4cc:	0810d563 	.word	0x0810d563
 810d4d0:	0810d563 	.word	0x0810d563
 810d4d4:	0810d563 	.word	0x0810d563
 810d4d8:	0810d563 	.word	0x0810d563
 810d4dc:	0810d563 	.word	0x0810d563
 810d4e0:	0810d563 	.word	0x0810d563
 810d4e4:	0810d563 	.word	0x0810d563
 810d4e8:	0810d563 	.word	0x0810d563
 810d4ec:	0810d563 	.word	0x0810d563
 810d4f0:	0810d563 	.word	0x0810d563
 810d4f4:	0810d555 	.word	0x0810d555
 810d4f8:	2b40      	cmp	r3, #64	@ 0x40
 810d4fa:	d02e      	beq.n	810d55a <UART_SetConfig+0x8aa>
 810d4fc:	e031      	b.n	810d562 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d4fe:	f7fb fefd 	bl	81092fc <HAL_RCC_GetPCLK1Freq>
 810d502:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d504:	e033      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d506:	f7fb ff0f 	bl	8109328 <HAL_RCC_GetPCLK2Freq>
 810d50a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d50c:	e02f      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d50e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d512:	4618      	mov	r0, r3
 810d514:	f7fd febe 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d51c:	e027      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d51e:	f107 0318 	add.w	r3, r7, #24
 810d522:	4618      	mov	r0, r3
 810d524:	f7fe f80a 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d528:	69fb      	ldr	r3, [r7, #28]
 810d52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d52c:	e01f      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d52e:	4b2d      	ldr	r3, [pc, #180]	@ (810d5e4 <UART_SetConfig+0x934>)
 810d530:	681b      	ldr	r3, [r3, #0]
 810d532:	f003 0320 	and.w	r3, r3, #32
 810d536:	2b00      	cmp	r3, #0
 810d538:	d009      	beq.n	810d54e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d53a:	4b2a      	ldr	r3, [pc, #168]	@ (810d5e4 <UART_SetConfig+0x934>)
 810d53c:	681b      	ldr	r3, [r3, #0]
 810d53e:	08db      	lsrs	r3, r3, #3
 810d540:	f003 0303 	and.w	r3, r3, #3
 810d544:	4a24      	ldr	r2, [pc, #144]	@ (810d5d8 <UART_SetConfig+0x928>)
 810d546:	fa22 f303 	lsr.w	r3, r2, r3
 810d54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d54c:	e00f      	b.n	810d56e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810d54e:	4b22      	ldr	r3, [pc, #136]	@ (810d5d8 <UART_SetConfig+0x928>)
 810d550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d552:	e00c      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d554:	4b21      	ldr	r3, [pc, #132]	@ (810d5dc <UART_SetConfig+0x92c>)
 810d556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d558:	e009      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d55a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d560:	e005      	b.n	810d56e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810d562:	2300      	movs	r3, #0
 810d564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d566:	2301      	movs	r3, #1
 810d568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d56c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810d56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d570:	2b00      	cmp	r3, #0
 810d572:	f000 80e7 	beq.w	810d744 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d576:	697b      	ldr	r3, [r7, #20]
 810d578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d57a:	4a19      	ldr	r2, [pc, #100]	@ (810d5e0 <UART_SetConfig+0x930>)
 810d57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d580:	461a      	mov	r2, r3
 810d582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d584:	fbb3 f3f2 	udiv	r3, r3, r2
 810d588:	005a      	lsls	r2, r3, #1
 810d58a:	697b      	ldr	r3, [r7, #20]
 810d58c:	685b      	ldr	r3, [r3, #4]
 810d58e:	085b      	lsrs	r3, r3, #1
 810d590:	441a      	add	r2, r3
 810d592:	697b      	ldr	r3, [r7, #20]
 810d594:	685b      	ldr	r3, [r3, #4]
 810d596:	fbb2 f3f3 	udiv	r3, r2, r3
 810d59a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d59e:	2b0f      	cmp	r3, #15
 810d5a0:	d916      	bls.n	810d5d0 <UART_SetConfig+0x920>
 810d5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d5a8:	d212      	bcs.n	810d5d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810d5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5ac:	b29b      	uxth	r3, r3
 810d5ae:	f023 030f 	bic.w	r3, r3, #15
 810d5b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810d5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5b6:	085b      	lsrs	r3, r3, #1
 810d5b8:	b29b      	uxth	r3, r3
 810d5ba:	f003 0307 	and.w	r3, r3, #7
 810d5be:	b29a      	uxth	r2, r3
 810d5c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810d5c2:	4313      	orrs	r3, r2
 810d5c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810d5c6:	697b      	ldr	r3, [r7, #20]
 810d5c8:	681b      	ldr	r3, [r3, #0]
 810d5ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810d5cc:	60da      	str	r2, [r3, #12]
 810d5ce:	e0b9      	b.n	810d744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d5d0:	2301      	movs	r3, #1
 810d5d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d5d6:	e0b5      	b.n	810d744 <UART_SetConfig+0xa94>
 810d5d8:	03d09000 	.word	0x03d09000
 810d5dc:	003d0900 	.word	0x003d0900
 810d5e0:	081121ec 	.word	0x081121ec
 810d5e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810d5e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d5ec:	2b20      	cmp	r3, #32
 810d5ee:	dc49      	bgt.n	810d684 <UART_SetConfig+0x9d4>
 810d5f0:	2b00      	cmp	r3, #0
 810d5f2:	db7c      	blt.n	810d6ee <UART_SetConfig+0xa3e>
 810d5f4:	2b20      	cmp	r3, #32
 810d5f6:	d87a      	bhi.n	810d6ee <UART_SetConfig+0xa3e>
 810d5f8:	a201      	add	r2, pc, #4	@ (adr r2, 810d600 <UART_SetConfig+0x950>)
 810d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d5fe:	bf00      	nop
 810d600:	0810d68b 	.word	0x0810d68b
 810d604:	0810d693 	.word	0x0810d693
 810d608:	0810d6ef 	.word	0x0810d6ef
 810d60c:	0810d6ef 	.word	0x0810d6ef
 810d610:	0810d69b 	.word	0x0810d69b
 810d614:	0810d6ef 	.word	0x0810d6ef
 810d618:	0810d6ef 	.word	0x0810d6ef
 810d61c:	0810d6ef 	.word	0x0810d6ef
 810d620:	0810d6ab 	.word	0x0810d6ab
 810d624:	0810d6ef 	.word	0x0810d6ef
 810d628:	0810d6ef 	.word	0x0810d6ef
 810d62c:	0810d6ef 	.word	0x0810d6ef
 810d630:	0810d6ef 	.word	0x0810d6ef
 810d634:	0810d6ef 	.word	0x0810d6ef
 810d638:	0810d6ef 	.word	0x0810d6ef
 810d63c:	0810d6ef 	.word	0x0810d6ef
 810d640:	0810d6bb 	.word	0x0810d6bb
 810d644:	0810d6ef 	.word	0x0810d6ef
 810d648:	0810d6ef 	.word	0x0810d6ef
 810d64c:	0810d6ef 	.word	0x0810d6ef
 810d650:	0810d6ef 	.word	0x0810d6ef
 810d654:	0810d6ef 	.word	0x0810d6ef
 810d658:	0810d6ef 	.word	0x0810d6ef
 810d65c:	0810d6ef 	.word	0x0810d6ef
 810d660:	0810d6ef 	.word	0x0810d6ef
 810d664:	0810d6ef 	.word	0x0810d6ef
 810d668:	0810d6ef 	.word	0x0810d6ef
 810d66c:	0810d6ef 	.word	0x0810d6ef
 810d670:	0810d6ef 	.word	0x0810d6ef
 810d674:	0810d6ef 	.word	0x0810d6ef
 810d678:	0810d6ef 	.word	0x0810d6ef
 810d67c:	0810d6ef 	.word	0x0810d6ef
 810d680:	0810d6e1 	.word	0x0810d6e1
 810d684:	2b40      	cmp	r3, #64	@ 0x40
 810d686:	d02e      	beq.n	810d6e6 <UART_SetConfig+0xa36>
 810d688:	e031      	b.n	810d6ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d68a:	f7fb fe37 	bl	81092fc <HAL_RCC_GetPCLK1Freq>
 810d68e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d690:	e033      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d692:	f7fb fe49 	bl	8109328 <HAL_RCC_GetPCLK2Freq>
 810d696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d698:	e02f      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d69a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d69e:	4618      	mov	r0, r3
 810d6a0:	f7fd fdf8 	bl	810b294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6a8:	e027      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d6aa:	f107 0318 	add.w	r3, r7, #24
 810d6ae:	4618      	mov	r0, r3
 810d6b0:	f7fd ff44 	bl	810b53c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d6b4:	69fb      	ldr	r3, [r7, #28]
 810d6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6b8:	e01f      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d6ba:	4b2d      	ldr	r3, [pc, #180]	@ (810d770 <UART_SetConfig+0xac0>)
 810d6bc:	681b      	ldr	r3, [r3, #0]
 810d6be:	f003 0320 	and.w	r3, r3, #32
 810d6c2:	2b00      	cmp	r3, #0
 810d6c4:	d009      	beq.n	810d6da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d6c6:	4b2a      	ldr	r3, [pc, #168]	@ (810d770 <UART_SetConfig+0xac0>)
 810d6c8:	681b      	ldr	r3, [r3, #0]
 810d6ca:	08db      	lsrs	r3, r3, #3
 810d6cc:	f003 0303 	and.w	r3, r3, #3
 810d6d0:	4a28      	ldr	r2, [pc, #160]	@ (810d774 <UART_SetConfig+0xac4>)
 810d6d2:	fa22 f303 	lsr.w	r3, r2, r3
 810d6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d6d8:	e00f      	b.n	810d6fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810d6da:	4b26      	ldr	r3, [pc, #152]	@ (810d774 <UART_SetConfig+0xac4>)
 810d6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6de:	e00c      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d6e0:	4b25      	ldr	r3, [pc, #148]	@ (810d778 <UART_SetConfig+0xac8>)
 810d6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6e4:	e009      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d6e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6ec:	e005      	b.n	810d6fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810d6ee:	2300      	movs	r3, #0
 810d6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d6f2:	2301      	movs	r3, #1
 810d6f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d6f8:	bf00      	nop
    }

    if (pclk != 0U)
 810d6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d6fc:	2b00      	cmp	r3, #0
 810d6fe:	d021      	beq.n	810d744 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d700:	697b      	ldr	r3, [r7, #20]
 810d702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d704:	4a1d      	ldr	r2, [pc, #116]	@ (810d77c <UART_SetConfig+0xacc>)
 810d706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d70a:	461a      	mov	r2, r3
 810d70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d70e:	fbb3 f2f2 	udiv	r2, r3, r2
 810d712:	697b      	ldr	r3, [r7, #20]
 810d714:	685b      	ldr	r3, [r3, #4]
 810d716:	085b      	lsrs	r3, r3, #1
 810d718:	441a      	add	r2, r3
 810d71a:	697b      	ldr	r3, [r7, #20]
 810d71c:	685b      	ldr	r3, [r3, #4]
 810d71e:	fbb2 f3f3 	udiv	r3, r2, r3
 810d722:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d726:	2b0f      	cmp	r3, #15
 810d728:	d909      	bls.n	810d73e <UART_SetConfig+0xa8e>
 810d72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d72c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d730:	d205      	bcs.n	810d73e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d734:	b29a      	uxth	r2, r3
 810d736:	697b      	ldr	r3, [r7, #20]
 810d738:	681b      	ldr	r3, [r3, #0]
 810d73a:	60da      	str	r2, [r3, #12]
 810d73c:	e002      	b.n	810d744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d73e:	2301      	movs	r3, #1
 810d740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810d744:	697b      	ldr	r3, [r7, #20]
 810d746:	2201      	movs	r2, #1
 810d748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810d74c:	697b      	ldr	r3, [r7, #20]
 810d74e:	2201      	movs	r2, #1
 810d750:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810d754:	697b      	ldr	r3, [r7, #20]
 810d756:	2200      	movs	r2, #0
 810d758:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810d75a:	697b      	ldr	r3, [r7, #20]
 810d75c:	2200      	movs	r2, #0
 810d75e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810d760:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810d764:	4618      	mov	r0, r3
 810d766:	3748      	adds	r7, #72	@ 0x48
 810d768:	46bd      	mov	sp, r7
 810d76a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810d76e:	bf00      	nop
 810d770:	58024400 	.word	0x58024400
 810d774:	03d09000 	.word	0x03d09000
 810d778:	003d0900 	.word	0x003d0900
 810d77c:	081121ec 	.word	0x081121ec

0810d780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810d780:	b480      	push	{r7}
 810d782:	b083      	sub	sp, #12
 810d784:	af00      	add	r7, sp, #0
 810d786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810d788:	687b      	ldr	r3, [r7, #4]
 810d78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d78c:	f003 0308 	and.w	r3, r3, #8
 810d790:	2b00      	cmp	r3, #0
 810d792:	d00a      	beq.n	810d7aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	681b      	ldr	r3, [r3, #0]
 810d798:	685b      	ldr	r3, [r3, #4]
 810d79a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810d79e:	687b      	ldr	r3, [r7, #4]
 810d7a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d7a2:	687b      	ldr	r3, [r7, #4]
 810d7a4:	681b      	ldr	r3, [r3, #0]
 810d7a6:	430a      	orrs	r2, r1
 810d7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810d7aa:	687b      	ldr	r3, [r7, #4]
 810d7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d7ae:	f003 0301 	and.w	r3, r3, #1
 810d7b2:	2b00      	cmp	r3, #0
 810d7b4:	d00a      	beq.n	810d7cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810d7b6:	687b      	ldr	r3, [r7, #4]
 810d7b8:	681b      	ldr	r3, [r3, #0]
 810d7ba:	685b      	ldr	r3, [r3, #4]
 810d7bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810d7c0:	687b      	ldr	r3, [r7, #4]
 810d7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d7c4:	687b      	ldr	r3, [r7, #4]
 810d7c6:	681b      	ldr	r3, [r3, #0]
 810d7c8:	430a      	orrs	r2, r1
 810d7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810d7cc:	687b      	ldr	r3, [r7, #4]
 810d7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d7d0:	f003 0302 	and.w	r3, r3, #2
 810d7d4:	2b00      	cmp	r3, #0
 810d7d6:	d00a      	beq.n	810d7ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810d7d8:	687b      	ldr	r3, [r7, #4]
 810d7da:	681b      	ldr	r3, [r3, #0]
 810d7dc:	685b      	ldr	r3, [r3, #4]
 810d7de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810d7e2:	687b      	ldr	r3, [r7, #4]
 810d7e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810d7e6:	687b      	ldr	r3, [r7, #4]
 810d7e8:	681b      	ldr	r3, [r3, #0]
 810d7ea:	430a      	orrs	r2, r1
 810d7ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810d7ee:	687b      	ldr	r3, [r7, #4]
 810d7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d7f2:	f003 0304 	and.w	r3, r3, #4
 810d7f6:	2b00      	cmp	r3, #0
 810d7f8:	d00a      	beq.n	810d810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810d7fa:	687b      	ldr	r3, [r7, #4]
 810d7fc:	681b      	ldr	r3, [r3, #0]
 810d7fe:	685b      	ldr	r3, [r3, #4]
 810d800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810d804:	687b      	ldr	r3, [r7, #4]
 810d806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810d808:	687b      	ldr	r3, [r7, #4]
 810d80a:	681b      	ldr	r3, [r3, #0]
 810d80c:	430a      	orrs	r2, r1
 810d80e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810d810:	687b      	ldr	r3, [r7, #4]
 810d812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d814:	f003 0310 	and.w	r3, r3, #16
 810d818:	2b00      	cmp	r3, #0
 810d81a:	d00a      	beq.n	810d832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810d81c:	687b      	ldr	r3, [r7, #4]
 810d81e:	681b      	ldr	r3, [r3, #0]
 810d820:	689b      	ldr	r3, [r3, #8]
 810d822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810d826:	687b      	ldr	r3, [r7, #4]
 810d828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810d82a:	687b      	ldr	r3, [r7, #4]
 810d82c:	681b      	ldr	r3, [r3, #0]
 810d82e:	430a      	orrs	r2, r1
 810d830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810d832:	687b      	ldr	r3, [r7, #4]
 810d834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d836:	f003 0320 	and.w	r3, r3, #32
 810d83a:	2b00      	cmp	r3, #0
 810d83c:	d00a      	beq.n	810d854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810d83e:	687b      	ldr	r3, [r7, #4]
 810d840:	681b      	ldr	r3, [r3, #0]
 810d842:	689b      	ldr	r3, [r3, #8]
 810d844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810d848:	687b      	ldr	r3, [r7, #4]
 810d84a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810d84c:	687b      	ldr	r3, [r7, #4]
 810d84e:	681b      	ldr	r3, [r3, #0]
 810d850:	430a      	orrs	r2, r1
 810d852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810d854:	687b      	ldr	r3, [r7, #4]
 810d856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d85c:	2b00      	cmp	r3, #0
 810d85e:	d01a      	beq.n	810d896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810d860:	687b      	ldr	r3, [r7, #4]
 810d862:	681b      	ldr	r3, [r3, #0]
 810d864:	685b      	ldr	r3, [r3, #4]
 810d866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810d86a:	687b      	ldr	r3, [r7, #4]
 810d86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810d86e:	687b      	ldr	r3, [r7, #4]
 810d870:	681b      	ldr	r3, [r3, #0]
 810d872:	430a      	orrs	r2, r1
 810d874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810d876:	687b      	ldr	r3, [r7, #4]
 810d878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810d87a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d87e:	d10a      	bne.n	810d896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810d880:	687b      	ldr	r3, [r7, #4]
 810d882:	681b      	ldr	r3, [r3, #0]
 810d884:	685b      	ldr	r3, [r3, #4]
 810d886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810d88a:	687b      	ldr	r3, [r7, #4]
 810d88c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810d88e:	687b      	ldr	r3, [r7, #4]
 810d890:	681b      	ldr	r3, [r3, #0]
 810d892:	430a      	orrs	r2, r1
 810d894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810d896:	687b      	ldr	r3, [r7, #4]
 810d898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d89e:	2b00      	cmp	r3, #0
 810d8a0:	d00a      	beq.n	810d8b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810d8a2:	687b      	ldr	r3, [r7, #4]
 810d8a4:	681b      	ldr	r3, [r3, #0]
 810d8a6:	685b      	ldr	r3, [r3, #4]
 810d8a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810d8ac:	687b      	ldr	r3, [r7, #4]
 810d8ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810d8b0:	687b      	ldr	r3, [r7, #4]
 810d8b2:	681b      	ldr	r3, [r3, #0]
 810d8b4:	430a      	orrs	r2, r1
 810d8b6:	605a      	str	r2, [r3, #4]
  }
}
 810d8b8:	bf00      	nop
 810d8ba:	370c      	adds	r7, #12
 810d8bc:	46bd      	mov	sp, r7
 810d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8c2:	4770      	bx	lr

0810d8c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810d8c4:	b580      	push	{r7, lr}
 810d8c6:	b098      	sub	sp, #96	@ 0x60
 810d8c8:	af02      	add	r7, sp, #8
 810d8ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d8cc:	687b      	ldr	r3, [r7, #4]
 810d8ce:	2200      	movs	r2, #0
 810d8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810d8d4:	f7f5 f938 	bl	8102b48 <HAL_GetTick>
 810d8d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810d8da:	687b      	ldr	r3, [r7, #4]
 810d8dc:	681b      	ldr	r3, [r3, #0]
 810d8de:	681b      	ldr	r3, [r3, #0]
 810d8e0:	f003 0308 	and.w	r3, r3, #8
 810d8e4:	2b08      	cmp	r3, #8
 810d8e6:	d12f      	bne.n	810d948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d8e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810d8ec:	9300      	str	r3, [sp, #0]
 810d8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d8f0:	2200      	movs	r2, #0
 810d8f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810d8f6:	6878      	ldr	r0, [r7, #4]
 810d8f8:	f000 f88e 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810d8fc:	4603      	mov	r3, r0
 810d8fe:	2b00      	cmp	r3, #0
 810d900:	d022      	beq.n	810d948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810d902:	687b      	ldr	r3, [r7, #4]
 810d904:	681b      	ldr	r3, [r3, #0]
 810d906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d90a:	e853 3f00 	ldrex	r3, [r3]
 810d90e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810d910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810d916:	653b      	str	r3, [r7, #80]	@ 0x50
 810d918:	687b      	ldr	r3, [r7, #4]
 810d91a:	681b      	ldr	r3, [r3, #0]
 810d91c:	461a      	mov	r2, r3
 810d91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810d920:	647b      	str	r3, [r7, #68]	@ 0x44
 810d922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810d926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810d928:	e841 2300 	strex	r3, r2, [r1]
 810d92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d930:	2b00      	cmp	r3, #0
 810d932:	d1e6      	bne.n	810d902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810d934:	687b      	ldr	r3, [r7, #4]
 810d936:	2220      	movs	r2, #32
 810d938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810d93c:	687b      	ldr	r3, [r7, #4]
 810d93e:	2200      	movs	r2, #0
 810d940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d944:	2303      	movs	r3, #3
 810d946:	e063      	b.n	810da10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810d948:	687b      	ldr	r3, [r7, #4]
 810d94a:	681b      	ldr	r3, [r3, #0]
 810d94c:	681b      	ldr	r3, [r3, #0]
 810d94e:	f003 0304 	and.w	r3, r3, #4
 810d952:	2b04      	cmp	r3, #4
 810d954:	d149      	bne.n	810d9ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d956:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810d95a:	9300      	str	r3, [sp, #0]
 810d95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d95e:	2200      	movs	r2, #0
 810d960:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810d964:	6878      	ldr	r0, [r7, #4]
 810d966:	f000 f857 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810d96a:	4603      	mov	r3, r0
 810d96c:	2b00      	cmp	r3, #0
 810d96e:	d03c      	beq.n	810d9ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d970:	687b      	ldr	r3, [r7, #4]
 810d972:	681b      	ldr	r3, [r3, #0]
 810d974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d978:	e853 3f00 	ldrex	r3, [r3]
 810d97c:	623b      	str	r3, [r7, #32]
   return(result);
 810d97e:	6a3b      	ldr	r3, [r7, #32]
 810d980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810d984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810d986:	687b      	ldr	r3, [r7, #4]
 810d988:	681b      	ldr	r3, [r3, #0]
 810d98a:	461a      	mov	r2, r3
 810d98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810d98e:	633b      	str	r3, [r7, #48]	@ 0x30
 810d990:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810d994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d996:	e841 2300 	strex	r3, r2, [r1]
 810d99a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d99e:	2b00      	cmp	r3, #0
 810d9a0:	d1e6      	bne.n	810d970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d9a2:	687b      	ldr	r3, [r7, #4]
 810d9a4:	681b      	ldr	r3, [r3, #0]
 810d9a6:	3308      	adds	r3, #8
 810d9a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d9aa:	693b      	ldr	r3, [r7, #16]
 810d9ac:	e853 3f00 	ldrex	r3, [r3]
 810d9b0:	60fb      	str	r3, [r7, #12]
   return(result);
 810d9b2:	68fb      	ldr	r3, [r7, #12]
 810d9b4:	f023 0301 	bic.w	r3, r3, #1
 810d9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 810d9ba:	687b      	ldr	r3, [r7, #4]
 810d9bc:	681b      	ldr	r3, [r3, #0]
 810d9be:	3308      	adds	r3, #8
 810d9c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810d9c2:	61fa      	str	r2, [r7, #28]
 810d9c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d9c6:	69b9      	ldr	r1, [r7, #24]
 810d9c8:	69fa      	ldr	r2, [r7, #28]
 810d9ca:	e841 2300 	strex	r3, r2, [r1]
 810d9ce:	617b      	str	r3, [r7, #20]
   return(result);
 810d9d0:	697b      	ldr	r3, [r7, #20]
 810d9d2:	2b00      	cmp	r3, #0
 810d9d4:	d1e5      	bne.n	810d9a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810d9d6:	687b      	ldr	r3, [r7, #4]
 810d9d8:	2220      	movs	r2, #32
 810d9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810d9de:	687b      	ldr	r3, [r7, #4]
 810d9e0:	2200      	movs	r2, #0
 810d9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d9e6:	2303      	movs	r3, #3
 810d9e8:	e012      	b.n	810da10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810d9ea:	687b      	ldr	r3, [r7, #4]
 810d9ec:	2220      	movs	r2, #32
 810d9ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810d9f2:	687b      	ldr	r3, [r7, #4]
 810d9f4:	2220      	movs	r2, #32
 810d9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d9fa:	687b      	ldr	r3, [r7, #4]
 810d9fc:	2200      	movs	r2, #0
 810d9fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810da00:	687b      	ldr	r3, [r7, #4]
 810da02:	2200      	movs	r2, #0
 810da04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	2200      	movs	r2, #0
 810da0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810da0e:	2300      	movs	r3, #0
}
 810da10:	4618      	mov	r0, r3
 810da12:	3758      	adds	r7, #88	@ 0x58
 810da14:	46bd      	mov	sp, r7
 810da16:	bd80      	pop	{r7, pc}

0810da18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810da18:	b580      	push	{r7, lr}
 810da1a:	b084      	sub	sp, #16
 810da1c:	af00      	add	r7, sp, #0
 810da1e:	60f8      	str	r0, [r7, #12]
 810da20:	60b9      	str	r1, [r7, #8]
 810da22:	603b      	str	r3, [r7, #0]
 810da24:	4613      	mov	r3, r2
 810da26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810da28:	e04f      	b.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810da2a:	69bb      	ldr	r3, [r7, #24]
 810da2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810da30:	d04b      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810da32:	f7f5 f889 	bl	8102b48 <HAL_GetTick>
 810da36:	4602      	mov	r2, r0
 810da38:	683b      	ldr	r3, [r7, #0]
 810da3a:	1ad3      	subs	r3, r2, r3
 810da3c:	69ba      	ldr	r2, [r7, #24]
 810da3e:	429a      	cmp	r2, r3
 810da40:	d302      	bcc.n	810da48 <UART_WaitOnFlagUntilTimeout+0x30>
 810da42:	69bb      	ldr	r3, [r7, #24]
 810da44:	2b00      	cmp	r3, #0
 810da46:	d101      	bne.n	810da4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810da48:	2303      	movs	r3, #3
 810da4a:	e04e      	b.n	810daea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810da4c:	68fb      	ldr	r3, [r7, #12]
 810da4e:	681b      	ldr	r3, [r3, #0]
 810da50:	681b      	ldr	r3, [r3, #0]
 810da52:	f003 0304 	and.w	r3, r3, #4
 810da56:	2b00      	cmp	r3, #0
 810da58:	d037      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
 810da5a:	68bb      	ldr	r3, [r7, #8]
 810da5c:	2b80      	cmp	r3, #128	@ 0x80
 810da5e:	d034      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
 810da60:	68bb      	ldr	r3, [r7, #8]
 810da62:	2b40      	cmp	r3, #64	@ 0x40
 810da64:	d031      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810da66:	68fb      	ldr	r3, [r7, #12]
 810da68:	681b      	ldr	r3, [r3, #0]
 810da6a:	69db      	ldr	r3, [r3, #28]
 810da6c:	f003 0308 	and.w	r3, r3, #8
 810da70:	2b08      	cmp	r3, #8
 810da72:	d110      	bne.n	810da96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810da74:	68fb      	ldr	r3, [r7, #12]
 810da76:	681b      	ldr	r3, [r3, #0]
 810da78:	2208      	movs	r2, #8
 810da7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810da7c:	68f8      	ldr	r0, [r7, #12]
 810da7e:	f000 f838 	bl	810daf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810da82:	68fb      	ldr	r3, [r7, #12]
 810da84:	2208      	movs	r2, #8
 810da86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810da8a:	68fb      	ldr	r3, [r7, #12]
 810da8c:	2200      	movs	r2, #0
 810da8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810da92:	2301      	movs	r3, #1
 810da94:	e029      	b.n	810daea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810da96:	68fb      	ldr	r3, [r7, #12]
 810da98:	681b      	ldr	r3, [r3, #0]
 810da9a:	69db      	ldr	r3, [r3, #28]
 810da9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810daa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810daa4:	d111      	bne.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810daa6:	68fb      	ldr	r3, [r7, #12]
 810daa8:	681b      	ldr	r3, [r3, #0]
 810daaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810daae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810dab0:	68f8      	ldr	r0, [r7, #12]
 810dab2:	f000 f81e 	bl	810daf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810dab6:	68fb      	ldr	r3, [r7, #12]
 810dab8:	2220      	movs	r2, #32
 810daba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810dabe:	68fb      	ldr	r3, [r7, #12]
 810dac0:	2200      	movs	r2, #0
 810dac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810dac6:	2303      	movs	r3, #3
 810dac8:	e00f      	b.n	810daea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810daca:	68fb      	ldr	r3, [r7, #12]
 810dacc:	681b      	ldr	r3, [r3, #0]
 810dace:	69da      	ldr	r2, [r3, #28]
 810dad0:	68bb      	ldr	r3, [r7, #8]
 810dad2:	4013      	ands	r3, r2
 810dad4:	68ba      	ldr	r2, [r7, #8]
 810dad6:	429a      	cmp	r2, r3
 810dad8:	bf0c      	ite	eq
 810dada:	2301      	moveq	r3, #1
 810dadc:	2300      	movne	r3, #0
 810dade:	b2db      	uxtb	r3, r3
 810dae0:	461a      	mov	r2, r3
 810dae2:	79fb      	ldrb	r3, [r7, #7]
 810dae4:	429a      	cmp	r2, r3
 810dae6:	d0a0      	beq.n	810da2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810dae8:	2300      	movs	r3, #0
}
 810daea:	4618      	mov	r0, r3
 810daec:	3710      	adds	r7, #16
 810daee:	46bd      	mov	sp, r7
 810daf0:	bd80      	pop	{r7, pc}

0810daf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810daf2:	b480      	push	{r7}
 810daf4:	b095      	sub	sp, #84	@ 0x54
 810daf6:	af00      	add	r7, sp, #0
 810daf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810dafa:	687b      	ldr	r3, [r7, #4]
 810dafc:	681b      	ldr	r3, [r3, #0]
 810dafe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810db00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810db02:	e853 3f00 	ldrex	r3, [r3]
 810db06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810db08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810db0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810db10:	687b      	ldr	r3, [r7, #4]
 810db12:	681b      	ldr	r3, [r3, #0]
 810db14:	461a      	mov	r2, r3
 810db16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810db18:	643b      	str	r3, [r7, #64]	@ 0x40
 810db1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810db1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810db1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810db20:	e841 2300 	strex	r3, r2, [r1]
 810db24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810db26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810db28:	2b00      	cmp	r3, #0
 810db2a:	d1e6      	bne.n	810dafa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810db2c:	687b      	ldr	r3, [r7, #4]
 810db2e:	681b      	ldr	r3, [r3, #0]
 810db30:	3308      	adds	r3, #8
 810db32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810db34:	6a3b      	ldr	r3, [r7, #32]
 810db36:	e853 3f00 	ldrex	r3, [r3]
 810db3a:	61fb      	str	r3, [r7, #28]
   return(result);
 810db3c:	69fb      	ldr	r3, [r7, #28]
 810db3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810db42:	f023 0301 	bic.w	r3, r3, #1
 810db46:	64bb      	str	r3, [r7, #72]	@ 0x48
 810db48:	687b      	ldr	r3, [r7, #4]
 810db4a:	681b      	ldr	r3, [r3, #0]
 810db4c:	3308      	adds	r3, #8
 810db4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810db50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810db52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810db54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810db56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810db58:	e841 2300 	strex	r3, r2, [r1]
 810db5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810db5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810db60:	2b00      	cmp	r3, #0
 810db62:	d1e3      	bne.n	810db2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810db64:	687b      	ldr	r3, [r7, #4]
 810db66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810db68:	2b01      	cmp	r3, #1
 810db6a:	d118      	bne.n	810db9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810db6c:	687b      	ldr	r3, [r7, #4]
 810db6e:	681b      	ldr	r3, [r3, #0]
 810db70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810db72:	68fb      	ldr	r3, [r7, #12]
 810db74:	e853 3f00 	ldrex	r3, [r3]
 810db78:	60bb      	str	r3, [r7, #8]
   return(result);
 810db7a:	68bb      	ldr	r3, [r7, #8]
 810db7c:	f023 0310 	bic.w	r3, r3, #16
 810db80:	647b      	str	r3, [r7, #68]	@ 0x44
 810db82:	687b      	ldr	r3, [r7, #4]
 810db84:	681b      	ldr	r3, [r3, #0]
 810db86:	461a      	mov	r2, r3
 810db88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810db8a:	61bb      	str	r3, [r7, #24]
 810db8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810db8e:	6979      	ldr	r1, [r7, #20]
 810db90:	69ba      	ldr	r2, [r7, #24]
 810db92:	e841 2300 	strex	r3, r2, [r1]
 810db96:	613b      	str	r3, [r7, #16]
   return(result);
 810db98:	693b      	ldr	r3, [r7, #16]
 810db9a:	2b00      	cmp	r3, #0
 810db9c:	d1e6      	bne.n	810db6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810db9e:	687b      	ldr	r3, [r7, #4]
 810dba0:	2220      	movs	r2, #32
 810dba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810dba6:	687b      	ldr	r3, [r7, #4]
 810dba8:	2200      	movs	r2, #0
 810dbaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810dbac:	687b      	ldr	r3, [r7, #4]
 810dbae:	2200      	movs	r2, #0
 810dbb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810dbb2:	bf00      	nop
 810dbb4:	3754      	adds	r7, #84	@ 0x54
 810dbb6:	46bd      	mov	sp, r7
 810dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbbc:	4770      	bx	lr

0810dbbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810dbbe:	b580      	push	{r7, lr}
 810dbc0:	b084      	sub	sp, #16
 810dbc2:	af00      	add	r7, sp, #0
 810dbc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810dbc6:	687b      	ldr	r3, [r7, #4]
 810dbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dbca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810dbcc:	68fb      	ldr	r3, [r7, #12]
 810dbce:	2200      	movs	r2, #0
 810dbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810dbd4:	68f8      	ldr	r0, [r7, #12]
 810dbd6:	f7ff f855 	bl	810cc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810dbda:	bf00      	nop
 810dbdc:	3710      	adds	r7, #16
 810dbde:	46bd      	mov	sp, r7
 810dbe0:	bd80      	pop	{r7, pc}

0810dbe2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810dbe2:	b580      	push	{r7, lr}
 810dbe4:	b088      	sub	sp, #32
 810dbe6:	af00      	add	r7, sp, #0
 810dbe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810dbea:	687b      	ldr	r3, [r7, #4]
 810dbec:	681b      	ldr	r3, [r3, #0]
 810dbee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dbf0:	68fb      	ldr	r3, [r7, #12]
 810dbf2:	e853 3f00 	ldrex	r3, [r3]
 810dbf6:	60bb      	str	r3, [r7, #8]
   return(result);
 810dbf8:	68bb      	ldr	r3, [r7, #8]
 810dbfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810dbfe:	61fb      	str	r3, [r7, #28]
 810dc00:	687b      	ldr	r3, [r7, #4]
 810dc02:	681b      	ldr	r3, [r3, #0]
 810dc04:	461a      	mov	r2, r3
 810dc06:	69fb      	ldr	r3, [r7, #28]
 810dc08:	61bb      	str	r3, [r7, #24]
 810dc0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dc0c:	6979      	ldr	r1, [r7, #20]
 810dc0e:	69ba      	ldr	r2, [r7, #24]
 810dc10:	e841 2300 	strex	r3, r2, [r1]
 810dc14:	613b      	str	r3, [r7, #16]
   return(result);
 810dc16:	693b      	ldr	r3, [r7, #16]
 810dc18:	2b00      	cmp	r3, #0
 810dc1a:	d1e6      	bne.n	810dbea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810dc1c:	687b      	ldr	r3, [r7, #4]
 810dc1e:	2220      	movs	r2, #32
 810dc20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810dc24:	687b      	ldr	r3, [r7, #4]
 810dc26:	2200      	movs	r2, #0
 810dc28:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810dc2a:	6878      	ldr	r0, [r7, #4]
 810dc2c:	f7ff f820 	bl	810cc70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810dc30:	bf00      	nop
 810dc32:	3720      	adds	r7, #32
 810dc34:	46bd      	mov	sp, r7
 810dc36:	bd80      	pop	{r7, pc}

0810dc38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810dc38:	b480      	push	{r7}
 810dc3a:	b083      	sub	sp, #12
 810dc3c:	af00      	add	r7, sp, #0
 810dc3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810dc40:	bf00      	nop
 810dc42:	370c      	adds	r7, #12
 810dc44:	46bd      	mov	sp, r7
 810dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc4a:	4770      	bx	lr

0810dc4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810dc4c:	b480      	push	{r7}
 810dc4e:	b083      	sub	sp, #12
 810dc50:	af00      	add	r7, sp, #0
 810dc52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810dc54:	bf00      	nop
 810dc56:	370c      	adds	r7, #12
 810dc58:	46bd      	mov	sp, r7
 810dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc5e:	4770      	bx	lr

0810dc60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810dc60:	b480      	push	{r7}
 810dc62:	b083      	sub	sp, #12
 810dc64:	af00      	add	r7, sp, #0
 810dc66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810dc68:	bf00      	nop
 810dc6a:	370c      	adds	r7, #12
 810dc6c:	46bd      	mov	sp, r7
 810dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc72:	4770      	bx	lr

0810dc74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810dc74:	b480      	push	{r7}
 810dc76:	b085      	sub	sp, #20
 810dc78:	af00      	add	r7, sp, #0
 810dc7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810dc7c:	687b      	ldr	r3, [r7, #4]
 810dc7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810dc82:	2b01      	cmp	r3, #1
 810dc84:	d101      	bne.n	810dc8a <HAL_UARTEx_DisableFifoMode+0x16>
 810dc86:	2302      	movs	r3, #2
 810dc88:	e027      	b.n	810dcda <HAL_UARTEx_DisableFifoMode+0x66>
 810dc8a:	687b      	ldr	r3, [r7, #4]
 810dc8c:	2201      	movs	r2, #1
 810dc8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810dc92:	687b      	ldr	r3, [r7, #4]
 810dc94:	2224      	movs	r2, #36	@ 0x24
 810dc96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810dc9a:	687b      	ldr	r3, [r7, #4]
 810dc9c:	681b      	ldr	r3, [r3, #0]
 810dc9e:	681b      	ldr	r3, [r3, #0]
 810dca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810dca2:	687b      	ldr	r3, [r7, #4]
 810dca4:	681b      	ldr	r3, [r3, #0]
 810dca6:	681a      	ldr	r2, [r3, #0]
 810dca8:	687b      	ldr	r3, [r7, #4]
 810dcaa:	681b      	ldr	r3, [r3, #0]
 810dcac:	f022 0201 	bic.w	r2, r2, #1
 810dcb0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810dcb2:	68fb      	ldr	r3, [r7, #12]
 810dcb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810dcb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810dcba:	687b      	ldr	r3, [r7, #4]
 810dcbc:	2200      	movs	r2, #0
 810dcbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810dcc0:	687b      	ldr	r3, [r7, #4]
 810dcc2:	681b      	ldr	r3, [r3, #0]
 810dcc4:	68fa      	ldr	r2, [r7, #12]
 810dcc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810dcc8:	687b      	ldr	r3, [r7, #4]
 810dcca:	2220      	movs	r2, #32
 810dccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810dcd0:	687b      	ldr	r3, [r7, #4]
 810dcd2:	2200      	movs	r2, #0
 810dcd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810dcd8:	2300      	movs	r3, #0
}
 810dcda:	4618      	mov	r0, r3
 810dcdc:	3714      	adds	r7, #20
 810dcde:	46bd      	mov	sp, r7
 810dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dce4:	4770      	bx	lr

0810dce6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810dce6:	b580      	push	{r7, lr}
 810dce8:	b084      	sub	sp, #16
 810dcea:	af00      	add	r7, sp, #0
 810dcec:	6078      	str	r0, [r7, #4]
 810dcee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810dcf0:	687b      	ldr	r3, [r7, #4]
 810dcf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810dcf6:	2b01      	cmp	r3, #1
 810dcf8:	d101      	bne.n	810dcfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810dcfa:	2302      	movs	r3, #2
 810dcfc:	e02d      	b.n	810dd5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810dcfe:	687b      	ldr	r3, [r7, #4]
 810dd00:	2201      	movs	r2, #1
 810dd02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810dd06:	687b      	ldr	r3, [r7, #4]
 810dd08:	2224      	movs	r2, #36	@ 0x24
 810dd0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810dd0e:	687b      	ldr	r3, [r7, #4]
 810dd10:	681b      	ldr	r3, [r3, #0]
 810dd12:	681b      	ldr	r3, [r3, #0]
 810dd14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810dd16:	687b      	ldr	r3, [r7, #4]
 810dd18:	681b      	ldr	r3, [r3, #0]
 810dd1a:	681a      	ldr	r2, [r3, #0]
 810dd1c:	687b      	ldr	r3, [r7, #4]
 810dd1e:	681b      	ldr	r3, [r3, #0]
 810dd20:	f022 0201 	bic.w	r2, r2, #1
 810dd24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810dd26:	687b      	ldr	r3, [r7, #4]
 810dd28:	681b      	ldr	r3, [r3, #0]
 810dd2a:	689b      	ldr	r3, [r3, #8]
 810dd2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810dd30:	687b      	ldr	r3, [r7, #4]
 810dd32:	681b      	ldr	r3, [r3, #0]
 810dd34:	683a      	ldr	r2, [r7, #0]
 810dd36:	430a      	orrs	r2, r1
 810dd38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810dd3a:	6878      	ldr	r0, [r7, #4]
 810dd3c:	f000 f850 	bl	810dde0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810dd40:	687b      	ldr	r3, [r7, #4]
 810dd42:	681b      	ldr	r3, [r3, #0]
 810dd44:	68fa      	ldr	r2, [r7, #12]
 810dd46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810dd48:	687b      	ldr	r3, [r7, #4]
 810dd4a:	2220      	movs	r2, #32
 810dd4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	2200      	movs	r2, #0
 810dd54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810dd58:	2300      	movs	r3, #0
}
 810dd5a:	4618      	mov	r0, r3
 810dd5c:	3710      	adds	r7, #16
 810dd5e:	46bd      	mov	sp, r7
 810dd60:	bd80      	pop	{r7, pc}

0810dd62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810dd62:	b580      	push	{r7, lr}
 810dd64:	b084      	sub	sp, #16
 810dd66:	af00      	add	r7, sp, #0
 810dd68:	6078      	str	r0, [r7, #4]
 810dd6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810dd6c:	687b      	ldr	r3, [r7, #4]
 810dd6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810dd72:	2b01      	cmp	r3, #1
 810dd74:	d101      	bne.n	810dd7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810dd76:	2302      	movs	r3, #2
 810dd78:	e02d      	b.n	810ddd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810dd7a:	687b      	ldr	r3, [r7, #4]
 810dd7c:	2201      	movs	r2, #1
 810dd7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810dd82:	687b      	ldr	r3, [r7, #4]
 810dd84:	2224      	movs	r2, #36	@ 0x24
 810dd86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810dd8a:	687b      	ldr	r3, [r7, #4]
 810dd8c:	681b      	ldr	r3, [r3, #0]
 810dd8e:	681b      	ldr	r3, [r3, #0]
 810dd90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810dd92:	687b      	ldr	r3, [r7, #4]
 810dd94:	681b      	ldr	r3, [r3, #0]
 810dd96:	681a      	ldr	r2, [r3, #0]
 810dd98:	687b      	ldr	r3, [r7, #4]
 810dd9a:	681b      	ldr	r3, [r3, #0]
 810dd9c:	f022 0201 	bic.w	r2, r2, #1
 810dda0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810dda2:	687b      	ldr	r3, [r7, #4]
 810dda4:	681b      	ldr	r3, [r3, #0]
 810dda6:	689b      	ldr	r3, [r3, #8]
 810dda8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810ddac:	687b      	ldr	r3, [r7, #4]
 810ddae:	681b      	ldr	r3, [r3, #0]
 810ddb0:	683a      	ldr	r2, [r7, #0]
 810ddb2:	430a      	orrs	r2, r1
 810ddb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ddb6:	6878      	ldr	r0, [r7, #4]
 810ddb8:	f000 f812 	bl	810dde0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ddbc:	687b      	ldr	r3, [r7, #4]
 810ddbe:	681b      	ldr	r3, [r3, #0]
 810ddc0:	68fa      	ldr	r2, [r7, #12]
 810ddc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ddc4:	687b      	ldr	r3, [r7, #4]
 810ddc6:	2220      	movs	r2, #32
 810ddc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ddcc:	687b      	ldr	r3, [r7, #4]
 810ddce:	2200      	movs	r2, #0
 810ddd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ddd4:	2300      	movs	r3, #0
}
 810ddd6:	4618      	mov	r0, r3
 810ddd8:	3710      	adds	r7, #16
 810ddda:	46bd      	mov	sp, r7
 810dddc:	bd80      	pop	{r7, pc}
	...

0810dde0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810dde0:	b480      	push	{r7}
 810dde2:	b085      	sub	sp, #20
 810dde4:	af00      	add	r7, sp, #0
 810dde6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810dde8:	687b      	ldr	r3, [r7, #4]
 810ddea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ddec:	2b00      	cmp	r3, #0
 810ddee:	d108      	bne.n	810de02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ddf0:	687b      	ldr	r3, [r7, #4]
 810ddf2:	2201      	movs	r2, #1
 810ddf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ddf8:	687b      	ldr	r3, [r7, #4]
 810ddfa:	2201      	movs	r2, #1
 810ddfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810de00:	e031      	b.n	810de66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810de02:	2310      	movs	r3, #16
 810de04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810de06:	2310      	movs	r3, #16
 810de08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810de0a:	687b      	ldr	r3, [r7, #4]
 810de0c:	681b      	ldr	r3, [r3, #0]
 810de0e:	689b      	ldr	r3, [r3, #8]
 810de10:	0e5b      	lsrs	r3, r3, #25
 810de12:	b2db      	uxtb	r3, r3
 810de14:	f003 0307 	and.w	r3, r3, #7
 810de18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810de1a:	687b      	ldr	r3, [r7, #4]
 810de1c:	681b      	ldr	r3, [r3, #0]
 810de1e:	689b      	ldr	r3, [r3, #8]
 810de20:	0f5b      	lsrs	r3, r3, #29
 810de22:	b2db      	uxtb	r3, r3
 810de24:	f003 0307 	and.w	r3, r3, #7
 810de28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810de2a:	7bbb      	ldrb	r3, [r7, #14]
 810de2c:	7b3a      	ldrb	r2, [r7, #12]
 810de2e:	4911      	ldr	r1, [pc, #68]	@ (810de74 <UARTEx_SetNbDataToProcess+0x94>)
 810de30:	5c8a      	ldrb	r2, [r1, r2]
 810de32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810de36:	7b3a      	ldrb	r2, [r7, #12]
 810de38:	490f      	ldr	r1, [pc, #60]	@ (810de78 <UARTEx_SetNbDataToProcess+0x98>)
 810de3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810de3c:	fb93 f3f2 	sdiv	r3, r3, r2
 810de40:	b29a      	uxth	r2, r3
 810de42:	687b      	ldr	r3, [r7, #4]
 810de44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810de48:	7bfb      	ldrb	r3, [r7, #15]
 810de4a:	7b7a      	ldrb	r2, [r7, #13]
 810de4c:	4909      	ldr	r1, [pc, #36]	@ (810de74 <UARTEx_SetNbDataToProcess+0x94>)
 810de4e:	5c8a      	ldrb	r2, [r1, r2]
 810de50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810de54:	7b7a      	ldrb	r2, [r7, #13]
 810de56:	4908      	ldr	r1, [pc, #32]	@ (810de78 <UARTEx_SetNbDataToProcess+0x98>)
 810de58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810de5a:	fb93 f3f2 	sdiv	r3, r3, r2
 810de5e:	b29a      	uxth	r2, r3
 810de60:	687b      	ldr	r3, [r7, #4]
 810de62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810de66:	bf00      	nop
 810de68:	3714      	adds	r7, #20
 810de6a:	46bd      	mov	sp, r7
 810de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de70:	4770      	bx	lr
 810de72:	bf00      	nop
 810de74:	08112204 	.word	0x08112204
 810de78:	0811220c 	.word	0x0811220c

0810de7c <__NVIC_SetPriority>:
{
 810de7c:	b480      	push	{r7}
 810de7e:	b083      	sub	sp, #12
 810de80:	af00      	add	r7, sp, #0
 810de82:	4603      	mov	r3, r0
 810de84:	6039      	str	r1, [r7, #0]
 810de86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810de88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810de8c:	2b00      	cmp	r3, #0
 810de8e:	db0a      	blt.n	810dea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810de90:	683b      	ldr	r3, [r7, #0]
 810de92:	b2da      	uxtb	r2, r3
 810de94:	490c      	ldr	r1, [pc, #48]	@ (810dec8 <__NVIC_SetPriority+0x4c>)
 810de96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810de9a:	0112      	lsls	r2, r2, #4
 810de9c:	b2d2      	uxtb	r2, r2
 810de9e:	440b      	add	r3, r1
 810dea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810dea4:	e00a      	b.n	810debc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810dea6:	683b      	ldr	r3, [r7, #0]
 810dea8:	b2da      	uxtb	r2, r3
 810deaa:	4908      	ldr	r1, [pc, #32]	@ (810decc <__NVIC_SetPriority+0x50>)
 810deac:	88fb      	ldrh	r3, [r7, #6]
 810deae:	f003 030f 	and.w	r3, r3, #15
 810deb2:	3b04      	subs	r3, #4
 810deb4:	0112      	lsls	r2, r2, #4
 810deb6:	b2d2      	uxtb	r2, r2
 810deb8:	440b      	add	r3, r1
 810deba:	761a      	strb	r2, [r3, #24]
}
 810debc:	bf00      	nop
 810debe:	370c      	adds	r7, #12
 810dec0:	46bd      	mov	sp, r7
 810dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dec6:	4770      	bx	lr
 810dec8:	e000e100 	.word	0xe000e100
 810decc:	e000ed00 	.word	0xe000ed00

0810ded0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810ded0:	b580      	push	{r7, lr}
 810ded2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810ded4:	2100      	movs	r1, #0
 810ded6:	f06f 0004 	mvn.w	r0, #4
 810deda:	f7ff ffcf 	bl	810de7c <__NVIC_SetPriority>
#endif
}
 810dede:	bf00      	nop
 810dee0:	bd80      	pop	{r7, pc}
	...

0810dee4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810dee4:	b480      	push	{r7}
 810dee6:	b083      	sub	sp, #12
 810dee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810deea:	f3ef 8305 	mrs	r3, IPSR
 810deee:	603b      	str	r3, [r7, #0]
  return(result);
 810def0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810def2:	2b00      	cmp	r3, #0
 810def4:	d003      	beq.n	810defe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810def6:	f06f 0305 	mvn.w	r3, #5
 810defa:	607b      	str	r3, [r7, #4]
 810defc:	e00c      	b.n	810df18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810defe:	4b0a      	ldr	r3, [pc, #40]	@ (810df28 <osKernelInitialize+0x44>)
 810df00:	681b      	ldr	r3, [r3, #0]
 810df02:	2b00      	cmp	r3, #0
 810df04:	d105      	bne.n	810df12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810df06:	4b08      	ldr	r3, [pc, #32]	@ (810df28 <osKernelInitialize+0x44>)
 810df08:	2201      	movs	r2, #1
 810df0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810df0c:	2300      	movs	r3, #0
 810df0e:	607b      	str	r3, [r7, #4]
 810df10:	e002      	b.n	810df18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810df12:	f04f 33ff 	mov.w	r3, #4294967295
 810df16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810df18:	687b      	ldr	r3, [r7, #4]
}
 810df1a:	4618      	mov	r0, r3
 810df1c:	370c      	adds	r7, #12
 810df1e:	46bd      	mov	sp, r7
 810df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df24:	4770      	bx	lr
 810df26:	bf00      	nop
 810df28:	100004fc 	.word	0x100004fc

0810df2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810df2c:	b580      	push	{r7, lr}
 810df2e:	b082      	sub	sp, #8
 810df30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810df32:	f3ef 8305 	mrs	r3, IPSR
 810df36:	603b      	str	r3, [r7, #0]
  return(result);
 810df38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810df3a:	2b00      	cmp	r3, #0
 810df3c:	d003      	beq.n	810df46 <osKernelStart+0x1a>
    stat = osErrorISR;
 810df3e:	f06f 0305 	mvn.w	r3, #5
 810df42:	607b      	str	r3, [r7, #4]
 810df44:	e010      	b.n	810df68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810df46:	4b0b      	ldr	r3, [pc, #44]	@ (810df74 <osKernelStart+0x48>)
 810df48:	681b      	ldr	r3, [r3, #0]
 810df4a:	2b01      	cmp	r3, #1
 810df4c:	d109      	bne.n	810df62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810df4e:	f7ff ffbf 	bl	810ded0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810df52:	4b08      	ldr	r3, [pc, #32]	@ (810df74 <osKernelStart+0x48>)
 810df54:	2202      	movs	r2, #2
 810df56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810df58:	f001 fcbe 	bl	810f8d8 <vTaskStartScheduler>
      stat = osOK;
 810df5c:	2300      	movs	r3, #0
 810df5e:	607b      	str	r3, [r7, #4]
 810df60:	e002      	b.n	810df68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810df62:	f04f 33ff 	mov.w	r3, #4294967295
 810df66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810df68:	687b      	ldr	r3, [r7, #4]
}
 810df6a:	4618      	mov	r0, r3
 810df6c:	3708      	adds	r7, #8
 810df6e:	46bd      	mov	sp, r7
 810df70:	bd80      	pop	{r7, pc}
 810df72:	bf00      	nop
 810df74:	100004fc 	.word	0x100004fc

0810df78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810df78:	b580      	push	{r7, lr}
 810df7a:	b08e      	sub	sp, #56	@ 0x38
 810df7c:	af04      	add	r7, sp, #16
 810df7e:	60f8      	str	r0, [r7, #12]
 810df80:	60b9      	str	r1, [r7, #8]
 810df82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810df84:	2300      	movs	r3, #0
 810df86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810df88:	f3ef 8305 	mrs	r3, IPSR
 810df8c:	617b      	str	r3, [r7, #20]
  return(result);
 810df8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810df90:	2b00      	cmp	r3, #0
 810df92:	d17e      	bne.n	810e092 <osThreadNew+0x11a>
 810df94:	68fb      	ldr	r3, [r7, #12]
 810df96:	2b00      	cmp	r3, #0
 810df98:	d07b      	beq.n	810e092 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810df9a:	2380      	movs	r3, #128	@ 0x80
 810df9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810df9e:	2318      	movs	r3, #24
 810dfa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810dfa2:	2300      	movs	r3, #0
 810dfa4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810dfa6:	f04f 33ff 	mov.w	r3, #4294967295
 810dfaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810dfac:	687b      	ldr	r3, [r7, #4]
 810dfae:	2b00      	cmp	r3, #0
 810dfb0:	d045      	beq.n	810e03e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810dfb2:	687b      	ldr	r3, [r7, #4]
 810dfb4:	681b      	ldr	r3, [r3, #0]
 810dfb6:	2b00      	cmp	r3, #0
 810dfb8:	d002      	beq.n	810dfc0 <osThreadNew+0x48>
        name = attr->name;
 810dfba:	687b      	ldr	r3, [r7, #4]
 810dfbc:	681b      	ldr	r3, [r3, #0]
 810dfbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810dfc0:	687b      	ldr	r3, [r7, #4]
 810dfc2:	699b      	ldr	r3, [r3, #24]
 810dfc4:	2b00      	cmp	r3, #0
 810dfc6:	d002      	beq.n	810dfce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810dfc8:	687b      	ldr	r3, [r7, #4]
 810dfca:	699b      	ldr	r3, [r3, #24]
 810dfcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810dfce:	69fb      	ldr	r3, [r7, #28]
 810dfd0:	2b00      	cmp	r3, #0
 810dfd2:	d008      	beq.n	810dfe6 <osThreadNew+0x6e>
 810dfd4:	69fb      	ldr	r3, [r7, #28]
 810dfd6:	2b38      	cmp	r3, #56	@ 0x38
 810dfd8:	d805      	bhi.n	810dfe6 <osThreadNew+0x6e>
 810dfda:	687b      	ldr	r3, [r7, #4]
 810dfdc:	685b      	ldr	r3, [r3, #4]
 810dfde:	f003 0301 	and.w	r3, r3, #1
 810dfe2:	2b00      	cmp	r3, #0
 810dfe4:	d001      	beq.n	810dfea <osThreadNew+0x72>
        return (NULL);
 810dfe6:	2300      	movs	r3, #0
 810dfe8:	e054      	b.n	810e094 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810dfea:	687b      	ldr	r3, [r7, #4]
 810dfec:	695b      	ldr	r3, [r3, #20]
 810dfee:	2b00      	cmp	r3, #0
 810dff0:	d003      	beq.n	810dffa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810dff2:	687b      	ldr	r3, [r7, #4]
 810dff4:	695b      	ldr	r3, [r3, #20]
 810dff6:	089b      	lsrs	r3, r3, #2
 810dff8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810dffa:	687b      	ldr	r3, [r7, #4]
 810dffc:	689b      	ldr	r3, [r3, #8]
 810dffe:	2b00      	cmp	r3, #0
 810e000:	d00e      	beq.n	810e020 <osThreadNew+0xa8>
 810e002:	687b      	ldr	r3, [r7, #4]
 810e004:	68db      	ldr	r3, [r3, #12]
 810e006:	2b5b      	cmp	r3, #91	@ 0x5b
 810e008:	d90a      	bls.n	810e020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810e00a:	687b      	ldr	r3, [r7, #4]
 810e00c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810e00e:	2b00      	cmp	r3, #0
 810e010:	d006      	beq.n	810e020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810e012:	687b      	ldr	r3, [r7, #4]
 810e014:	695b      	ldr	r3, [r3, #20]
 810e016:	2b00      	cmp	r3, #0
 810e018:	d002      	beq.n	810e020 <osThreadNew+0xa8>
        mem = 1;
 810e01a:	2301      	movs	r3, #1
 810e01c:	61bb      	str	r3, [r7, #24]
 810e01e:	e010      	b.n	810e042 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810e020:	687b      	ldr	r3, [r7, #4]
 810e022:	689b      	ldr	r3, [r3, #8]
 810e024:	2b00      	cmp	r3, #0
 810e026:	d10c      	bne.n	810e042 <osThreadNew+0xca>
 810e028:	687b      	ldr	r3, [r7, #4]
 810e02a:	68db      	ldr	r3, [r3, #12]
 810e02c:	2b00      	cmp	r3, #0
 810e02e:	d108      	bne.n	810e042 <osThreadNew+0xca>
 810e030:	687b      	ldr	r3, [r7, #4]
 810e032:	691b      	ldr	r3, [r3, #16]
 810e034:	2b00      	cmp	r3, #0
 810e036:	d104      	bne.n	810e042 <osThreadNew+0xca>
          mem = 0;
 810e038:	2300      	movs	r3, #0
 810e03a:	61bb      	str	r3, [r7, #24]
 810e03c:	e001      	b.n	810e042 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810e03e:	2300      	movs	r3, #0
 810e040:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810e042:	69bb      	ldr	r3, [r7, #24]
 810e044:	2b01      	cmp	r3, #1
 810e046:	d110      	bne.n	810e06a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810e048:	687b      	ldr	r3, [r7, #4]
 810e04a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810e04c:	687a      	ldr	r2, [r7, #4]
 810e04e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810e050:	9202      	str	r2, [sp, #8]
 810e052:	9301      	str	r3, [sp, #4]
 810e054:	69fb      	ldr	r3, [r7, #28]
 810e056:	9300      	str	r3, [sp, #0]
 810e058:	68bb      	ldr	r3, [r7, #8]
 810e05a:	6a3a      	ldr	r2, [r7, #32]
 810e05c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810e05e:	68f8      	ldr	r0, [r7, #12]
 810e060:	f001 fa5e 	bl	810f520 <xTaskCreateStatic>
 810e064:	4603      	mov	r3, r0
 810e066:	613b      	str	r3, [r7, #16]
 810e068:	e013      	b.n	810e092 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810e06a:	69bb      	ldr	r3, [r7, #24]
 810e06c:	2b00      	cmp	r3, #0
 810e06e:	d110      	bne.n	810e092 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810e070:	6a3b      	ldr	r3, [r7, #32]
 810e072:	b29a      	uxth	r2, r3
 810e074:	f107 0310 	add.w	r3, r7, #16
 810e078:	9301      	str	r3, [sp, #4]
 810e07a:	69fb      	ldr	r3, [r7, #28]
 810e07c:	9300      	str	r3, [sp, #0]
 810e07e:	68bb      	ldr	r3, [r7, #8]
 810e080:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810e082:	68f8      	ldr	r0, [r7, #12]
 810e084:	f001 faac 	bl	810f5e0 <xTaskCreate>
 810e088:	4603      	mov	r3, r0
 810e08a:	2b01      	cmp	r3, #1
 810e08c:	d001      	beq.n	810e092 <osThreadNew+0x11a>
            hTask = NULL;
 810e08e:	2300      	movs	r3, #0
 810e090:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810e092:	693b      	ldr	r3, [r7, #16]
}
 810e094:	4618      	mov	r0, r3
 810e096:	3728      	adds	r7, #40	@ 0x28
 810e098:	46bd      	mov	sp, r7
 810e09a:	bd80      	pop	{r7, pc}

0810e09c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810e09c:	b580      	push	{r7, lr}
 810e09e:	b084      	sub	sp, #16
 810e0a0:	af00      	add	r7, sp, #0
 810e0a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e0a4:	f3ef 8305 	mrs	r3, IPSR
 810e0a8:	60bb      	str	r3, [r7, #8]
  return(result);
 810e0aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810e0ac:	2b00      	cmp	r3, #0
 810e0ae:	d003      	beq.n	810e0b8 <osDelay+0x1c>
    stat = osErrorISR;
 810e0b0:	f06f 0305 	mvn.w	r3, #5
 810e0b4:	60fb      	str	r3, [r7, #12]
 810e0b6:	e007      	b.n	810e0c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810e0b8:	2300      	movs	r3, #0
 810e0ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810e0bc:	687b      	ldr	r3, [r7, #4]
 810e0be:	2b00      	cmp	r3, #0
 810e0c0:	d002      	beq.n	810e0c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 810e0c2:	6878      	ldr	r0, [r7, #4]
 810e0c4:	f001 fbd2 	bl	810f86c <vTaskDelay>
    }
  }

  return (stat);
 810e0c8:	68fb      	ldr	r3, [r7, #12]
}
 810e0ca:	4618      	mov	r0, r3
 810e0cc:	3710      	adds	r7, #16
 810e0ce:	46bd      	mov	sp, r7
 810e0d0:	bd80      	pop	{r7, pc}
	...

0810e0d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810e0d4:	b480      	push	{r7}
 810e0d6:	b085      	sub	sp, #20
 810e0d8:	af00      	add	r7, sp, #0
 810e0da:	60f8      	str	r0, [r7, #12]
 810e0dc:	60b9      	str	r1, [r7, #8]
 810e0de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810e0e0:	68fb      	ldr	r3, [r7, #12]
 810e0e2:	4a07      	ldr	r2, [pc, #28]	@ (810e100 <vApplicationGetIdleTaskMemory+0x2c>)
 810e0e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810e0e6:	68bb      	ldr	r3, [r7, #8]
 810e0e8:	4a06      	ldr	r2, [pc, #24]	@ (810e104 <vApplicationGetIdleTaskMemory+0x30>)
 810e0ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810e0ec:	687b      	ldr	r3, [r7, #4]
 810e0ee:	2280      	movs	r2, #128	@ 0x80
 810e0f0:	601a      	str	r2, [r3, #0]
}
 810e0f2:	bf00      	nop
 810e0f4:	3714      	adds	r7, #20
 810e0f6:	46bd      	mov	sp, r7
 810e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0fc:	4770      	bx	lr
 810e0fe:	bf00      	nop
 810e100:	10000500 	.word	0x10000500
 810e104:	1000055c 	.word	0x1000055c

0810e108 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810e108:	b480      	push	{r7}
 810e10a:	b085      	sub	sp, #20
 810e10c:	af00      	add	r7, sp, #0
 810e10e:	60f8      	str	r0, [r7, #12]
 810e110:	60b9      	str	r1, [r7, #8]
 810e112:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810e114:	68fb      	ldr	r3, [r7, #12]
 810e116:	4a07      	ldr	r2, [pc, #28]	@ (810e134 <vApplicationGetTimerTaskMemory+0x2c>)
 810e118:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810e11a:	68bb      	ldr	r3, [r7, #8]
 810e11c:	4a06      	ldr	r2, [pc, #24]	@ (810e138 <vApplicationGetTimerTaskMemory+0x30>)
 810e11e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810e120:	687b      	ldr	r3, [r7, #4]
 810e122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810e126:	601a      	str	r2, [r3, #0]
}
 810e128:	bf00      	nop
 810e12a:	3714      	adds	r7, #20
 810e12c:	46bd      	mov	sp, r7
 810e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e132:	4770      	bx	lr
 810e134:	1000075c 	.word	0x1000075c
 810e138:	100007b8 	.word	0x100007b8

0810e13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810e13c:	b580      	push	{r7, lr}
 810e13e:	b08a      	sub	sp, #40	@ 0x28
 810e140:	af00      	add	r7, sp, #0
 810e142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810e144:	2300      	movs	r3, #0
 810e146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810e148:	f001 fc2e 	bl	810f9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810e14c:	4b5c      	ldr	r3, [pc, #368]	@ (810e2c0 <pvPortMalloc+0x184>)
 810e14e:	681b      	ldr	r3, [r3, #0]
 810e150:	2b00      	cmp	r3, #0
 810e152:	d101      	bne.n	810e158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810e154:	f000 f924 	bl	810e3a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810e158:	4b5a      	ldr	r3, [pc, #360]	@ (810e2c4 <pvPortMalloc+0x188>)
 810e15a:	681a      	ldr	r2, [r3, #0]
 810e15c:	687b      	ldr	r3, [r7, #4]
 810e15e:	4013      	ands	r3, r2
 810e160:	2b00      	cmp	r3, #0
 810e162:	f040 8095 	bne.w	810e290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810e166:	687b      	ldr	r3, [r7, #4]
 810e168:	2b00      	cmp	r3, #0
 810e16a:	d01e      	beq.n	810e1aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810e16c:	2208      	movs	r2, #8
 810e16e:	687b      	ldr	r3, [r7, #4]
 810e170:	4413      	add	r3, r2
 810e172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810e174:	687b      	ldr	r3, [r7, #4]
 810e176:	f003 0307 	and.w	r3, r3, #7
 810e17a:	2b00      	cmp	r3, #0
 810e17c:	d015      	beq.n	810e1aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810e17e:	687b      	ldr	r3, [r7, #4]
 810e180:	f023 0307 	bic.w	r3, r3, #7
 810e184:	3308      	adds	r3, #8
 810e186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810e188:	687b      	ldr	r3, [r7, #4]
 810e18a:	f003 0307 	and.w	r3, r3, #7
 810e18e:	2b00      	cmp	r3, #0
 810e190:	d00b      	beq.n	810e1aa <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810e192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e196:	f383 8811 	msr	BASEPRI, r3
 810e19a:	f3bf 8f6f 	isb	sy
 810e19e:	f3bf 8f4f 	dsb	sy
 810e1a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810e1a4:	bf00      	nop
 810e1a6:	bf00      	nop
 810e1a8:	e7fd      	b.n	810e1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810e1aa:	687b      	ldr	r3, [r7, #4]
 810e1ac:	2b00      	cmp	r3, #0
 810e1ae:	d06f      	beq.n	810e290 <pvPortMalloc+0x154>
 810e1b0:	4b45      	ldr	r3, [pc, #276]	@ (810e2c8 <pvPortMalloc+0x18c>)
 810e1b2:	681b      	ldr	r3, [r3, #0]
 810e1b4:	687a      	ldr	r2, [r7, #4]
 810e1b6:	429a      	cmp	r2, r3
 810e1b8:	d86a      	bhi.n	810e290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810e1ba:	4b44      	ldr	r3, [pc, #272]	@ (810e2cc <pvPortMalloc+0x190>)
 810e1bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810e1be:	4b43      	ldr	r3, [pc, #268]	@ (810e2cc <pvPortMalloc+0x190>)
 810e1c0:	681b      	ldr	r3, [r3, #0]
 810e1c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810e1c4:	e004      	b.n	810e1d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810e1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e1c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810e1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e1cc:	681b      	ldr	r3, [r3, #0]
 810e1ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810e1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e1d2:	685b      	ldr	r3, [r3, #4]
 810e1d4:	687a      	ldr	r2, [r7, #4]
 810e1d6:	429a      	cmp	r2, r3
 810e1d8:	d903      	bls.n	810e1e2 <pvPortMalloc+0xa6>
 810e1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e1dc:	681b      	ldr	r3, [r3, #0]
 810e1de:	2b00      	cmp	r3, #0
 810e1e0:	d1f1      	bne.n	810e1c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810e1e2:	4b37      	ldr	r3, [pc, #220]	@ (810e2c0 <pvPortMalloc+0x184>)
 810e1e4:	681b      	ldr	r3, [r3, #0]
 810e1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e1e8:	429a      	cmp	r2, r3
 810e1ea:	d051      	beq.n	810e290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810e1ec:	6a3b      	ldr	r3, [r7, #32]
 810e1ee:	681b      	ldr	r3, [r3, #0]
 810e1f0:	2208      	movs	r2, #8
 810e1f2:	4413      	add	r3, r2
 810e1f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810e1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e1f8:	681a      	ldr	r2, [r3, #0]
 810e1fa:	6a3b      	ldr	r3, [r7, #32]
 810e1fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e200:	685a      	ldr	r2, [r3, #4]
 810e202:	687b      	ldr	r3, [r7, #4]
 810e204:	1ad2      	subs	r2, r2, r3
 810e206:	2308      	movs	r3, #8
 810e208:	005b      	lsls	r3, r3, #1
 810e20a:	429a      	cmp	r2, r3
 810e20c:	d920      	bls.n	810e250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810e20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e210:	687b      	ldr	r3, [r7, #4]
 810e212:	4413      	add	r3, r2
 810e214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810e216:	69bb      	ldr	r3, [r7, #24]
 810e218:	f003 0307 	and.w	r3, r3, #7
 810e21c:	2b00      	cmp	r3, #0
 810e21e:	d00b      	beq.n	810e238 <pvPortMalloc+0xfc>
	__asm volatile
 810e220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e224:	f383 8811 	msr	BASEPRI, r3
 810e228:	f3bf 8f6f 	isb	sy
 810e22c:	f3bf 8f4f 	dsb	sy
 810e230:	613b      	str	r3, [r7, #16]
}
 810e232:	bf00      	nop
 810e234:	bf00      	nop
 810e236:	e7fd      	b.n	810e234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e23a:	685a      	ldr	r2, [r3, #4]
 810e23c:	687b      	ldr	r3, [r7, #4]
 810e23e:	1ad2      	subs	r2, r2, r3
 810e240:	69bb      	ldr	r3, [r7, #24]
 810e242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e246:	687a      	ldr	r2, [r7, #4]
 810e248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810e24a:	69b8      	ldr	r0, [r7, #24]
 810e24c:	f000 f90a 	bl	810e464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810e250:	4b1d      	ldr	r3, [pc, #116]	@ (810e2c8 <pvPortMalloc+0x18c>)
 810e252:	681a      	ldr	r2, [r3, #0]
 810e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e256:	685b      	ldr	r3, [r3, #4]
 810e258:	1ad3      	subs	r3, r2, r3
 810e25a:	4a1b      	ldr	r2, [pc, #108]	@ (810e2c8 <pvPortMalloc+0x18c>)
 810e25c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810e25e:	4b1a      	ldr	r3, [pc, #104]	@ (810e2c8 <pvPortMalloc+0x18c>)
 810e260:	681a      	ldr	r2, [r3, #0]
 810e262:	4b1b      	ldr	r3, [pc, #108]	@ (810e2d0 <pvPortMalloc+0x194>)
 810e264:	681b      	ldr	r3, [r3, #0]
 810e266:	429a      	cmp	r2, r3
 810e268:	d203      	bcs.n	810e272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810e26a:	4b17      	ldr	r3, [pc, #92]	@ (810e2c8 <pvPortMalloc+0x18c>)
 810e26c:	681b      	ldr	r3, [r3, #0]
 810e26e:	4a18      	ldr	r2, [pc, #96]	@ (810e2d0 <pvPortMalloc+0x194>)
 810e270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e274:	685a      	ldr	r2, [r3, #4]
 810e276:	4b13      	ldr	r3, [pc, #76]	@ (810e2c4 <pvPortMalloc+0x188>)
 810e278:	681b      	ldr	r3, [r3, #0]
 810e27a:	431a      	orrs	r2, r3
 810e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e27e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810e280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e282:	2200      	movs	r2, #0
 810e284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810e286:	4b13      	ldr	r3, [pc, #76]	@ (810e2d4 <pvPortMalloc+0x198>)
 810e288:	681b      	ldr	r3, [r3, #0]
 810e28a:	3301      	adds	r3, #1
 810e28c:	4a11      	ldr	r2, [pc, #68]	@ (810e2d4 <pvPortMalloc+0x198>)
 810e28e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810e290:	f001 fb98 	bl	810f9c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810e294:	69fb      	ldr	r3, [r7, #28]
 810e296:	f003 0307 	and.w	r3, r3, #7
 810e29a:	2b00      	cmp	r3, #0
 810e29c:	d00b      	beq.n	810e2b6 <pvPortMalloc+0x17a>
	__asm volatile
 810e29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e2a2:	f383 8811 	msr	BASEPRI, r3
 810e2a6:	f3bf 8f6f 	isb	sy
 810e2aa:	f3bf 8f4f 	dsb	sy
 810e2ae:	60fb      	str	r3, [r7, #12]
}
 810e2b0:	bf00      	nop
 810e2b2:	bf00      	nop
 810e2b4:	e7fd      	b.n	810e2b2 <pvPortMalloc+0x176>
	return pvReturn;
 810e2b6:	69fb      	ldr	r3, [r7, #28]
}
 810e2b8:	4618      	mov	r0, r3
 810e2ba:	3728      	adds	r7, #40	@ 0x28
 810e2bc:	46bd      	mov	sp, r7
 810e2be:	bd80      	pop	{r7, pc}
 810e2c0:	100047c0 	.word	0x100047c0
 810e2c4:	100047d4 	.word	0x100047d4
 810e2c8:	100047c4 	.word	0x100047c4
 810e2cc:	100047b8 	.word	0x100047b8
 810e2d0:	100047c8 	.word	0x100047c8
 810e2d4:	100047cc 	.word	0x100047cc

0810e2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810e2d8:	b580      	push	{r7, lr}
 810e2da:	b086      	sub	sp, #24
 810e2dc:	af00      	add	r7, sp, #0
 810e2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810e2e0:	687b      	ldr	r3, [r7, #4]
 810e2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810e2e4:	687b      	ldr	r3, [r7, #4]
 810e2e6:	2b00      	cmp	r3, #0
 810e2e8:	d04f      	beq.n	810e38a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810e2ea:	2308      	movs	r3, #8
 810e2ec:	425b      	negs	r3, r3
 810e2ee:	697a      	ldr	r2, [r7, #20]
 810e2f0:	4413      	add	r3, r2
 810e2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810e2f4:	697b      	ldr	r3, [r7, #20]
 810e2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810e2f8:	693b      	ldr	r3, [r7, #16]
 810e2fa:	685a      	ldr	r2, [r3, #4]
 810e2fc:	4b25      	ldr	r3, [pc, #148]	@ (810e394 <vPortFree+0xbc>)
 810e2fe:	681b      	ldr	r3, [r3, #0]
 810e300:	4013      	ands	r3, r2
 810e302:	2b00      	cmp	r3, #0
 810e304:	d10b      	bne.n	810e31e <vPortFree+0x46>
	__asm volatile
 810e306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e30a:	f383 8811 	msr	BASEPRI, r3
 810e30e:	f3bf 8f6f 	isb	sy
 810e312:	f3bf 8f4f 	dsb	sy
 810e316:	60fb      	str	r3, [r7, #12]
}
 810e318:	bf00      	nop
 810e31a:	bf00      	nop
 810e31c:	e7fd      	b.n	810e31a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810e31e:	693b      	ldr	r3, [r7, #16]
 810e320:	681b      	ldr	r3, [r3, #0]
 810e322:	2b00      	cmp	r3, #0
 810e324:	d00b      	beq.n	810e33e <vPortFree+0x66>
	__asm volatile
 810e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e32a:	f383 8811 	msr	BASEPRI, r3
 810e32e:	f3bf 8f6f 	isb	sy
 810e332:	f3bf 8f4f 	dsb	sy
 810e336:	60bb      	str	r3, [r7, #8]
}
 810e338:	bf00      	nop
 810e33a:	bf00      	nop
 810e33c:	e7fd      	b.n	810e33a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810e33e:	693b      	ldr	r3, [r7, #16]
 810e340:	685a      	ldr	r2, [r3, #4]
 810e342:	4b14      	ldr	r3, [pc, #80]	@ (810e394 <vPortFree+0xbc>)
 810e344:	681b      	ldr	r3, [r3, #0]
 810e346:	4013      	ands	r3, r2
 810e348:	2b00      	cmp	r3, #0
 810e34a:	d01e      	beq.n	810e38a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810e34c:	693b      	ldr	r3, [r7, #16]
 810e34e:	681b      	ldr	r3, [r3, #0]
 810e350:	2b00      	cmp	r3, #0
 810e352:	d11a      	bne.n	810e38a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810e354:	693b      	ldr	r3, [r7, #16]
 810e356:	685a      	ldr	r2, [r3, #4]
 810e358:	4b0e      	ldr	r3, [pc, #56]	@ (810e394 <vPortFree+0xbc>)
 810e35a:	681b      	ldr	r3, [r3, #0]
 810e35c:	43db      	mvns	r3, r3
 810e35e:	401a      	ands	r2, r3
 810e360:	693b      	ldr	r3, [r7, #16]
 810e362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810e364:	f001 fb20 	bl	810f9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810e368:	693b      	ldr	r3, [r7, #16]
 810e36a:	685a      	ldr	r2, [r3, #4]
 810e36c:	4b0a      	ldr	r3, [pc, #40]	@ (810e398 <vPortFree+0xc0>)
 810e36e:	681b      	ldr	r3, [r3, #0]
 810e370:	4413      	add	r3, r2
 810e372:	4a09      	ldr	r2, [pc, #36]	@ (810e398 <vPortFree+0xc0>)
 810e374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810e376:	6938      	ldr	r0, [r7, #16]
 810e378:	f000 f874 	bl	810e464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810e37c:	4b07      	ldr	r3, [pc, #28]	@ (810e39c <vPortFree+0xc4>)
 810e37e:	681b      	ldr	r3, [r3, #0]
 810e380:	3301      	adds	r3, #1
 810e382:	4a06      	ldr	r2, [pc, #24]	@ (810e39c <vPortFree+0xc4>)
 810e384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810e386:	f001 fb1d 	bl	810f9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810e38a:	bf00      	nop
 810e38c:	3718      	adds	r7, #24
 810e38e:	46bd      	mov	sp, r7
 810e390:	bd80      	pop	{r7, pc}
 810e392:	bf00      	nop
 810e394:	100047d4 	.word	0x100047d4
 810e398:	100047c4 	.word	0x100047c4
 810e39c:	100047d0 	.word	0x100047d0

0810e3a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810e3a0:	b480      	push	{r7}
 810e3a2:	b085      	sub	sp, #20
 810e3a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810e3a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810e3aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810e3ac:	4b27      	ldr	r3, [pc, #156]	@ (810e44c <prvHeapInit+0xac>)
 810e3ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810e3b0:	68fb      	ldr	r3, [r7, #12]
 810e3b2:	f003 0307 	and.w	r3, r3, #7
 810e3b6:	2b00      	cmp	r3, #0
 810e3b8:	d00c      	beq.n	810e3d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810e3ba:	68fb      	ldr	r3, [r7, #12]
 810e3bc:	3307      	adds	r3, #7
 810e3be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810e3c0:	68fb      	ldr	r3, [r7, #12]
 810e3c2:	f023 0307 	bic.w	r3, r3, #7
 810e3c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810e3c8:	68ba      	ldr	r2, [r7, #8]
 810e3ca:	68fb      	ldr	r3, [r7, #12]
 810e3cc:	1ad3      	subs	r3, r2, r3
 810e3ce:	4a1f      	ldr	r2, [pc, #124]	@ (810e44c <prvHeapInit+0xac>)
 810e3d0:	4413      	add	r3, r2
 810e3d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810e3d4:	68fb      	ldr	r3, [r7, #12]
 810e3d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810e3d8:	4a1d      	ldr	r2, [pc, #116]	@ (810e450 <prvHeapInit+0xb0>)
 810e3da:	687b      	ldr	r3, [r7, #4]
 810e3dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810e3de:	4b1c      	ldr	r3, [pc, #112]	@ (810e450 <prvHeapInit+0xb0>)
 810e3e0:	2200      	movs	r2, #0
 810e3e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810e3e4:	687b      	ldr	r3, [r7, #4]
 810e3e6:	68ba      	ldr	r2, [r7, #8]
 810e3e8:	4413      	add	r3, r2
 810e3ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810e3ec:	2208      	movs	r2, #8
 810e3ee:	68fb      	ldr	r3, [r7, #12]
 810e3f0:	1a9b      	subs	r3, r3, r2
 810e3f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810e3f4:	68fb      	ldr	r3, [r7, #12]
 810e3f6:	f023 0307 	bic.w	r3, r3, #7
 810e3fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810e3fc:	68fb      	ldr	r3, [r7, #12]
 810e3fe:	4a15      	ldr	r2, [pc, #84]	@ (810e454 <prvHeapInit+0xb4>)
 810e400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810e402:	4b14      	ldr	r3, [pc, #80]	@ (810e454 <prvHeapInit+0xb4>)
 810e404:	681b      	ldr	r3, [r3, #0]
 810e406:	2200      	movs	r2, #0
 810e408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810e40a:	4b12      	ldr	r3, [pc, #72]	@ (810e454 <prvHeapInit+0xb4>)
 810e40c:	681b      	ldr	r3, [r3, #0]
 810e40e:	2200      	movs	r2, #0
 810e410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810e412:	687b      	ldr	r3, [r7, #4]
 810e414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810e416:	683b      	ldr	r3, [r7, #0]
 810e418:	68fa      	ldr	r2, [r7, #12]
 810e41a:	1ad2      	subs	r2, r2, r3
 810e41c:	683b      	ldr	r3, [r7, #0]
 810e41e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810e420:	4b0c      	ldr	r3, [pc, #48]	@ (810e454 <prvHeapInit+0xb4>)
 810e422:	681a      	ldr	r2, [r3, #0]
 810e424:	683b      	ldr	r3, [r7, #0]
 810e426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810e428:	683b      	ldr	r3, [r7, #0]
 810e42a:	685b      	ldr	r3, [r3, #4]
 810e42c:	4a0a      	ldr	r2, [pc, #40]	@ (810e458 <prvHeapInit+0xb8>)
 810e42e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810e430:	683b      	ldr	r3, [r7, #0]
 810e432:	685b      	ldr	r3, [r3, #4]
 810e434:	4a09      	ldr	r2, [pc, #36]	@ (810e45c <prvHeapInit+0xbc>)
 810e436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810e438:	4b09      	ldr	r3, [pc, #36]	@ (810e460 <prvHeapInit+0xc0>)
 810e43a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810e43e:	601a      	str	r2, [r3, #0]
}
 810e440:	bf00      	nop
 810e442:	3714      	adds	r7, #20
 810e444:	46bd      	mov	sp, r7
 810e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e44a:	4770      	bx	lr
 810e44c:	10000bb8 	.word	0x10000bb8
 810e450:	100047b8 	.word	0x100047b8
 810e454:	100047c0 	.word	0x100047c0
 810e458:	100047c8 	.word	0x100047c8
 810e45c:	100047c4 	.word	0x100047c4
 810e460:	100047d4 	.word	0x100047d4

0810e464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810e464:	b480      	push	{r7}
 810e466:	b085      	sub	sp, #20
 810e468:	af00      	add	r7, sp, #0
 810e46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810e46c:	4b28      	ldr	r3, [pc, #160]	@ (810e510 <prvInsertBlockIntoFreeList+0xac>)
 810e46e:	60fb      	str	r3, [r7, #12]
 810e470:	e002      	b.n	810e478 <prvInsertBlockIntoFreeList+0x14>
 810e472:	68fb      	ldr	r3, [r7, #12]
 810e474:	681b      	ldr	r3, [r3, #0]
 810e476:	60fb      	str	r3, [r7, #12]
 810e478:	68fb      	ldr	r3, [r7, #12]
 810e47a:	681b      	ldr	r3, [r3, #0]
 810e47c:	687a      	ldr	r2, [r7, #4]
 810e47e:	429a      	cmp	r2, r3
 810e480:	d8f7      	bhi.n	810e472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810e482:	68fb      	ldr	r3, [r7, #12]
 810e484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810e486:	68fb      	ldr	r3, [r7, #12]
 810e488:	685b      	ldr	r3, [r3, #4]
 810e48a:	68ba      	ldr	r2, [r7, #8]
 810e48c:	4413      	add	r3, r2
 810e48e:	687a      	ldr	r2, [r7, #4]
 810e490:	429a      	cmp	r2, r3
 810e492:	d108      	bne.n	810e4a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810e494:	68fb      	ldr	r3, [r7, #12]
 810e496:	685a      	ldr	r2, [r3, #4]
 810e498:	687b      	ldr	r3, [r7, #4]
 810e49a:	685b      	ldr	r3, [r3, #4]
 810e49c:	441a      	add	r2, r3
 810e49e:	68fb      	ldr	r3, [r7, #12]
 810e4a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810e4a2:	68fb      	ldr	r3, [r7, #12]
 810e4a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810e4a6:	687b      	ldr	r3, [r7, #4]
 810e4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810e4aa:	687b      	ldr	r3, [r7, #4]
 810e4ac:	685b      	ldr	r3, [r3, #4]
 810e4ae:	68ba      	ldr	r2, [r7, #8]
 810e4b0:	441a      	add	r2, r3
 810e4b2:	68fb      	ldr	r3, [r7, #12]
 810e4b4:	681b      	ldr	r3, [r3, #0]
 810e4b6:	429a      	cmp	r2, r3
 810e4b8:	d118      	bne.n	810e4ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810e4ba:	68fb      	ldr	r3, [r7, #12]
 810e4bc:	681a      	ldr	r2, [r3, #0]
 810e4be:	4b15      	ldr	r3, [pc, #84]	@ (810e514 <prvInsertBlockIntoFreeList+0xb0>)
 810e4c0:	681b      	ldr	r3, [r3, #0]
 810e4c2:	429a      	cmp	r2, r3
 810e4c4:	d00d      	beq.n	810e4e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810e4c6:	687b      	ldr	r3, [r7, #4]
 810e4c8:	685a      	ldr	r2, [r3, #4]
 810e4ca:	68fb      	ldr	r3, [r7, #12]
 810e4cc:	681b      	ldr	r3, [r3, #0]
 810e4ce:	685b      	ldr	r3, [r3, #4]
 810e4d0:	441a      	add	r2, r3
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810e4d6:	68fb      	ldr	r3, [r7, #12]
 810e4d8:	681b      	ldr	r3, [r3, #0]
 810e4da:	681a      	ldr	r2, [r3, #0]
 810e4dc:	687b      	ldr	r3, [r7, #4]
 810e4de:	601a      	str	r2, [r3, #0]
 810e4e0:	e008      	b.n	810e4f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810e4e2:	4b0c      	ldr	r3, [pc, #48]	@ (810e514 <prvInsertBlockIntoFreeList+0xb0>)
 810e4e4:	681a      	ldr	r2, [r3, #0]
 810e4e6:	687b      	ldr	r3, [r7, #4]
 810e4e8:	601a      	str	r2, [r3, #0]
 810e4ea:	e003      	b.n	810e4f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810e4ec:	68fb      	ldr	r3, [r7, #12]
 810e4ee:	681a      	ldr	r2, [r3, #0]
 810e4f0:	687b      	ldr	r3, [r7, #4]
 810e4f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810e4f4:	68fa      	ldr	r2, [r7, #12]
 810e4f6:	687b      	ldr	r3, [r7, #4]
 810e4f8:	429a      	cmp	r2, r3
 810e4fa:	d002      	beq.n	810e502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810e4fc:	68fb      	ldr	r3, [r7, #12]
 810e4fe:	687a      	ldr	r2, [r7, #4]
 810e500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e502:	bf00      	nop
 810e504:	3714      	adds	r7, #20
 810e506:	46bd      	mov	sp, r7
 810e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e50c:	4770      	bx	lr
 810e50e:	bf00      	nop
 810e510:	100047b8 	.word	0x100047b8
 810e514:	100047c0 	.word	0x100047c0

0810e518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810e518:	b480      	push	{r7}
 810e51a:	b083      	sub	sp, #12
 810e51c:	af00      	add	r7, sp, #0
 810e51e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e520:	687b      	ldr	r3, [r7, #4]
 810e522:	f103 0208 	add.w	r2, r3, #8
 810e526:	687b      	ldr	r3, [r7, #4]
 810e528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810e52a:	687b      	ldr	r3, [r7, #4]
 810e52c:	f04f 32ff 	mov.w	r2, #4294967295
 810e530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e532:	687b      	ldr	r3, [r7, #4]
 810e534:	f103 0208 	add.w	r2, r3, #8
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e53c:	687b      	ldr	r3, [r7, #4]
 810e53e:	f103 0208 	add.w	r2, r3, #8
 810e542:	687b      	ldr	r3, [r7, #4]
 810e544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810e546:	687b      	ldr	r3, [r7, #4]
 810e548:	2200      	movs	r2, #0
 810e54a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810e54c:	bf00      	nop
 810e54e:	370c      	adds	r7, #12
 810e550:	46bd      	mov	sp, r7
 810e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e556:	4770      	bx	lr

0810e558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810e558:	b480      	push	{r7}
 810e55a:	b083      	sub	sp, #12
 810e55c:	af00      	add	r7, sp, #0
 810e55e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810e560:	687b      	ldr	r3, [r7, #4]
 810e562:	2200      	movs	r2, #0
 810e564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810e566:	bf00      	nop
 810e568:	370c      	adds	r7, #12
 810e56a:	46bd      	mov	sp, r7
 810e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e570:	4770      	bx	lr

0810e572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810e572:	b480      	push	{r7}
 810e574:	b085      	sub	sp, #20
 810e576:	af00      	add	r7, sp, #0
 810e578:	6078      	str	r0, [r7, #4]
 810e57a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810e57c:	687b      	ldr	r3, [r7, #4]
 810e57e:	685b      	ldr	r3, [r3, #4]
 810e580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810e582:	683b      	ldr	r3, [r7, #0]
 810e584:	68fa      	ldr	r2, [r7, #12]
 810e586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810e588:	68fb      	ldr	r3, [r7, #12]
 810e58a:	689a      	ldr	r2, [r3, #8]
 810e58c:	683b      	ldr	r3, [r7, #0]
 810e58e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810e590:	68fb      	ldr	r3, [r7, #12]
 810e592:	689b      	ldr	r3, [r3, #8]
 810e594:	683a      	ldr	r2, [r7, #0]
 810e596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810e598:	68fb      	ldr	r3, [r7, #12]
 810e59a:	683a      	ldr	r2, [r7, #0]
 810e59c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810e59e:	683b      	ldr	r3, [r7, #0]
 810e5a0:	687a      	ldr	r2, [r7, #4]
 810e5a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810e5a4:	687b      	ldr	r3, [r7, #4]
 810e5a6:	681b      	ldr	r3, [r3, #0]
 810e5a8:	1c5a      	adds	r2, r3, #1
 810e5aa:	687b      	ldr	r3, [r7, #4]
 810e5ac:	601a      	str	r2, [r3, #0]
}
 810e5ae:	bf00      	nop
 810e5b0:	3714      	adds	r7, #20
 810e5b2:	46bd      	mov	sp, r7
 810e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5b8:	4770      	bx	lr

0810e5ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810e5ba:	b480      	push	{r7}
 810e5bc:	b085      	sub	sp, #20
 810e5be:	af00      	add	r7, sp, #0
 810e5c0:	6078      	str	r0, [r7, #4]
 810e5c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810e5c4:	683b      	ldr	r3, [r7, #0]
 810e5c6:	681b      	ldr	r3, [r3, #0]
 810e5c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810e5ca:	68bb      	ldr	r3, [r7, #8]
 810e5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e5d0:	d103      	bne.n	810e5da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810e5d2:	687b      	ldr	r3, [r7, #4]
 810e5d4:	691b      	ldr	r3, [r3, #16]
 810e5d6:	60fb      	str	r3, [r7, #12]
 810e5d8:	e00c      	b.n	810e5f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810e5da:	687b      	ldr	r3, [r7, #4]
 810e5dc:	3308      	adds	r3, #8
 810e5de:	60fb      	str	r3, [r7, #12]
 810e5e0:	e002      	b.n	810e5e8 <vListInsert+0x2e>
 810e5e2:	68fb      	ldr	r3, [r7, #12]
 810e5e4:	685b      	ldr	r3, [r3, #4]
 810e5e6:	60fb      	str	r3, [r7, #12]
 810e5e8:	68fb      	ldr	r3, [r7, #12]
 810e5ea:	685b      	ldr	r3, [r3, #4]
 810e5ec:	681b      	ldr	r3, [r3, #0]
 810e5ee:	68ba      	ldr	r2, [r7, #8]
 810e5f0:	429a      	cmp	r2, r3
 810e5f2:	d2f6      	bcs.n	810e5e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810e5f4:	68fb      	ldr	r3, [r7, #12]
 810e5f6:	685a      	ldr	r2, [r3, #4]
 810e5f8:	683b      	ldr	r3, [r7, #0]
 810e5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810e5fc:	683b      	ldr	r3, [r7, #0]
 810e5fe:	685b      	ldr	r3, [r3, #4]
 810e600:	683a      	ldr	r2, [r7, #0]
 810e602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810e604:	683b      	ldr	r3, [r7, #0]
 810e606:	68fa      	ldr	r2, [r7, #12]
 810e608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810e60a:	68fb      	ldr	r3, [r7, #12]
 810e60c:	683a      	ldr	r2, [r7, #0]
 810e60e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810e610:	683b      	ldr	r3, [r7, #0]
 810e612:	687a      	ldr	r2, [r7, #4]
 810e614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810e616:	687b      	ldr	r3, [r7, #4]
 810e618:	681b      	ldr	r3, [r3, #0]
 810e61a:	1c5a      	adds	r2, r3, #1
 810e61c:	687b      	ldr	r3, [r7, #4]
 810e61e:	601a      	str	r2, [r3, #0]
}
 810e620:	bf00      	nop
 810e622:	3714      	adds	r7, #20
 810e624:	46bd      	mov	sp, r7
 810e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e62a:	4770      	bx	lr

0810e62c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810e62c:	b480      	push	{r7}
 810e62e:	b085      	sub	sp, #20
 810e630:	af00      	add	r7, sp, #0
 810e632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810e634:	687b      	ldr	r3, [r7, #4]
 810e636:	691b      	ldr	r3, [r3, #16]
 810e638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810e63a:	687b      	ldr	r3, [r7, #4]
 810e63c:	685b      	ldr	r3, [r3, #4]
 810e63e:	687a      	ldr	r2, [r7, #4]
 810e640:	6892      	ldr	r2, [r2, #8]
 810e642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810e644:	687b      	ldr	r3, [r7, #4]
 810e646:	689b      	ldr	r3, [r3, #8]
 810e648:	687a      	ldr	r2, [r7, #4]
 810e64a:	6852      	ldr	r2, [r2, #4]
 810e64c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810e64e:	68fb      	ldr	r3, [r7, #12]
 810e650:	685b      	ldr	r3, [r3, #4]
 810e652:	687a      	ldr	r2, [r7, #4]
 810e654:	429a      	cmp	r2, r3
 810e656:	d103      	bne.n	810e660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810e658:	687b      	ldr	r3, [r7, #4]
 810e65a:	689a      	ldr	r2, [r3, #8]
 810e65c:	68fb      	ldr	r3, [r7, #12]
 810e65e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810e660:	687b      	ldr	r3, [r7, #4]
 810e662:	2200      	movs	r2, #0
 810e664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810e666:	68fb      	ldr	r3, [r7, #12]
 810e668:	681b      	ldr	r3, [r3, #0]
 810e66a:	1e5a      	subs	r2, r3, #1
 810e66c:	68fb      	ldr	r3, [r7, #12]
 810e66e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810e670:	68fb      	ldr	r3, [r7, #12]
 810e672:	681b      	ldr	r3, [r3, #0]
}
 810e674:	4618      	mov	r0, r3
 810e676:	3714      	adds	r7, #20
 810e678:	46bd      	mov	sp, r7
 810e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e67e:	4770      	bx	lr

0810e680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810e680:	b480      	push	{r7}
 810e682:	b085      	sub	sp, #20
 810e684:	af00      	add	r7, sp, #0
 810e686:	60f8      	str	r0, [r7, #12]
 810e688:	60b9      	str	r1, [r7, #8]
 810e68a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810e68c:	68fb      	ldr	r3, [r7, #12]
 810e68e:	3b04      	subs	r3, #4
 810e690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810e692:	68fb      	ldr	r3, [r7, #12]
 810e694:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810e698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810e69a:	68fb      	ldr	r3, [r7, #12]
 810e69c:	3b04      	subs	r3, #4
 810e69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810e6a0:	68bb      	ldr	r3, [r7, #8]
 810e6a2:	f023 0201 	bic.w	r2, r3, #1
 810e6a6:	68fb      	ldr	r3, [r7, #12]
 810e6a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810e6aa:	68fb      	ldr	r3, [r7, #12]
 810e6ac:	3b04      	subs	r3, #4
 810e6ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810e6b0:	4a0c      	ldr	r2, [pc, #48]	@ (810e6e4 <pxPortInitialiseStack+0x64>)
 810e6b2:	68fb      	ldr	r3, [r7, #12]
 810e6b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810e6b6:	68fb      	ldr	r3, [r7, #12]
 810e6b8:	3b14      	subs	r3, #20
 810e6ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810e6bc:	687a      	ldr	r2, [r7, #4]
 810e6be:	68fb      	ldr	r3, [r7, #12]
 810e6c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810e6c2:	68fb      	ldr	r3, [r7, #12]
 810e6c4:	3b04      	subs	r3, #4
 810e6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810e6c8:	68fb      	ldr	r3, [r7, #12]
 810e6ca:	f06f 0202 	mvn.w	r2, #2
 810e6ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810e6d0:	68fb      	ldr	r3, [r7, #12]
 810e6d2:	3b20      	subs	r3, #32
 810e6d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810e6d6:	68fb      	ldr	r3, [r7, #12]
}
 810e6d8:	4618      	mov	r0, r3
 810e6da:	3714      	adds	r7, #20
 810e6dc:	46bd      	mov	sp, r7
 810e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6e2:	4770      	bx	lr
 810e6e4:	0810e6e9 	.word	0x0810e6e9

0810e6e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810e6e8:	b480      	push	{r7}
 810e6ea:	b085      	sub	sp, #20
 810e6ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810e6ee:	2300      	movs	r3, #0
 810e6f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810e6f2:	4b13      	ldr	r3, [pc, #76]	@ (810e740 <prvTaskExitError+0x58>)
 810e6f4:	681b      	ldr	r3, [r3, #0]
 810e6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e6fa:	d00b      	beq.n	810e714 <prvTaskExitError+0x2c>
	__asm volatile
 810e6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e700:	f383 8811 	msr	BASEPRI, r3
 810e704:	f3bf 8f6f 	isb	sy
 810e708:	f3bf 8f4f 	dsb	sy
 810e70c:	60fb      	str	r3, [r7, #12]
}
 810e70e:	bf00      	nop
 810e710:	bf00      	nop
 810e712:	e7fd      	b.n	810e710 <prvTaskExitError+0x28>
	__asm volatile
 810e714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e718:	f383 8811 	msr	BASEPRI, r3
 810e71c:	f3bf 8f6f 	isb	sy
 810e720:	f3bf 8f4f 	dsb	sy
 810e724:	60bb      	str	r3, [r7, #8]
}
 810e726:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810e728:	bf00      	nop
 810e72a:	687b      	ldr	r3, [r7, #4]
 810e72c:	2b00      	cmp	r3, #0
 810e72e:	d0fc      	beq.n	810e72a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810e730:	bf00      	nop
 810e732:	bf00      	nop
 810e734:	3714      	adds	r7, #20
 810e736:	46bd      	mov	sp, r7
 810e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e73c:	4770      	bx	lr
 810e73e:	bf00      	nop
 810e740:	10000014 	.word	0x10000014
	...

0810e750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810e750:	4b07      	ldr	r3, [pc, #28]	@ (810e770 <pxCurrentTCBConst2>)
 810e752:	6819      	ldr	r1, [r3, #0]
 810e754:	6808      	ldr	r0, [r1, #0]
 810e756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e75a:	f380 8809 	msr	PSP, r0
 810e75e:	f3bf 8f6f 	isb	sy
 810e762:	f04f 0000 	mov.w	r0, #0
 810e766:	f380 8811 	msr	BASEPRI, r0
 810e76a:	4770      	bx	lr
 810e76c:	f3af 8000 	nop.w

0810e770 <pxCurrentTCBConst2>:
 810e770:	10004820 	.word	0x10004820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810e774:	bf00      	nop
 810e776:	bf00      	nop

0810e778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810e778:	4808      	ldr	r0, [pc, #32]	@ (810e79c <prvPortStartFirstTask+0x24>)
 810e77a:	6800      	ldr	r0, [r0, #0]
 810e77c:	6800      	ldr	r0, [r0, #0]
 810e77e:	f380 8808 	msr	MSP, r0
 810e782:	f04f 0000 	mov.w	r0, #0
 810e786:	f380 8814 	msr	CONTROL, r0
 810e78a:	b662      	cpsie	i
 810e78c:	b661      	cpsie	f
 810e78e:	f3bf 8f4f 	dsb	sy
 810e792:	f3bf 8f6f 	isb	sy
 810e796:	df00      	svc	0
 810e798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810e79a:	bf00      	nop
 810e79c:	e000ed08 	.word	0xe000ed08

0810e7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810e7a0:	b580      	push	{r7, lr}
 810e7a2:	b086      	sub	sp, #24
 810e7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810e7a6:	4b47      	ldr	r3, [pc, #284]	@ (810e8c4 <xPortStartScheduler+0x124>)
 810e7a8:	681b      	ldr	r3, [r3, #0]
 810e7aa:	4a47      	ldr	r2, [pc, #284]	@ (810e8c8 <xPortStartScheduler+0x128>)
 810e7ac:	4293      	cmp	r3, r2
 810e7ae:	d10b      	bne.n	810e7c8 <xPortStartScheduler+0x28>
	__asm volatile
 810e7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7b4:	f383 8811 	msr	BASEPRI, r3
 810e7b8:	f3bf 8f6f 	isb	sy
 810e7bc:	f3bf 8f4f 	dsb	sy
 810e7c0:	60fb      	str	r3, [r7, #12]
}
 810e7c2:	bf00      	nop
 810e7c4:	bf00      	nop
 810e7c6:	e7fd      	b.n	810e7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810e7c8:	4b3e      	ldr	r3, [pc, #248]	@ (810e8c4 <xPortStartScheduler+0x124>)
 810e7ca:	681b      	ldr	r3, [r3, #0]
 810e7cc:	4a3f      	ldr	r2, [pc, #252]	@ (810e8cc <xPortStartScheduler+0x12c>)
 810e7ce:	4293      	cmp	r3, r2
 810e7d0:	d10b      	bne.n	810e7ea <xPortStartScheduler+0x4a>
	__asm volatile
 810e7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7d6:	f383 8811 	msr	BASEPRI, r3
 810e7da:	f3bf 8f6f 	isb	sy
 810e7de:	f3bf 8f4f 	dsb	sy
 810e7e2:	613b      	str	r3, [r7, #16]
}
 810e7e4:	bf00      	nop
 810e7e6:	bf00      	nop
 810e7e8:	e7fd      	b.n	810e7e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810e7ea:	4b39      	ldr	r3, [pc, #228]	@ (810e8d0 <xPortStartScheduler+0x130>)
 810e7ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810e7ee:	697b      	ldr	r3, [r7, #20]
 810e7f0:	781b      	ldrb	r3, [r3, #0]
 810e7f2:	b2db      	uxtb	r3, r3
 810e7f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810e7f6:	697b      	ldr	r3, [r7, #20]
 810e7f8:	22ff      	movs	r2, #255	@ 0xff
 810e7fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810e7fc:	697b      	ldr	r3, [r7, #20]
 810e7fe:	781b      	ldrb	r3, [r3, #0]
 810e800:	b2db      	uxtb	r3, r3
 810e802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810e804:	78fb      	ldrb	r3, [r7, #3]
 810e806:	b2db      	uxtb	r3, r3
 810e808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810e80c:	b2da      	uxtb	r2, r3
 810e80e:	4b31      	ldr	r3, [pc, #196]	@ (810e8d4 <xPortStartScheduler+0x134>)
 810e810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810e812:	4b31      	ldr	r3, [pc, #196]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e814:	2207      	movs	r2, #7
 810e816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810e818:	e009      	b.n	810e82e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810e81a:	4b2f      	ldr	r3, [pc, #188]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e81c:	681b      	ldr	r3, [r3, #0]
 810e81e:	3b01      	subs	r3, #1
 810e820:	4a2d      	ldr	r2, [pc, #180]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810e824:	78fb      	ldrb	r3, [r7, #3]
 810e826:	b2db      	uxtb	r3, r3
 810e828:	005b      	lsls	r3, r3, #1
 810e82a:	b2db      	uxtb	r3, r3
 810e82c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810e82e:	78fb      	ldrb	r3, [r7, #3]
 810e830:	b2db      	uxtb	r3, r3
 810e832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810e836:	2b80      	cmp	r3, #128	@ 0x80
 810e838:	d0ef      	beq.n	810e81a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810e83a:	4b27      	ldr	r3, [pc, #156]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e83c:	681b      	ldr	r3, [r3, #0]
 810e83e:	f1c3 0307 	rsb	r3, r3, #7
 810e842:	2b04      	cmp	r3, #4
 810e844:	d00b      	beq.n	810e85e <xPortStartScheduler+0xbe>
	__asm volatile
 810e846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e84a:	f383 8811 	msr	BASEPRI, r3
 810e84e:	f3bf 8f6f 	isb	sy
 810e852:	f3bf 8f4f 	dsb	sy
 810e856:	60bb      	str	r3, [r7, #8]
}
 810e858:	bf00      	nop
 810e85a:	bf00      	nop
 810e85c:	e7fd      	b.n	810e85a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810e85e:	4b1e      	ldr	r3, [pc, #120]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e860:	681b      	ldr	r3, [r3, #0]
 810e862:	021b      	lsls	r3, r3, #8
 810e864:	4a1c      	ldr	r2, [pc, #112]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810e868:	4b1b      	ldr	r3, [pc, #108]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e86a:	681b      	ldr	r3, [r3, #0]
 810e86c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810e870:	4a19      	ldr	r2, [pc, #100]	@ (810e8d8 <xPortStartScheduler+0x138>)
 810e872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810e874:	687b      	ldr	r3, [r7, #4]
 810e876:	b2da      	uxtb	r2, r3
 810e878:	697b      	ldr	r3, [r7, #20]
 810e87a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810e87c:	4b17      	ldr	r3, [pc, #92]	@ (810e8dc <xPortStartScheduler+0x13c>)
 810e87e:	681b      	ldr	r3, [r3, #0]
 810e880:	4a16      	ldr	r2, [pc, #88]	@ (810e8dc <xPortStartScheduler+0x13c>)
 810e882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810e886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810e888:	4b14      	ldr	r3, [pc, #80]	@ (810e8dc <xPortStartScheduler+0x13c>)
 810e88a:	681b      	ldr	r3, [r3, #0]
 810e88c:	4a13      	ldr	r2, [pc, #76]	@ (810e8dc <xPortStartScheduler+0x13c>)
 810e88e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810e892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810e894:	f000 f8da 	bl	810ea4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810e898:	4b11      	ldr	r3, [pc, #68]	@ (810e8e0 <xPortStartScheduler+0x140>)
 810e89a:	2200      	movs	r2, #0
 810e89c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810e89e:	f000 f8f9 	bl	810ea94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810e8a2:	4b10      	ldr	r3, [pc, #64]	@ (810e8e4 <xPortStartScheduler+0x144>)
 810e8a4:	681b      	ldr	r3, [r3, #0]
 810e8a6:	4a0f      	ldr	r2, [pc, #60]	@ (810e8e4 <xPortStartScheduler+0x144>)
 810e8a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810e8ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810e8ae:	f7ff ff63 	bl	810e778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810e8b2:	f001 f9ef 	bl	810fc94 <vTaskSwitchContext>
	prvTaskExitError();
 810e8b6:	f7ff ff17 	bl	810e6e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810e8ba:	2300      	movs	r3, #0
}
 810e8bc:	4618      	mov	r0, r3
 810e8be:	3718      	adds	r7, #24
 810e8c0:	46bd      	mov	sp, r7
 810e8c2:	bd80      	pop	{r7, pc}
 810e8c4:	e000ed00 	.word	0xe000ed00
 810e8c8:	410fc271 	.word	0x410fc271
 810e8cc:	410fc270 	.word	0x410fc270
 810e8d0:	e000e400 	.word	0xe000e400
 810e8d4:	100047d8 	.word	0x100047d8
 810e8d8:	100047dc 	.word	0x100047dc
 810e8dc:	e000ed20 	.word	0xe000ed20
 810e8e0:	10000014 	.word	0x10000014
 810e8e4:	e000ef34 	.word	0xe000ef34

0810e8e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810e8e8:	b480      	push	{r7}
 810e8ea:	b083      	sub	sp, #12
 810e8ec:	af00      	add	r7, sp, #0
	__asm volatile
 810e8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e8f2:	f383 8811 	msr	BASEPRI, r3
 810e8f6:	f3bf 8f6f 	isb	sy
 810e8fa:	f3bf 8f4f 	dsb	sy
 810e8fe:	607b      	str	r3, [r7, #4]
}
 810e900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810e902:	4b10      	ldr	r3, [pc, #64]	@ (810e944 <vPortEnterCritical+0x5c>)
 810e904:	681b      	ldr	r3, [r3, #0]
 810e906:	3301      	adds	r3, #1
 810e908:	4a0e      	ldr	r2, [pc, #56]	@ (810e944 <vPortEnterCritical+0x5c>)
 810e90a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810e90c:	4b0d      	ldr	r3, [pc, #52]	@ (810e944 <vPortEnterCritical+0x5c>)
 810e90e:	681b      	ldr	r3, [r3, #0]
 810e910:	2b01      	cmp	r3, #1
 810e912:	d110      	bne.n	810e936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810e914:	4b0c      	ldr	r3, [pc, #48]	@ (810e948 <vPortEnterCritical+0x60>)
 810e916:	681b      	ldr	r3, [r3, #0]
 810e918:	b2db      	uxtb	r3, r3
 810e91a:	2b00      	cmp	r3, #0
 810e91c:	d00b      	beq.n	810e936 <vPortEnterCritical+0x4e>
	__asm volatile
 810e91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e922:	f383 8811 	msr	BASEPRI, r3
 810e926:	f3bf 8f6f 	isb	sy
 810e92a:	f3bf 8f4f 	dsb	sy
 810e92e:	603b      	str	r3, [r7, #0]
}
 810e930:	bf00      	nop
 810e932:	bf00      	nop
 810e934:	e7fd      	b.n	810e932 <vPortEnterCritical+0x4a>
	}
}
 810e936:	bf00      	nop
 810e938:	370c      	adds	r7, #12
 810e93a:	46bd      	mov	sp, r7
 810e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e940:	4770      	bx	lr
 810e942:	bf00      	nop
 810e944:	10000014 	.word	0x10000014
 810e948:	e000ed04 	.word	0xe000ed04

0810e94c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810e94c:	b480      	push	{r7}
 810e94e:	b083      	sub	sp, #12
 810e950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810e952:	4b12      	ldr	r3, [pc, #72]	@ (810e99c <vPortExitCritical+0x50>)
 810e954:	681b      	ldr	r3, [r3, #0]
 810e956:	2b00      	cmp	r3, #0
 810e958:	d10b      	bne.n	810e972 <vPortExitCritical+0x26>
	__asm volatile
 810e95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e95e:	f383 8811 	msr	BASEPRI, r3
 810e962:	f3bf 8f6f 	isb	sy
 810e966:	f3bf 8f4f 	dsb	sy
 810e96a:	607b      	str	r3, [r7, #4]
}
 810e96c:	bf00      	nop
 810e96e:	bf00      	nop
 810e970:	e7fd      	b.n	810e96e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810e972:	4b0a      	ldr	r3, [pc, #40]	@ (810e99c <vPortExitCritical+0x50>)
 810e974:	681b      	ldr	r3, [r3, #0]
 810e976:	3b01      	subs	r3, #1
 810e978:	4a08      	ldr	r2, [pc, #32]	@ (810e99c <vPortExitCritical+0x50>)
 810e97a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810e97c:	4b07      	ldr	r3, [pc, #28]	@ (810e99c <vPortExitCritical+0x50>)
 810e97e:	681b      	ldr	r3, [r3, #0]
 810e980:	2b00      	cmp	r3, #0
 810e982:	d105      	bne.n	810e990 <vPortExitCritical+0x44>
 810e984:	2300      	movs	r3, #0
 810e986:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810e988:	683b      	ldr	r3, [r7, #0]
 810e98a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810e98e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810e990:	bf00      	nop
 810e992:	370c      	adds	r7, #12
 810e994:	46bd      	mov	sp, r7
 810e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e99a:	4770      	bx	lr
 810e99c:	10000014 	.word	0x10000014

0810e9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810e9a0:	f3ef 8009 	mrs	r0, PSP
 810e9a4:	f3bf 8f6f 	isb	sy
 810e9a8:	4b15      	ldr	r3, [pc, #84]	@ (810ea00 <pxCurrentTCBConst>)
 810e9aa:	681a      	ldr	r2, [r3, #0]
 810e9ac:	f01e 0f10 	tst.w	lr, #16
 810e9b0:	bf08      	it	eq
 810e9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810e9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e9ba:	6010      	str	r0, [r2, #0]
 810e9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 810e9c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810e9c4:	f380 8811 	msr	BASEPRI, r0
 810e9c8:	f3bf 8f4f 	dsb	sy
 810e9cc:	f3bf 8f6f 	isb	sy
 810e9d0:	f001 f960 	bl	810fc94 <vTaskSwitchContext>
 810e9d4:	f04f 0000 	mov.w	r0, #0
 810e9d8:	f380 8811 	msr	BASEPRI, r0
 810e9dc:	bc09      	pop	{r0, r3}
 810e9de:	6819      	ldr	r1, [r3, #0]
 810e9e0:	6808      	ldr	r0, [r1, #0]
 810e9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e9e6:	f01e 0f10 	tst.w	lr, #16
 810e9ea:	bf08      	it	eq
 810e9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810e9f0:	f380 8809 	msr	PSP, r0
 810e9f4:	f3bf 8f6f 	isb	sy
 810e9f8:	4770      	bx	lr
 810e9fa:	bf00      	nop
 810e9fc:	f3af 8000 	nop.w

0810ea00 <pxCurrentTCBConst>:
 810ea00:	10004820 	.word	0x10004820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810ea04:	bf00      	nop
 810ea06:	bf00      	nop

0810ea08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810ea08:	b580      	push	{r7, lr}
 810ea0a:	b082      	sub	sp, #8
 810ea0c:	af00      	add	r7, sp, #0
	__asm volatile
 810ea0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea12:	f383 8811 	msr	BASEPRI, r3
 810ea16:	f3bf 8f6f 	isb	sy
 810ea1a:	f3bf 8f4f 	dsb	sy
 810ea1e:	607b      	str	r3, [r7, #4]
}
 810ea20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810ea22:	f001 f87d 	bl	810fb20 <xTaskIncrementTick>
 810ea26:	4603      	mov	r3, r0
 810ea28:	2b00      	cmp	r3, #0
 810ea2a:	d003      	beq.n	810ea34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810ea2c:	4b06      	ldr	r3, [pc, #24]	@ (810ea48 <xPortSysTickHandler+0x40>)
 810ea2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ea32:	601a      	str	r2, [r3, #0]
 810ea34:	2300      	movs	r3, #0
 810ea36:	603b      	str	r3, [r7, #0]
	__asm volatile
 810ea38:	683b      	ldr	r3, [r7, #0]
 810ea3a:	f383 8811 	msr	BASEPRI, r3
}
 810ea3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810ea40:	bf00      	nop
 810ea42:	3708      	adds	r7, #8
 810ea44:	46bd      	mov	sp, r7
 810ea46:	bd80      	pop	{r7, pc}
 810ea48:	e000ed04 	.word	0xe000ed04

0810ea4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810ea4c:	b480      	push	{r7}
 810ea4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810ea50:	4b0b      	ldr	r3, [pc, #44]	@ (810ea80 <vPortSetupTimerInterrupt+0x34>)
 810ea52:	2200      	movs	r2, #0
 810ea54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810ea56:	4b0b      	ldr	r3, [pc, #44]	@ (810ea84 <vPortSetupTimerInterrupt+0x38>)
 810ea58:	2200      	movs	r2, #0
 810ea5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810ea5c:	4b0a      	ldr	r3, [pc, #40]	@ (810ea88 <vPortSetupTimerInterrupt+0x3c>)
 810ea5e:	681b      	ldr	r3, [r3, #0]
 810ea60:	4a0a      	ldr	r2, [pc, #40]	@ (810ea8c <vPortSetupTimerInterrupt+0x40>)
 810ea62:	fba2 2303 	umull	r2, r3, r2, r3
 810ea66:	099b      	lsrs	r3, r3, #6
 810ea68:	4a09      	ldr	r2, [pc, #36]	@ (810ea90 <vPortSetupTimerInterrupt+0x44>)
 810ea6a:	3b01      	subs	r3, #1
 810ea6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810ea6e:	4b04      	ldr	r3, [pc, #16]	@ (810ea80 <vPortSetupTimerInterrupt+0x34>)
 810ea70:	2207      	movs	r2, #7
 810ea72:	601a      	str	r2, [r3, #0]
}
 810ea74:	bf00      	nop
 810ea76:	46bd      	mov	sp, r7
 810ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea7c:	4770      	bx	lr
 810ea7e:	bf00      	nop
 810ea80:	e000e010 	.word	0xe000e010
 810ea84:	e000e018 	.word	0xe000e018
 810ea88:	10000004 	.word	0x10000004
 810ea8c:	10624dd3 	.word	0x10624dd3
 810ea90:	e000e014 	.word	0xe000e014

0810ea94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810ea94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810eaa4 <vPortEnableVFP+0x10>
 810ea98:	6801      	ldr	r1, [r0, #0]
 810ea9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810ea9e:	6001      	str	r1, [r0, #0]
 810eaa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810eaa2:	bf00      	nop
 810eaa4:	e000ed88 	.word	0xe000ed88

0810eaa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810eaa8:	b480      	push	{r7}
 810eaaa:	b085      	sub	sp, #20
 810eaac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810eaae:	f3ef 8305 	mrs	r3, IPSR
 810eab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810eab4:	68fb      	ldr	r3, [r7, #12]
 810eab6:	2b0f      	cmp	r3, #15
 810eab8:	d915      	bls.n	810eae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810eaba:	4a18      	ldr	r2, [pc, #96]	@ (810eb1c <vPortValidateInterruptPriority+0x74>)
 810eabc:	68fb      	ldr	r3, [r7, #12]
 810eabe:	4413      	add	r3, r2
 810eac0:	781b      	ldrb	r3, [r3, #0]
 810eac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810eac4:	4b16      	ldr	r3, [pc, #88]	@ (810eb20 <vPortValidateInterruptPriority+0x78>)
 810eac6:	781b      	ldrb	r3, [r3, #0]
 810eac8:	7afa      	ldrb	r2, [r7, #11]
 810eaca:	429a      	cmp	r2, r3
 810eacc:	d20b      	bcs.n	810eae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810eace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ead2:	f383 8811 	msr	BASEPRI, r3
 810ead6:	f3bf 8f6f 	isb	sy
 810eada:	f3bf 8f4f 	dsb	sy
 810eade:	607b      	str	r3, [r7, #4]
}
 810eae0:	bf00      	nop
 810eae2:	bf00      	nop
 810eae4:	e7fd      	b.n	810eae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810eae6:	4b0f      	ldr	r3, [pc, #60]	@ (810eb24 <vPortValidateInterruptPriority+0x7c>)
 810eae8:	681b      	ldr	r3, [r3, #0]
 810eaea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810eaee:	4b0e      	ldr	r3, [pc, #56]	@ (810eb28 <vPortValidateInterruptPriority+0x80>)
 810eaf0:	681b      	ldr	r3, [r3, #0]
 810eaf2:	429a      	cmp	r2, r3
 810eaf4:	d90b      	bls.n	810eb0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810eaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eafa:	f383 8811 	msr	BASEPRI, r3
 810eafe:	f3bf 8f6f 	isb	sy
 810eb02:	f3bf 8f4f 	dsb	sy
 810eb06:	603b      	str	r3, [r7, #0]
}
 810eb08:	bf00      	nop
 810eb0a:	bf00      	nop
 810eb0c:	e7fd      	b.n	810eb0a <vPortValidateInterruptPriority+0x62>
	}
 810eb0e:	bf00      	nop
 810eb10:	3714      	adds	r7, #20
 810eb12:	46bd      	mov	sp, r7
 810eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb18:	4770      	bx	lr
 810eb1a:	bf00      	nop
 810eb1c:	e000e3f0 	.word	0xe000e3f0
 810eb20:	100047d8 	.word	0x100047d8
 810eb24:	e000ed0c 	.word	0xe000ed0c
 810eb28:	100047dc 	.word	0x100047dc

0810eb2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810eb2c:	b580      	push	{r7, lr}
 810eb2e:	b084      	sub	sp, #16
 810eb30:	af00      	add	r7, sp, #0
 810eb32:	6078      	str	r0, [r7, #4]
 810eb34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810eb36:	687b      	ldr	r3, [r7, #4]
 810eb38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810eb3a:	68fb      	ldr	r3, [r7, #12]
 810eb3c:	2b00      	cmp	r3, #0
 810eb3e:	d10b      	bne.n	810eb58 <xQueueGenericReset+0x2c>
	__asm volatile
 810eb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb44:	f383 8811 	msr	BASEPRI, r3
 810eb48:	f3bf 8f6f 	isb	sy
 810eb4c:	f3bf 8f4f 	dsb	sy
 810eb50:	60bb      	str	r3, [r7, #8]
}
 810eb52:	bf00      	nop
 810eb54:	bf00      	nop
 810eb56:	e7fd      	b.n	810eb54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810eb58:	f7ff fec6 	bl	810e8e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810eb5c:	68fb      	ldr	r3, [r7, #12]
 810eb5e:	681a      	ldr	r2, [r3, #0]
 810eb60:	68fb      	ldr	r3, [r7, #12]
 810eb62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810eb64:	68f9      	ldr	r1, [r7, #12]
 810eb66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810eb68:	fb01 f303 	mul.w	r3, r1, r3
 810eb6c:	441a      	add	r2, r3
 810eb6e:	68fb      	ldr	r3, [r7, #12]
 810eb70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810eb72:	68fb      	ldr	r3, [r7, #12]
 810eb74:	2200      	movs	r2, #0
 810eb76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810eb78:	68fb      	ldr	r3, [r7, #12]
 810eb7a:	681a      	ldr	r2, [r3, #0]
 810eb7c:	68fb      	ldr	r3, [r7, #12]
 810eb7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810eb80:	68fb      	ldr	r3, [r7, #12]
 810eb82:	681a      	ldr	r2, [r3, #0]
 810eb84:	68fb      	ldr	r3, [r7, #12]
 810eb86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810eb88:	3b01      	subs	r3, #1
 810eb8a:	68f9      	ldr	r1, [r7, #12]
 810eb8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810eb8e:	fb01 f303 	mul.w	r3, r1, r3
 810eb92:	441a      	add	r2, r3
 810eb94:	68fb      	ldr	r3, [r7, #12]
 810eb96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810eb98:	68fb      	ldr	r3, [r7, #12]
 810eb9a:	22ff      	movs	r2, #255	@ 0xff
 810eb9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810eba0:	68fb      	ldr	r3, [r7, #12]
 810eba2:	22ff      	movs	r2, #255	@ 0xff
 810eba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810eba8:	683b      	ldr	r3, [r7, #0]
 810ebaa:	2b00      	cmp	r3, #0
 810ebac:	d114      	bne.n	810ebd8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810ebae:	68fb      	ldr	r3, [r7, #12]
 810ebb0:	691b      	ldr	r3, [r3, #16]
 810ebb2:	2b00      	cmp	r3, #0
 810ebb4:	d01a      	beq.n	810ebec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ebb6:	68fb      	ldr	r3, [r7, #12]
 810ebb8:	3310      	adds	r3, #16
 810ebba:	4618      	mov	r0, r3
 810ebbc:	f001 f91a 	bl	810fdf4 <xTaskRemoveFromEventList>
 810ebc0:	4603      	mov	r3, r0
 810ebc2:	2b00      	cmp	r3, #0
 810ebc4:	d012      	beq.n	810ebec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810ebc6:	4b0d      	ldr	r3, [pc, #52]	@ (810ebfc <xQueueGenericReset+0xd0>)
 810ebc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ebcc:	601a      	str	r2, [r3, #0]
 810ebce:	f3bf 8f4f 	dsb	sy
 810ebd2:	f3bf 8f6f 	isb	sy
 810ebd6:	e009      	b.n	810ebec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810ebd8:	68fb      	ldr	r3, [r7, #12]
 810ebda:	3310      	adds	r3, #16
 810ebdc:	4618      	mov	r0, r3
 810ebde:	f7ff fc9b 	bl	810e518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810ebe2:	68fb      	ldr	r3, [r7, #12]
 810ebe4:	3324      	adds	r3, #36	@ 0x24
 810ebe6:	4618      	mov	r0, r3
 810ebe8:	f7ff fc96 	bl	810e518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810ebec:	f7ff feae 	bl	810e94c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810ebf0:	2301      	movs	r3, #1
}
 810ebf2:	4618      	mov	r0, r3
 810ebf4:	3710      	adds	r7, #16
 810ebf6:	46bd      	mov	sp, r7
 810ebf8:	bd80      	pop	{r7, pc}
 810ebfa:	bf00      	nop
 810ebfc:	e000ed04 	.word	0xe000ed04

0810ec00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810ec00:	b580      	push	{r7, lr}
 810ec02:	b08e      	sub	sp, #56	@ 0x38
 810ec04:	af02      	add	r7, sp, #8
 810ec06:	60f8      	str	r0, [r7, #12]
 810ec08:	60b9      	str	r1, [r7, #8]
 810ec0a:	607a      	str	r2, [r7, #4]
 810ec0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ec0e:	68fb      	ldr	r3, [r7, #12]
 810ec10:	2b00      	cmp	r3, #0
 810ec12:	d10b      	bne.n	810ec2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810ec14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec18:	f383 8811 	msr	BASEPRI, r3
 810ec1c:	f3bf 8f6f 	isb	sy
 810ec20:	f3bf 8f4f 	dsb	sy
 810ec24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810ec26:	bf00      	nop
 810ec28:	bf00      	nop
 810ec2a:	e7fd      	b.n	810ec28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810ec2c:	683b      	ldr	r3, [r7, #0]
 810ec2e:	2b00      	cmp	r3, #0
 810ec30:	d10b      	bne.n	810ec4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810ec32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec36:	f383 8811 	msr	BASEPRI, r3
 810ec3a:	f3bf 8f6f 	isb	sy
 810ec3e:	f3bf 8f4f 	dsb	sy
 810ec42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ec44:	bf00      	nop
 810ec46:	bf00      	nop
 810ec48:	e7fd      	b.n	810ec46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810ec4a:	687b      	ldr	r3, [r7, #4]
 810ec4c:	2b00      	cmp	r3, #0
 810ec4e:	d002      	beq.n	810ec56 <xQueueGenericCreateStatic+0x56>
 810ec50:	68bb      	ldr	r3, [r7, #8]
 810ec52:	2b00      	cmp	r3, #0
 810ec54:	d001      	beq.n	810ec5a <xQueueGenericCreateStatic+0x5a>
 810ec56:	2301      	movs	r3, #1
 810ec58:	e000      	b.n	810ec5c <xQueueGenericCreateStatic+0x5c>
 810ec5a:	2300      	movs	r3, #0
 810ec5c:	2b00      	cmp	r3, #0
 810ec5e:	d10b      	bne.n	810ec78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810ec60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec64:	f383 8811 	msr	BASEPRI, r3
 810ec68:	f3bf 8f6f 	isb	sy
 810ec6c:	f3bf 8f4f 	dsb	sy
 810ec70:	623b      	str	r3, [r7, #32]
}
 810ec72:	bf00      	nop
 810ec74:	bf00      	nop
 810ec76:	e7fd      	b.n	810ec74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810ec78:	687b      	ldr	r3, [r7, #4]
 810ec7a:	2b00      	cmp	r3, #0
 810ec7c:	d102      	bne.n	810ec84 <xQueueGenericCreateStatic+0x84>
 810ec7e:	68bb      	ldr	r3, [r7, #8]
 810ec80:	2b00      	cmp	r3, #0
 810ec82:	d101      	bne.n	810ec88 <xQueueGenericCreateStatic+0x88>
 810ec84:	2301      	movs	r3, #1
 810ec86:	e000      	b.n	810ec8a <xQueueGenericCreateStatic+0x8a>
 810ec88:	2300      	movs	r3, #0
 810ec8a:	2b00      	cmp	r3, #0
 810ec8c:	d10b      	bne.n	810eca6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810ec8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec92:	f383 8811 	msr	BASEPRI, r3
 810ec96:	f3bf 8f6f 	isb	sy
 810ec9a:	f3bf 8f4f 	dsb	sy
 810ec9e:	61fb      	str	r3, [r7, #28]
}
 810eca0:	bf00      	nop
 810eca2:	bf00      	nop
 810eca4:	e7fd      	b.n	810eca2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810eca6:	2350      	movs	r3, #80	@ 0x50
 810eca8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810ecaa:	697b      	ldr	r3, [r7, #20]
 810ecac:	2b50      	cmp	r3, #80	@ 0x50
 810ecae:	d00b      	beq.n	810ecc8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810ecb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ecb4:	f383 8811 	msr	BASEPRI, r3
 810ecb8:	f3bf 8f6f 	isb	sy
 810ecbc:	f3bf 8f4f 	dsb	sy
 810ecc0:	61bb      	str	r3, [r7, #24]
}
 810ecc2:	bf00      	nop
 810ecc4:	bf00      	nop
 810ecc6:	e7fd      	b.n	810ecc4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810ecc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810ecca:	683b      	ldr	r3, [r7, #0]
 810eccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810ecce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ecd0:	2b00      	cmp	r3, #0
 810ecd2:	d00d      	beq.n	810ecf0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810ecd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ecd6:	2201      	movs	r2, #1
 810ecd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810ecdc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810ece0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ece2:	9300      	str	r3, [sp, #0]
 810ece4:	4613      	mov	r3, r2
 810ece6:	687a      	ldr	r2, [r7, #4]
 810ece8:	68b9      	ldr	r1, [r7, #8]
 810ecea:	68f8      	ldr	r0, [r7, #12]
 810ecec:	f000 f805 	bl	810ecfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810ecf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810ecf2:	4618      	mov	r0, r3
 810ecf4:	3730      	adds	r7, #48	@ 0x30
 810ecf6:	46bd      	mov	sp, r7
 810ecf8:	bd80      	pop	{r7, pc}

0810ecfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810ecfa:	b580      	push	{r7, lr}
 810ecfc:	b084      	sub	sp, #16
 810ecfe:	af00      	add	r7, sp, #0
 810ed00:	60f8      	str	r0, [r7, #12]
 810ed02:	60b9      	str	r1, [r7, #8]
 810ed04:	607a      	str	r2, [r7, #4]
 810ed06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810ed08:	68bb      	ldr	r3, [r7, #8]
 810ed0a:	2b00      	cmp	r3, #0
 810ed0c:	d103      	bne.n	810ed16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810ed0e:	69bb      	ldr	r3, [r7, #24]
 810ed10:	69ba      	ldr	r2, [r7, #24]
 810ed12:	601a      	str	r2, [r3, #0]
 810ed14:	e002      	b.n	810ed1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810ed16:	69bb      	ldr	r3, [r7, #24]
 810ed18:	687a      	ldr	r2, [r7, #4]
 810ed1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810ed1c:	69bb      	ldr	r3, [r7, #24]
 810ed1e:	68fa      	ldr	r2, [r7, #12]
 810ed20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810ed22:	69bb      	ldr	r3, [r7, #24]
 810ed24:	68ba      	ldr	r2, [r7, #8]
 810ed26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810ed28:	2101      	movs	r1, #1
 810ed2a:	69b8      	ldr	r0, [r7, #24]
 810ed2c:	f7ff fefe 	bl	810eb2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810ed30:	69bb      	ldr	r3, [r7, #24]
 810ed32:	78fa      	ldrb	r2, [r7, #3]
 810ed34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810ed38:	bf00      	nop
 810ed3a:	3710      	adds	r7, #16
 810ed3c:	46bd      	mov	sp, r7
 810ed3e:	bd80      	pop	{r7, pc}

0810ed40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810ed40:	b580      	push	{r7, lr}
 810ed42:	b08e      	sub	sp, #56	@ 0x38
 810ed44:	af00      	add	r7, sp, #0
 810ed46:	60f8      	str	r0, [r7, #12]
 810ed48:	60b9      	str	r1, [r7, #8]
 810ed4a:	607a      	str	r2, [r7, #4]
 810ed4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810ed4e:	2300      	movs	r3, #0
 810ed50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810ed52:	68fb      	ldr	r3, [r7, #12]
 810ed54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810ed56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ed58:	2b00      	cmp	r3, #0
 810ed5a:	d10b      	bne.n	810ed74 <xQueueGenericSend+0x34>
	__asm volatile
 810ed5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed60:	f383 8811 	msr	BASEPRI, r3
 810ed64:	f3bf 8f6f 	isb	sy
 810ed68:	f3bf 8f4f 	dsb	sy
 810ed6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810ed6e:	bf00      	nop
 810ed70:	bf00      	nop
 810ed72:	e7fd      	b.n	810ed70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810ed74:	68bb      	ldr	r3, [r7, #8]
 810ed76:	2b00      	cmp	r3, #0
 810ed78:	d103      	bne.n	810ed82 <xQueueGenericSend+0x42>
 810ed7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ed7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ed7e:	2b00      	cmp	r3, #0
 810ed80:	d101      	bne.n	810ed86 <xQueueGenericSend+0x46>
 810ed82:	2301      	movs	r3, #1
 810ed84:	e000      	b.n	810ed88 <xQueueGenericSend+0x48>
 810ed86:	2300      	movs	r3, #0
 810ed88:	2b00      	cmp	r3, #0
 810ed8a:	d10b      	bne.n	810eda4 <xQueueGenericSend+0x64>
	__asm volatile
 810ed8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed90:	f383 8811 	msr	BASEPRI, r3
 810ed94:	f3bf 8f6f 	isb	sy
 810ed98:	f3bf 8f4f 	dsb	sy
 810ed9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ed9e:	bf00      	nop
 810eda0:	bf00      	nop
 810eda2:	e7fd      	b.n	810eda0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810eda4:	683b      	ldr	r3, [r7, #0]
 810eda6:	2b02      	cmp	r3, #2
 810eda8:	d103      	bne.n	810edb2 <xQueueGenericSend+0x72>
 810edaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810edac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810edae:	2b01      	cmp	r3, #1
 810edb0:	d101      	bne.n	810edb6 <xQueueGenericSend+0x76>
 810edb2:	2301      	movs	r3, #1
 810edb4:	e000      	b.n	810edb8 <xQueueGenericSend+0x78>
 810edb6:	2300      	movs	r3, #0
 810edb8:	2b00      	cmp	r3, #0
 810edba:	d10b      	bne.n	810edd4 <xQueueGenericSend+0x94>
	__asm volatile
 810edbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edc0:	f383 8811 	msr	BASEPRI, r3
 810edc4:	f3bf 8f6f 	isb	sy
 810edc8:	f3bf 8f4f 	dsb	sy
 810edcc:	623b      	str	r3, [r7, #32]
}
 810edce:	bf00      	nop
 810edd0:	bf00      	nop
 810edd2:	e7fd      	b.n	810edd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810edd4:	f001 f9ce 	bl	8110174 <xTaskGetSchedulerState>
 810edd8:	4603      	mov	r3, r0
 810edda:	2b00      	cmp	r3, #0
 810eddc:	d102      	bne.n	810ede4 <xQueueGenericSend+0xa4>
 810edde:	687b      	ldr	r3, [r7, #4]
 810ede0:	2b00      	cmp	r3, #0
 810ede2:	d101      	bne.n	810ede8 <xQueueGenericSend+0xa8>
 810ede4:	2301      	movs	r3, #1
 810ede6:	e000      	b.n	810edea <xQueueGenericSend+0xaa>
 810ede8:	2300      	movs	r3, #0
 810edea:	2b00      	cmp	r3, #0
 810edec:	d10b      	bne.n	810ee06 <xQueueGenericSend+0xc6>
	__asm volatile
 810edee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edf2:	f383 8811 	msr	BASEPRI, r3
 810edf6:	f3bf 8f6f 	isb	sy
 810edfa:	f3bf 8f4f 	dsb	sy
 810edfe:	61fb      	str	r3, [r7, #28]
}
 810ee00:	bf00      	nop
 810ee02:	bf00      	nop
 810ee04:	e7fd      	b.n	810ee02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810ee06:	f7ff fd6f 	bl	810e8e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810ee0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ee0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810ee0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ee10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ee12:	429a      	cmp	r2, r3
 810ee14:	d302      	bcc.n	810ee1c <xQueueGenericSend+0xdc>
 810ee16:	683b      	ldr	r3, [r7, #0]
 810ee18:	2b02      	cmp	r3, #2
 810ee1a:	d129      	bne.n	810ee70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810ee1c:	683a      	ldr	r2, [r7, #0]
 810ee1e:	68b9      	ldr	r1, [r7, #8]
 810ee20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ee22:	f000 fa0f 	bl	810f244 <prvCopyDataToQueue>
 810ee26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810ee28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ee2c:	2b00      	cmp	r3, #0
 810ee2e:	d010      	beq.n	810ee52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810ee30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ee32:	3324      	adds	r3, #36	@ 0x24
 810ee34:	4618      	mov	r0, r3
 810ee36:	f000 ffdd 	bl	810fdf4 <xTaskRemoveFromEventList>
 810ee3a:	4603      	mov	r3, r0
 810ee3c:	2b00      	cmp	r3, #0
 810ee3e:	d013      	beq.n	810ee68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810ee40:	4b3f      	ldr	r3, [pc, #252]	@ (810ef40 <xQueueGenericSend+0x200>)
 810ee42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ee46:	601a      	str	r2, [r3, #0]
 810ee48:	f3bf 8f4f 	dsb	sy
 810ee4c:	f3bf 8f6f 	isb	sy
 810ee50:	e00a      	b.n	810ee68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810ee52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee54:	2b00      	cmp	r3, #0
 810ee56:	d007      	beq.n	810ee68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810ee58:	4b39      	ldr	r3, [pc, #228]	@ (810ef40 <xQueueGenericSend+0x200>)
 810ee5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ee5e:	601a      	str	r2, [r3, #0]
 810ee60:	f3bf 8f4f 	dsb	sy
 810ee64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810ee68:	f7ff fd70 	bl	810e94c <vPortExitCritical>
				return pdPASS;
 810ee6c:	2301      	movs	r3, #1
 810ee6e:	e063      	b.n	810ef38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810ee70:	687b      	ldr	r3, [r7, #4]
 810ee72:	2b00      	cmp	r3, #0
 810ee74:	d103      	bne.n	810ee7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810ee76:	f7ff fd69 	bl	810e94c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810ee7a:	2300      	movs	r3, #0
 810ee7c:	e05c      	b.n	810ef38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810ee7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ee80:	2b00      	cmp	r3, #0
 810ee82:	d106      	bne.n	810ee92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810ee84:	f107 0314 	add.w	r3, r7, #20
 810ee88:	4618      	mov	r0, r3
 810ee8a:	f001 f817 	bl	810febc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810ee8e:	2301      	movs	r3, #1
 810ee90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810ee92:	f7ff fd5b 	bl	810e94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810ee96:	f000 fd87 	bl	810f9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810ee9a:	f7ff fd25 	bl	810e8e8 <vPortEnterCritical>
 810ee9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810eea4:	b25b      	sxtb	r3, r3
 810eea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810eeaa:	d103      	bne.n	810eeb4 <xQueueGenericSend+0x174>
 810eeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eeae:	2200      	movs	r2, #0
 810eeb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810eeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810eeba:	b25b      	sxtb	r3, r3
 810eebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810eec0:	d103      	bne.n	810eeca <xQueueGenericSend+0x18a>
 810eec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eec4:	2200      	movs	r2, #0
 810eec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810eeca:	f7ff fd3f 	bl	810e94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810eece:	1d3a      	adds	r2, r7, #4
 810eed0:	f107 0314 	add.w	r3, r7, #20
 810eed4:	4611      	mov	r1, r2
 810eed6:	4618      	mov	r0, r3
 810eed8:	f001 f806 	bl	810fee8 <xTaskCheckForTimeOut>
 810eedc:	4603      	mov	r3, r0
 810eede:	2b00      	cmp	r3, #0
 810eee0:	d124      	bne.n	810ef2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810eee2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810eee4:	f000 faa6 	bl	810f434 <prvIsQueueFull>
 810eee8:	4603      	mov	r3, r0
 810eeea:	2b00      	cmp	r3, #0
 810eeec:	d018      	beq.n	810ef20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810eeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eef0:	3310      	adds	r3, #16
 810eef2:	687a      	ldr	r2, [r7, #4]
 810eef4:	4611      	mov	r1, r2
 810eef6:	4618      	mov	r0, r3
 810eef8:	f000 ff2a 	bl	810fd50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810eefc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810eefe:	f000 fa31 	bl	810f364 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810ef02:	f000 fd5f 	bl	810f9c4 <xTaskResumeAll>
 810ef06:	4603      	mov	r3, r0
 810ef08:	2b00      	cmp	r3, #0
 810ef0a:	f47f af7c 	bne.w	810ee06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810ef0e:	4b0c      	ldr	r3, [pc, #48]	@ (810ef40 <xQueueGenericSend+0x200>)
 810ef10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ef14:	601a      	str	r2, [r3, #0]
 810ef16:	f3bf 8f4f 	dsb	sy
 810ef1a:	f3bf 8f6f 	isb	sy
 810ef1e:	e772      	b.n	810ee06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810ef20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ef22:	f000 fa1f 	bl	810f364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810ef26:	f000 fd4d 	bl	810f9c4 <xTaskResumeAll>
 810ef2a:	e76c      	b.n	810ee06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810ef2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ef2e:	f000 fa19 	bl	810f364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810ef32:	f000 fd47 	bl	810f9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810ef36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810ef38:	4618      	mov	r0, r3
 810ef3a:	3738      	adds	r7, #56	@ 0x38
 810ef3c:	46bd      	mov	sp, r7
 810ef3e:	bd80      	pop	{r7, pc}
 810ef40:	e000ed04 	.word	0xe000ed04

0810ef44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810ef44:	b580      	push	{r7, lr}
 810ef46:	b090      	sub	sp, #64	@ 0x40
 810ef48:	af00      	add	r7, sp, #0
 810ef4a:	60f8      	str	r0, [r7, #12]
 810ef4c:	60b9      	str	r1, [r7, #8]
 810ef4e:	607a      	str	r2, [r7, #4]
 810ef50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810ef52:	68fb      	ldr	r3, [r7, #12]
 810ef54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810ef56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef58:	2b00      	cmp	r3, #0
 810ef5a:	d10b      	bne.n	810ef74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810ef5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef60:	f383 8811 	msr	BASEPRI, r3
 810ef64:	f3bf 8f6f 	isb	sy
 810ef68:	f3bf 8f4f 	dsb	sy
 810ef6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810ef6e:	bf00      	nop
 810ef70:	bf00      	nop
 810ef72:	e7fd      	b.n	810ef70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810ef74:	68bb      	ldr	r3, [r7, #8]
 810ef76:	2b00      	cmp	r3, #0
 810ef78:	d103      	bne.n	810ef82 <xQueueGenericSendFromISR+0x3e>
 810ef7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ef7e:	2b00      	cmp	r3, #0
 810ef80:	d101      	bne.n	810ef86 <xQueueGenericSendFromISR+0x42>
 810ef82:	2301      	movs	r3, #1
 810ef84:	e000      	b.n	810ef88 <xQueueGenericSendFromISR+0x44>
 810ef86:	2300      	movs	r3, #0
 810ef88:	2b00      	cmp	r3, #0
 810ef8a:	d10b      	bne.n	810efa4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810ef8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef90:	f383 8811 	msr	BASEPRI, r3
 810ef94:	f3bf 8f6f 	isb	sy
 810ef98:	f3bf 8f4f 	dsb	sy
 810ef9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ef9e:	bf00      	nop
 810efa0:	bf00      	nop
 810efa2:	e7fd      	b.n	810efa0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810efa4:	683b      	ldr	r3, [r7, #0]
 810efa6:	2b02      	cmp	r3, #2
 810efa8:	d103      	bne.n	810efb2 <xQueueGenericSendFromISR+0x6e>
 810efaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810efac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810efae:	2b01      	cmp	r3, #1
 810efb0:	d101      	bne.n	810efb6 <xQueueGenericSendFromISR+0x72>
 810efb2:	2301      	movs	r3, #1
 810efb4:	e000      	b.n	810efb8 <xQueueGenericSendFromISR+0x74>
 810efb6:	2300      	movs	r3, #0
 810efb8:	2b00      	cmp	r3, #0
 810efba:	d10b      	bne.n	810efd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810efbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810efc0:	f383 8811 	msr	BASEPRI, r3
 810efc4:	f3bf 8f6f 	isb	sy
 810efc8:	f3bf 8f4f 	dsb	sy
 810efcc:	623b      	str	r3, [r7, #32]
}
 810efce:	bf00      	nop
 810efd0:	bf00      	nop
 810efd2:	e7fd      	b.n	810efd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810efd4:	f7ff fd68 	bl	810eaa8 <vPortValidateInterruptPriority>
	__asm volatile
 810efd8:	f3ef 8211 	mrs	r2, BASEPRI
 810efdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810efe0:	f383 8811 	msr	BASEPRI, r3
 810efe4:	f3bf 8f6f 	isb	sy
 810efe8:	f3bf 8f4f 	dsb	sy
 810efec:	61fa      	str	r2, [r7, #28]
 810efee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810eff0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810eff2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810eff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810eff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810eff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810effa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810effc:	429a      	cmp	r2, r3
 810effe:	d302      	bcc.n	810f006 <xQueueGenericSendFromISR+0xc2>
 810f000:	683b      	ldr	r3, [r7, #0]
 810f002:	2b02      	cmp	r3, #2
 810f004:	d12f      	bne.n	810f066 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810f006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f00c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f014:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810f016:	683a      	ldr	r2, [r7, #0]
 810f018:	68b9      	ldr	r1, [r7, #8]
 810f01a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810f01c:	f000 f912 	bl	810f244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810f020:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810f024:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f028:	d112      	bne.n	810f050 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f02e:	2b00      	cmp	r3, #0
 810f030:	d016      	beq.n	810f060 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f034:	3324      	adds	r3, #36	@ 0x24
 810f036:	4618      	mov	r0, r3
 810f038:	f000 fedc 	bl	810fdf4 <xTaskRemoveFromEventList>
 810f03c:	4603      	mov	r3, r0
 810f03e:	2b00      	cmp	r3, #0
 810f040:	d00e      	beq.n	810f060 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810f042:	687b      	ldr	r3, [r7, #4]
 810f044:	2b00      	cmp	r3, #0
 810f046:	d00b      	beq.n	810f060 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810f048:	687b      	ldr	r3, [r7, #4]
 810f04a:	2201      	movs	r2, #1
 810f04c:	601a      	str	r2, [r3, #0]
 810f04e:	e007      	b.n	810f060 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810f050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810f054:	3301      	adds	r3, #1
 810f056:	b2db      	uxtb	r3, r3
 810f058:	b25a      	sxtb	r2, r3
 810f05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f05c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810f060:	2301      	movs	r3, #1
 810f062:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810f064:	e001      	b.n	810f06a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810f066:	2300      	movs	r3, #0
 810f068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810f06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f06c:	617b      	str	r3, [r7, #20]
	__asm volatile
 810f06e:	697b      	ldr	r3, [r7, #20]
 810f070:	f383 8811 	msr	BASEPRI, r3
}
 810f074:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810f078:	4618      	mov	r0, r3
 810f07a:	3740      	adds	r7, #64	@ 0x40
 810f07c:	46bd      	mov	sp, r7
 810f07e:	bd80      	pop	{r7, pc}

0810f080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810f080:	b580      	push	{r7, lr}
 810f082:	b08c      	sub	sp, #48	@ 0x30
 810f084:	af00      	add	r7, sp, #0
 810f086:	60f8      	str	r0, [r7, #12]
 810f088:	60b9      	str	r1, [r7, #8]
 810f08a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810f08c:	2300      	movs	r3, #0
 810f08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810f090:	68fb      	ldr	r3, [r7, #12]
 810f092:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810f094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f096:	2b00      	cmp	r3, #0
 810f098:	d10b      	bne.n	810f0b2 <xQueueReceive+0x32>
	__asm volatile
 810f09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f09e:	f383 8811 	msr	BASEPRI, r3
 810f0a2:	f3bf 8f6f 	isb	sy
 810f0a6:	f3bf 8f4f 	dsb	sy
 810f0aa:	623b      	str	r3, [r7, #32]
}
 810f0ac:	bf00      	nop
 810f0ae:	bf00      	nop
 810f0b0:	e7fd      	b.n	810f0ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f0b2:	68bb      	ldr	r3, [r7, #8]
 810f0b4:	2b00      	cmp	r3, #0
 810f0b6:	d103      	bne.n	810f0c0 <xQueueReceive+0x40>
 810f0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f0bc:	2b00      	cmp	r3, #0
 810f0be:	d101      	bne.n	810f0c4 <xQueueReceive+0x44>
 810f0c0:	2301      	movs	r3, #1
 810f0c2:	e000      	b.n	810f0c6 <xQueueReceive+0x46>
 810f0c4:	2300      	movs	r3, #0
 810f0c6:	2b00      	cmp	r3, #0
 810f0c8:	d10b      	bne.n	810f0e2 <xQueueReceive+0x62>
	__asm volatile
 810f0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f0ce:	f383 8811 	msr	BASEPRI, r3
 810f0d2:	f3bf 8f6f 	isb	sy
 810f0d6:	f3bf 8f4f 	dsb	sy
 810f0da:	61fb      	str	r3, [r7, #28]
}
 810f0dc:	bf00      	nop
 810f0de:	bf00      	nop
 810f0e0:	e7fd      	b.n	810f0de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810f0e2:	f001 f847 	bl	8110174 <xTaskGetSchedulerState>
 810f0e6:	4603      	mov	r3, r0
 810f0e8:	2b00      	cmp	r3, #0
 810f0ea:	d102      	bne.n	810f0f2 <xQueueReceive+0x72>
 810f0ec:	687b      	ldr	r3, [r7, #4]
 810f0ee:	2b00      	cmp	r3, #0
 810f0f0:	d101      	bne.n	810f0f6 <xQueueReceive+0x76>
 810f0f2:	2301      	movs	r3, #1
 810f0f4:	e000      	b.n	810f0f8 <xQueueReceive+0x78>
 810f0f6:	2300      	movs	r3, #0
 810f0f8:	2b00      	cmp	r3, #0
 810f0fa:	d10b      	bne.n	810f114 <xQueueReceive+0x94>
	__asm volatile
 810f0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f100:	f383 8811 	msr	BASEPRI, r3
 810f104:	f3bf 8f6f 	isb	sy
 810f108:	f3bf 8f4f 	dsb	sy
 810f10c:	61bb      	str	r3, [r7, #24]
}
 810f10e:	bf00      	nop
 810f110:	bf00      	nop
 810f112:	e7fd      	b.n	810f110 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810f114:	f7ff fbe8 	bl	810e8e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f11c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f120:	2b00      	cmp	r3, #0
 810f122:	d01f      	beq.n	810f164 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810f124:	68b9      	ldr	r1, [r7, #8]
 810f126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f128:	f000 f8f6 	bl	810f318 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810f12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f12e:	1e5a      	subs	r2, r3, #1
 810f130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f132:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f136:	691b      	ldr	r3, [r3, #16]
 810f138:	2b00      	cmp	r3, #0
 810f13a:	d00f      	beq.n	810f15c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f13e:	3310      	adds	r3, #16
 810f140:	4618      	mov	r0, r3
 810f142:	f000 fe57 	bl	810fdf4 <xTaskRemoveFromEventList>
 810f146:	4603      	mov	r3, r0
 810f148:	2b00      	cmp	r3, #0
 810f14a:	d007      	beq.n	810f15c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810f14c:	4b3c      	ldr	r3, [pc, #240]	@ (810f240 <xQueueReceive+0x1c0>)
 810f14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f152:	601a      	str	r2, [r3, #0]
 810f154:	f3bf 8f4f 	dsb	sy
 810f158:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810f15c:	f7ff fbf6 	bl	810e94c <vPortExitCritical>
				return pdPASS;
 810f160:	2301      	movs	r3, #1
 810f162:	e069      	b.n	810f238 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810f164:	687b      	ldr	r3, [r7, #4]
 810f166:	2b00      	cmp	r3, #0
 810f168:	d103      	bne.n	810f172 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810f16a:	f7ff fbef 	bl	810e94c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810f16e:	2300      	movs	r3, #0
 810f170:	e062      	b.n	810f238 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810f172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f174:	2b00      	cmp	r3, #0
 810f176:	d106      	bne.n	810f186 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810f178:	f107 0310 	add.w	r3, r7, #16
 810f17c:	4618      	mov	r0, r3
 810f17e:	f000 fe9d 	bl	810febc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810f182:	2301      	movs	r3, #1
 810f184:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810f186:	f7ff fbe1 	bl	810e94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810f18a:	f000 fc0d 	bl	810f9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810f18e:	f7ff fbab 	bl	810e8e8 <vPortEnterCritical>
 810f192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f198:	b25b      	sxtb	r3, r3
 810f19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f19e:	d103      	bne.n	810f1a8 <xQueueReceive+0x128>
 810f1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1a2:	2200      	movs	r2, #0
 810f1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810f1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f1ae:	b25b      	sxtb	r3, r3
 810f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f1b4:	d103      	bne.n	810f1be <xQueueReceive+0x13e>
 810f1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1b8:	2200      	movs	r2, #0
 810f1ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810f1be:	f7ff fbc5 	bl	810e94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810f1c2:	1d3a      	adds	r2, r7, #4
 810f1c4:	f107 0310 	add.w	r3, r7, #16
 810f1c8:	4611      	mov	r1, r2
 810f1ca:	4618      	mov	r0, r3
 810f1cc:	f000 fe8c 	bl	810fee8 <xTaskCheckForTimeOut>
 810f1d0:	4603      	mov	r3, r0
 810f1d2:	2b00      	cmp	r3, #0
 810f1d4:	d123      	bne.n	810f21e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f1d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f1d8:	f000 f916 	bl	810f408 <prvIsQueueEmpty>
 810f1dc:	4603      	mov	r3, r0
 810f1de:	2b00      	cmp	r3, #0
 810f1e0:	d017      	beq.n	810f212 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810f1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1e4:	3324      	adds	r3, #36	@ 0x24
 810f1e6:	687a      	ldr	r2, [r7, #4]
 810f1e8:	4611      	mov	r1, r2
 810f1ea:	4618      	mov	r0, r3
 810f1ec:	f000 fdb0 	bl	810fd50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810f1f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f1f2:	f000 f8b7 	bl	810f364 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810f1f6:	f000 fbe5 	bl	810f9c4 <xTaskResumeAll>
 810f1fa:	4603      	mov	r3, r0
 810f1fc:	2b00      	cmp	r3, #0
 810f1fe:	d189      	bne.n	810f114 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810f200:	4b0f      	ldr	r3, [pc, #60]	@ (810f240 <xQueueReceive+0x1c0>)
 810f202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f206:	601a      	str	r2, [r3, #0]
 810f208:	f3bf 8f4f 	dsb	sy
 810f20c:	f3bf 8f6f 	isb	sy
 810f210:	e780      	b.n	810f114 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810f212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f214:	f000 f8a6 	bl	810f364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810f218:	f000 fbd4 	bl	810f9c4 <xTaskResumeAll>
 810f21c:	e77a      	b.n	810f114 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810f21e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f220:	f000 f8a0 	bl	810f364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810f224:	f000 fbce 	bl	810f9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f22a:	f000 f8ed 	bl	810f408 <prvIsQueueEmpty>
 810f22e:	4603      	mov	r3, r0
 810f230:	2b00      	cmp	r3, #0
 810f232:	f43f af6f 	beq.w	810f114 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810f236:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810f238:	4618      	mov	r0, r3
 810f23a:	3730      	adds	r7, #48	@ 0x30
 810f23c:	46bd      	mov	sp, r7
 810f23e:	bd80      	pop	{r7, pc}
 810f240:	e000ed04 	.word	0xe000ed04

0810f244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810f244:	b580      	push	{r7, lr}
 810f246:	b086      	sub	sp, #24
 810f248:	af00      	add	r7, sp, #0
 810f24a:	60f8      	str	r0, [r7, #12]
 810f24c:	60b9      	str	r1, [r7, #8]
 810f24e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810f250:	2300      	movs	r3, #0
 810f252:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f254:	68fb      	ldr	r3, [r7, #12]
 810f256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f258:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810f25a:	68fb      	ldr	r3, [r7, #12]
 810f25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f25e:	2b00      	cmp	r3, #0
 810f260:	d10d      	bne.n	810f27e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810f262:	68fb      	ldr	r3, [r7, #12]
 810f264:	681b      	ldr	r3, [r3, #0]
 810f266:	2b00      	cmp	r3, #0
 810f268:	d14d      	bne.n	810f306 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810f26a:	68fb      	ldr	r3, [r7, #12]
 810f26c:	689b      	ldr	r3, [r3, #8]
 810f26e:	4618      	mov	r0, r3
 810f270:	f000 ff9e 	bl	81101b0 <xTaskPriorityDisinherit>
 810f274:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810f276:	68fb      	ldr	r3, [r7, #12]
 810f278:	2200      	movs	r2, #0
 810f27a:	609a      	str	r2, [r3, #8]
 810f27c:	e043      	b.n	810f306 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810f27e:	687b      	ldr	r3, [r7, #4]
 810f280:	2b00      	cmp	r3, #0
 810f282:	d119      	bne.n	810f2b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810f284:	68fb      	ldr	r3, [r7, #12]
 810f286:	6858      	ldr	r0, [r3, #4]
 810f288:	68fb      	ldr	r3, [r7, #12]
 810f28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f28c:	461a      	mov	r2, r3
 810f28e:	68b9      	ldr	r1, [r7, #8]
 810f290:	f001 fe53 	bl	8110f3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810f294:	68fb      	ldr	r3, [r7, #12]
 810f296:	685a      	ldr	r2, [r3, #4]
 810f298:	68fb      	ldr	r3, [r7, #12]
 810f29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f29c:	441a      	add	r2, r3
 810f29e:	68fb      	ldr	r3, [r7, #12]
 810f2a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810f2a2:	68fb      	ldr	r3, [r7, #12]
 810f2a4:	685a      	ldr	r2, [r3, #4]
 810f2a6:	68fb      	ldr	r3, [r7, #12]
 810f2a8:	689b      	ldr	r3, [r3, #8]
 810f2aa:	429a      	cmp	r2, r3
 810f2ac:	d32b      	bcc.n	810f306 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810f2ae:	68fb      	ldr	r3, [r7, #12]
 810f2b0:	681a      	ldr	r2, [r3, #0]
 810f2b2:	68fb      	ldr	r3, [r7, #12]
 810f2b4:	605a      	str	r2, [r3, #4]
 810f2b6:	e026      	b.n	810f306 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810f2b8:	68fb      	ldr	r3, [r7, #12]
 810f2ba:	68d8      	ldr	r0, [r3, #12]
 810f2bc:	68fb      	ldr	r3, [r7, #12]
 810f2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f2c0:	461a      	mov	r2, r3
 810f2c2:	68b9      	ldr	r1, [r7, #8]
 810f2c4:	f001 fe39 	bl	8110f3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810f2c8:	68fb      	ldr	r3, [r7, #12]
 810f2ca:	68da      	ldr	r2, [r3, #12]
 810f2cc:	68fb      	ldr	r3, [r7, #12]
 810f2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f2d0:	425b      	negs	r3, r3
 810f2d2:	441a      	add	r2, r3
 810f2d4:	68fb      	ldr	r3, [r7, #12]
 810f2d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810f2d8:	68fb      	ldr	r3, [r7, #12]
 810f2da:	68da      	ldr	r2, [r3, #12]
 810f2dc:	68fb      	ldr	r3, [r7, #12]
 810f2de:	681b      	ldr	r3, [r3, #0]
 810f2e0:	429a      	cmp	r2, r3
 810f2e2:	d207      	bcs.n	810f2f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810f2e4:	68fb      	ldr	r3, [r7, #12]
 810f2e6:	689a      	ldr	r2, [r3, #8]
 810f2e8:	68fb      	ldr	r3, [r7, #12]
 810f2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f2ec:	425b      	negs	r3, r3
 810f2ee:	441a      	add	r2, r3
 810f2f0:	68fb      	ldr	r3, [r7, #12]
 810f2f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810f2f4:	687b      	ldr	r3, [r7, #4]
 810f2f6:	2b02      	cmp	r3, #2
 810f2f8:	d105      	bne.n	810f306 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f2fa:	693b      	ldr	r3, [r7, #16]
 810f2fc:	2b00      	cmp	r3, #0
 810f2fe:	d002      	beq.n	810f306 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810f300:	693b      	ldr	r3, [r7, #16]
 810f302:	3b01      	subs	r3, #1
 810f304:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810f306:	693b      	ldr	r3, [r7, #16]
 810f308:	1c5a      	adds	r2, r3, #1
 810f30a:	68fb      	ldr	r3, [r7, #12]
 810f30c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810f30e:	697b      	ldr	r3, [r7, #20]
}
 810f310:	4618      	mov	r0, r3
 810f312:	3718      	adds	r7, #24
 810f314:	46bd      	mov	sp, r7
 810f316:	bd80      	pop	{r7, pc}

0810f318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810f318:	b580      	push	{r7, lr}
 810f31a:	b082      	sub	sp, #8
 810f31c:	af00      	add	r7, sp, #0
 810f31e:	6078      	str	r0, [r7, #4]
 810f320:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810f322:	687b      	ldr	r3, [r7, #4]
 810f324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f326:	2b00      	cmp	r3, #0
 810f328:	d018      	beq.n	810f35c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810f32a:	687b      	ldr	r3, [r7, #4]
 810f32c:	68da      	ldr	r2, [r3, #12]
 810f32e:	687b      	ldr	r3, [r7, #4]
 810f330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f332:	441a      	add	r2, r3
 810f334:	687b      	ldr	r3, [r7, #4]
 810f336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810f338:	687b      	ldr	r3, [r7, #4]
 810f33a:	68da      	ldr	r2, [r3, #12]
 810f33c:	687b      	ldr	r3, [r7, #4]
 810f33e:	689b      	ldr	r3, [r3, #8]
 810f340:	429a      	cmp	r2, r3
 810f342:	d303      	bcc.n	810f34c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810f344:	687b      	ldr	r3, [r7, #4]
 810f346:	681a      	ldr	r2, [r3, #0]
 810f348:	687b      	ldr	r3, [r7, #4]
 810f34a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810f34c:	687b      	ldr	r3, [r7, #4]
 810f34e:	68d9      	ldr	r1, [r3, #12]
 810f350:	687b      	ldr	r3, [r7, #4]
 810f352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f354:	461a      	mov	r2, r3
 810f356:	6838      	ldr	r0, [r7, #0]
 810f358:	f001 fdef 	bl	8110f3a <memcpy>
	}
}
 810f35c:	bf00      	nop
 810f35e:	3708      	adds	r7, #8
 810f360:	46bd      	mov	sp, r7
 810f362:	bd80      	pop	{r7, pc}

0810f364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810f364:	b580      	push	{r7, lr}
 810f366:	b084      	sub	sp, #16
 810f368:	af00      	add	r7, sp, #0
 810f36a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810f36c:	f7ff fabc 	bl	810e8e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810f370:	687b      	ldr	r3, [r7, #4]
 810f372:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f376:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810f378:	e011      	b.n	810f39e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f37a:	687b      	ldr	r3, [r7, #4]
 810f37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f37e:	2b00      	cmp	r3, #0
 810f380:	d012      	beq.n	810f3a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f382:	687b      	ldr	r3, [r7, #4]
 810f384:	3324      	adds	r3, #36	@ 0x24
 810f386:	4618      	mov	r0, r3
 810f388:	f000 fd34 	bl	810fdf4 <xTaskRemoveFromEventList>
 810f38c:	4603      	mov	r3, r0
 810f38e:	2b00      	cmp	r3, #0
 810f390:	d001      	beq.n	810f396 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810f392:	f000 fe0d 	bl	810ffb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810f396:	7bfb      	ldrb	r3, [r7, #15]
 810f398:	3b01      	subs	r3, #1
 810f39a:	b2db      	uxtb	r3, r3
 810f39c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810f39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810f3a2:	2b00      	cmp	r3, #0
 810f3a4:	dce9      	bgt.n	810f37a <prvUnlockQueue+0x16>
 810f3a6:	e000      	b.n	810f3aa <prvUnlockQueue+0x46>
					break;
 810f3a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810f3aa:	687b      	ldr	r3, [r7, #4]
 810f3ac:	22ff      	movs	r2, #255	@ 0xff
 810f3ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810f3b2:	f7ff facb 	bl	810e94c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810f3b6:	f7ff fa97 	bl	810e8e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810f3ba:	687b      	ldr	r3, [r7, #4]
 810f3bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f3c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810f3c2:	e011      	b.n	810f3e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f3c4:	687b      	ldr	r3, [r7, #4]
 810f3c6:	691b      	ldr	r3, [r3, #16]
 810f3c8:	2b00      	cmp	r3, #0
 810f3ca:	d012      	beq.n	810f3f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f3cc:	687b      	ldr	r3, [r7, #4]
 810f3ce:	3310      	adds	r3, #16
 810f3d0:	4618      	mov	r0, r3
 810f3d2:	f000 fd0f 	bl	810fdf4 <xTaskRemoveFromEventList>
 810f3d6:	4603      	mov	r3, r0
 810f3d8:	2b00      	cmp	r3, #0
 810f3da:	d001      	beq.n	810f3e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810f3dc:	f000 fde8 	bl	810ffb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810f3e0:	7bbb      	ldrb	r3, [r7, #14]
 810f3e2:	3b01      	subs	r3, #1
 810f3e4:	b2db      	uxtb	r3, r3
 810f3e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810f3e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810f3ec:	2b00      	cmp	r3, #0
 810f3ee:	dce9      	bgt.n	810f3c4 <prvUnlockQueue+0x60>
 810f3f0:	e000      	b.n	810f3f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810f3f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810f3f4:	687b      	ldr	r3, [r7, #4]
 810f3f6:	22ff      	movs	r2, #255	@ 0xff
 810f3f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810f3fc:	f7ff faa6 	bl	810e94c <vPortExitCritical>
}
 810f400:	bf00      	nop
 810f402:	3710      	adds	r7, #16
 810f404:	46bd      	mov	sp, r7
 810f406:	bd80      	pop	{r7, pc}

0810f408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810f408:	b580      	push	{r7, lr}
 810f40a:	b084      	sub	sp, #16
 810f40c:	af00      	add	r7, sp, #0
 810f40e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810f410:	f7ff fa6a 	bl	810e8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810f414:	687b      	ldr	r3, [r7, #4]
 810f416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f418:	2b00      	cmp	r3, #0
 810f41a:	d102      	bne.n	810f422 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810f41c:	2301      	movs	r3, #1
 810f41e:	60fb      	str	r3, [r7, #12]
 810f420:	e001      	b.n	810f426 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810f422:	2300      	movs	r3, #0
 810f424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810f426:	f7ff fa91 	bl	810e94c <vPortExitCritical>

	return xReturn;
 810f42a:	68fb      	ldr	r3, [r7, #12]
}
 810f42c:	4618      	mov	r0, r3
 810f42e:	3710      	adds	r7, #16
 810f430:	46bd      	mov	sp, r7
 810f432:	bd80      	pop	{r7, pc}

0810f434 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810f434:	b580      	push	{r7, lr}
 810f436:	b084      	sub	sp, #16
 810f438:	af00      	add	r7, sp, #0
 810f43a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810f43c:	f7ff fa54 	bl	810e8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810f440:	687b      	ldr	r3, [r7, #4]
 810f442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810f444:	687b      	ldr	r3, [r7, #4]
 810f446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f448:	429a      	cmp	r2, r3
 810f44a:	d102      	bne.n	810f452 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810f44c:	2301      	movs	r3, #1
 810f44e:	60fb      	str	r3, [r7, #12]
 810f450:	e001      	b.n	810f456 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810f452:	2300      	movs	r3, #0
 810f454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810f456:	f7ff fa79 	bl	810e94c <vPortExitCritical>

	return xReturn;
 810f45a:	68fb      	ldr	r3, [r7, #12]
}
 810f45c:	4618      	mov	r0, r3
 810f45e:	3710      	adds	r7, #16
 810f460:	46bd      	mov	sp, r7
 810f462:	bd80      	pop	{r7, pc}

0810f464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810f464:	b480      	push	{r7}
 810f466:	b085      	sub	sp, #20
 810f468:	af00      	add	r7, sp, #0
 810f46a:	6078      	str	r0, [r7, #4]
 810f46c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810f46e:	2300      	movs	r3, #0
 810f470:	60fb      	str	r3, [r7, #12]
 810f472:	e014      	b.n	810f49e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810f474:	4a0f      	ldr	r2, [pc, #60]	@ (810f4b4 <vQueueAddToRegistry+0x50>)
 810f476:	68fb      	ldr	r3, [r7, #12]
 810f478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810f47c:	2b00      	cmp	r3, #0
 810f47e:	d10b      	bne.n	810f498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810f480:	490c      	ldr	r1, [pc, #48]	@ (810f4b4 <vQueueAddToRegistry+0x50>)
 810f482:	68fb      	ldr	r3, [r7, #12]
 810f484:	683a      	ldr	r2, [r7, #0]
 810f486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810f48a:	4a0a      	ldr	r2, [pc, #40]	@ (810f4b4 <vQueueAddToRegistry+0x50>)
 810f48c:	68fb      	ldr	r3, [r7, #12]
 810f48e:	00db      	lsls	r3, r3, #3
 810f490:	4413      	add	r3, r2
 810f492:	687a      	ldr	r2, [r7, #4]
 810f494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810f496:	e006      	b.n	810f4a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810f498:	68fb      	ldr	r3, [r7, #12]
 810f49a:	3301      	adds	r3, #1
 810f49c:	60fb      	str	r3, [r7, #12]
 810f49e:	68fb      	ldr	r3, [r7, #12]
 810f4a0:	2b07      	cmp	r3, #7
 810f4a2:	d9e7      	bls.n	810f474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810f4a4:	bf00      	nop
 810f4a6:	bf00      	nop
 810f4a8:	3714      	adds	r7, #20
 810f4aa:	46bd      	mov	sp, r7
 810f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f4b0:	4770      	bx	lr
 810f4b2:	bf00      	nop
 810f4b4:	100047e0 	.word	0x100047e0

0810f4b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810f4b8:	b580      	push	{r7, lr}
 810f4ba:	b086      	sub	sp, #24
 810f4bc:	af00      	add	r7, sp, #0
 810f4be:	60f8      	str	r0, [r7, #12]
 810f4c0:	60b9      	str	r1, [r7, #8]
 810f4c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810f4c4:	68fb      	ldr	r3, [r7, #12]
 810f4c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810f4c8:	f7ff fa0e 	bl	810e8e8 <vPortEnterCritical>
 810f4cc:	697b      	ldr	r3, [r7, #20]
 810f4ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f4d2:	b25b      	sxtb	r3, r3
 810f4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f4d8:	d103      	bne.n	810f4e2 <vQueueWaitForMessageRestricted+0x2a>
 810f4da:	697b      	ldr	r3, [r7, #20]
 810f4dc:	2200      	movs	r2, #0
 810f4de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810f4e2:	697b      	ldr	r3, [r7, #20]
 810f4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f4e8:	b25b      	sxtb	r3, r3
 810f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f4ee:	d103      	bne.n	810f4f8 <vQueueWaitForMessageRestricted+0x40>
 810f4f0:	697b      	ldr	r3, [r7, #20]
 810f4f2:	2200      	movs	r2, #0
 810f4f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810f4f8:	f7ff fa28 	bl	810e94c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810f4fc:	697b      	ldr	r3, [r7, #20]
 810f4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f500:	2b00      	cmp	r3, #0
 810f502:	d106      	bne.n	810f512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810f504:	697b      	ldr	r3, [r7, #20]
 810f506:	3324      	adds	r3, #36	@ 0x24
 810f508:	687a      	ldr	r2, [r7, #4]
 810f50a:	68b9      	ldr	r1, [r7, #8]
 810f50c:	4618      	mov	r0, r3
 810f50e:	f000 fc45 	bl	810fd9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810f512:	6978      	ldr	r0, [r7, #20]
 810f514:	f7ff ff26 	bl	810f364 <prvUnlockQueue>
	}
 810f518:	bf00      	nop
 810f51a:	3718      	adds	r7, #24
 810f51c:	46bd      	mov	sp, r7
 810f51e:	bd80      	pop	{r7, pc}

0810f520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810f520:	b580      	push	{r7, lr}
 810f522:	b08e      	sub	sp, #56	@ 0x38
 810f524:	af04      	add	r7, sp, #16
 810f526:	60f8      	str	r0, [r7, #12]
 810f528:	60b9      	str	r1, [r7, #8]
 810f52a:	607a      	str	r2, [r7, #4]
 810f52c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810f52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f530:	2b00      	cmp	r3, #0
 810f532:	d10b      	bne.n	810f54c <xTaskCreateStatic+0x2c>
	__asm volatile
 810f534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f538:	f383 8811 	msr	BASEPRI, r3
 810f53c:	f3bf 8f6f 	isb	sy
 810f540:	f3bf 8f4f 	dsb	sy
 810f544:	623b      	str	r3, [r7, #32]
}
 810f546:	bf00      	nop
 810f548:	bf00      	nop
 810f54a:	e7fd      	b.n	810f548 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810f54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f54e:	2b00      	cmp	r3, #0
 810f550:	d10b      	bne.n	810f56a <xTaskCreateStatic+0x4a>
	__asm volatile
 810f552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f556:	f383 8811 	msr	BASEPRI, r3
 810f55a:	f3bf 8f6f 	isb	sy
 810f55e:	f3bf 8f4f 	dsb	sy
 810f562:	61fb      	str	r3, [r7, #28]
}
 810f564:	bf00      	nop
 810f566:	bf00      	nop
 810f568:	e7fd      	b.n	810f566 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810f56a:	235c      	movs	r3, #92	@ 0x5c
 810f56c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810f56e:	693b      	ldr	r3, [r7, #16]
 810f570:	2b5c      	cmp	r3, #92	@ 0x5c
 810f572:	d00b      	beq.n	810f58c <xTaskCreateStatic+0x6c>
	__asm volatile
 810f574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f578:	f383 8811 	msr	BASEPRI, r3
 810f57c:	f3bf 8f6f 	isb	sy
 810f580:	f3bf 8f4f 	dsb	sy
 810f584:	61bb      	str	r3, [r7, #24]
}
 810f586:	bf00      	nop
 810f588:	bf00      	nop
 810f58a:	e7fd      	b.n	810f588 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810f58c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810f58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f590:	2b00      	cmp	r3, #0
 810f592:	d01e      	beq.n	810f5d2 <xTaskCreateStatic+0xb2>
 810f594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f596:	2b00      	cmp	r3, #0
 810f598:	d01b      	beq.n	810f5d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810f59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f59c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810f59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810f5a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810f5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f5a6:	2202      	movs	r2, #2
 810f5a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810f5ac:	2300      	movs	r3, #0
 810f5ae:	9303      	str	r3, [sp, #12]
 810f5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f5b2:	9302      	str	r3, [sp, #8]
 810f5b4:	f107 0314 	add.w	r3, r7, #20
 810f5b8:	9301      	str	r3, [sp, #4]
 810f5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f5bc:	9300      	str	r3, [sp, #0]
 810f5be:	683b      	ldr	r3, [r7, #0]
 810f5c0:	687a      	ldr	r2, [r7, #4]
 810f5c2:	68b9      	ldr	r1, [r7, #8]
 810f5c4:	68f8      	ldr	r0, [r7, #12]
 810f5c6:	f000 f850 	bl	810f66a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810f5ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810f5cc:	f000 f8de 	bl	810f78c <prvAddNewTaskToReadyList>
 810f5d0:	e001      	b.n	810f5d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810f5d2:	2300      	movs	r3, #0
 810f5d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810f5d6:	697b      	ldr	r3, [r7, #20]
	}
 810f5d8:	4618      	mov	r0, r3
 810f5da:	3728      	adds	r7, #40	@ 0x28
 810f5dc:	46bd      	mov	sp, r7
 810f5de:	bd80      	pop	{r7, pc}

0810f5e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810f5e0:	b580      	push	{r7, lr}
 810f5e2:	b08c      	sub	sp, #48	@ 0x30
 810f5e4:	af04      	add	r7, sp, #16
 810f5e6:	60f8      	str	r0, [r7, #12]
 810f5e8:	60b9      	str	r1, [r7, #8]
 810f5ea:	603b      	str	r3, [r7, #0]
 810f5ec:	4613      	mov	r3, r2
 810f5ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810f5f0:	88fb      	ldrh	r3, [r7, #6]
 810f5f2:	009b      	lsls	r3, r3, #2
 810f5f4:	4618      	mov	r0, r3
 810f5f6:	f7fe fda1 	bl	810e13c <pvPortMalloc>
 810f5fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810f5fc:	697b      	ldr	r3, [r7, #20]
 810f5fe:	2b00      	cmp	r3, #0
 810f600:	d00e      	beq.n	810f620 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810f602:	205c      	movs	r0, #92	@ 0x5c
 810f604:	f7fe fd9a 	bl	810e13c <pvPortMalloc>
 810f608:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810f60a:	69fb      	ldr	r3, [r7, #28]
 810f60c:	2b00      	cmp	r3, #0
 810f60e:	d003      	beq.n	810f618 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810f610:	69fb      	ldr	r3, [r7, #28]
 810f612:	697a      	ldr	r2, [r7, #20]
 810f614:	631a      	str	r2, [r3, #48]	@ 0x30
 810f616:	e005      	b.n	810f624 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810f618:	6978      	ldr	r0, [r7, #20]
 810f61a:	f7fe fe5d 	bl	810e2d8 <vPortFree>
 810f61e:	e001      	b.n	810f624 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810f620:	2300      	movs	r3, #0
 810f622:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810f624:	69fb      	ldr	r3, [r7, #28]
 810f626:	2b00      	cmp	r3, #0
 810f628:	d017      	beq.n	810f65a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810f62a:	69fb      	ldr	r3, [r7, #28]
 810f62c:	2200      	movs	r2, #0
 810f62e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810f632:	88fa      	ldrh	r2, [r7, #6]
 810f634:	2300      	movs	r3, #0
 810f636:	9303      	str	r3, [sp, #12]
 810f638:	69fb      	ldr	r3, [r7, #28]
 810f63a:	9302      	str	r3, [sp, #8]
 810f63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f63e:	9301      	str	r3, [sp, #4]
 810f640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f642:	9300      	str	r3, [sp, #0]
 810f644:	683b      	ldr	r3, [r7, #0]
 810f646:	68b9      	ldr	r1, [r7, #8]
 810f648:	68f8      	ldr	r0, [r7, #12]
 810f64a:	f000 f80e 	bl	810f66a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810f64e:	69f8      	ldr	r0, [r7, #28]
 810f650:	f000 f89c 	bl	810f78c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810f654:	2301      	movs	r3, #1
 810f656:	61bb      	str	r3, [r7, #24]
 810f658:	e002      	b.n	810f660 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810f65a:	f04f 33ff 	mov.w	r3, #4294967295
 810f65e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810f660:	69bb      	ldr	r3, [r7, #24]
	}
 810f662:	4618      	mov	r0, r3
 810f664:	3720      	adds	r7, #32
 810f666:	46bd      	mov	sp, r7
 810f668:	bd80      	pop	{r7, pc}

0810f66a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810f66a:	b580      	push	{r7, lr}
 810f66c:	b088      	sub	sp, #32
 810f66e:	af00      	add	r7, sp, #0
 810f670:	60f8      	str	r0, [r7, #12]
 810f672:	60b9      	str	r1, [r7, #8]
 810f674:	607a      	str	r2, [r7, #4]
 810f676:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810f678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f67a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810f67c:	687b      	ldr	r3, [r7, #4]
 810f67e:	009b      	lsls	r3, r3, #2
 810f680:	461a      	mov	r2, r3
 810f682:	21a5      	movs	r1, #165	@ 0xa5
 810f684:	f001 fbde 	bl	8110e44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810f688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f68a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810f68c:	687b      	ldr	r3, [r7, #4]
 810f68e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810f692:	3b01      	subs	r3, #1
 810f694:	009b      	lsls	r3, r3, #2
 810f696:	4413      	add	r3, r2
 810f698:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810f69a:	69bb      	ldr	r3, [r7, #24]
 810f69c:	f023 0307 	bic.w	r3, r3, #7
 810f6a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810f6a2:	69bb      	ldr	r3, [r7, #24]
 810f6a4:	f003 0307 	and.w	r3, r3, #7
 810f6a8:	2b00      	cmp	r3, #0
 810f6aa:	d00b      	beq.n	810f6c4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810f6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f6b0:	f383 8811 	msr	BASEPRI, r3
 810f6b4:	f3bf 8f6f 	isb	sy
 810f6b8:	f3bf 8f4f 	dsb	sy
 810f6bc:	617b      	str	r3, [r7, #20]
}
 810f6be:	bf00      	nop
 810f6c0:	bf00      	nop
 810f6c2:	e7fd      	b.n	810f6c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810f6c4:	68bb      	ldr	r3, [r7, #8]
 810f6c6:	2b00      	cmp	r3, #0
 810f6c8:	d01f      	beq.n	810f70a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810f6ca:	2300      	movs	r3, #0
 810f6cc:	61fb      	str	r3, [r7, #28]
 810f6ce:	e012      	b.n	810f6f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810f6d0:	68ba      	ldr	r2, [r7, #8]
 810f6d2:	69fb      	ldr	r3, [r7, #28]
 810f6d4:	4413      	add	r3, r2
 810f6d6:	7819      	ldrb	r1, [r3, #0]
 810f6d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f6da:	69fb      	ldr	r3, [r7, #28]
 810f6dc:	4413      	add	r3, r2
 810f6de:	3334      	adds	r3, #52	@ 0x34
 810f6e0:	460a      	mov	r2, r1
 810f6e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810f6e4:	68ba      	ldr	r2, [r7, #8]
 810f6e6:	69fb      	ldr	r3, [r7, #28]
 810f6e8:	4413      	add	r3, r2
 810f6ea:	781b      	ldrb	r3, [r3, #0]
 810f6ec:	2b00      	cmp	r3, #0
 810f6ee:	d006      	beq.n	810f6fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810f6f0:	69fb      	ldr	r3, [r7, #28]
 810f6f2:	3301      	adds	r3, #1
 810f6f4:	61fb      	str	r3, [r7, #28]
 810f6f6:	69fb      	ldr	r3, [r7, #28]
 810f6f8:	2b0f      	cmp	r3, #15
 810f6fa:	d9e9      	bls.n	810f6d0 <prvInitialiseNewTask+0x66>
 810f6fc:	e000      	b.n	810f700 <prvInitialiseNewTask+0x96>
			{
				break;
 810f6fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810f700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f702:	2200      	movs	r2, #0
 810f704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810f708:	e003      	b.n	810f712 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810f70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f70c:	2200      	movs	r2, #0
 810f70e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810f712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f714:	2b37      	cmp	r3, #55	@ 0x37
 810f716:	d901      	bls.n	810f71c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810f718:	2337      	movs	r3, #55	@ 0x37
 810f71a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810f71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f71e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f720:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810f722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f726:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810f728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f72a:	2200      	movs	r2, #0
 810f72c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810f72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f730:	3304      	adds	r3, #4
 810f732:	4618      	mov	r0, r3
 810f734:	f7fe ff10 	bl	810e558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810f738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f73a:	3318      	adds	r3, #24
 810f73c:	4618      	mov	r0, r3
 810f73e:	f7fe ff0b 	bl	810e558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810f742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f74a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810f74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810f752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f756:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810f758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f75a:	2200      	movs	r2, #0
 810f75c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810f75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f760:	2200      	movs	r2, #0
 810f762:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810f766:	683a      	ldr	r2, [r7, #0]
 810f768:	68f9      	ldr	r1, [r7, #12]
 810f76a:	69b8      	ldr	r0, [r7, #24]
 810f76c:	f7fe ff88 	bl	810e680 <pxPortInitialiseStack>
 810f770:	4602      	mov	r2, r0
 810f772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f774:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810f776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f778:	2b00      	cmp	r3, #0
 810f77a:	d002      	beq.n	810f782 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810f77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f77e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810f782:	bf00      	nop
 810f784:	3720      	adds	r7, #32
 810f786:	46bd      	mov	sp, r7
 810f788:	bd80      	pop	{r7, pc}
	...

0810f78c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810f78c:	b580      	push	{r7, lr}
 810f78e:	b082      	sub	sp, #8
 810f790:	af00      	add	r7, sp, #0
 810f792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810f794:	f7ff f8a8 	bl	810e8e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810f798:	4b2d      	ldr	r3, [pc, #180]	@ (810f850 <prvAddNewTaskToReadyList+0xc4>)
 810f79a:	681b      	ldr	r3, [r3, #0]
 810f79c:	3301      	adds	r3, #1
 810f79e:	4a2c      	ldr	r2, [pc, #176]	@ (810f850 <prvAddNewTaskToReadyList+0xc4>)
 810f7a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810f7a2:	4b2c      	ldr	r3, [pc, #176]	@ (810f854 <prvAddNewTaskToReadyList+0xc8>)
 810f7a4:	681b      	ldr	r3, [r3, #0]
 810f7a6:	2b00      	cmp	r3, #0
 810f7a8:	d109      	bne.n	810f7be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810f7aa:	4a2a      	ldr	r2, [pc, #168]	@ (810f854 <prvAddNewTaskToReadyList+0xc8>)
 810f7ac:	687b      	ldr	r3, [r7, #4]
 810f7ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810f7b0:	4b27      	ldr	r3, [pc, #156]	@ (810f850 <prvAddNewTaskToReadyList+0xc4>)
 810f7b2:	681b      	ldr	r3, [r3, #0]
 810f7b4:	2b01      	cmp	r3, #1
 810f7b6:	d110      	bne.n	810f7da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810f7b8:	f000 fc1e 	bl	810fff8 <prvInitialiseTaskLists>
 810f7bc:	e00d      	b.n	810f7da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810f7be:	4b26      	ldr	r3, [pc, #152]	@ (810f858 <prvAddNewTaskToReadyList+0xcc>)
 810f7c0:	681b      	ldr	r3, [r3, #0]
 810f7c2:	2b00      	cmp	r3, #0
 810f7c4:	d109      	bne.n	810f7da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810f7c6:	4b23      	ldr	r3, [pc, #140]	@ (810f854 <prvAddNewTaskToReadyList+0xc8>)
 810f7c8:	681b      	ldr	r3, [r3, #0]
 810f7ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f7cc:	687b      	ldr	r3, [r7, #4]
 810f7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f7d0:	429a      	cmp	r2, r3
 810f7d2:	d802      	bhi.n	810f7da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810f7d4:	4a1f      	ldr	r2, [pc, #124]	@ (810f854 <prvAddNewTaskToReadyList+0xc8>)
 810f7d6:	687b      	ldr	r3, [r7, #4]
 810f7d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810f7da:	4b20      	ldr	r3, [pc, #128]	@ (810f85c <prvAddNewTaskToReadyList+0xd0>)
 810f7dc:	681b      	ldr	r3, [r3, #0]
 810f7de:	3301      	adds	r3, #1
 810f7e0:	4a1e      	ldr	r2, [pc, #120]	@ (810f85c <prvAddNewTaskToReadyList+0xd0>)
 810f7e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810f7e4:	4b1d      	ldr	r3, [pc, #116]	@ (810f85c <prvAddNewTaskToReadyList+0xd0>)
 810f7e6:	681a      	ldr	r2, [r3, #0]
 810f7e8:	687b      	ldr	r3, [r7, #4]
 810f7ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810f7ec:	687b      	ldr	r3, [r7, #4]
 810f7ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f7f0:	4b1b      	ldr	r3, [pc, #108]	@ (810f860 <prvAddNewTaskToReadyList+0xd4>)
 810f7f2:	681b      	ldr	r3, [r3, #0]
 810f7f4:	429a      	cmp	r2, r3
 810f7f6:	d903      	bls.n	810f800 <prvAddNewTaskToReadyList+0x74>
 810f7f8:	687b      	ldr	r3, [r7, #4]
 810f7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f7fc:	4a18      	ldr	r2, [pc, #96]	@ (810f860 <prvAddNewTaskToReadyList+0xd4>)
 810f7fe:	6013      	str	r3, [r2, #0]
 810f800:	687b      	ldr	r3, [r7, #4]
 810f802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f804:	4613      	mov	r3, r2
 810f806:	009b      	lsls	r3, r3, #2
 810f808:	4413      	add	r3, r2
 810f80a:	009b      	lsls	r3, r3, #2
 810f80c:	4a15      	ldr	r2, [pc, #84]	@ (810f864 <prvAddNewTaskToReadyList+0xd8>)
 810f80e:	441a      	add	r2, r3
 810f810:	687b      	ldr	r3, [r7, #4]
 810f812:	3304      	adds	r3, #4
 810f814:	4619      	mov	r1, r3
 810f816:	4610      	mov	r0, r2
 810f818:	f7fe feab 	bl	810e572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810f81c:	f7ff f896 	bl	810e94c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810f820:	4b0d      	ldr	r3, [pc, #52]	@ (810f858 <prvAddNewTaskToReadyList+0xcc>)
 810f822:	681b      	ldr	r3, [r3, #0]
 810f824:	2b00      	cmp	r3, #0
 810f826:	d00e      	beq.n	810f846 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810f828:	4b0a      	ldr	r3, [pc, #40]	@ (810f854 <prvAddNewTaskToReadyList+0xc8>)
 810f82a:	681b      	ldr	r3, [r3, #0]
 810f82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f82e:	687b      	ldr	r3, [r7, #4]
 810f830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f832:	429a      	cmp	r2, r3
 810f834:	d207      	bcs.n	810f846 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810f836:	4b0c      	ldr	r3, [pc, #48]	@ (810f868 <prvAddNewTaskToReadyList+0xdc>)
 810f838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f83c:	601a      	str	r2, [r3, #0]
 810f83e:	f3bf 8f4f 	dsb	sy
 810f842:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810f846:	bf00      	nop
 810f848:	3708      	adds	r7, #8
 810f84a:	46bd      	mov	sp, r7
 810f84c:	bd80      	pop	{r7, pc}
 810f84e:	bf00      	nop
 810f850:	10004cf4 	.word	0x10004cf4
 810f854:	10004820 	.word	0x10004820
 810f858:	10004d00 	.word	0x10004d00
 810f85c:	10004d10 	.word	0x10004d10
 810f860:	10004cfc 	.word	0x10004cfc
 810f864:	10004824 	.word	0x10004824
 810f868:	e000ed04 	.word	0xe000ed04

0810f86c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810f86c:	b580      	push	{r7, lr}
 810f86e:	b084      	sub	sp, #16
 810f870:	af00      	add	r7, sp, #0
 810f872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810f874:	2300      	movs	r3, #0
 810f876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810f878:	687b      	ldr	r3, [r7, #4]
 810f87a:	2b00      	cmp	r3, #0
 810f87c:	d018      	beq.n	810f8b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810f87e:	4b14      	ldr	r3, [pc, #80]	@ (810f8d0 <vTaskDelay+0x64>)
 810f880:	681b      	ldr	r3, [r3, #0]
 810f882:	2b00      	cmp	r3, #0
 810f884:	d00b      	beq.n	810f89e <vTaskDelay+0x32>
	__asm volatile
 810f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f88a:	f383 8811 	msr	BASEPRI, r3
 810f88e:	f3bf 8f6f 	isb	sy
 810f892:	f3bf 8f4f 	dsb	sy
 810f896:	60bb      	str	r3, [r7, #8]
}
 810f898:	bf00      	nop
 810f89a:	bf00      	nop
 810f89c:	e7fd      	b.n	810f89a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810f89e:	f000 f883 	bl	810f9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810f8a2:	2100      	movs	r1, #0
 810f8a4:	6878      	ldr	r0, [r7, #4]
 810f8a6:	f000 fcf3 	bl	8110290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810f8aa:	f000 f88b 	bl	810f9c4 <xTaskResumeAll>
 810f8ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810f8b0:	68fb      	ldr	r3, [r7, #12]
 810f8b2:	2b00      	cmp	r3, #0
 810f8b4:	d107      	bne.n	810f8c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810f8b6:	4b07      	ldr	r3, [pc, #28]	@ (810f8d4 <vTaskDelay+0x68>)
 810f8b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f8bc:	601a      	str	r2, [r3, #0]
 810f8be:	f3bf 8f4f 	dsb	sy
 810f8c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810f8c6:	bf00      	nop
 810f8c8:	3710      	adds	r7, #16
 810f8ca:	46bd      	mov	sp, r7
 810f8cc:	bd80      	pop	{r7, pc}
 810f8ce:	bf00      	nop
 810f8d0:	10004d1c 	.word	0x10004d1c
 810f8d4:	e000ed04 	.word	0xe000ed04

0810f8d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810f8d8:	b580      	push	{r7, lr}
 810f8da:	b08a      	sub	sp, #40	@ 0x28
 810f8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810f8de:	2300      	movs	r3, #0
 810f8e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810f8e2:	2300      	movs	r3, #0
 810f8e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810f8e6:	463a      	mov	r2, r7
 810f8e8:	1d39      	adds	r1, r7, #4
 810f8ea:	f107 0308 	add.w	r3, r7, #8
 810f8ee:	4618      	mov	r0, r3
 810f8f0:	f7fe fbf0 	bl	810e0d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810f8f4:	6839      	ldr	r1, [r7, #0]
 810f8f6:	687b      	ldr	r3, [r7, #4]
 810f8f8:	68ba      	ldr	r2, [r7, #8]
 810f8fa:	9202      	str	r2, [sp, #8]
 810f8fc:	9301      	str	r3, [sp, #4]
 810f8fe:	2300      	movs	r3, #0
 810f900:	9300      	str	r3, [sp, #0]
 810f902:	2300      	movs	r3, #0
 810f904:	460a      	mov	r2, r1
 810f906:	4922      	ldr	r1, [pc, #136]	@ (810f990 <vTaskStartScheduler+0xb8>)
 810f908:	4822      	ldr	r0, [pc, #136]	@ (810f994 <vTaskStartScheduler+0xbc>)
 810f90a:	f7ff fe09 	bl	810f520 <xTaskCreateStatic>
 810f90e:	4603      	mov	r3, r0
 810f910:	4a21      	ldr	r2, [pc, #132]	@ (810f998 <vTaskStartScheduler+0xc0>)
 810f912:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810f914:	4b20      	ldr	r3, [pc, #128]	@ (810f998 <vTaskStartScheduler+0xc0>)
 810f916:	681b      	ldr	r3, [r3, #0]
 810f918:	2b00      	cmp	r3, #0
 810f91a:	d002      	beq.n	810f922 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810f91c:	2301      	movs	r3, #1
 810f91e:	617b      	str	r3, [r7, #20]
 810f920:	e001      	b.n	810f926 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810f922:	2300      	movs	r3, #0
 810f924:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810f926:	697b      	ldr	r3, [r7, #20]
 810f928:	2b01      	cmp	r3, #1
 810f92a:	d102      	bne.n	810f932 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810f92c:	f000 fd04 	bl	8110338 <xTimerCreateTimerTask>
 810f930:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810f932:	697b      	ldr	r3, [r7, #20]
 810f934:	2b01      	cmp	r3, #1
 810f936:	d116      	bne.n	810f966 <vTaskStartScheduler+0x8e>
	__asm volatile
 810f938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f93c:	f383 8811 	msr	BASEPRI, r3
 810f940:	f3bf 8f6f 	isb	sy
 810f944:	f3bf 8f4f 	dsb	sy
 810f948:	613b      	str	r3, [r7, #16]
}
 810f94a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810f94c:	4b13      	ldr	r3, [pc, #76]	@ (810f99c <vTaskStartScheduler+0xc4>)
 810f94e:	f04f 32ff 	mov.w	r2, #4294967295
 810f952:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810f954:	4b12      	ldr	r3, [pc, #72]	@ (810f9a0 <vTaskStartScheduler+0xc8>)
 810f956:	2201      	movs	r2, #1
 810f958:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810f95a:	4b12      	ldr	r3, [pc, #72]	@ (810f9a4 <vTaskStartScheduler+0xcc>)
 810f95c:	2200      	movs	r2, #0
 810f95e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810f960:	f7fe ff1e 	bl	810e7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810f964:	e00f      	b.n	810f986 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810f966:	697b      	ldr	r3, [r7, #20]
 810f968:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f96c:	d10b      	bne.n	810f986 <vTaskStartScheduler+0xae>
	__asm volatile
 810f96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f972:	f383 8811 	msr	BASEPRI, r3
 810f976:	f3bf 8f6f 	isb	sy
 810f97a:	f3bf 8f4f 	dsb	sy
 810f97e:	60fb      	str	r3, [r7, #12]
}
 810f980:	bf00      	nop
 810f982:	bf00      	nop
 810f984:	e7fd      	b.n	810f982 <vTaskStartScheduler+0xaa>
}
 810f986:	bf00      	nop
 810f988:	3718      	adds	r7, #24
 810f98a:	46bd      	mov	sp, r7
 810f98c:	bd80      	pop	{r7, pc}
 810f98e:	bf00      	nop
 810f990:	0811207c 	.word	0x0811207c
 810f994:	0810ffc9 	.word	0x0810ffc9
 810f998:	10004d18 	.word	0x10004d18
 810f99c:	10004d14 	.word	0x10004d14
 810f9a0:	10004d00 	.word	0x10004d00
 810f9a4:	10004cf8 	.word	0x10004cf8

0810f9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810f9a8:	b480      	push	{r7}
 810f9aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810f9ac:	4b04      	ldr	r3, [pc, #16]	@ (810f9c0 <vTaskSuspendAll+0x18>)
 810f9ae:	681b      	ldr	r3, [r3, #0]
 810f9b0:	3301      	adds	r3, #1
 810f9b2:	4a03      	ldr	r2, [pc, #12]	@ (810f9c0 <vTaskSuspendAll+0x18>)
 810f9b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810f9b6:	bf00      	nop
 810f9b8:	46bd      	mov	sp, r7
 810f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f9be:	4770      	bx	lr
 810f9c0:	10004d1c 	.word	0x10004d1c

0810f9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810f9c4:	b580      	push	{r7, lr}
 810f9c6:	b084      	sub	sp, #16
 810f9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810f9ca:	2300      	movs	r3, #0
 810f9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810f9ce:	2300      	movs	r3, #0
 810f9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810f9d2:	4b42      	ldr	r3, [pc, #264]	@ (810fadc <xTaskResumeAll+0x118>)
 810f9d4:	681b      	ldr	r3, [r3, #0]
 810f9d6:	2b00      	cmp	r3, #0
 810f9d8:	d10b      	bne.n	810f9f2 <xTaskResumeAll+0x2e>
	__asm volatile
 810f9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f9de:	f383 8811 	msr	BASEPRI, r3
 810f9e2:	f3bf 8f6f 	isb	sy
 810f9e6:	f3bf 8f4f 	dsb	sy
 810f9ea:	603b      	str	r3, [r7, #0]
}
 810f9ec:	bf00      	nop
 810f9ee:	bf00      	nop
 810f9f0:	e7fd      	b.n	810f9ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810f9f2:	f7fe ff79 	bl	810e8e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810f9f6:	4b39      	ldr	r3, [pc, #228]	@ (810fadc <xTaskResumeAll+0x118>)
 810f9f8:	681b      	ldr	r3, [r3, #0]
 810f9fa:	3b01      	subs	r3, #1
 810f9fc:	4a37      	ldr	r2, [pc, #220]	@ (810fadc <xTaskResumeAll+0x118>)
 810f9fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810fa00:	4b36      	ldr	r3, [pc, #216]	@ (810fadc <xTaskResumeAll+0x118>)
 810fa02:	681b      	ldr	r3, [r3, #0]
 810fa04:	2b00      	cmp	r3, #0
 810fa06:	d162      	bne.n	810face <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810fa08:	4b35      	ldr	r3, [pc, #212]	@ (810fae0 <xTaskResumeAll+0x11c>)
 810fa0a:	681b      	ldr	r3, [r3, #0]
 810fa0c:	2b00      	cmp	r3, #0
 810fa0e:	d05e      	beq.n	810face <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810fa10:	e02f      	b.n	810fa72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fa12:	4b34      	ldr	r3, [pc, #208]	@ (810fae4 <xTaskResumeAll+0x120>)
 810fa14:	68db      	ldr	r3, [r3, #12]
 810fa16:	68db      	ldr	r3, [r3, #12]
 810fa18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810fa1a:	68fb      	ldr	r3, [r7, #12]
 810fa1c:	3318      	adds	r3, #24
 810fa1e:	4618      	mov	r0, r3
 810fa20:	f7fe fe04 	bl	810e62c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810fa24:	68fb      	ldr	r3, [r7, #12]
 810fa26:	3304      	adds	r3, #4
 810fa28:	4618      	mov	r0, r3
 810fa2a:	f7fe fdff 	bl	810e62c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810fa2e:	68fb      	ldr	r3, [r7, #12]
 810fa30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fa32:	4b2d      	ldr	r3, [pc, #180]	@ (810fae8 <xTaskResumeAll+0x124>)
 810fa34:	681b      	ldr	r3, [r3, #0]
 810fa36:	429a      	cmp	r2, r3
 810fa38:	d903      	bls.n	810fa42 <xTaskResumeAll+0x7e>
 810fa3a:	68fb      	ldr	r3, [r7, #12]
 810fa3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fa3e:	4a2a      	ldr	r2, [pc, #168]	@ (810fae8 <xTaskResumeAll+0x124>)
 810fa40:	6013      	str	r3, [r2, #0]
 810fa42:	68fb      	ldr	r3, [r7, #12]
 810fa44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fa46:	4613      	mov	r3, r2
 810fa48:	009b      	lsls	r3, r3, #2
 810fa4a:	4413      	add	r3, r2
 810fa4c:	009b      	lsls	r3, r3, #2
 810fa4e:	4a27      	ldr	r2, [pc, #156]	@ (810faec <xTaskResumeAll+0x128>)
 810fa50:	441a      	add	r2, r3
 810fa52:	68fb      	ldr	r3, [r7, #12]
 810fa54:	3304      	adds	r3, #4
 810fa56:	4619      	mov	r1, r3
 810fa58:	4610      	mov	r0, r2
 810fa5a:	f7fe fd8a 	bl	810e572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810fa5e:	68fb      	ldr	r3, [r7, #12]
 810fa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fa62:	4b23      	ldr	r3, [pc, #140]	@ (810faf0 <xTaskResumeAll+0x12c>)
 810fa64:	681b      	ldr	r3, [r3, #0]
 810fa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fa68:	429a      	cmp	r2, r3
 810fa6a:	d302      	bcc.n	810fa72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810fa6c:	4b21      	ldr	r3, [pc, #132]	@ (810faf4 <xTaskResumeAll+0x130>)
 810fa6e:	2201      	movs	r2, #1
 810fa70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810fa72:	4b1c      	ldr	r3, [pc, #112]	@ (810fae4 <xTaskResumeAll+0x120>)
 810fa74:	681b      	ldr	r3, [r3, #0]
 810fa76:	2b00      	cmp	r3, #0
 810fa78:	d1cb      	bne.n	810fa12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810fa7a:	68fb      	ldr	r3, [r7, #12]
 810fa7c:	2b00      	cmp	r3, #0
 810fa7e:	d001      	beq.n	810fa84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810fa80:	f000 fb58 	bl	8110134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810fa84:	4b1c      	ldr	r3, [pc, #112]	@ (810faf8 <xTaskResumeAll+0x134>)
 810fa86:	681b      	ldr	r3, [r3, #0]
 810fa88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810fa8a:	687b      	ldr	r3, [r7, #4]
 810fa8c:	2b00      	cmp	r3, #0
 810fa8e:	d010      	beq.n	810fab2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810fa90:	f000 f846 	bl	810fb20 <xTaskIncrementTick>
 810fa94:	4603      	mov	r3, r0
 810fa96:	2b00      	cmp	r3, #0
 810fa98:	d002      	beq.n	810faa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810fa9a:	4b16      	ldr	r3, [pc, #88]	@ (810faf4 <xTaskResumeAll+0x130>)
 810fa9c:	2201      	movs	r2, #1
 810fa9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810faa0:	687b      	ldr	r3, [r7, #4]
 810faa2:	3b01      	subs	r3, #1
 810faa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810faa6:	687b      	ldr	r3, [r7, #4]
 810faa8:	2b00      	cmp	r3, #0
 810faaa:	d1f1      	bne.n	810fa90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810faac:	4b12      	ldr	r3, [pc, #72]	@ (810faf8 <xTaskResumeAll+0x134>)
 810faae:	2200      	movs	r2, #0
 810fab0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810fab2:	4b10      	ldr	r3, [pc, #64]	@ (810faf4 <xTaskResumeAll+0x130>)
 810fab4:	681b      	ldr	r3, [r3, #0]
 810fab6:	2b00      	cmp	r3, #0
 810fab8:	d009      	beq.n	810face <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810faba:	2301      	movs	r3, #1
 810fabc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810fabe:	4b0f      	ldr	r3, [pc, #60]	@ (810fafc <xTaskResumeAll+0x138>)
 810fac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810fac4:	601a      	str	r2, [r3, #0]
 810fac6:	f3bf 8f4f 	dsb	sy
 810faca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810face:	f7fe ff3d 	bl	810e94c <vPortExitCritical>

	return xAlreadyYielded;
 810fad2:	68bb      	ldr	r3, [r7, #8]
}
 810fad4:	4618      	mov	r0, r3
 810fad6:	3710      	adds	r7, #16
 810fad8:	46bd      	mov	sp, r7
 810fada:	bd80      	pop	{r7, pc}
 810fadc:	10004d1c 	.word	0x10004d1c
 810fae0:	10004cf4 	.word	0x10004cf4
 810fae4:	10004cb4 	.word	0x10004cb4
 810fae8:	10004cfc 	.word	0x10004cfc
 810faec:	10004824 	.word	0x10004824
 810faf0:	10004820 	.word	0x10004820
 810faf4:	10004d08 	.word	0x10004d08
 810faf8:	10004d04 	.word	0x10004d04
 810fafc:	e000ed04 	.word	0xe000ed04

0810fb00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810fb00:	b480      	push	{r7}
 810fb02:	b083      	sub	sp, #12
 810fb04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810fb06:	4b05      	ldr	r3, [pc, #20]	@ (810fb1c <xTaskGetTickCount+0x1c>)
 810fb08:	681b      	ldr	r3, [r3, #0]
 810fb0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810fb0c:	687b      	ldr	r3, [r7, #4]
}
 810fb0e:	4618      	mov	r0, r3
 810fb10:	370c      	adds	r7, #12
 810fb12:	46bd      	mov	sp, r7
 810fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fb18:	4770      	bx	lr
 810fb1a:	bf00      	nop
 810fb1c:	10004cf8 	.word	0x10004cf8

0810fb20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810fb20:	b580      	push	{r7, lr}
 810fb22:	b086      	sub	sp, #24
 810fb24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810fb26:	2300      	movs	r3, #0
 810fb28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810fb2a:	4b4f      	ldr	r3, [pc, #316]	@ (810fc68 <xTaskIncrementTick+0x148>)
 810fb2c:	681b      	ldr	r3, [r3, #0]
 810fb2e:	2b00      	cmp	r3, #0
 810fb30:	f040 8090 	bne.w	810fc54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810fb34:	4b4d      	ldr	r3, [pc, #308]	@ (810fc6c <xTaskIncrementTick+0x14c>)
 810fb36:	681b      	ldr	r3, [r3, #0]
 810fb38:	3301      	adds	r3, #1
 810fb3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810fb3c:	4a4b      	ldr	r2, [pc, #300]	@ (810fc6c <xTaskIncrementTick+0x14c>)
 810fb3e:	693b      	ldr	r3, [r7, #16]
 810fb40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810fb42:	693b      	ldr	r3, [r7, #16]
 810fb44:	2b00      	cmp	r3, #0
 810fb46:	d121      	bne.n	810fb8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810fb48:	4b49      	ldr	r3, [pc, #292]	@ (810fc70 <xTaskIncrementTick+0x150>)
 810fb4a:	681b      	ldr	r3, [r3, #0]
 810fb4c:	681b      	ldr	r3, [r3, #0]
 810fb4e:	2b00      	cmp	r3, #0
 810fb50:	d00b      	beq.n	810fb6a <xTaskIncrementTick+0x4a>
	__asm volatile
 810fb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fb56:	f383 8811 	msr	BASEPRI, r3
 810fb5a:	f3bf 8f6f 	isb	sy
 810fb5e:	f3bf 8f4f 	dsb	sy
 810fb62:	603b      	str	r3, [r7, #0]
}
 810fb64:	bf00      	nop
 810fb66:	bf00      	nop
 810fb68:	e7fd      	b.n	810fb66 <xTaskIncrementTick+0x46>
 810fb6a:	4b41      	ldr	r3, [pc, #260]	@ (810fc70 <xTaskIncrementTick+0x150>)
 810fb6c:	681b      	ldr	r3, [r3, #0]
 810fb6e:	60fb      	str	r3, [r7, #12]
 810fb70:	4b40      	ldr	r3, [pc, #256]	@ (810fc74 <xTaskIncrementTick+0x154>)
 810fb72:	681b      	ldr	r3, [r3, #0]
 810fb74:	4a3e      	ldr	r2, [pc, #248]	@ (810fc70 <xTaskIncrementTick+0x150>)
 810fb76:	6013      	str	r3, [r2, #0]
 810fb78:	4a3e      	ldr	r2, [pc, #248]	@ (810fc74 <xTaskIncrementTick+0x154>)
 810fb7a:	68fb      	ldr	r3, [r7, #12]
 810fb7c:	6013      	str	r3, [r2, #0]
 810fb7e:	4b3e      	ldr	r3, [pc, #248]	@ (810fc78 <xTaskIncrementTick+0x158>)
 810fb80:	681b      	ldr	r3, [r3, #0]
 810fb82:	3301      	adds	r3, #1
 810fb84:	4a3c      	ldr	r2, [pc, #240]	@ (810fc78 <xTaskIncrementTick+0x158>)
 810fb86:	6013      	str	r3, [r2, #0]
 810fb88:	f000 fad4 	bl	8110134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810fb8c:	4b3b      	ldr	r3, [pc, #236]	@ (810fc7c <xTaskIncrementTick+0x15c>)
 810fb8e:	681b      	ldr	r3, [r3, #0]
 810fb90:	693a      	ldr	r2, [r7, #16]
 810fb92:	429a      	cmp	r2, r3
 810fb94:	d349      	bcc.n	810fc2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810fb96:	4b36      	ldr	r3, [pc, #216]	@ (810fc70 <xTaskIncrementTick+0x150>)
 810fb98:	681b      	ldr	r3, [r3, #0]
 810fb9a:	681b      	ldr	r3, [r3, #0]
 810fb9c:	2b00      	cmp	r3, #0
 810fb9e:	d104      	bne.n	810fbaa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fba0:	4b36      	ldr	r3, [pc, #216]	@ (810fc7c <xTaskIncrementTick+0x15c>)
 810fba2:	f04f 32ff 	mov.w	r2, #4294967295
 810fba6:	601a      	str	r2, [r3, #0]
					break;
 810fba8:	e03f      	b.n	810fc2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fbaa:	4b31      	ldr	r3, [pc, #196]	@ (810fc70 <xTaskIncrementTick+0x150>)
 810fbac:	681b      	ldr	r3, [r3, #0]
 810fbae:	68db      	ldr	r3, [r3, #12]
 810fbb0:	68db      	ldr	r3, [r3, #12]
 810fbb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810fbb4:	68bb      	ldr	r3, [r7, #8]
 810fbb6:	685b      	ldr	r3, [r3, #4]
 810fbb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810fbba:	693a      	ldr	r2, [r7, #16]
 810fbbc:	687b      	ldr	r3, [r7, #4]
 810fbbe:	429a      	cmp	r2, r3
 810fbc0:	d203      	bcs.n	810fbca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810fbc2:	4a2e      	ldr	r2, [pc, #184]	@ (810fc7c <xTaskIncrementTick+0x15c>)
 810fbc4:	687b      	ldr	r3, [r7, #4]
 810fbc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810fbc8:	e02f      	b.n	810fc2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810fbca:	68bb      	ldr	r3, [r7, #8]
 810fbcc:	3304      	adds	r3, #4
 810fbce:	4618      	mov	r0, r3
 810fbd0:	f7fe fd2c 	bl	810e62c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810fbd4:	68bb      	ldr	r3, [r7, #8]
 810fbd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fbd8:	2b00      	cmp	r3, #0
 810fbda:	d004      	beq.n	810fbe6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810fbdc:	68bb      	ldr	r3, [r7, #8]
 810fbde:	3318      	adds	r3, #24
 810fbe0:	4618      	mov	r0, r3
 810fbe2:	f7fe fd23 	bl	810e62c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810fbe6:	68bb      	ldr	r3, [r7, #8]
 810fbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fbea:	4b25      	ldr	r3, [pc, #148]	@ (810fc80 <xTaskIncrementTick+0x160>)
 810fbec:	681b      	ldr	r3, [r3, #0]
 810fbee:	429a      	cmp	r2, r3
 810fbf0:	d903      	bls.n	810fbfa <xTaskIncrementTick+0xda>
 810fbf2:	68bb      	ldr	r3, [r7, #8]
 810fbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fbf6:	4a22      	ldr	r2, [pc, #136]	@ (810fc80 <xTaskIncrementTick+0x160>)
 810fbf8:	6013      	str	r3, [r2, #0]
 810fbfa:	68bb      	ldr	r3, [r7, #8]
 810fbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fbfe:	4613      	mov	r3, r2
 810fc00:	009b      	lsls	r3, r3, #2
 810fc02:	4413      	add	r3, r2
 810fc04:	009b      	lsls	r3, r3, #2
 810fc06:	4a1f      	ldr	r2, [pc, #124]	@ (810fc84 <xTaskIncrementTick+0x164>)
 810fc08:	441a      	add	r2, r3
 810fc0a:	68bb      	ldr	r3, [r7, #8]
 810fc0c:	3304      	adds	r3, #4
 810fc0e:	4619      	mov	r1, r3
 810fc10:	4610      	mov	r0, r2
 810fc12:	f7fe fcae 	bl	810e572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810fc16:	68bb      	ldr	r3, [r7, #8]
 810fc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fc1a:	4b1b      	ldr	r3, [pc, #108]	@ (810fc88 <xTaskIncrementTick+0x168>)
 810fc1c:	681b      	ldr	r3, [r3, #0]
 810fc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fc20:	429a      	cmp	r2, r3
 810fc22:	d3b8      	bcc.n	810fb96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810fc24:	2301      	movs	r3, #1
 810fc26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810fc28:	e7b5      	b.n	810fb96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810fc2a:	4b17      	ldr	r3, [pc, #92]	@ (810fc88 <xTaskIncrementTick+0x168>)
 810fc2c:	681b      	ldr	r3, [r3, #0]
 810fc2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fc30:	4914      	ldr	r1, [pc, #80]	@ (810fc84 <xTaskIncrementTick+0x164>)
 810fc32:	4613      	mov	r3, r2
 810fc34:	009b      	lsls	r3, r3, #2
 810fc36:	4413      	add	r3, r2
 810fc38:	009b      	lsls	r3, r3, #2
 810fc3a:	440b      	add	r3, r1
 810fc3c:	681b      	ldr	r3, [r3, #0]
 810fc3e:	2b01      	cmp	r3, #1
 810fc40:	d901      	bls.n	810fc46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810fc42:	2301      	movs	r3, #1
 810fc44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810fc46:	4b11      	ldr	r3, [pc, #68]	@ (810fc8c <xTaskIncrementTick+0x16c>)
 810fc48:	681b      	ldr	r3, [r3, #0]
 810fc4a:	2b00      	cmp	r3, #0
 810fc4c:	d007      	beq.n	810fc5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810fc4e:	2301      	movs	r3, #1
 810fc50:	617b      	str	r3, [r7, #20]
 810fc52:	e004      	b.n	810fc5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810fc54:	4b0e      	ldr	r3, [pc, #56]	@ (810fc90 <xTaskIncrementTick+0x170>)
 810fc56:	681b      	ldr	r3, [r3, #0]
 810fc58:	3301      	adds	r3, #1
 810fc5a:	4a0d      	ldr	r2, [pc, #52]	@ (810fc90 <xTaskIncrementTick+0x170>)
 810fc5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810fc5e:	697b      	ldr	r3, [r7, #20]
}
 810fc60:	4618      	mov	r0, r3
 810fc62:	3718      	adds	r7, #24
 810fc64:	46bd      	mov	sp, r7
 810fc66:	bd80      	pop	{r7, pc}
 810fc68:	10004d1c 	.word	0x10004d1c
 810fc6c:	10004cf8 	.word	0x10004cf8
 810fc70:	10004cac 	.word	0x10004cac
 810fc74:	10004cb0 	.word	0x10004cb0
 810fc78:	10004d0c 	.word	0x10004d0c
 810fc7c:	10004d14 	.word	0x10004d14
 810fc80:	10004cfc 	.word	0x10004cfc
 810fc84:	10004824 	.word	0x10004824
 810fc88:	10004820 	.word	0x10004820
 810fc8c:	10004d08 	.word	0x10004d08
 810fc90:	10004d04 	.word	0x10004d04

0810fc94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810fc94:	b480      	push	{r7}
 810fc96:	b085      	sub	sp, #20
 810fc98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810fc9a:	4b28      	ldr	r3, [pc, #160]	@ (810fd3c <vTaskSwitchContext+0xa8>)
 810fc9c:	681b      	ldr	r3, [r3, #0]
 810fc9e:	2b00      	cmp	r3, #0
 810fca0:	d003      	beq.n	810fcaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810fca2:	4b27      	ldr	r3, [pc, #156]	@ (810fd40 <vTaskSwitchContext+0xac>)
 810fca4:	2201      	movs	r2, #1
 810fca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810fca8:	e042      	b.n	810fd30 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 810fcaa:	4b25      	ldr	r3, [pc, #148]	@ (810fd40 <vTaskSwitchContext+0xac>)
 810fcac:	2200      	movs	r2, #0
 810fcae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fcb0:	4b24      	ldr	r3, [pc, #144]	@ (810fd44 <vTaskSwitchContext+0xb0>)
 810fcb2:	681b      	ldr	r3, [r3, #0]
 810fcb4:	60fb      	str	r3, [r7, #12]
 810fcb6:	e011      	b.n	810fcdc <vTaskSwitchContext+0x48>
 810fcb8:	68fb      	ldr	r3, [r7, #12]
 810fcba:	2b00      	cmp	r3, #0
 810fcbc:	d10b      	bne.n	810fcd6 <vTaskSwitchContext+0x42>
	__asm volatile
 810fcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fcc2:	f383 8811 	msr	BASEPRI, r3
 810fcc6:	f3bf 8f6f 	isb	sy
 810fcca:	f3bf 8f4f 	dsb	sy
 810fcce:	607b      	str	r3, [r7, #4]
}
 810fcd0:	bf00      	nop
 810fcd2:	bf00      	nop
 810fcd4:	e7fd      	b.n	810fcd2 <vTaskSwitchContext+0x3e>
 810fcd6:	68fb      	ldr	r3, [r7, #12]
 810fcd8:	3b01      	subs	r3, #1
 810fcda:	60fb      	str	r3, [r7, #12]
 810fcdc:	491a      	ldr	r1, [pc, #104]	@ (810fd48 <vTaskSwitchContext+0xb4>)
 810fcde:	68fa      	ldr	r2, [r7, #12]
 810fce0:	4613      	mov	r3, r2
 810fce2:	009b      	lsls	r3, r3, #2
 810fce4:	4413      	add	r3, r2
 810fce6:	009b      	lsls	r3, r3, #2
 810fce8:	440b      	add	r3, r1
 810fcea:	681b      	ldr	r3, [r3, #0]
 810fcec:	2b00      	cmp	r3, #0
 810fcee:	d0e3      	beq.n	810fcb8 <vTaskSwitchContext+0x24>
 810fcf0:	68fa      	ldr	r2, [r7, #12]
 810fcf2:	4613      	mov	r3, r2
 810fcf4:	009b      	lsls	r3, r3, #2
 810fcf6:	4413      	add	r3, r2
 810fcf8:	009b      	lsls	r3, r3, #2
 810fcfa:	4a13      	ldr	r2, [pc, #76]	@ (810fd48 <vTaskSwitchContext+0xb4>)
 810fcfc:	4413      	add	r3, r2
 810fcfe:	60bb      	str	r3, [r7, #8]
 810fd00:	68bb      	ldr	r3, [r7, #8]
 810fd02:	685b      	ldr	r3, [r3, #4]
 810fd04:	685a      	ldr	r2, [r3, #4]
 810fd06:	68bb      	ldr	r3, [r7, #8]
 810fd08:	605a      	str	r2, [r3, #4]
 810fd0a:	68bb      	ldr	r3, [r7, #8]
 810fd0c:	685a      	ldr	r2, [r3, #4]
 810fd0e:	68bb      	ldr	r3, [r7, #8]
 810fd10:	3308      	adds	r3, #8
 810fd12:	429a      	cmp	r2, r3
 810fd14:	d104      	bne.n	810fd20 <vTaskSwitchContext+0x8c>
 810fd16:	68bb      	ldr	r3, [r7, #8]
 810fd18:	685b      	ldr	r3, [r3, #4]
 810fd1a:	685a      	ldr	r2, [r3, #4]
 810fd1c:	68bb      	ldr	r3, [r7, #8]
 810fd1e:	605a      	str	r2, [r3, #4]
 810fd20:	68bb      	ldr	r3, [r7, #8]
 810fd22:	685b      	ldr	r3, [r3, #4]
 810fd24:	68db      	ldr	r3, [r3, #12]
 810fd26:	4a09      	ldr	r2, [pc, #36]	@ (810fd4c <vTaskSwitchContext+0xb8>)
 810fd28:	6013      	str	r3, [r2, #0]
 810fd2a:	4a06      	ldr	r2, [pc, #24]	@ (810fd44 <vTaskSwitchContext+0xb0>)
 810fd2c:	68fb      	ldr	r3, [r7, #12]
 810fd2e:	6013      	str	r3, [r2, #0]
}
 810fd30:	bf00      	nop
 810fd32:	3714      	adds	r7, #20
 810fd34:	46bd      	mov	sp, r7
 810fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fd3a:	4770      	bx	lr
 810fd3c:	10004d1c 	.word	0x10004d1c
 810fd40:	10004d08 	.word	0x10004d08
 810fd44:	10004cfc 	.word	0x10004cfc
 810fd48:	10004824 	.word	0x10004824
 810fd4c:	10004820 	.word	0x10004820

0810fd50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810fd50:	b580      	push	{r7, lr}
 810fd52:	b084      	sub	sp, #16
 810fd54:	af00      	add	r7, sp, #0
 810fd56:	6078      	str	r0, [r7, #4]
 810fd58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810fd5a:	687b      	ldr	r3, [r7, #4]
 810fd5c:	2b00      	cmp	r3, #0
 810fd5e:	d10b      	bne.n	810fd78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810fd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd64:	f383 8811 	msr	BASEPRI, r3
 810fd68:	f3bf 8f6f 	isb	sy
 810fd6c:	f3bf 8f4f 	dsb	sy
 810fd70:	60fb      	str	r3, [r7, #12]
}
 810fd72:	bf00      	nop
 810fd74:	bf00      	nop
 810fd76:	e7fd      	b.n	810fd74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810fd78:	4b07      	ldr	r3, [pc, #28]	@ (810fd98 <vTaskPlaceOnEventList+0x48>)
 810fd7a:	681b      	ldr	r3, [r3, #0]
 810fd7c:	3318      	adds	r3, #24
 810fd7e:	4619      	mov	r1, r3
 810fd80:	6878      	ldr	r0, [r7, #4]
 810fd82:	f7fe fc1a 	bl	810e5ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810fd86:	2101      	movs	r1, #1
 810fd88:	6838      	ldr	r0, [r7, #0]
 810fd8a:	f000 fa81 	bl	8110290 <prvAddCurrentTaskToDelayedList>
}
 810fd8e:	bf00      	nop
 810fd90:	3710      	adds	r7, #16
 810fd92:	46bd      	mov	sp, r7
 810fd94:	bd80      	pop	{r7, pc}
 810fd96:	bf00      	nop
 810fd98:	10004820 	.word	0x10004820

0810fd9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810fd9c:	b580      	push	{r7, lr}
 810fd9e:	b086      	sub	sp, #24
 810fda0:	af00      	add	r7, sp, #0
 810fda2:	60f8      	str	r0, [r7, #12]
 810fda4:	60b9      	str	r1, [r7, #8]
 810fda6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810fda8:	68fb      	ldr	r3, [r7, #12]
 810fdaa:	2b00      	cmp	r3, #0
 810fdac:	d10b      	bne.n	810fdc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810fdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fdb2:	f383 8811 	msr	BASEPRI, r3
 810fdb6:	f3bf 8f6f 	isb	sy
 810fdba:	f3bf 8f4f 	dsb	sy
 810fdbe:	617b      	str	r3, [r7, #20]
}
 810fdc0:	bf00      	nop
 810fdc2:	bf00      	nop
 810fdc4:	e7fd      	b.n	810fdc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810fdc6:	4b0a      	ldr	r3, [pc, #40]	@ (810fdf0 <vTaskPlaceOnEventListRestricted+0x54>)
 810fdc8:	681b      	ldr	r3, [r3, #0]
 810fdca:	3318      	adds	r3, #24
 810fdcc:	4619      	mov	r1, r3
 810fdce:	68f8      	ldr	r0, [r7, #12]
 810fdd0:	f7fe fbcf 	bl	810e572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810fdd4:	687b      	ldr	r3, [r7, #4]
 810fdd6:	2b00      	cmp	r3, #0
 810fdd8:	d002      	beq.n	810fde0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810fdda:	f04f 33ff 	mov.w	r3, #4294967295
 810fdde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810fde0:	6879      	ldr	r1, [r7, #4]
 810fde2:	68b8      	ldr	r0, [r7, #8]
 810fde4:	f000 fa54 	bl	8110290 <prvAddCurrentTaskToDelayedList>
	}
 810fde8:	bf00      	nop
 810fdea:	3718      	adds	r7, #24
 810fdec:	46bd      	mov	sp, r7
 810fdee:	bd80      	pop	{r7, pc}
 810fdf0:	10004820 	.word	0x10004820

0810fdf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810fdf4:	b580      	push	{r7, lr}
 810fdf6:	b086      	sub	sp, #24
 810fdf8:	af00      	add	r7, sp, #0
 810fdfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fdfc:	687b      	ldr	r3, [r7, #4]
 810fdfe:	68db      	ldr	r3, [r3, #12]
 810fe00:	68db      	ldr	r3, [r3, #12]
 810fe02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810fe04:	693b      	ldr	r3, [r7, #16]
 810fe06:	2b00      	cmp	r3, #0
 810fe08:	d10b      	bne.n	810fe22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810fe0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fe0e:	f383 8811 	msr	BASEPRI, r3
 810fe12:	f3bf 8f6f 	isb	sy
 810fe16:	f3bf 8f4f 	dsb	sy
 810fe1a:	60fb      	str	r3, [r7, #12]
}
 810fe1c:	bf00      	nop
 810fe1e:	bf00      	nop
 810fe20:	e7fd      	b.n	810fe1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810fe22:	693b      	ldr	r3, [r7, #16]
 810fe24:	3318      	adds	r3, #24
 810fe26:	4618      	mov	r0, r3
 810fe28:	f7fe fc00 	bl	810e62c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810fe2c:	4b1d      	ldr	r3, [pc, #116]	@ (810fea4 <xTaskRemoveFromEventList+0xb0>)
 810fe2e:	681b      	ldr	r3, [r3, #0]
 810fe30:	2b00      	cmp	r3, #0
 810fe32:	d11d      	bne.n	810fe70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810fe34:	693b      	ldr	r3, [r7, #16]
 810fe36:	3304      	adds	r3, #4
 810fe38:	4618      	mov	r0, r3
 810fe3a:	f7fe fbf7 	bl	810e62c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810fe3e:	693b      	ldr	r3, [r7, #16]
 810fe40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fe42:	4b19      	ldr	r3, [pc, #100]	@ (810fea8 <xTaskRemoveFromEventList+0xb4>)
 810fe44:	681b      	ldr	r3, [r3, #0]
 810fe46:	429a      	cmp	r2, r3
 810fe48:	d903      	bls.n	810fe52 <xTaskRemoveFromEventList+0x5e>
 810fe4a:	693b      	ldr	r3, [r7, #16]
 810fe4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fe4e:	4a16      	ldr	r2, [pc, #88]	@ (810fea8 <xTaskRemoveFromEventList+0xb4>)
 810fe50:	6013      	str	r3, [r2, #0]
 810fe52:	693b      	ldr	r3, [r7, #16]
 810fe54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fe56:	4613      	mov	r3, r2
 810fe58:	009b      	lsls	r3, r3, #2
 810fe5a:	4413      	add	r3, r2
 810fe5c:	009b      	lsls	r3, r3, #2
 810fe5e:	4a13      	ldr	r2, [pc, #76]	@ (810feac <xTaskRemoveFromEventList+0xb8>)
 810fe60:	441a      	add	r2, r3
 810fe62:	693b      	ldr	r3, [r7, #16]
 810fe64:	3304      	adds	r3, #4
 810fe66:	4619      	mov	r1, r3
 810fe68:	4610      	mov	r0, r2
 810fe6a:	f7fe fb82 	bl	810e572 <vListInsertEnd>
 810fe6e:	e005      	b.n	810fe7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810fe70:	693b      	ldr	r3, [r7, #16]
 810fe72:	3318      	adds	r3, #24
 810fe74:	4619      	mov	r1, r3
 810fe76:	480e      	ldr	r0, [pc, #56]	@ (810feb0 <xTaskRemoveFromEventList+0xbc>)
 810fe78:	f7fe fb7b 	bl	810e572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810fe7c:	693b      	ldr	r3, [r7, #16]
 810fe7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fe80:	4b0c      	ldr	r3, [pc, #48]	@ (810feb4 <xTaskRemoveFromEventList+0xc0>)
 810fe82:	681b      	ldr	r3, [r3, #0]
 810fe84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fe86:	429a      	cmp	r2, r3
 810fe88:	d905      	bls.n	810fe96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810fe8a:	2301      	movs	r3, #1
 810fe8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810fe8e:	4b0a      	ldr	r3, [pc, #40]	@ (810feb8 <xTaskRemoveFromEventList+0xc4>)
 810fe90:	2201      	movs	r2, #1
 810fe92:	601a      	str	r2, [r3, #0]
 810fe94:	e001      	b.n	810fe9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810fe96:	2300      	movs	r3, #0
 810fe98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810fe9a:	697b      	ldr	r3, [r7, #20]
}
 810fe9c:	4618      	mov	r0, r3
 810fe9e:	3718      	adds	r7, #24
 810fea0:	46bd      	mov	sp, r7
 810fea2:	bd80      	pop	{r7, pc}
 810fea4:	10004d1c 	.word	0x10004d1c
 810fea8:	10004cfc 	.word	0x10004cfc
 810feac:	10004824 	.word	0x10004824
 810feb0:	10004cb4 	.word	0x10004cb4
 810feb4:	10004820 	.word	0x10004820
 810feb8:	10004d08 	.word	0x10004d08

0810febc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810febc:	b480      	push	{r7}
 810febe:	b083      	sub	sp, #12
 810fec0:	af00      	add	r7, sp, #0
 810fec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810fec4:	4b06      	ldr	r3, [pc, #24]	@ (810fee0 <vTaskInternalSetTimeOutState+0x24>)
 810fec6:	681a      	ldr	r2, [r3, #0]
 810fec8:	687b      	ldr	r3, [r7, #4]
 810feca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810fecc:	4b05      	ldr	r3, [pc, #20]	@ (810fee4 <vTaskInternalSetTimeOutState+0x28>)
 810fece:	681a      	ldr	r2, [r3, #0]
 810fed0:	687b      	ldr	r3, [r7, #4]
 810fed2:	605a      	str	r2, [r3, #4]
}
 810fed4:	bf00      	nop
 810fed6:	370c      	adds	r7, #12
 810fed8:	46bd      	mov	sp, r7
 810feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fede:	4770      	bx	lr
 810fee0:	10004d0c 	.word	0x10004d0c
 810fee4:	10004cf8 	.word	0x10004cf8

0810fee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810fee8:	b580      	push	{r7, lr}
 810feea:	b088      	sub	sp, #32
 810feec:	af00      	add	r7, sp, #0
 810feee:	6078      	str	r0, [r7, #4]
 810fef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810fef2:	687b      	ldr	r3, [r7, #4]
 810fef4:	2b00      	cmp	r3, #0
 810fef6:	d10b      	bne.n	810ff10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810fef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fefc:	f383 8811 	msr	BASEPRI, r3
 810ff00:	f3bf 8f6f 	isb	sy
 810ff04:	f3bf 8f4f 	dsb	sy
 810ff08:	613b      	str	r3, [r7, #16]
}
 810ff0a:	bf00      	nop
 810ff0c:	bf00      	nop
 810ff0e:	e7fd      	b.n	810ff0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810ff10:	683b      	ldr	r3, [r7, #0]
 810ff12:	2b00      	cmp	r3, #0
 810ff14:	d10b      	bne.n	810ff2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810ff16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ff1a:	f383 8811 	msr	BASEPRI, r3
 810ff1e:	f3bf 8f6f 	isb	sy
 810ff22:	f3bf 8f4f 	dsb	sy
 810ff26:	60fb      	str	r3, [r7, #12]
}
 810ff28:	bf00      	nop
 810ff2a:	bf00      	nop
 810ff2c:	e7fd      	b.n	810ff2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810ff2e:	f7fe fcdb 	bl	810e8e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810ff32:	4b1d      	ldr	r3, [pc, #116]	@ (810ffa8 <xTaskCheckForTimeOut+0xc0>)
 810ff34:	681b      	ldr	r3, [r3, #0]
 810ff36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810ff38:	687b      	ldr	r3, [r7, #4]
 810ff3a:	685b      	ldr	r3, [r3, #4]
 810ff3c:	69ba      	ldr	r2, [r7, #24]
 810ff3e:	1ad3      	subs	r3, r2, r3
 810ff40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810ff42:	683b      	ldr	r3, [r7, #0]
 810ff44:	681b      	ldr	r3, [r3, #0]
 810ff46:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ff4a:	d102      	bne.n	810ff52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810ff4c:	2300      	movs	r3, #0
 810ff4e:	61fb      	str	r3, [r7, #28]
 810ff50:	e023      	b.n	810ff9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810ff52:	687b      	ldr	r3, [r7, #4]
 810ff54:	681a      	ldr	r2, [r3, #0]
 810ff56:	4b15      	ldr	r3, [pc, #84]	@ (810ffac <xTaskCheckForTimeOut+0xc4>)
 810ff58:	681b      	ldr	r3, [r3, #0]
 810ff5a:	429a      	cmp	r2, r3
 810ff5c:	d007      	beq.n	810ff6e <xTaskCheckForTimeOut+0x86>
 810ff5e:	687b      	ldr	r3, [r7, #4]
 810ff60:	685b      	ldr	r3, [r3, #4]
 810ff62:	69ba      	ldr	r2, [r7, #24]
 810ff64:	429a      	cmp	r2, r3
 810ff66:	d302      	bcc.n	810ff6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810ff68:	2301      	movs	r3, #1
 810ff6a:	61fb      	str	r3, [r7, #28]
 810ff6c:	e015      	b.n	810ff9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810ff6e:	683b      	ldr	r3, [r7, #0]
 810ff70:	681b      	ldr	r3, [r3, #0]
 810ff72:	697a      	ldr	r2, [r7, #20]
 810ff74:	429a      	cmp	r2, r3
 810ff76:	d20b      	bcs.n	810ff90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810ff78:	683b      	ldr	r3, [r7, #0]
 810ff7a:	681a      	ldr	r2, [r3, #0]
 810ff7c:	697b      	ldr	r3, [r7, #20]
 810ff7e:	1ad2      	subs	r2, r2, r3
 810ff80:	683b      	ldr	r3, [r7, #0]
 810ff82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810ff84:	6878      	ldr	r0, [r7, #4]
 810ff86:	f7ff ff99 	bl	810febc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810ff8a:	2300      	movs	r3, #0
 810ff8c:	61fb      	str	r3, [r7, #28]
 810ff8e:	e004      	b.n	810ff9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810ff90:	683b      	ldr	r3, [r7, #0]
 810ff92:	2200      	movs	r2, #0
 810ff94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810ff96:	2301      	movs	r3, #1
 810ff98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810ff9a:	f7fe fcd7 	bl	810e94c <vPortExitCritical>

	return xReturn;
 810ff9e:	69fb      	ldr	r3, [r7, #28]
}
 810ffa0:	4618      	mov	r0, r3
 810ffa2:	3720      	adds	r7, #32
 810ffa4:	46bd      	mov	sp, r7
 810ffa6:	bd80      	pop	{r7, pc}
 810ffa8:	10004cf8 	.word	0x10004cf8
 810ffac:	10004d0c 	.word	0x10004d0c

0810ffb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810ffb0:	b480      	push	{r7}
 810ffb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810ffb4:	4b03      	ldr	r3, [pc, #12]	@ (810ffc4 <vTaskMissedYield+0x14>)
 810ffb6:	2201      	movs	r2, #1
 810ffb8:	601a      	str	r2, [r3, #0]
}
 810ffba:	bf00      	nop
 810ffbc:	46bd      	mov	sp, r7
 810ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ffc2:	4770      	bx	lr
 810ffc4:	10004d08 	.word	0x10004d08

0810ffc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810ffc8:	b580      	push	{r7, lr}
 810ffca:	b082      	sub	sp, #8
 810ffcc:	af00      	add	r7, sp, #0
 810ffce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810ffd0:	f000 f852 	bl	8110078 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810ffd4:	4b06      	ldr	r3, [pc, #24]	@ (810fff0 <prvIdleTask+0x28>)
 810ffd6:	681b      	ldr	r3, [r3, #0]
 810ffd8:	2b01      	cmp	r3, #1
 810ffda:	d9f9      	bls.n	810ffd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 810ffdc:	4b05      	ldr	r3, [pc, #20]	@ (810fff4 <prvIdleTask+0x2c>)
 810ffde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ffe2:	601a      	str	r2, [r3, #0]
 810ffe4:	f3bf 8f4f 	dsb	sy
 810ffe8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810ffec:	e7f0      	b.n	810ffd0 <prvIdleTask+0x8>
 810ffee:	bf00      	nop
 810fff0:	10004824 	.word	0x10004824
 810fff4:	e000ed04 	.word	0xe000ed04

0810fff8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810fff8:	b580      	push	{r7, lr}
 810fffa:	b082      	sub	sp, #8
 810fffc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810fffe:	2300      	movs	r3, #0
 8110000:	607b      	str	r3, [r7, #4]
 8110002:	e00c      	b.n	811001e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8110004:	687a      	ldr	r2, [r7, #4]
 8110006:	4613      	mov	r3, r2
 8110008:	009b      	lsls	r3, r3, #2
 811000a:	4413      	add	r3, r2
 811000c:	009b      	lsls	r3, r3, #2
 811000e:	4a12      	ldr	r2, [pc, #72]	@ (8110058 <prvInitialiseTaskLists+0x60>)
 8110010:	4413      	add	r3, r2
 8110012:	4618      	mov	r0, r3
 8110014:	f7fe fa80 	bl	810e518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8110018:	687b      	ldr	r3, [r7, #4]
 811001a:	3301      	adds	r3, #1
 811001c:	607b      	str	r3, [r7, #4]
 811001e:	687b      	ldr	r3, [r7, #4]
 8110020:	2b37      	cmp	r3, #55	@ 0x37
 8110022:	d9ef      	bls.n	8110004 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8110024:	480d      	ldr	r0, [pc, #52]	@ (811005c <prvInitialiseTaskLists+0x64>)
 8110026:	f7fe fa77 	bl	810e518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 811002a:	480d      	ldr	r0, [pc, #52]	@ (8110060 <prvInitialiseTaskLists+0x68>)
 811002c:	f7fe fa74 	bl	810e518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8110030:	480c      	ldr	r0, [pc, #48]	@ (8110064 <prvInitialiseTaskLists+0x6c>)
 8110032:	f7fe fa71 	bl	810e518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8110036:	480c      	ldr	r0, [pc, #48]	@ (8110068 <prvInitialiseTaskLists+0x70>)
 8110038:	f7fe fa6e 	bl	810e518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 811003c:	480b      	ldr	r0, [pc, #44]	@ (811006c <prvInitialiseTaskLists+0x74>)
 811003e:	f7fe fa6b 	bl	810e518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8110042:	4b0b      	ldr	r3, [pc, #44]	@ (8110070 <prvInitialiseTaskLists+0x78>)
 8110044:	4a05      	ldr	r2, [pc, #20]	@ (811005c <prvInitialiseTaskLists+0x64>)
 8110046:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8110048:	4b0a      	ldr	r3, [pc, #40]	@ (8110074 <prvInitialiseTaskLists+0x7c>)
 811004a:	4a05      	ldr	r2, [pc, #20]	@ (8110060 <prvInitialiseTaskLists+0x68>)
 811004c:	601a      	str	r2, [r3, #0]
}
 811004e:	bf00      	nop
 8110050:	3708      	adds	r7, #8
 8110052:	46bd      	mov	sp, r7
 8110054:	bd80      	pop	{r7, pc}
 8110056:	bf00      	nop
 8110058:	10004824 	.word	0x10004824
 811005c:	10004c84 	.word	0x10004c84
 8110060:	10004c98 	.word	0x10004c98
 8110064:	10004cb4 	.word	0x10004cb4
 8110068:	10004cc8 	.word	0x10004cc8
 811006c:	10004ce0 	.word	0x10004ce0
 8110070:	10004cac 	.word	0x10004cac
 8110074:	10004cb0 	.word	0x10004cb0

08110078 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8110078:	b580      	push	{r7, lr}
 811007a:	b082      	sub	sp, #8
 811007c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 811007e:	e019      	b.n	81100b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8110080:	f7fe fc32 	bl	810e8e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110084:	4b10      	ldr	r3, [pc, #64]	@ (81100c8 <prvCheckTasksWaitingTermination+0x50>)
 8110086:	68db      	ldr	r3, [r3, #12]
 8110088:	68db      	ldr	r3, [r3, #12]
 811008a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811008c:	687b      	ldr	r3, [r7, #4]
 811008e:	3304      	adds	r3, #4
 8110090:	4618      	mov	r0, r3
 8110092:	f7fe facb 	bl	810e62c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8110096:	4b0d      	ldr	r3, [pc, #52]	@ (81100cc <prvCheckTasksWaitingTermination+0x54>)
 8110098:	681b      	ldr	r3, [r3, #0]
 811009a:	3b01      	subs	r3, #1
 811009c:	4a0b      	ldr	r2, [pc, #44]	@ (81100cc <prvCheckTasksWaitingTermination+0x54>)
 811009e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81100a0:	4b0b      	ldr	r3, [pc, #44]	@ (81100d0 <prvCheckTasksWaitingTermination+0x58>)
 81100a2:	681b      	ldr	r3, [r3, #0]
 81100a4:	3b01      	subs	r3, #1
 81100a6:	4a0a      	ldr	r2, [pc, #40]	@ (81100d0 <prvCheckTasksWaitingTermination+0x58>)
 81100a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81100aa:	f7fe fc4f 	bl	810e94c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81100ae:	6878      	ldr	r0, [r7, #4]
 81100b0:	f000 f810 	bl	81100d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81100b4:	4b06      	ldr	r3, [pc, #24]	@ (81100d0 <prvCheckTasksWaitingTermination+0x58>)
 81100b6:	681b      	ldr	r3, [r3, #0]
 81100b8:	2b00      	cmp	r3, #0
 81100ba:	d1e1      	bne.n	8110080 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81100bc:	bf00      	nop
 81100be:	bf00      	nop
 81100c0:	3708      	adds	r7, #8
 81100c2:	46bd      	mov	sp, r7
 81100c4:	bd80      	pop	{r7, pc}
 81100c6:	bf00      	nop
 81100c8:	10004cc8 	.word	0x10004cc8
 81100cc:	10004cf4 	.word	0x10004cf4
 81100d0:	10004cdc 	.word	0x10004cdc

081100d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81100d4:	b580      	push	{r7, lr}
 81100d6:	b084      	sub	sp, #16
 81100d8:	af00      	add	r7, sp, #0
 81100da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81100dc:	687b      	ldr	r3, [r7, #4]
 81100de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 81100e2:	2b00      	cmp	r3, #0
 81100e4:	d108      	bne.n	81100f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 81100e6:	687b      	ldr	r3, [r7, #4]
 81100e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81100ea:	4618      	mov	r0, r3
 81100ec:	f7fe f8f4 	bl	810e2d8 <vPortFree>
				vPortFree( pxTCB );
 81100f0:	6878      	ldr	r0, [r7, #4]
 81100f2:	f7fe f8f1 	bl	810e2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81100f6:	e019      	b.n	811012c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 81100f8:	687b      	ldr	r3, [r7, #4]
 81100fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 81100fe:	2b01      	cmp	r3, #1
 8110100:	d103      	bne.n	811010a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8110102:	6878      	ldr	r0, [r7, #4]
 8110104:	f7fe f8e8 	bl	810e2d8 <vPortFree>
	}
 8110108:	e010      	b.n	811012c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 811010a:	687b      	ldr	r3, [r7, #4]
 811010c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8110110:	2b02      	cmp	r3, #2
 8110112:	d00b      	beq.n	811012c <prvDeleteTCB+0x58>
	__asm volatile
 8110114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110118:	f383 8811 	msr	BASEPRI, r3
 811011c:	f3bf 8f6f 	isb	sy
 8110120:	f3bf 8f4f 	dsb	sy
 8110124:	60fb      	str	r3, [r7, #12]
}
 8110126:	bf00      	nop
 8110128:	bf00      	nop
 811012a:	e7fd      	b.n	8110128 <prvDeleteTCB+0x54>
	}
 811012c:	bf00      	nop
 811012e:	3710      	adds	r7, #16
 8110130:	46bd      	mov	sp, r7
 8110132:	bd80      	pop	{r7, pc}

08110134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8110134:	b480      	push	{r7}
 8110136:	b083      	sub	sp, #12
 8110138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811013a:	4b0c      	ldr	r3, [pc, #48]	@ (811016c <prvResetNextTaskUnblockTime+0x38>)
 811013c:	681b      	ldr	r3, [r3, #0]
 811013e:	681b      	ldr	r3, [r3, #0]
 8110140:	2b00      	cmp	r3, #0
 8110142:	d104      	bne.n	811014e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8110144:	4b0a      	ldr	r3, [pc, #40]	@ (8110170 <prvResetNextTaskUnblockTime+0x3c>)
 8110146:	f04f 32ff 	mov.w	r2, #4294967295
 811014a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 811014c:	e008      	b.n	8110160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 811014e:	4b07      	ldr	r3, [pc, #28]	@ (811016c <prvResetNextTaskUnblockTime+0x38>)
 8110150:	681b      	ldr	r3, [r3, #0]
 8110152:	68db      	ldr	r3, [r3, #12]
 8110154:	68db      	ldr	r3, [r3, #12]
 8110156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8110158:	687b      	ldr	r3, [r7, #4]
 811015a:	685b      	ldr	r3, [r3, #4]
 811015c:	4a04      	ldr	r2, [pc, #16]	@ (8110170 <prvResetNextTaskUnblockTime+0x3c>)
 811015e:	6013      	str	r3, [r2, #0]
}
 8110160:	bf00      	nop
 8110162:	370c      	adds	r7, #12
 8110164:	46bd      	mov	sp, r7
 8110166:	f85d 7b04 	ldr.w	r7, [sp], #4
 811016a:	4770      	bx	lr
 811016c:	10004cac 	.word	0x10004cac
 8110170:	10004d14 	.word	0x10004d14

08110174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8110174:	b480      	push	{r7}
 8110176:	b083      	sub	sp, #12
 8110178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 811017a:	4b0b      	ldr	r3, [pc, #44]	@ (81101a8 <xTaskGetSchedulerState+0x34>)
 811017c:	681b      	ldr	r3, [r3, #0]
 811017e:	2b00      	cmp	r3, #0
 8110180:	d102      	bne.n	8110188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8110182:	2301      	movs	r3, #1
 8110184:	607b      	str	r3, [r7, #4]
 8110186:	e008      	b.n	811019a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8110188:	4b08      	ldr	r3, [pc, #32]	@ (81101ac <xTaskGetSchedulerState+0x38>)
 811018a:	681b      	ldr	r3, [r3, #0]
 811018c:	2b00      	cmp	r3, #0
 811018e:	d102      	bne.n	8110196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8110190:	2302      	movs	r3, #2
 8110192:	607b      	str	r3, [r7, #4]
 8110194:	e001      	b.n	811019a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8110196:	2300      	movs	r3, #0
 8110198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 811019a:	687b      	ldr	r3, [r7, #4]
	}
 811019c:	4618      	mov	r0, r3
 811019e:	370c      	adds	r7, #12
 81101a0:	46bd      	mov	sp, r7
 81101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81101a6:	4770      	bx	lr
 81101a8:	10004d00 	.word	0x10004d00
 81101ac:	10004d1c 	.word	0x10004d1c

081101b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81101b0:	b580      	push	{r7, lr}
 81101b2:	b086      	sub	sp, #24
 81101b4:	af00      	add	r7, sp, #0
 81101b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81101b8:	687b      	ldr	r3, [r7, #4]
 81101ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81101bc:	2300      	movs	r3, #0
 81101be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81101c0:	687b      	ldr	r3, [r7, #4]
 81101c2:	2b00      	cmp	r3, #0
 81101c4:	d058      	beq.n	8110278 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81101c6:	4b2f      	ldr	r3, [pc, #188]	@ (8110284 <xTaskPriorityDisinherit+0xd4>)
 81101c8:	681b      	ldr	r3, [r3, #0]
 81101ca:	693a      	ldr	r2, [r7, #16]
 81101cc:	429a      	cmp	r2, r3
 81101ce:	d00b      	beq.n	81101e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 81101d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81101d4:	f383 8811 	msr	BASEPRI, r3
 81101d8:	f3bf 8f6f 	isb	sy
 81101dc:	f3bf 8f4f 	dsb	sy
 81101e0:	60fb      	str	r3, [r7, #12]
}
 81101e2:	bf00      	nop
 81101e4:	bf00      	nop
 81101e6:	e7fd      	b.n	81101e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 81101e8:	693b      	ldr	r3, [r7, #16]
 81101ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81101ec:	2b00      	cmp	r3, #0
 81101ee:	d10b      	bne.n	8110208 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 81101f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81101f4:	f383 8811 	msr	BASEPRI, r3
 81101f8:	f3bf 8f6f 	isb	sy
 81101fc:	f3bf 8f4f 	dsb	sy
 8110200:	60bb      	str	r3, [r7, #8]
}
 8110202:	bf00      	nop
 8110204:	bf00      	nop
 8110206:	e7fd      	b.n	8110204 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8110208:	693b      	ldr	r3, [r7, #16]
 811020a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811020c:	1e5a      	subs	r2, r3, #1
 811020e:	693b      	ldr	r3, [r7, #16]
 8110210:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8110212:	693b      	ldr	r3, [r7, #16]
 8110214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110216:	693b      	ldr	r3, [r7, #16]
 8110218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811021a:	429a      	cmp	r2, r3
 811021c:	d02c      	beq.n	8110278 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 811021e:	693b      	ldr	r3, [r7, #16]
 8110220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110222:	2b00      	cmp	r3, #0
 8110224:	d128      	bne.n	8110278 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8110226:	693b      	ldr	r3, [r7, #16]
 8110228:	3304      	adds	r3, #4
 811022a:	4618      	mov	r0, r3
 811022c:	f7fe f9fe 	bl	810e62c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8110230:	693b      	ldr	r3, [r7, #16]
 8110232:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8110234:	693b      	ldr	r3, [r7, #16]
 8110236:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110238:	693b      	ldr	r3, [r7, #16]
 811023a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811023c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8110240:	693b      	ldr	r3, [r7, #16]
 8110242:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8110244:	693b      	ldr	r3, [r7, #16]
 8110246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110248:	4b0f      	ldr	r3, [pc, #60]	@ (8110288 <xTaskPriorityDisinherit+0xd8>)
 811024a:	681b      	ldr	r3, [r3, #0]
 811024c:	429a      	cmp	r2, r3
 811024e:	d903      	bls.n	8110258 <xTaskPriorityDisinherit+0xa8>
 8110250:	693b      	ldr	r3, [r7, #16]
 8110252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110254:	4a0c      	ldr	r2, [pc, #48]	@ (8110288 <xTaskPriorityDisinherit+0xd8>)
 8110256:	6013      	str	r3, [r2, #0]
 8110258:	693b      	ldr	r3, [r7, #16]
 811025a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811025c:	4613      	mov	r3, r2
 811025e:	009b      	lsls	r3, r3, #2
 8110260:	4413      	add	r3, r2
 8110262:	009b      	lsls	r3, r3, #2
 8110264:	4a09      	ldr	r2, [pc, #36]	@ (811028c <xTaskPriorityDisinherit+0xdc>)
 8110266:	441a      	add	r2, r3
 8110268:	693b      	ldr	r3, [r7, #16]
 811026a:	3304      	adds	r3, #4
 811026c:	4619      	mov	r1, r3
 811026e:	4610      	mov	r0, r2
 8110270:	f7fe f97f 	bl	810e572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8110274:	2301      	movs	r3, #1
 8110276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8110278:	697b      	ldr	r3, [r7, #20]
	}
 811027a:	4618      	mov	r0, r3
 811027c:	3718      	adds	r7, #24
 811027e:	46bd      	mov	sp, r7
 8110280:	bd80      	pop	{r7, pc}
 8110282:	bf00      	nop
 8110284:	10004820 	.word	0x10004820
 8110288:	10004cfc 	.word	0x10004cfc
 811028c:	10004824 	.word	0x10004824

08110290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8110290:	b580      	push	{r7, lr}
 8110292:	b084      	sub	sp, #16
 8110294:	af00      	add	r7, sp, #0
 8110296:	6078      	str	r0, [r7, #4]
 8110298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 811029a:	4b21      	ldr	r3, [pc, #132]	@ (8110320 <prvAddCurrentTaskToDelayedList+0x90>)
 811029c:	681b      	ldr	r3, [r3, #0]
 811029e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81102a0:	4b20      	ldr	r3, [pc, #128]	@ (8110324 <prvAddCurrentTaskToDelayedList+0x94>)
 81102a2:	681b      	ldr	r3, [r3, #0]
 81102a4:	3304      	adds	r3, #4
 81102a6:	4618      	mov	r0, r3
 81102a8:	f7fe f9c0 	bl	810e62c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81102ac:	687b      	ldr	r3, [r7, #4]
 81102ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81102b2:	d10a      	bne.n	81102ca <prvAddCurrentTaskToDelayedList+0x3a>
 81102b4:	683b      	ldr	r3, [r7, #0]
 81102b6:	2b00      	cmp	r3, #0
 81102b8:	d007      	beq.n	81102ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81102ba:	4b1a      	ldr	r3, [pc, #104]	@ (8110324 <prvAddCurrentTaskToDelayedList+0x94>)
 81102bc:	681b      	ldr	r3, [r3, #0]
 81102be:	3304      	adds	r3, #4
 81102c0:	4619      	mov	r1, r3
 81102c2:	4819      	ldr	r0, [pc, #100]	@ (8110328 <prvAddCurrentTaskToDelayedList+0x98>)
 81102c4:	f7fe f955 	bl	810e572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81102c8:	e026      	b.n	8110318 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81102ca:	68fa      	ldr	r2, [r7, #12]
 81102cc:	687b      	ldr	r3, [r7, #4]
 81102ce:	4413      	add	r3, r2
 81102d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81102d2:	4b14      	ldr	r3, [pc, #80]	@ (8110324 <prvAddCurrentTaskToDelayedList+0x94>)
 81102d4:	681b      	ldr	r3, [r3, #0]
 81102d6:	68ba      	ldr	r2, [r7, #8]
 81102d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81102da:	68ba      	ldr	r2, [r7, #8]
 81102dc:	68fb      	ldr	r3, [r7, #12]
 81102de:	429a      	cmp	r2, r3
 81102e0:	d209      	bcs.n	81102f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81102e2:	4b12      	ldr	r3, [pc, #72]	@ (811032c <prvAddCurrentTaskToDelayedList+0x9c>)
 81102e4:	681a      	ldr	r2, [r3, #0]
 81102e6:	4b0f      	ldr	r3, [pc, #60]	@ (8110324 <prvAddCurrentTaskToDelayedList+0x94>)
 81102e8:	681b      	ldr	r3, [r3, #0]
 81102ea:	3304      	adds	r3, #4
 81102ec:	4619      	mov	r1, r3
 81102ee:	4610      	mov	r0, r2
 81102f0:	f7fe f963 	bl	810e5ba <vListInsert>
}
 81102f4:	e010      	b.n	8110318 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81102f6:	4b0e      	ldr	r3, [pc, #56]	@ (8110330 <prvAddCurrentTaskToDelayedList+0xa0>)
 81102f8:	681a      	ldr	r2, [r3, #0]
 81102fa:	4b0a      	ldr	r3, [pc, #40]	@ (8110324 <prvAddCurrentTaskToDelayedList+0x94>)
 81102fc:	681b      	ldr	r3, [r3, #0]
 81102fe:	3304      	adds	r3, #4
 8110300:	4619      	mov	r1, r3
 8110302:	4610      	mov	r0, r2
 8110304:	f7fe f959 	bl	810e5ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8110308:	4b0a      	ldr	r3, [pc, #40]	@ (8110334 <prvAddCurrentTaskToDelayedList+0xa4>)
 811030a:	681b      	ldr	r3, [r3, #0]
 811030c:	68ba      	ldr	r2, [r7, #8]
 811030e:	429a      	cmp	r2, r3
 8110310:	d202      	bcs.n	8110318 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8110312:	4a08      	ldr	r2, [pc, #32]	@ (8110334 <prvAddCurrentTaskToDelayedList+0xa4>)
 8110314:	68bb      	ldr	r3, [r7, #8]
 8110316:	6013      	str	r3, [r2, #0]
}
 8110318:	bf00      	nop
 811031a:	3710      	adds	r7, #16
 811031c:	46bd      	mov	sp, r7
 811031e:	bd80      	pop	{r7, pc}
 8110320:	10004cf8 	.word	0x10004cf8
 8110324:	10004820 	.word	0x10004820
 8110328:	10004ce0 	.word	0x10004ce0
 811032c:	10004cb0 	.word	0x10004cb0
 8110330:	10004cac 	.word	0x10004cac
 8110334:	10004d14 	.word	0x10004d14

08110338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8110338:	b580      	push	{r7, lr}
 811033a:	b08a      	sub	sp, #40	@ 0x28
 811033c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 811033e:	2300      	movs	r3, #0
 8110340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8110342:	f000 fb13 	bl	811096c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8110346:	4b1d      	ldr	r3, [pc, #116]	@ (81103bc <xTimerCreateTimerTask+0x84>)
 8110348:	681b      	ldr	r3, [r3, #0]
 811034a:	2b00      	cmp	r3, #0
 811034c:	d021      	beq.n	8110392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 811034e:	2300      	movs	r3, #0
 8110350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8110352:	2300      	movs	r3, #0
 8110354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8110356:	1d3a      	adds	r2, r7, #4
 8110358:	f107 0108 	add.w	r1, r7, #8
 811035c:	f107 030c 	add.w	r3, r7, #12
 8110360:	4618      	mov	r0, r3
 8110362:	f7fd fed1 	bl	810e108 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8110366:	6879      	ldr	r1, [r7, #4]
 8110368:	68bb      	ldr	r3, [r7, #8]
 811036a:	68fa      	ldr	r2, [r7, #12]
 811036c:	9202      	str	r2, [sp, #8]
 811036e:	9301      	str	r3, [sp, #4]
 8110370:	2302      	movs	r3, #2
 8110372:	9300      	str	r3, [sp, #0]
 8110374:	2300      	movs	r3, #0
 8110376:	460a      	mov	r2, r1
 8110378:	4911      	ldr	r1, [pc, #68]	@ (81103c0 <xTimerCreateTimerTask+0x88>)
 811037a:	4812      	ldr	r0, [pc, #72]	@ (81103c4 <xTimerCreateTimerTask+0x8c>)
 811037c:	f7ff f8d0 	bl	810f520 <xTaskCreateStatic>
 8110380:	4603      	mov	r3, r0
 8110382:	4a11      	ldr	r2, [pc, #68]	@ (81103c8 <xTimerCreateTimerTask+0x90>)
 8110384:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8110386:	4b10      	ldr	r3, [pc, #64]	@ (81103c8 <xTimerCreateTimerTask+0x90>)
 8110388:	681b      	ldr	r3, [r3, #0]
 811038a:	2b00      	cmp	r3, #0
 811038c:	d001      	beq.n	8110392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 811038e:	2301      	movs	r3, #1
 8110390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8110392:	697b      	ldr	r3, [r7, #20]
 8110394:	2b00      	cmp	r3, #0
 8110396:	d10b      	bne.n	81103b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8110398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811039c:	f383 8811 	msr	BASEPRI, r3
 81103a0:	f3bf 8f6f 	isb	sy
 81103a4:	f3bf 8f4f 	dsb	sy
 81103a8:	613b      	str	r3, [r7, #16]
}
 81103aa:	bf00      	nop
 81103ac:	bf00      	nop
 81103ae:	e7fd      	b.n	81103ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 81103b0:	697b      	ldr	r3, [r7, #20]
}
 81103b2:	4618      	mov	r0, r3
 81103b4:	3718      	adds	r7, #24
 81103b6:	46bd      	mov	sp, r7
 81103b8:	bd80      	pop	{r7, pc}
 81103ba:	bf00      	nop
 81103bc:	10004d50 	.word	0x10004d50
 81103c0:	08112084 	.word	0x08112084
 81103c4:	08110505 	.word	0x08110505
 81103c8:	10004d54 	.word	0x10004d54

081103cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81103cc:	b580      	push	{r7, lr}
 81103ce:	b08a      	sub	sp, #40	@ 0x28
 81103d0:	af00      	add	r7, sp, #0
 81103d2:	60f8      	str	r0, [r7, #12]
 81103d4:	60b9      	str	r1, [r7, #8]
 81103d6:	607a      	str	r2, [r7, #4]
 81103d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81103da:	2300      	movs	r3, #0
 81103dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81103de:	68fb      	ldr	r3, [r7, #12]
 81103e0:	2b00      	cmp	r3, #0
 81103e2:	d10b      	bne.n	81103fc <xTimerGenericCommand+0x30>
	__asm volatile
 81103e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81103e8:	f383 8811 	msr	BASEPRI, r3
 81103ec:	f3bf 8f6f 	isb	sy
 81103f0:	f3bf 8f4f 	dsb	sy
 81103f4:	623b      	str	r3, [r7, #32]
}
 81103f6:	bf00      	nop
 81103f8:	bf00      	nop
 81103fa:	e7fd      	b.n	81103f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81103fc:	4b19      	ldr	r3, [pc, #100]	@ (8110464 <xTimerGenericCommand+0x98>)
 81103fe:	681b      	ldr	r3, [r3, #0]
 8110400:	2b00      	cmp	r3, #0
 8110402:	d02a      	beq.n	811045a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8110404:	68bb      	ldr	r3, [r7, #8]
 8110406:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8110408:	687b      	ldr	r3, [r7, #4]
 811040a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 811040c:	68fb      	ldr	r3, [r7, #12]
 811040e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8110410:	68bb      	ldr	r3, [r7, #8]
 8110412:	2b05      	cmp	r3, #5
 8110414:	dc18      	bgt.n	8110448 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8110416:	f7ff fead 	bl	8110174 <xTaskGetSchedulerState>
 811041a:	4603      	mov	r3, r0
 811041c:	2b02      	cmp	r3, #2
 811041e:	d109      	bne.n	8110434 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8110420:	4b10      	ldr	r3, [pc, #64]	@ (8110464 <xTimerGenericCommand+0x98>)
 8110422:	6818      	ldr	r0, [r3, #0]
 8110424:	f107 0110 	add.w	r1, r7, #16
 8110428:	2300      	movs	r3, #0
 811042a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811042c:	f7fe fc88 	bl	810ed40 <xQueueGenericSend>
 8110430:	6278      	str	r0, [r7, #36]	@ 0x24
 8110432:	e012      	b.n	811045a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8110434:	4b0b      	ldr	r3, [pc, #44]	@ (8110464 <xTimerGenericCommand+0x98>)
 8110436:	6818      	ldr	r0, [r3, #0]
 8110438:	f107 0110 	add.w	r1, r7, #16
 811043c:	2300      	movs	r3, #0
 811043e:	2200      	movs	r2, #0
 8110440:	f7fe fc7e 	bl	810ed40 <xQueueGenericSend>
 8110444:	6278      	str	r0, [r7, #36]	@ 0x24
 8110446:	e008      	b.n	811045a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8110448:	4b06      	ldr	r3, [pc, #24]	@ (8110464 <xTimerGenericCommand+0x98>)
 811044a:	6818      	ldr	r0, [r3, #0]
 811044c:	f107 0110 	add.w	r1, r7, #16
 8110450:	2300      	movs	r3, #0
 8110452:	683a      	ldr	r2, [r7, #0]
 8110454:	f7fe fd76 	bl	810ef44 <xQueueGenericSendFromISR>
 8110458:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 811045a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811045c:	4618      	mov	r0, r3
 811045e:	3728      	adds	r7, #40	@ 0x28
 8110460:	46bd      	mov	sp, r7
 8110462:	bd80      	pop	{r7, pc}
 8110464:	10004d50 	.word	0x10004d50

08110468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8110468:	b580      	push	{r7, lr}
 811046a:	b088      	sub	sp, #32
 811046c:	af02      	add	r7, sp, #8
 811046e:	6078      	str	r0, [r7, #4]
 8110470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110472:	4b23      	ldr	r3, [pc, #140]	@ (8110500 <prvProcessExpiredTimer+0x98>)
 8110474:	681b      	ldr	r3, [r3, #0]
 8110476:	68db      	ldr	r3, [r3, #12]
 8110478:	68db      	ldr	r3, [r3, #12]
 811047a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811047c:	697b      	ldr	r3, [r7, #20]
 811047e:	3304      	adds	r3, #4
 8110480:	4618      	mov	r0, r3
 8110482:	f7fe f8d3 	bl	810e62c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110486:	697b      	ldr	r3, [r7, #20]
 8110488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811048c:	f003 0304 	and.w	r3, r3, #4
 8110490:	2b00      	cmp	r3, #0
 8110492:	d023      	beq.n	81104dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8110494:	697b      	ldr	r3, [r7, #20]
 8110496:	699a      	ldr	r2, [r3, #24]
 8110498:	687b      	ldr	r3, [r7, #4]
 811049a:	18d1      	adds	r1, r2, r3
 811049c:	687b      	ldr	r3, [r7, #4]
 811049e:	683a      	ldr	r2, [r7, #0]
 81104a0:	6978      	ldr	r0, [r7, #20]
 81104a2:	f000 f8d5 	bl	8110650 <prvInsertTimerInActiveList>
 81104a6:	4603      	mov	r3, r0
 81104a8:	2b00      	cmp	r3, #0
 81104aa:	d020      	beq.n	81104ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81104ac:	2300      	movs	r3, #0
 81104ae:	9300      	str	r3, [sp, #0]
 81104b0:	2300      	movs	r3, #0
 81104b2:	687a      	ldr	r2, [r7, #4]
 81104b4:	2100      	movs	r1, #0
 81104b6:	6978      	ldr	r0, [r7, #20]
 81104b8:	f7ff ff88 	bl	81103cc <xTimerGenericCommand>
 81104bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81104be:	693b      	ldr	r3, [r7, #16]
 81104c0:	2b00      	cmp	r3, #0
 81104c2:	d114      	bne.n	81104ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 81104c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81104c8:	f383 8811 	msr	BASEPRI, r3
 81104cc:	f3bf 8f6f 	isb	sy
 81104d0:	f3bf 8f4f 	dsb	sy
 81104d4:	60fb      	str	r3, [r7, #12]
}
 81104d6:	bf00      	nop
 81104d8:	bf00      	nop
 81104da:	e7fd      	b.n	81104d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81104dc:	697b      	ldr	r3, [r7, #20]
 81104de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81104e2:	f023 0301 	bic.w	r3, r3, #1
 81104e6:	b2da      	uxtb	r2, r3
 81104e8:	697b      	ldr	r3, [r7, #20]
 81104ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81104ee:	697b      	ldr	r3, [r7, #20]
 81104f0:	6a1b      	ldr	r3, [r3, #32]
 81104f2:	6978      	ldr	r0, [r7, #20]
 81104f4:	4798      	blx	r3
}
 81104f6:	bf00      	nop
 81104f8:	3718      	adds	r7, #24
 81104fa:	46bd      	mov	sp, r7
 81104fc:	bd80      	pop	{r7, pc}
 81104fe:	bf00      	nop
 8110500:	10004d48 	.word	0x10004d48

08110504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8110504:	b580      	push	{r7, lr}
 8110506:	b084      	sub	sp, #16
 8110508:	af00      	add	r7, sp, #0
 811050a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 811050c:	f107 0308 	add.w	r3, r7, #8
 8110510:	4618      	mov	r0, r3
 8110512:	f000 f859 	bl	81105c8 <prvGetNextExpireTime>
 8110516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8110518:	68bb      	ldr	r3, [r7, #8]
 811051a:	4619      	mov	r1, r3
 811051c:	68f8      	ldr	r0, [r7, #12]
 811051e:	f000 f805 	bl	811052c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8110522:	f000 f8d7 	bl	81106d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8110526:	bf00      	nop
 8110528:	e7f0      	b.n	811050c <prvTimerTask+0x8>
	...

0811052c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 811052c:	b580      	push	{r7, lr}
 811052e:	b084      	sub	sp, #16
 8110530:	af00      	add	r7, sp, #0
 8110532:	6078      	str	r0, [r7, #4]
 8110534:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8110536:	f7ff fa37 	bl	810f9a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811053a:	f107 0308 	add.w	r3, r7, #8
 811053e:	4618      	mov	r0, r3
 8110540:	f000 f866 	bl	8110610 <prvSampleTimeNow>
 8110544:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8110546:	68bb      	ldr	r3, [r7, #8]
 8110548:	2b00      	cmp	r3, #0
 811054a:	d130      	bne.n	81105ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 811054c:	683b      	ldr	r3, [r7, #0]
 811054e:	2b00      	cmp	r3, #0
 8110550:	d10a      	bne.n	8110568 <prvProcessTimerOrBlockTask+0x3c>
 8110552:	687a      	ldr	r2, [r7, #4]
 8110554:	68fb      	ldr	r3, [r7, #12]
 8110556:	429a      	cmp	r2, r3
 8110558:	d806      	bhi.n	8110568 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 811055a:	f7ff fa33 	bl	810f9c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 811055e:	68f9      	ldr	r1, [r7, #12]
 8110560:	6878      	ldr	r0, [r7, #4]
 8110562:	f7ff ff81 	bl	8110468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8110566:	e024      	b.n	81105b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8110568:	683b      	ldr	r3, [r7, #0]
 811056a:	2b00      	cmp	r3, #0
 811056c:	d008      	beq.n	8110580 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 811056e:	4b13      	ldr	r3, [pc, #76]	@ (81105bc <prvProcessTimerOrBlockTask+0x90>)
 8110570:	681b      	ldr	r3, [r3, #0]
 8110572:	681b      	ldr	r3, [r3, #0]
 8110574:	2b00      	cmp	r3, #0
 8110576:	d101      	bne.n	811057c <prvProcessTimerOrBlockTask+0x50>
 8110578:	2301      	movs	r3, #1
 811057a:	e000      	b.n	811057e <prvProcessTimerOrBlockTask+0x52>
 811057c:	2300      	movs	r3, #0
 811057e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8110580:	4b0f      	ldr	r3, [pc, #60]	@ (81105c0 <prvProcessTimerOrBlockTask+0x94>)
 8110582:	6818      	ldr	r0, [r3, #0]
 8110584:	687a      	ldr	r2, [r7, #4]
 8110586:	68fb      	ldr	r3, [r7, #12]
 8110588:	1ad3      	subs	r3, r2, r3
 811058a:	683a      	ldr	r2, [r7, #0]
 811058c:	4619      	mov	r1, r3
 811058e:	f7fe ff93 	bl	810f4b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8110592:	f7ff fa17 	bl	810f9c4 <xTaskResumeAll>
 8110596:	4603      	mov	r3, r0
 8110598:	2b00      	cmp	r3, #0
 811059a:	d10a      	bne.n	81105b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 811059c:	4b09      	ldr	r3, [pc, #36]	@ (81105c4 <prvProcessTimerOrBlockTask+0x98>)
 811059e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81105a2:	601a      	str	r2, [r3, #0]
 81105a4:	f3bf 8f4f 	dsb	sy
 81105a8:	f3bf 8f6f 	isb	sy
}
 81105ac:	e001      	b.n	81105b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81105ae:	f7ff fa09 	bl	810f9c4 <xTaskResumeAll>
}
 81105b2:	bf00      	nop
 81105b4:	3710      	adds	r7, #16
 81105b6:	46bd      	mov	sp, r7
 81105b8:	bd80      	pop	{r7, pc}
 81105ba:	bf00      	nop
 81105bc:	10004d4c 	.word	0x10004d4c
 81105c0:	10004d50 	.word	0x10004d50
 81105c4:	e000ed04 	.word	0xe000ed04

081105c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81105c8:	b480      	push	{r7}
 81105ca:	b085      	sub	sp, #20
 81105cc:	af00      	add	r7, sp, #0
 81105ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81105d0:	4b0e      	ldr	r3, [pc, #56]	@ (811060c <prvGetNextExpireTime+0x44>)
 81105d2:	681b      	ldr	r3, [r3, #0]
 81105d4:	681b      	ldr	r3, [r3, #0]
 81105d6:	2b00      	cmp	r3, #0
 81105d8:	d101      	bne.n	81105de <prvGetNextExpireTime+0x16>
 81105da:	2201      	movs	r2, #1
 81105dc:	e000      	b.n	81105e0 <prvGetNextExpireTime+0x18>
 81105de:	2200      	movs	r2, #0
 81105e0:	687b      	ldr	r3, [r7, #4]
 81105e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81105e4:	687b      	ldr	r3, [r7, #4]
 81105e6:	681b      	ldr	r3, [r3, #0]
 81105e8:	2b00      	cmp	r3, #0
 81105ea:	d105      	bne.n	81105f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81105ec:	4b07      	ldr	r3, [pc, #28]	@ (811060c <prvGetNextExpireTime+0x44>)
 81105ee:	681b      	ldr	r3, [r3, #0]
 81105f0:	68db      	ldr	r3, [r3, #12]
 81105f2:	681b      	ldr	r3, [r3, #0]
 81105f4:	60fb      	str	r3, [r7, #12]
 81105f6:	e001      	b.n	81105fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81105f8:	2300      	movs	r3, #0
 81105fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81105fc:	68fb      	ldr	r3, [r7, #12]
}
 81105fe:	4618      	mov	r0, r3
 8110600:	3714      	adds	r7, #20
 8110602:	46bd      	mov	sp, r7
 8110604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110608:	4770      	bx	lr
 811060a:	bf00      	nop
 811060c:	10004d48 	.word	0x10004d48

08110610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8110610:	b580      	push	{r7, lr}
 8110612:	b084      	sub	sp, #16
 8110614:	af00      	add	r7, sp, #0
 8110616:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8110618:	f7ff fa72 	bl	810fb00 <xTaskGetTickCount>
 811061c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 811061e:	4b0b      	ldr	r3, [pc, #44]	@ (811064c <prvSampleTimeNow+0x3c>)
 8110620:	681b      	ldr	r3, [r3, #0]
 8110622:	68fa      	ldr	r2, [r7, #12]
 8110624:	429a      	cmp	r2, r3
 8110626:	d205      	bcs.n	8110634 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8110628:	f000 f93a 	bl	81108a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 811062c:	687b      	ldr	r3, [r7, #4]
 811062e:	2201      	movs	r2, #1
 8110630:	601a      	str	r2, [r3, #0]
 8110632:	e002      	b.n	811063a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8110634:	687b      	ldr	r3, [r7, #4]
 8110636:	2200      	movs	r2, #0
 8110638:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 811063a:	4a04      	ldr	r2, [pc, #16]	@ (811064c <prvSampleTimeNow+0x3c>)
 811063c:	68fb      	ldr	r3, [r7, #12]
 811063e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8110640:	68fb      	ldr	r3, [r7, #12]
}
 8110642:	4618      	mov	r0, r3
 8110644:	3710      	adds	r7, #16
 8110646:	46bd      	mov	sp, r7
 8110648:	bd80      	pop	{r7, pc}
 811064a:	bf00      	nop
 811064c:	10004d58 	.word	0x10004d58

08110650 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8110650:	b580      	push	{r7, lr}
 8110652:	b086      	sub	sp, #24
 8110654:	af00      	add	r7, sp, #0
 8110656:	60f8      	str	r0, [r7, #12]
 8110658:	60b9      	str	r1, [r7, #8]
 811065a:	607a      	str	r2, [r7, #4]
 811065c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 811065e:	2300      	movs	r3, #0
 8110660:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8110662:	68fb      	ldr	r3, [r7, #12]
 8110664:	68ba      	ldr	r2, [r7, #8]
 8110666:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8110668:	68fb      	ldr	r3, [r7, #12]
 811066a:	68fa      	ldr	r2, [r7, #12]
 811066c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 811066e:	68ba      	ldr	r2, [r7, #8]
 8110670:	687b      	ldr	r3, [r7, #4]
 8110672:	429a      	cmp	r2, r3
 8110674:	d812      	bhi.n	811069c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110676:	687a      	ldr	r2, [r7, #4]
 8110678:	683b      	ldr	r3, [r7, #0]
 811067a:	1ad2      	subs	r2, r2, r3
 811067c:	68fb      	ldr	r3, [r7, #12]
 811067e:	699b      	ldr	r3, [r3, #24]
 8110680:	429a      	cmp	r2, r3
 8110682:	d302      	bcc.n	811068a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8110684:	2301      	movs	r3, #1
 8110686:	617b      	str	r3, [r7, #20]
 8110688:	e01b      	b.n	81106c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 811068a:	4b10      	ldr	r3, [pc, #64]	@ (81106cc <prvInsertTimerInActiveList+0x7c>)
 811068c:	681a      	ldr	r2, [r3, #0]
 811068e:	68fb      	ldr	r3, [r7, #12]
 8110690:	3304      	adds	r3, #4
 8110692:	4619      	mov	r1, r3
 8110694:	4610      	mov	r0, r2
 8110696:	f7fd ff90 	bl	810e5ba <vListInsert>
 811069a:	e012      	b.n	81106c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 811069c:	687a      	ldr	r2, [r7, #4]
 811069e:	683b      	ldr	r3, [r7, #0]
 81106a0:	429a      	cmp	r2, r3
 81106a2:	d206      	bcs.n	81106b2 <prvInsertTimerInActiveList+0x62>
 81106a4:	68ba      	ldr	r2, [r7, #8]
 81106a6:	683b      	ldr	r3, [r7, #0]
 81106a8:	429a      	cmp	r2, r3
 81106aa:	d302      	bcc.n	81106b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81106ac:	2301      	movs	r3, #1
 81106ae:	617b      	str	r3, [r7, #20]
 81106b0:	e007      	b.n	81106c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81106b2:	4b07      	ldr	r3, [pc, #28]	@ (81106d0 <prvInsertTimerInActiveList+0x80>)
 81106b4:	681a      	ldr	r2, [r3, #0]
 81106b6:	68fb      	ldr	r3, [r7, #12]
 81106b8:	3304      	adds	r3, #4
 81106ba:	4619      	mov	r1, r3
 81106bc:	4610      	mov	r0, r2
 81106be:	f7fd ff7c 	bl	810e5ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 81106c2:	697b      	ldr	r3, [r7, #20]
}
 81106c4:	4618      	mov	r0, r3
 81106c6:	3718      	adds	r7, #24
 81106c8:	46bd      	mov	sp, r7
 81106ca:	bd80      	pop	{r7, pc}
 81106cc:	10004d4c 	.word	0x10004d4c
 81106d0:	10004d48 	.word	0x10004d48

081106d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81106d4:	b580      	push	{r7, lr}
 81106d6:	b08e      	sub	sp, #56	@ 0x38
 81106d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81106da:	e0ce      	b.n	811087a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81106dc:	687b      	ldr	r3, [r7, #4]
 81106de:	2b00      	cmp	r3, #0
 81106e0:	da19      	bge.n	8110716 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81106e2:	1d3b      	adds	r3, r7, #4
 81106e4:	3304      	adds	r3, #4
 81106e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81106e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106ea:	2b00      	cmp	r3, #0
 81106ec:	d10b      	bne.n	8110706 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81106ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81106f2:	f383 8811 	msr	BASEPRI, r3
 81106f6:	f3bf 8f6f 	isb	sy
 81106fa:	f3bf 8f4f 	dsb	sy
 81106fe:	61fb      	str	r3, [r7, #28]
}
 8110700:	bf00      	nop
 8110702:	bf00      	nop
 8110704:	e7fd      	b.n	8110702 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8110706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110708:	681b      	ldr	r3, [r3, #0]
 811070a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811070c:	6850      	ldr	r0, [r2, #4]
 811070e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110710:	6892      	ldr	r2, [r2, #8]
 8110712:	4611      	mov	r1, r2
 8110714:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8110716:	687b      	ldr	r3, [r7, #4]
 8110718:	2b00      	cmp	r3, #0
 811071a:	f2c0 80ae 	blt.w	811087a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 811071e:	68fb      	ldr	r3, [r7, #12]
 8110720:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8110722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110724:	695b      	ldr	r3, [r3, #20]
 8110726:	2b00      	cmp	r3, #0
 8110728:	d004      	beq.n	8110734 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811072a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811072c:	3304      	adds	r3, #4
 811072e:	4618      	mov	r0, r3
 8110730:	f7fd ff7c 	bl	810e62c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8110734:	463b      	mov	r3, r7
 8110736:	4618      	mov	r0, r3
 8110738:	f7ff ff6a 	bl	8110610 <prvSampleTimeNow>
 811073c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 811073e:	687b      	ldr	r3, [r7, #4]
 8110740:	2b09      	cmp	r3, #9
 8110742:	f200 8097 	bhi.w	8110874 <prvProcessReceivedCommands+0x1a0>
 8110746:	a201      	add	r2, pc, #4	@ (adr r2, 811074c <prvProcessReceivedCommands+0x78>)
 8110748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811074c:	08110775 	.word	0x08110775
 8110750:	08110775 	.word	0x08110775
 8110754:	08110775 	.word	0x08110775
 8110758:	081107eb 	.word	0x081107eb
 811075c:	081107ff 	.word	0x081107ff
 8110760:	0811084b 	.word	0x0811084b
 8110764:	08110775 	.word	0x08110775
 8110768:	08110775 	.word	0x08110775
 811076c:	081107eb 	.word	0x081107eb
 8110770:	081107ff 	.word	0x081107ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8110774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811077a:	f043 0301 	orr.w	r3, r3, #1
 811077e:	b2da      	uxtb	r2, r3
 8110780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8110786:	68ba      	ldr	r2, [r7, #8]
 8110788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811078a:	699b      	ldr	r3, [r3, #24]
 811078c:	18d1      	adds	r1, r2, r3
 811078e:	68bb      	ldr	r3, [r7, #8]
 8110790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110794:	f7ff ff5c 	bl	8110650 <prvInsertTimerInActiveList>
 8110798:	4603      	mov	r3, r0
 811079a:	2b00      	cmp	r3, #0
 811079c:	d06c      	beq.n	8110878 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 811079e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107a0:	6a1b      	ldr	r3, [r3, #32]
 81107a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81107a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81107a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81107ac:	f003 0304 	and.w	r3, r3, #4
 81107b0:	2b00      	cmp	r3, #0
 81107b2:	d061      	beq.n	8110878 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81107b4:	68ba      	ldr	r2, [r7, #8]
 81107b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107b8:	699b      	ldr	r3, [r3, #24]
 81107ba:	441a      	add	r2, r3
 81107bc:	2300      	movs	r3, #0
 81107be:	9300      	str	r3, [sp, #0]
 81107c0:	2300      	movs	r3, #0
 81107c2:	2100      	movs	r1, #0
 81107c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81107c6:	f7ff fe01 	bl	81103cc <xTimerGenericCommand>
 81107ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81107cc:	6a3b      	ldr	r3, [r7, #32]
 81107ce:	2b00      	cmp	r3, #0
 81107d0:	d152      	bne.n	8110878 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81107d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81107d6:	f383 8811 	msr	BASEPRI, r3
 81107da:	f3bf 8f6f 	isb	sy
 81107de:	f3bf 8f4f 	dsb	sy
 81107e2:	61bb      	str	r3, [r7, #24]
}
 81107e4:	bf00      	nop
 81107e6:	bf00      	nop
 81107e8:	e7fd      	b.n	81107e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81107ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81107f0:	f023 0301 	bic.w	r3, r3, #1
 81107f4:	b2da      	uxtb	r2, r3
 81107f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81107fc:	e03d      	b.n	811087a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81107fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110804:	f043 0301 	orr.w	r3, r3, #1
 8110808:	b2da      	uxtb	r2, r3
 811080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811080c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8110810:	68ba      	ldr	r2, [r7, #8]
 8110812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110814:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8110816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110818:	699b      	ldr	r3, [r3, #24]
 811081a:	2b00      	cmp	r3, #0
 811081c:	d10b      	bne.n	8110836 <prvProcessReceivedCommands+0x162>
	__asm volatile
 811081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110822:	f383 8811 	msr	BASEPRI, r3
 8110826:	f3bf 8f6f 	isb	sy
 811082a:	f3bf 8f4f 	dsb	sy
 811082e:	617b      	str	r3, [r7, #20]
}
 8110830:	bf00      	nop
 8110832:	bf00      	nop
 8110834:	e7fd      	b.n	8110832 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8110836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110838:	699a      	ldr	r2, [r3, #24]
 811083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811083c:	18d1      	adds	r1, r2, r3
 811083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110844:	f7ff ff04 	bl	8110650 <prvInsertTimerInActiveList>
					break;
 8110848:	e017      	b.n	811087a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 811084a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811084c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110850:	f003 0302 	and.w	r3, r3, #2
 8110854:	2b00      	cmp	r3, #0
 8110856:	d103      	bne.n	8110860 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8110858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811085a:	f7fd fd3d 	bl	810e2d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 811085e:	e00c      	b.n	811087a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8110860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110866:	f023 0301 	bic.w	r3, r3, #1
 811086a:	b2da      	uxtb	r2, r3
 811086c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811086e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8110872:	e002      	b.n	811087a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8110874:	bf00      	nop
 8110876:	e000      	b.n	811087a <prvProcessReceivedCommands+0x1a6>
					break;
 8110878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 811087a:	4b08      	ldr	r3, [pc, #32]	@ (811089c <prvProcessReceivedCommands+0x1c8>)
 811087c:	681b      	ldr	r3, [r3, #0]
 811087e:	1d39      	adds	r1, r7, #4
 8110880:	2200      	movs	r2, #0
 8110882:	4618      	mov	r0, r3
 8110884:	f7fe fbfc 	bl	810f080 <xQueueReceive>
 8110888:	4603      	mov	r3, r0
 811088a:	2b00      	cmp	r3, #0
 811088c:	f47f af26 	bne.w	81106dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8110890:	bf00      	nop
 8110892:	bf00      	nop
 8110894:	3730      	adds	r7, #48	@ 0x30
 8110896:	46bd      	mov	sp, r7
 8110898:	bd80      	pop	{r7, pc}
 811089a:	bf00      	nop
 811089c:	10004d50 	.word	0x10004d50

081108a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81108a0:	b580      	push	{r7, lr}
 81108a2:	b088      	sub	sp, #32
 81108a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81108a6:	e049      	b.n	811093c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81108a8:	4b2e      	ldr	r3, [pc, #184]	@ (8110964 <prvSwitchTimerLists+0xc4>)
 81108aa:	681b      	ldr	r3, [r3, #0]
 81108ac:	68db      	ldr	r3, [r3, #12]
 81108ae:	681b      	ldr	r3, [r3, #0]
 81108b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81108b2:	4b2c      	ldr	r3, [pc, #176]	@ (8110964 <prvSwitchTimerLists+0xc4>)
 81108b4:	681b      	ldr	r3, [r3, #0]
 81108b6:	68db      	ldr	r3, [r3, #12]
 81108b8:	68db      	ldr	r3, [r3, #12]
 81108ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81108bc:	68fb      	ldr	r3, [r7, #12]
 81108be:	3304      	adds	r3, #4
 81108c0:	4618      	mov	r0, r3
 81108c2:	f7fd feb3 	bl	810e62c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81108c6:	68fb      	ldr	r3, [r7, #12]
 81108c8:	6a1b      	ldr	r3, [r3, #32]
 81108ca:	68f8      	ldr	r0, [r7, #12]
 81108cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81108ce:	68fb      	ldr	r3, [r7, #12]
 81108d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81108d4:	f003 0304 	and.w	r3, r3, #4
 81108d8:	2b00      	cmp	r3, #0
 81108da:	d02f      	beq.n	811093c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81108dc:	68fb      	ldr	r3, [r7, #12]
 81108de:	699b      	ldr	r3, [r3, #24]
 81108e0:	693a      	ldr	r2, [r7, #16]
 81108e2:	4413      	add	r3, r2
 81108e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81108e6:	68ba      	ldr	r2, [r7, #8]
 81108e8:	693b      	ldr	r3, [r7, #16]
 81108ea:	429a      	cmp	r2, r3
 81108ec:	d90e      	bls.n	811090c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81108ee:	68fb      	ldr	r3, [r7, #12]
 81108f0:	68ba      	ldr	r2, [r7, #8]
 81108f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81108f4:	68fb      	ldr	r3, [r7, #12]
 81108f6:	68fa      	ldr	r2, [r7, #12]
 81108f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81108fa:	4b1a      	ldr	r3, [pc, #104]	@ (8110964 <prvSwitchTimerLists+0xc4>)
 81108fc:	681a      	ldr	r2, [r3, #0]
 81108fe:	68fb      	ldr	r3, [r7, #12]
 8110900:	3304      	adds	r3, #4
 8110902:	4619      	mov	r1, r3
 8110904:	4610      	mov	r0, r2
 8110906:	f7fd fe58 	bl	810e5ba <vListInsert>
 811090a:	e017      	b.n	811093c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 811090c:	2300      	movs	r3, #0
 811090e:	9300      	str	r3, [sp, #0]
 8110910:	2300      	movs	r3, #0
 8110912:	693a      	ldr	r2, [r7, #16]
 8110914:	2100      	movs	r1, #0
 8110916:	68f8      	ldr	r0, [r7, #12]
 8110918:	f7ff fd58 	bl	81103cc <xTimerGenericCommand>
 811091c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 811091e:	687b      	ldr	r3, [r7, #4]
 8110920:	2b00      	cmp	r3, #0
 8110922:	d10b      	bne.n	811093c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8110924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110928:	f383 8811 	msr	BASEPRI, r3
 811092c:	f3bf 8f6f 	isb	sy
 8110930:	f3bf 8f4f 	dsb	sy
 8110934:	603b      	str	r3, [r7, #0]
}
 8110936:	bf00      	nop
 8110938:	bf00      	nop
 811093a:	e7fd      	b.n	8110938 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 811093c:	4b09      	ldr	r3, [pc, #36]	@ (8110964 <prvSwitchTimerLists+0xc4>)
 811093e:	681b      	ldr	r3, [r3, #0]
 8110940:	681b      	ldr	r3, [r3, #0]
 8110942:	2b00      	cmp	r3, #0
 8110944:	d1b0      	bne.n	81108a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8110946:	4b07      	ldr	r3, [pc, #28]	@ (8110964 <prvSwitchTimerLists+0xc4>)
 8110948:	681b      	ldr	r3, [r3, #0]
 811094a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 811094c:	4b06      	ldr	r3, [pc, #24]	@ (8110968 <prvSwitchTimerLists+0xc8>)
 811094e:	681b      	ldr	r3, [r3, #0]
 8110950:	4a04      	ldr	r2, [pc, #16]	@ (8110964 <prvSwitchTimerLists+0xc4>)
 8110952:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8110954:	4a04      	ldr	r2, [pc, #16]	@ (8110968 <prvSwitchTimerLists+0xc8>)
 8110956:	697b      	ldr	r3, [r7, #20]
 8110958:	6013      	str	r3, [r2, #0]
}
 811095a:	bf00      	nop
 811095c:	3718      	adds	r7, #24
 811095e:	46bd      	mov	sp, r7
 8110960:	bd80      	pop	{r7, pc}
 8110962:	bf00      	nop
 8110964:	10004d48 	.word	0x10004d48
 8110968:	10004d4c 	.word	0x10004d4c

0811096c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 811096c:	b580      	push	{r7, lr}
 811096e:	b082      	sub	sp, #8
 8110970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8110972:	f7fd ffb9 	bl	810e8e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8110976:	4b15      	ldr	r3, [pc, #84]	@ (81109cc <prvCheckForValidListAndQueue+0x60>)
 8110978:	681b      	ldr	r3, [r3, #0]
 811097a:	2b00      	cmp	r3, #0
 811097c:	d120      	bne.n	81109c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 811097e:	4814      	ldr	r0, [pc, #80]	@ (81109d0 <prvCheckForValidListAndQueue+0x64>)
 8110980:	f7fd fdca 	bl	810e518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8110984:	4813      	ldr	r0, [pc, #76]	@ (81109d4 <prvCheckForValidListAndQueue+0x68>)
 8110986:	f7fd fdc7 	bl	810e518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 811098a:	4b13      	ldr	r3, [pc, #76]	@ (81109d8 <prvCheckForValidListAndQueue+0x6c>)
 811098c:	4a10      	ldr	r2, [pc, #64]	@ (81109d0 <prvCheckForValidListAndQueue+0x64>)
 811098e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8110990:	4b12      	ldr	r3, [pc, #72]	@ (81109dc <prvCheckForValidListAndQueue+0x70>)
 8110992:	4a10      	ldr	r2, [pc, #64]	@ (81109d4 <prvCheckForValidListAndQueue+0x68>)
 8110994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8110996:	2300      	movs	r3, #0
 8110998:	9300      	str	r3, [sp, #0]
 811099a:	4b11      	ldr	r3, [pc, #68]	@ (81109e0 <prvCheckForValidListAndQueue+0x74>)
 811099c:	4a11      	ldr	r2, [pc, #68]	@ (81109e4 <prvCheckForValidListAndQueue+0x78>)
 811099e:	2110      	movs	r1, #16
 81109a0:	200a      	movs	r0, #10
 81109a2:	f7fe f92d 	bl	810ec00 <xQueueGenericCreateStatic>
 81109a6:	4603      	mov	r3, r0
 81109a8:	4a08      	ldr	r2, [pc, #32]	@ (81109cc <prvCheckForValidListAndQueue+0x60>)
 81109aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81109ac:	4b07      	ldr	r3, [pc, #28]	@ (81109cc <prvCheckForValidListAndQueue+0x60>)
 81109ae:	681b      	ldr	r3, [r3, #0]
 81109b0:	2b00      	cmp	r3, #0
 81109b2:	d005      	beq.n	81109c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81109b4:	4b05      	ldr	r3, [pc, #20]	@ (81109cc <prvCheckForValidListAndQueue+0x60>)
 81109b6:	681b      	ldr	r3, [r3, #0]
 81109b8:	490b      	ldr	r1, [pc, #44]	@ (81109e8 <prvCheckForValidListAndQueue+0x7c>)
 81109ba:	4618      	mov	r0, r3
 81109bc:	f7fe fd52 	bl	810f464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81109c0:	f7fd ffc4 	bl	810e94c <vPortExitCritical>
}
 81109c4:	bf00      	nop
 81109c6:	46bd      	mov	sp, r7
 81109c8:	bd80      	pop	{r7, pc}
 81109ca:	bf00      	nop
 81109cc:	10004d50 	.word	0x10004d50
 81109d0:	10004d20 	.word	0x10004d20
 81109d4:	10004d34 	.word	0x10004d34
 81109d8:	10004d48 	.word	0x10004d48
 81109dc:	10004d4c 	.word	0x10004d4c
 81109e0:	10004dfc 	.word	0x10004dfc
 81109e4:	10004d5c 	.word	0x10004d5c
 81109e8:	0811208c 	.word	0x0811208c

081109ec <std>:
 81109ec:	2300      	movs	r3, #0
 81109ee:	b510      	push	{r4, lr}
 81109f0:	4604      	mov	r4, r0
 81109f2:	e9c0 3300 	strd	r3, r3, [r0]
 81109f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81109fa:	6083      	str	r3, [r0, #8]
 81109fc:	8181      	strh	r1, [r0, #12]
 81109fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8110a00:	81c2      	strh	r2, [r0, #14]
 8110a02:	6183      	str	r3, [r0, #24]
 8110a04:	4619      	mov	r1, r3
 8110a06:	2208      	movs	r2, #8
 8110a08:	305c      	adds	r0, #92	@ 0x5c
 8110a0a:	f000 fa1b 	bl	8110e44 <memset>
 8110a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8110a44 <std+0x58>)
 8110a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8110a12:	4b0d      	ldr	r3, [pc, #52]	@ (8110a48 <std+0x5c>)
 8110a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8110a16:	4b0d      	ldr	r3, [pc, #52]	@ (8110a4c <std+0x60>)
 8110a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8110a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8110a50 <std+0x64>)
 8110a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8110a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8110a54 <std+0x68>)
 8110a20:	6224      	str	r4, [r4, #32]
 8110a22:	429c      	cmp	r4, r3
 8110a24:	d006      	beq.n	8110a34 <std+0x48>
 8110a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8110a2a:	4294      	cmp	r4, r2
 8110a2c:	d002      	beq.n	8110a34 <std+0x48>
 8110a2e:	33d0      	adds	r3, #208	@ 0xd0
 8110a30:	429c      	cmp	r4, r3
 8110a32:	d105      	bne.n	8110a40 <std+0x54>
 8110a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8110a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110a3c:	f000 ba7a 	b.w	8110f34 <__retarget_lock_init_recursive>
 8110a40:	bd10      	pop	{r4, pc}
 8110a42:	bf00      	nop
 8110a44:	08110c95 	.word	0x08110c95
 8110a48:	08110cb7 	.word	0x08110cb7
 8110a4c:	08110cef 	.word	0x08110cef
 8110a50:	08110d13 	.word	0x08110d13
 8110a54:	10004e4c 	.word	0x10004e4c

08110a58 <stdio_exit_handler>:
 8110a58:	4a02      	ldr	r2, [pc, #8]	@ (8110a64 <stdio_exit_handler+0xc>)
 8110a5a:	4903      	ldr	r1, [pc, #12]	@ (8110a68 <stdio_exit_handler+0x10>)
 8110a5c:	4803      	ldr	r0, [pc, #12]	@ (8110a6c <stdio_exit_handler+0x14>)
 8110a5e:	f000 b869 	b.w	8110b34 <_fwalk_sglue>
 8110a62:	bf00      	nop
 8110a64:	10000018 	.word	0x10000018
 8110a68:	08111a9d 	.word	0x08111a9d
 8110a6c:	10000028 	.word	0x10000028

08110a70 <cleanup_stdio>:
 8110a70:	6841      	ldr	r1, [r0, #4]
 8110a72:	4b0c      	ldr	r3, [pc, #48]	@ (8110aa4 <cleanup_stdio+0x34>)
 8110a74:	4299      	cmp	r1, r3
 8110a76:	b510      	push	{r4, lr}
 8110a78:	4604      	mov	r4, r0
 8110a7a:	d001      	beq.n	8110a80 <cleanup_stdio+0x10>
 8110a7c:	f001 f80e 	bl	8111a9c <_fflush_r>
 8110a80:	68a1      	ldr	r1, [r4, #8]
 8110a82:	4b09      	ldr	r3, [pc, #36]	@ (8110aa8 <cleanup_stdio+0x38>)
 8110a84:	4299      	cmp	r1, r3
 8110a86:	d002      	beq.n	8110a8e <cleanup_stdio+0x1e>
 8110a88:	4620      	mov	r0, r4
 8110a8a:	f001 f807 	bl	8111a9c <_fflush_r>
 8110a8e:	68e1      	ldr	r1, [r4, #12]
 8110a90:	4b06      	ldr	r3, [pc, #24]	@ (8110aac <cleanup_stdio+0x3c>)
 8110a92:	4299      	cmp	r1, r3
 8110a94:	d004      	beq.n	8110aa0 <cleanup_stdio+0x30>
 8110a96:	4620      	mov	r0, r4
 8110a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110a9c:	f000 bffe 	b.w	8111a9c <_fflush_r>
 8110aa0:	bd10      	pop	{r4, pc}
 8110aa2:	bf00      	nop
 8110aa4:	10004e4c 	.word	0x10004e4c
 8110aa8:	10004eb4 	.word	0x10004eb4
 8110aac:	10004f1c 	.word	0x10004f1c

08110ab0 <global_stdio_init.part.0>:
 8110ab0:	b510      	push	{r4, lr}
 8110ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8110ae0 <global_stdio_init.part.0+0x30>)
 8110ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8110ae4 <global_stdio_init.part.0+0x34>)
 8110ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8110ae8 <global_stdio_init.part.0+0x38>)
 8110ab8:	601a      	str	r2, [r3, #0]
 8110aba:	4620      	mov	r0, r4
 8110abc:	2200      	movs	r2, #0
 8110abe:	2104      	movs	r1, #4
 8110ac0:	f7ff ff94 	bl	81109ec <std>
 8110ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8110ac8:	2201      	movs	r2, #1
 8110aca:	2109      	movs	r1, #9
 8110acc:	f7ff ff8e 	bl	81109ec <std>
 8110ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8110ad4:	2202      	movs	r2, #2
 8110ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110ada:	2112      	movs	r1, #18
 8110adc:	f7ff bf86 	b.w	81109ec <std>
 8110ae0:	10004f84 	.word	0x10004f84
 8110ae4:	10004e4c 	.word	0x10004e4c
 8110ae8:	08110a59 	.word	0x08110a59

08110aec <__sfp_lock_acquire>:
 8110aec:	4801      	ldr	r0, [pc, #4]	@ (8110af4 <__sfp_lock_acquire+0x8>)
 8110aee:	f000 ba22 	b.w	8110f36 <__retarget_lock_acquire_recursive>
 8110af2:	bf00      	nop
 8110af4:	10004f8d 	.word	0x10004f8d

08110af8 <__sfp_lock_release>:
 8110af8:	4801      	ldr	r0, [pc, #4]	@ (8110b00 <__sfp_lock_release+0x8>)
 8110afa:	f000 ba1d 	b.w	8110f38 <__retarget_lock_release_recursive>
 8110afe:	bf00      	nop
 8110b00:	10004f8d 	.word	0x10004f8d

08110b04 <__sinit>:
 8110b04:	b510      	push	{r4, lr}
 8110b06:	4604      	mov	r4, r0
 8110b08:	f7ff fff0 	bl	8110aec <__sfp_lock_acquire>
 8110b0c:	6a23      	ldr	r3, [r4, #32]
 8110b0e:	b11b      	cbz	r3, 8110b18 <__sinit+0x14>
 8110b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110b14:	f7ff bff0 	b.w	8110af8 <__sfp_lock_release>
 8110b18:	4b04      	ldr	r3, [pc, #16]	@ (8110b2c <__sinit+0x28>)
 8110b1a:	6223      	str	r3, [r4, #32]
 8110b1c:	4b04      	ldr	r3, [pc, #16]	@ (8110b30 <__sinit+0x2c>)
 8110b1e:	681b      	ldr	r3, [r3, #0]
 8110b20:	2b00      	cmp	r3, #0
 8110b22:	d1f5      	bne.n	8110b10 <__sinit+0xc>
 8110b24:	f7ff ffc4 	bl	8110ab0 <global_stdio_init.part.0>
 8110b28:	e7f2      	b.n	8110b10 <__sinit+0xc>
 8110b2a:	bf00      	nop
 8110b2c:	08110a71 	.word	0x08110a71
 8110b30:	10004f84 	.word	0x10004f84

08110b34 <_fwalk_sglue>:
 8110b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8110b38:	4607      	mov	r7, r0
 8110b3a:	4688      	mov	r8, r1
 8110b3c:	4614      	mov	r4, r2
 8110b3e:	2600      	movs	r6, #0
 8110b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8110b44:	f1b9 0901 	subs.w	r9, r9, #1
 8110b48:	d505      	bpl.n	8110b56 <_fwalk_sglue+0x22>
 8110b4a:	6824      	ldr	r4, [r4, #0]
 8110b4c:	2c00      	cmp	r4, #0
 8110b4e:	d1f7      	bne.n	8110b40 <_fwalk_sglue+0xc>
 8110b50:	4630      	mov	r0, r6
 8110b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8110b56:	89ab      	ldrh	r3, [r5, #12]
 8110b58:	2b01      	cmp	r3, #1
 8110b5a:	d907      	bls.n	8110b6c <_fwalk_sglue+0x38>
 8110b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8110b60:	3301      	adds	r3, #1
 8110b62:	d003      	beq.n	8110b6c <_fwalk_sglue+0x38>
 8110b64:	4629      	mov	r1, r5
 8110b66:	4638      	mov	r0, r7
 8110b68:	47c0      	blx	r8
 8110b6a:	4306      	orrs	r6, r0
 8110b6c:	3568      	adds	r5, #104	@ 0x68
 8110b6e:	e7e9      	b.n	8110b44 <_fwalk_sglue+0x10>

08110b70 <iprintf>:
 8110b70:	b40f      	push	{r0, r1, r2, r3}
 8110b72:	b507      	push	{r0, r1, r2, lr}
 8110b74:	4906      	ldr	r1, [pc, #24]	@ (8110b90 <iprintf+0x20>)
 8110b76:	ab04      	add	r3, sp, #16
 8110b78:	6808      	ldr	r0, [r1, #0]
 8110b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8110b7e:	6881      	ldr	r1, [r0, #8]
 8110b80:	9301      	str	r3, [sp, #4]
 8110b82:	f000 fc63 	bl	811144c <_vfiprintf_r>
 8110b86:	b003      	add	sp, #12
 8110b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8110b8c:	b004      	add	sp, #16
 8110b8e:	4770      	bx	lr
 8110b90:	10000024 	.word	0x10000024

08110b94 <_puts_r>:
 8110b94:	6a03      	ldr	r3, [r0, #32]
 8110b96:	b570      	push	{r4, r5, r6, lr}
 8110b98:	6884      	ldr	r4, [r0, #8]
 8110b9a:	4605      	mov	r5, r0
 8110b9c:	460e      	mov	r6, r1
 8110b9e:	b90b      	cbnz	r3, 8110ba4 <_puts_r+0x10>
 8110ba0:	f7ff ffb0 	bl	8110b04 <__sinit>
 8110ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8110ba6:	07db      	lsls	r3, r3, #31
 8110ba8:	d405      	bmi.n	8110bb6 <_puts_r+0x22>
 8110baa:	89a3      	ldrh	r3, [r4, #12]
 8110bac:	0598      	lsls	r0, r3, #22
 8110bae:	d402      	bmi.n	8110bb6 <_puts_r+0x22>
 8110bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110bb2:	f000 f9c0 	bl	8110f36 <__retarget_lock_acquire_recursive>
 8110bb6:	89a3      	ldrh	r3, [r4, #12]
 8110bb8:	0719      	lsls	r1, r3, #28
 8110bba:	d502      	bpl.n	8110bc2 <_puts_r+0x2e>
 8110bbc:	6923      	ldr	r3, [r4, #16]
 8110bbe:	2b00      	cmp	r3, #0
 8110bc0:	d135      	bne.n	8110c2e <_puts_r+0x9a>
 8110bc2:	4621      	mov	r1, r4
 8110bc4:	4628      	mov	r0, r5
 8110bc6:	f000 f8e7 	bl	8110d98 <__swsetup_r>
 8110bca:	b380      	cbz	r0, 8110c2e <_puts_r+0x9a>
 8110bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8110bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8110bd2:	07da      	lsls	r2, r3, #31
 8110bd4:	d405      	bmi.n	8110be2 <_puts_r+0x4e>
 8110bd6:	89a3      	ldrh	r3, [r4, #12]
 8110bd8:	059b      	lsls	r3, r3, #22
 8110bda:	d402      	bmi.n	8110be2 <_puts_r+0x4e>
 8110bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110bde:	f000 f9ab 	bl	8110f38 <__retarget_lock_release_recursive>
 8110be2:	4628      	mov	r0, r5
 8110be4:	bd70      	pop	{r4, r5, r6, pc}
 8110be6:	2b00      	cmp	r3, #0
 8110be8:	da04      	bge.n	8110bf4 <_puts_r+0x60>
 8110bea:	69a2      	ldr	r2, [r4, #24]
 8110bec:	429a      	cmp	r2, r3
 8110bee:	dc17      	bgt.n	8110c20 <_puts_r+0x8c>
 8110bf0:	290a      	cmp	r1, #10
 8110bf2:	d015      	beq.n	8110c20 <_puts_r+0x8c>
 8110bf4:	6823      	ldr	r3, [r4, #0]
 8110bf6:	1c5a      	adds	r2, r3, #1
 8110bf8:	6022      	str	r2, [r4, #0]
 8110bfa:	7019      	strb	r1, [r3, #0]
 8110bfc:	68a3      	ldr	r3, [r4, #8]
 8110bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8110c02:	3b01      	subs	r3, #1
 8110c04:	60a3      	str	r3, [r4, #8]
 8110c06:	2900      	cmp	r1, #0
 8110c08:	d1ed      	bne.n	8110be6 <_puts_r+0x52>
 8110c0a:	2b00      	cmp	r3, #0
 8110c0c:	da11      	bge.n	8110c32 <_puts_r+0x9e>
 8110c0e:	4622      	mov	r2, r4
 8110c10:	210a      	movs	r1, #10
 8110c12:	4628      	mov	r0, r5
 8110c14:	f000 f881 	bl	8110d1a <__swbuf_r>
 8110c18:	3001      	adds	r0, #1
 8110c1a:	d0d7      	beq.n	8110bcc <_puts_r+0x38>
 8110c1c:	250a      	movs	r5, #10
 8110c1e:	e7d7      	b.n	8110bd0 <_puts_r+0x3c>
 8110c20:	4622      	mov	r2, r4
 8110c22:	4628      	mov	r0, r5
 8110c24:	f000 f879 	bl	8110d1a <__swbuf_r>
 8110c28:	3001      	adds	r0, #1
 8110c2a:	d1e7      	bne.n	8110bfc <_puts_r+0x68>
 8110c2c:	e7ce      	b.n	8110bcc <_puts_r+0x38>
 8110c2e:	3e01      	subs	r6, #1
 8110c30:	e7e4      	b.n	8110bfc <_puts_r+0x68>
 8110c32:	6823      	ldr	r3, [r4, #0]
 8110c34:	1c5a      	adds	r2, r3, #1
 8110c36:	6022      	str	r2, [r4, #0]
 8110c38:	220a      	movs	r2, #10
 8110c3a:	701a      	strb	r2, [r3, #0]
 8110c3c:	e7ee      	b.n	8110c1c <_puts_r+0x88>
	...

08110c40 <puts>:
 8110c40:	4b02      	ldr	r3, [pc, #8]	@ (8110c4c <puts+0xc>)
 8110c42:	4601      	mov	r1, r0
 8110c44:	6818      	ldr	r0, [r3, #0]
 8110c46:	f7ff bfa5 	b.w	8110b94 <_puts_r>
 8110c4a:	bf00      	nop
 8110c4c:	10000024 	.word	0x10000024

08110c50 <siprintf>:
 8110c50:	b40e      	push	{r1, r2, r3}
 8110c52:	b510      	push	{r4, lr}
 8110c54:	b09d      	sub	sp, #116	@ 0x74
 8110c56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8110c58:	9002      	str	r0, [sp, #8]
 8110c5a:	9006      	str	r0, [sp, #24]
 8110c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8110c60:	480a      	ldr	r0, [pc, #40]	@ (8110c8c <siprintf+0x3c>)
 8110c62:	9107      	str	r1, [sp, #28]
 8110c64:	9104      	str	r1, [sp, #16]
 8110c66:	490a      	ldr	r1, [pc, #40]	@ (8110c90 <siprintf+0x40>)
 8110c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8110c6c:	9105      	str	r1, [sp, #20]
 8110c6e:	2400      	movs	r4, #0
 8110c70:	a902      	add	r1, sp, #8
 8110c72:	6800      	ldr	r0, [r0, #0]
 8110c74:	9301      	str	r3, [sp, #4]
 8110c76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8110c78:	f000 fac2 	bl	8111200 <_svfiprintf_r>
 8110c7c:	9b02      	ldr	r3, [sp, #8]
 8110c7e:	701c      	strb	r4, [r3, #0]
 8110c80:	b01d      	add	sp, #116	@ 0x74
 8110c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110c86:	b003      	add	sp, #12
 8110c88:	4770      	bx	lr
 8110c8a:	bf00      	nop
 8110c8c:	10000024 	.word	0x10000024
 8110c90:	ffff0208 	.word	0xffff0208

08110c94 <__sread>:
 8110c94:	b510      	push	{r4, lr}
 8110c96:	460c      	mov	r4, r1
 8110c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110c9c:	f000 f8fc 	bl	8110e98 <_read_r>
 8110ca0:	2800      	cmp	r0, #0
 8110ca2:	bfab      	itete	ge
 8110ca4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8110ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8110ca8:	181b      	addge	r3, r3, r0
 8110caa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8110cae:	bfac      	ite	ge
 8110cb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8110cb2:	81a3      	strhlt	r3, [r4, #12]
 8110cb4:	bd10      	pop	{r4, pc}

08110cb6 <__swrite>:
 8110cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110cba:	461f      	mov	r7, r3
 8110cbc:	898b      	ldrh	r3, [r1, #12]
 8110cbe:	05db      	lsls	r3, r3, #23
 8110cc0:	4605      	mov	r5, r0
 8110cc2:	460c      	mov	r4, r1
 8110cc4:	4616      	mov	r6, r2
 8110cc6:	d505      	bpl.n	8110cd4 <__swrite+0x1e>
 8110cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110ccc:	2302      	movs	r3, #2
 8110cce:	2200      	movs	r2, #0
 8110cd0:	f000 f8d0 	bl	8110e74 <_lseek_r>
 8110cd4:	89a3      	ldrh	r3, [r4, #12]
 8110cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8110cda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8110cde:	81a3      	strh	r3, [r4, #12]
 8110ce0:	4632      	mov	r2, r6
 8110ce2:	463b      	mov	r3, r7
 8110ce4:	4628      	mov	r0, r5
 8110ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110cea:	f000 b8e7 	b.w	8110ebc <_write_r>

08110cee <__sseek>:
 8110cee:	b510      	push	{r4, lr}
 8110cf0:	460c      	mov	r4, r1
 8110cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110cf6:	f000 f8bd 	bl	8110e74 <_lseek_r>
 8110cfa:	1c43      	adds	r3, r0, #1
 8110cfc:	89a3      	ldrh	r3, [r4, #12]
 8110cfe:	bf15      	itete	ne
 8110d00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8110d02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8110d06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8110d0a:	81a3      	strheq	r3, [r4, #12]
 8110d0c:	bf18      	it	ne
 8110d0e:	81a3      	strhne	r3, [r4, #12]
 8110d10:	bd10      	pop	{r4, pc}

08110d12 <__sclose>:
 8110d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110d16:	f000 b89d 	b.w	8110e54 <_close_r>

08110d1a <__swbuf_r>:
 8110d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110d1c:	460e      	mov	r6, r1
 8110d1e:	4614      	mov	r4, r2
 8110d20:	4605      	mov	r5, r0
 8110d22:	b118      	cbz	r0, 8110d2c <__swbuf_r+0x12>
 8110d24:	6a03      	ldr	r3, [r0, #32]
 8110d26:	b90b      	cbnz	r3, 8110d2c <__swbuf_r+0x12>
 8110d28:	f7ff feec 	bl	8110b04 <__sinit>
 8110d2c:	69a3      	ldr	r3, [r4, #24]
 8110d2e:	60a3      	str	r3, [r4, #8]
 8110d30:	89a3      	ldrh	r3, [r4, #12]
 8110d32:	071a      	lsls	r2, r3, #28
 8110d34:	d501      	bpl.n	8110d3a <__swbuf_r+0x20>
 8110d36:	6923      	ldr	r3, [r4, #16]
 8110d38:	b943      	cbnz	r3, 8110d4c <__swbuf_r+0x32>
 8110d3a:	4621      	mov	r1, r4
 8110d3c:	4628      	mov	r0, r5
 8110d3e:	f000 f82b 	bl	8110d98 <__swsetup_r>
 8110d42:	b118      	cbz	r0, 8110d4c <__swbuf_r+0x32>
 8110d44:	f04f 37ff 	mov.w	r7, #4294967295
 8110d48:	4638      	mov	r0, r7
 8110d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8110d4c:	6823      	ldr	r3, [r4, #0]
 8110d4e:	6922      	ldr	r2, [r4, #16]
 8110d50:	1a98      	subs	r0, r3, r2
 8110d52:	6963      	ldr	r3, [r4, #20]
 8110d54:	b2f6      	uxtb	r6, r6
 8110d56:	4283      	cmp	r3, r0
 8110d58:	4637      	mov	r7, r6
 8110d5a:	dc05      	bgt.n	8110d68 <__swbuf_r+0x4e>
 8110d5c:	4621      	mov	r1, r4
 8110d5e:	4628      	mov	r0, r5
 8110d60:	f000 fe9c 	bl	8111a9c <_fflush_r>
 8110d64:	2800      	cmp	r0, #0
 8110d66:	d1ed      	bne.n	8110d44 <__swbuf_r+0x2a>
 8110d68:	68a3      	ldr	r3, [r4, #8]
 8110d6a:	3b01      	subs	r3, #1
 8110d6c:	60a3      	str	r3, [r4, #8]
 8110d6e:	6823      	ldr	r3, [r4, #0]
 8110d70:	1c5a      	adds	r2, r3, #1
 8110d72:	6022      	str	r2, [r4, #0]
 8110d74:	701e      	strb	r6, [r3, #0]
 8110d76:	6962      	ldr	r2, [r4, #20]
 8110d78:	1c43      	adds	r3, r0, #1
 8110d7a:	429a      	cmp	r2, r3
 8110d7c:	d004      	beq.n	8110d88 <__swbuf_r+0x6e>
 8110d7e:	89a3      	ldrh	r3, [r4, #12]
 8110d80:	07db      	lsls	r3, r3, #31
 8110d82:	d5e1      	bpl.n	8110d48 <__swbuf_r+0x2e>
 8110d84:	2e0a      	cmp	r6, #10
 8110d86:	d1df      	bne.n	8110d48 <__swbuf_r+0x2e>
 8110d88:	4621      	mov	r1, r4
 8110d8a:	4628      	mov	r0, r5
 8110d8c:	f000 fe86 	bl	8111a9c <_fflush_r>
 8110d90:	2800      	cmp	r0, #0
 8110d92:	d0d9      	beq.n	8110d48 <__swbuf_r+0x2e>
 8110d94:	e7d6      	b.n	8110d44 <__swbuf_r+0x2a>
	...

08110d98 <__swsetup_r>:
 8110d98:	b538      	push	{r3, r4, r5, lr}
 8110d9a:	4b29      	ldr	r3, [pc, #164]	@ (8110e40 <__swsetup_r+0xa8>)
 8110d9c:	4605      	mov	r5, r0
 8110d9e:	6818      	ldr	r0, [r3, #0]
 8110da0:	460c      	mov	r4, r1
 8110da2:	b118      	cbz	r0, 8110dac <__swsetup_r+0x14>
 8110da4:	6a03      	ldr	r3, [r0, #32]
 8110da6:	b90b      	cbnz	r3, 8110dac <__swsetup_r+0x14>
 8110da8:	f7ff feac 	bl	8110b04 <__sinit>
 8110dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110db0:	0719      	lsls	r1, r3, #28
 8110db2:	d422      	bmi.n	8110dfa <__swsetup_r+0x62>
 8110db4:	06da      	lsls	r2, r3, #27
 8110db6:	d407      	bmi.n	8110dc8 <__swsetup_r+0x30>
 8110db8:	2209      	movs	r2, #9
 8110dba:	602a      	str	r2, [r5, #0]
 8110dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110dc0:	81a3      	strh	r3, [r4, #12]
 8110dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8110dc6:	e033      	b.n	8110e30 <__swsetup_r+0x98>
 8110dc8:	0758      	lsls	r0, r3, #29
 8110dca:	d512      	bpl.n	8110df2 <__swsetup_r+0x5a>
 8110dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8110dce:	b141      	cbz	r1, 8110de2 <__swsetup_r+0x4a>
 8110dd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8110dd4:	4299      	cmp	r1, r3
 8110dd6:	d002      	beq.n	8110dde <__swsetup_r+0x46>
 8110dd8:	4628      	mov	r0, r5
 8110dda:	f000 f8bd 	bl	8110f58 <_free_r>
 8110dde:	2300      	movs	r3, #0
 8110de0:	6363      	str	r3, [r4, #52]	@ 0x34
 8110de2:	89a3      	ldrh	r3, [r4, #12]
 8110de4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8110de8:	81a3      	strh	r3, [r4, #12]
 8110dea:	2300      	movs	r3, #0
 8110dec:	6063      	str	r3, [r4, #4]
 8110dee:	6923      	ldr	r3, [r4, #16]
 8110df0:	6023      	str	r3, [r4, #0]
 8110df2:	89a3      	ldrh	r3, [r4, #12]
 8110df4:	f043 0308 	orr.w	r3, r3, #8
 8110df8:	81a3      	strh	r3, [r4, #12]
 8110dfa:	6923      	ldr	r3, [r4, #16]
 8110dfc:	b94b      	cbnz	r3, 8110e12 <__swsetup_r+0x7a>
 8110dfe:	89a3      	ldrh	r3, [r4, #12]
 8110e00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8110e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110e08:	d003      	beq.n	8110e12 <__swsetup_r+0x7a>
 8110e0a:	4621      	mov	r1, r4
 8110e0c:	4628      	mov	r0, r5
 8110e0e:	f000 fe93 	bl	8111b38 <__smakebuf_r>
 8110e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110e16:	f013 0201 	ands.w	r2, r3, #1
 8110e1a:	d00a      	beq.n	8110e32 <__swsetup_r+0x9a>
 8110e1c:	2200      	movs	r2, #0
 8110e1e:	60a2      	str	r2, [r4, #8]
 8110e20:	6962      	ldr	r2, [r4, #20]
 8110e22:	4252      	negs	r2, r2
 8110e24:	61a2      	str	r2, [r4, #24]
 8110e26:	6922      	ldr	r2, [r4, #16]
 8110e28:	b942      	cbnz	r2, 8110e3c <__swsetup_r+0xa4>
 8110e2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8110e2e:	d1c5      	bne.n	8110dbc <__swsetup_r+0x24>
 8110e30:	bd38      	pop	{r3, r4, r5, pc}
 8110e32:	0799      	lsls	r1, r3, #30
 8110e34:	bf58      	it	pl
 8110e36:	6962      	ldrpl	r2, [r4, #20]
 8110e38:	60a2      	str	r2, [r4, #8]
 8110e3a:	e7f4      	b.n	8110e26 <__swsetup_r+0x8e>
 8110e3c:	2000      	movs	r0, #0
 8110e3e:	e7f7      	b.n	8110e30 <__swsetup_r+0x98>
 8110e40:	10000024 	.word	0x10000024

08110e44 <memset>:
 8110e44:	4402      	add	r2, r0
 8110e46:	4603      	mov	r3, r0
 8110e48:	4293      	cmp	r3, r2
 8110e4a:	d100      	bne.n	8110e4e <memset+0xa>
 8110e4c:	4770      	bx	lr
 8110e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8110e52:	e7f9      	b.n	8110e48 <memset+0x4>

08110e54 <_close_r>:
 8110e54:	b538      	push	{r3, r4, r5, lr}
 8110e56:	4d06      	ldr	r5, [pc, #24]	@ (8110e70 <_close_r+0x1c>)
 8110e58:	2300      	movs	r3, #0
 8110e5a:	4604      	mov	r4, r0
 8110e5c:	4608      	mov	r0, r1
 8110e5e:	602b      	str	r3, [r5, #0]
 8110e60:	f000 ff28 	bl	8111cb4 <_close>
 8110e64:	1c43      	adds	r3, r0, #1
 8110e66:	d102      	bne.n	8110e6e <_close_r+0x1a>
 8110e68:	682b      	ldr	r3, [r5, #0]
 8110e6a:	b103      	cbz	r3, 8110e6e <_close_r+0x1a>
 8110e6c:	6023      	str	r3, [r4, #0]
 8110e6e:	bd38      	pop	{r3, r4, r5, pc}
 8110e70:	10004f88 	.word	0x10004f88

08110e74 <_lseek_r>:
 8110e74:	b538      	push	{r3, r4, r5, lr}
 8110e76:	4d07      	ldr	r5, [pc, #28]	@ (8110e94 <_lseek_r+0x20>)
 8110e78:	4604      	mov	r4, r0
 8110e7a:	4608      	mov	r0, r1
 8110e7c:	4611      	mov	r1, r2
 8110e7e:	2200      	movs	r2, #0
 8110e80:	602a      	str	r2, [r5, #0]
 8110e82:	461a      	mov	r2, r3
 8110e84:	f000 ff2e 	bl	8111ce4 <_lseek>
 8110e88:	1c43      	adds	r3, r0, #1
 8110e8a:	d102      	bne.n	8110e92 <_lseek_r+0x1e>
 8110e8c:	682b      	ldr	r3, [r5, #0]
 8110e8e:	b103      	cbz	r3, 8110e92 <_lseek_r+0x1e>
 8110e90:	6023      	str	r3, [r4, #0]
 8110e92:	bd38      	pop	{r3, r4, r5, pc}
 8110e94:	10004f88 	.word	0x10004f88

08110e98 <_read_r>:
 8110e98:	b538      	push	{r3, r4, r5, lr}
 8110e9a:	4d07      	ldr	r5, [pc, #28]	@ (8110eb8 <_read_r+0x20>)
 8110e9c:	4604      	mov	r4, r0
 8110e9e:	4608      	mov	r0, r1
 8110ea0:	4611      	mov	r1, r2
 8110ea2:	2200      	movs	r2, #0
 8110ea4:	602a      	str	r2, [r5, #0]
 8110ea6:	461a      	mov	r2, r3
 8110ea8:	f000 ff24 	bl	8111cf4 <_read>
 8110eac:	1c43      	adds	r3, r0, #1
 8110eae:	d102      	bne.n	8110eb6 <_read_r+0x1e>
 8110eb0:	682b      	ldr	r3, [r5, #0]
 8110eb2:	b103      	cbz	r3, 8110eb6 <_read_r+0x1e>
 8110eb4:	6023      	str	r3, [r4, #0]
 8110eb6:	bd38      	pop	{r3, r4, r5, pc}
 8110eb8:	10004f88 	.word	0x10004f88

08110ebc <_write_r>:
 8110ebc:	b538      	push	{r3, r4, r5, lr}
 8110ebe:	4d07      	ldr	r5, [pc, #28]	@ (8110edc <_write_r+0x20>)
 8110ec0:	4604      	mov	r4, r0
 8110ec2:	4608      	mov	r0, r1
 8110ec4:	4611      	mov	r1, r2
 8110ec6:	2200      	movs	r2, #0
 8110ec8:	602a      	str	r2, [r5, #0]
 8110eca:	461a      	mov	r2, r3
 8110ecc:	f7f0 ff0d 	bl	8101cea <_write>
 8110ed0:	1c43      	adds	r3, r0, #1
 8110ed2:	d102      	bne.n	8110eda <_write_r+0x1e>
 8110ed4:	682b      	ldr	r3, [r5, #0]
 8110ed6:	b103      	cbz	r3, 8110eda <_write_r+0x1e>
 8110ed8:	6023      	str	r3, [r4, #0]
 8110eda:	bd38      	pop	{r3, r4, r5, pc}
 8110edc:	10004f88 	.word	0x10004f88

08110ee0 <__errno>:
 8110ee0:	4b01      	ldr	r3, [pc, #4]	@ (8110ee8 <__errno+0x8>)
 8110ee2:	6818      	ldr	r0, [r3, #0]
 8110ee4:	4770      	bx	lr
 8110ee6:	bf00      	nop
 8110ee8:	10000024 	.word	0x10000024

08110eec <__libc_init_array>:
 8110eec:	b570      	push	{r4, r5, r6, lr}
 8110eee:	4d0d      	ldr	r5, [pc, #52]	@ (8110f24 <__libc_init_array+0x38>)
 8110ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8110f28 <__libc_init_array+0x3c>)
 8110ef2:	1b64      	subs	r4, r4, r5
 8110ef4:	10a4      	asrs	r4, r4, #2
 8110ef6:	2600      	movs	r6, #0
 8110ef8:	42a6      	cmp	r6, r4
 8110efa:	d109      	bne.n	8110f10 <__libc_init_array+0x24>
 8110efc:	4d0b      	ldr	r5, [pc, #44]	@ (8110f2c <__libc_init_array+0x40>)
 8110efe:	4c0c      	ldr	r4, [pc, #48]	@ (8110f30 <__libc_init_array+0x44>)
 8110f00:	f000 ff00 	bl	8111d04 <_init>
 8110f04:	1b64      	subs	r4, r4, r5
 8110f06:	10a4      	asrs	r4, r4, #2
 8110f08:	2600      	movs	r6, #0
 8110f0a:	42a6      	cmp	r6, r4
 8110f0c:	d105      	bne.n	8110f1a <__libc_init_array+0x2e>
 8110f0e:	bd70      	pop	{r4, r5, r6, pc}
 8110f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8110f14:	4798      	blx	r3
 8110f16:	3601      	adds	r6, #1
 8110f18:	e7ee      	b.n	8110ef8 <__libc_init_array+0xc>
 8110f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8110f1e:	4798      	blx	r3
 8110f20:	3601      	adds	r6, #1
 8110f22:	e7f2      	b.n	8110f0a <__libc_init_array+0x1e>
 8110f24:	08112250 	.word	0x08112250
 8110f28:	08112250 	.word	0x08112250
 8110f2c:	08112250 	.word	0x08112250
 8110f30:	08112254 	.word	0x08112254

08110f34 <__retarget_lock_init_recursive>:
 8110f34:	4770      	bx	lr

08110f36 <__retarget_lock_acquire_recursive>:
 8110f36:	4770      	bx	lr

08110f38 <__retarget_lock_release_recursive>:
 8110f38:	4770      	bx	lr

08110f3a <memcpy>:
 8110f3a:	440a      	add	r2, r1
 8110f3c:	4291      	cmp	r1, r2
 8110f3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8110f42:	d100      	bne.n	8110f46 <memcpy+0xc>
 8110f44:	4770      	bx	lr
 8110f46:	b510      	push	{r4, lr}
 8110f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8110f50:	4291      	cmp	r1, r2
 8110f52:	d1f9      	bne.n	8110f48 <memcpy+0xe>
 8110f54:	bd10      	pop	{r4, pc}
	...

08110f58 <_free_r>:
 8110f58:	b538      	push	{r3, r4, r5, lr}
 8110f5a:	4605      	mov	r5, r0
 8110f5c:	2900      	cmp	r1, #0
 8110f5e:	d041      	beq.n	8110fe4 <_free_r+0x8c>
 8110f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8110f64:	1f0c      	subs	r4, r1, #4
 8110f66:	2b00      	cmp	r3, #0
 8110f68:	bfb8      	it	lt
 8110f6a:	18e4      	addlt	r4, r4, r3
 8110f6c:	f000 f8e0 	bl	8111130 <__malloc_lock>
 8110f70:	4a1d      	ldr	r2, [pc, #116]	@ (8110fe8 <_free_r+0x90>)
 8110f72:	6813      	ldr	r3, [r2, #0]
 8110f74:	b933      	cbnz	r3, 8110f84 <_free_r+0x2c>
 8110f76:	6063      	str	r3, [r4, #4]
 8110f78:	6014      	str	r4, [r2, #0]
 8110f7a:	4628      	mov	r0, r5
 8110f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8110f80:	f000 b8dc 	b.w	811113c <__malloc_unlock>
 8110f84:	42a3      	cmp	r3, r4
 8110f86:	d908      	bls.n	8110f9a <_free_r+0x42>
 8110f88:	6820      	ldr	r0, [r4, #0]
 8110f8a:	1821      	adds	r1, r4, r0
 8110f8c:	428b      	cmp	r3, r1
 8110f8e:	bf01      	itttt	eq
 8110f90:	6819      	ldreq	r1, [r3, #0]
 8110f92:	685b      	ldreq	r3, [r3, #4]
 8110f94:	1809      	addeq	r1, r1, r0
 8110f96:	6021      	streq	r1, [r4, #0]
 8110f98:	e7ed      	b.n	8110f76 <_free_r+0x1e>
 8110f9a:	461a      	mov	r2, r3
 8110f9c:	685b      	ldr	r3, [r3, #4]
 8110f9e:	b10b      	cbz	r3, 8110fa4 <_free_r+0x4c>
 8110fa0:	42a3      	cmp	r3, r4
 8110fa2:	d9fa      	bls.n	8110f9a <_free_r+0x42>
 8110fa4:	6811      	ldr	r1, [r2, #0]
 8110fa6:	1850      	adds	r0, r2, r1
 8110fa8:	42a0      	cmp	r0, r4
 8110faa:	d10b      	bne.n	8110fc4 <_free_r+0x6c>
 8110fac:	6820      	ldr	r0, [r4, #0]
 8110fae:	4401      	add	r1, r0
 8110fb0:	1850      	adds	r0, r2, r1
 8110fb2:	4283      	cmp	r3, r0
 8110fb4:	6011      	str	r1, [r2, #0]
 8110fb6:	d1e0      	bne.n	8110f7a <_free_r+0x22>
 8110fb8:	6818      	ldr	r0, [r3, #0]
 8110fba:	685b      	ldr	r3, [r3, #4]
 8110fbc:	6053      	str	r3, [r2, #4]
 8110fbe:	4408      	add	r0, r1
 8110fc0:	6010      	str	r0, [r2, #0]
 8110fc2:	e7da      	b.n	8110f7a <_free_r+0x22>
 8110fc4:	d902      	bls.n	8110fcc <_free_r+0x74>
 8110fc6:	230c      	movs	r3, #12
 8110fc8:	602b      	str	r3, [r5, #0]
 8110fca:	e7d6      	b.n	8110f7a <_free_r+0x22>
 8110fcc:	6820      	ldr	r0, [r4, #0]
 8110fce:	1821      	adds	r1, r4, r0
 8110fd0:	428b      	cmp	r3, r1
 8110fd2:	bf04      	itt	eq
 8110fd4:	6819      	ldreq	r1, [r3, #0]
 8110fd6:	685b      	ldreq	r3, [r3, #4]
 8110fd8:	6063      	str	r3, [r4, #4]
 8110fda:	bf04      	itt	eq
 8110fdc:	1809      	addeq	r1, r1, r0
 8110fde:	6021      	streq	r1, [r4, #0]
 8110fe0:	6054      	str	r4, [r2, #4]
 8110fe2:	e7ca      	b.n	8110f7a <_free_r+0x22>
 8110fe4:	bd38      	pop	{r3, r4, r5, pc}
 8110fe6:	bf00      	nop
 8110fe8:	10004f94 	.word	0x10004f94

08110fec <sbrk_aligned>:
 8110fec:	b570      	push	{r4, r5, r6, lr}
 8110fee:	4e0f      	ldr	r6, [pc, #60]	@ (811102c <sbrk_aligned+0x40>)
 8110ff0:	460c      	mov	r4, r1
 8110ff2:	6831      	ldr	r1, [r6, #0]
 8110ff4:	4605      	mov	r5, r0
 8110ff6:	b911      	cbnz	r1, 8110ffe <sbrk_aligned+0x12>
 8110ff8:	f000 fe16 	bl	8111c28 <_sbrk_r>
 8110ffc:	6030      	str	r0, [r6, #0]
 8110ffe:	4621      	mov	r1, r4
 8111000:	4628      	mov	r0, r5
 8111002:	f000 fe11 	bl	8111c28 <_sbrk_r>
 8111006:	1c43      	adds	r3, r0, #1
 8111008:	d103      	bne.n	8111012 <sbrk_aligned+0x26>
 811100a:	f04f 34ff 	mov.w	r4, #4294967295
 811100e:	4620      	mov	r0, r4
 8111010:	bd70      	pop	{r4, r5, r6, pc}
 8111012:	1cc4      	adds	r4, r0, #3
 8111014:	f024 0403 	bic.w	r4, r4, #3
 8111018:	42a0      	cmp	r0, r4
 811101a:	d0f8      	beq.n	811100e <sbrk_aligned+0x22>
 811101c:	1a21      	subs	r1, r4, r0
 811101e:	4628      	mov	r0, r5
 8111020:	f000 fe02 	bl	8111c28 <_sbrk_r>
 8111024:	3001      	adds	r0, #1
 8111026:	d1f2      	bne.n	811100e <sbrk_aligned+0x22>
 8111028:	e7ef      	b.n	811100a <sbrk_aligned+0x1e>
 811102a:	bf00      	nop
 811102c:	10004f90 	.word	0x10004f90

08111030 <_malloc_r>:
 8111030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111034:	1ccd      	adds	r5, r1, #3
 8111036:	f025 0503 	bic.w	r5, r5, #3
 811103a:	3508      	adds	r5, #8
 811103c:	2d0c      	cmp	r5, #12
 811103e:	bf38      	it	cc
 8111040:	250c      	movcc	r5, #12
 8111042:	2d00      	cmp	r5, #0
 8111044:	4606      	mov	r6, r0
 8111046:	db01      	blt.n	811104c <_malloc_r+0x1c>
 8111048:	42a9      	cmp	r1, r5
 811104a:	d904      	bls.n	8111056 <_malloc_r+0x26>
 811104c:	230c      	movs	r3, #12
 811104e:	6033      	str	r3, [r6, #0]
 8111050:	2000      	movs	r0, #0
 8111052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 811112c <_malloc_r+0xfc>
 811105a:	f000 f869 	bl	8111130 <__malloc_lock>
 811105e:	f8d8 3000 	ldr.w	r3, [r8]
 8111062:	461c      	mov	r4, r3
 8111064:	bb44      	cbnz	r4, 81110b8 <_malloc_r+0x88>
 8111066:	4629      	mov	r1, r5
 8111068:	4630      	mov	r0, r6
 811106a:	f7ff ffbf 	bl	8110fec <sbrk_aligned>
 811106e:	1c43      	adds	r3, r0, #1
 8111070:	4604      	mov	r4, r0
 8111072:	d158      	bne.n	8111126 <_malloc_r+0xf6>
 8111074:	f8d8 4000 	ldr.w	r4, [r8]
 8111078:	4627      	mov	r7, r4
 811107a:	2f00      	cmp	r7, #0
 811107c:	d143      	bne.n	8111106 <_malloc_r+0xd6>
 811107e:	2c00      	cmp	r4, #0
 8111080:	d04b      	beq.n	811111a <_malloc_r+0xea>
 8111082:	6823      	ldr	r3, [r4, #0]
 8111084:	4639      	mov	r1, r7
 8111086:	4630      	mov	r0, r6
 8111088:	eb04 0903 	add.w	r9, r4, r3
 811108c:	f000 fdcc 	bl	8111c28 <_sbrk_r>
 8111090:	4581      	cmp	r9, r0
 8111092:	d142      	bne.n	811111a <_malloc_r+0xea>
 8111094:	6821      	ldr	r1, [r4, #0]
 8111096:	1a6d      	subs	r5, r5, r1
 8111098:	4629      	mov	r1, r5
 811109a:	4630      	mov	r0, r6
 811109c:	f7ff ffa6 	bl	8110fec <sbrk_aligned>
 81110a0:	3001      	adds	r0, #1
 81110a2:	d03a      	beq.n	811111a <_malloc_r+0xea>
 81110a4:	6823      	ldr	r3, [r4, #0]
 81110a6:	442b      	add	r3, r5
 81110a8:	6023      	str	r3, [r4, #0]
 81110aa:	f8d8 3000 	ldr.w	r3, [r8]
 81110ae:	685a      	ldr	r2, [r3, #4]
 81110b0:	bb62      	cbnz	r2, 811110c <_malloc_r+0xdc>
 81110b2:	f8c8 7000 	str.w	r7, [r8]
 81110b6:	e00f      	b.n	81110d8 <_malloc_r+0xa8>
 81110b8:	6822      	ldr	r2, [r4, #0]
 81110ba:	1b52      	subs	r2, r2, r5
 81110bc:	d420      	bmi.n	8111100 <_malloc_r+0xd0>
 81110be:	2a0b      	cmp	r2, #11
 81110c0:	d917      	bls.n	81110f2 <_malloc_r+0xc2>
 81110c2:	1961      	adds	r1, r4, r5
 81110c4:	42a3      	cmp	r3, r4
 81110c6:	6025      	str	r5, [r4, #0]
 81110c8:	bf18      	it	ne
 81110ca:	6059      	strne	r1, [r3, #4]
 81110cc:	6863      	ldr	r3, [r4, #4]
 81110ce:	bf08      	it	eq
 81110d0:	f8c8 1000 	streq.w	r1, [r8]
 81110d4:	5162      	str	r2, [r4, r5]
 81110d6:	604b      	str	r3, [r1, #4]
 81110d8:	4630      	mov	r0, r6
 81110da:	f000 f82f 	bl	811113c <__malloc_unlock>
 81110de:	f104 000b 	add.w	r0, r4, #11
 81110e2:	1d23      	adds	r3, r4, #4
 81110e4:	f020 0007 	bic.w	r0, r0, #7
 81110e8:	1ac2      	subs	r2, r0, r3
 81110ea:	bf1c      	itt	ne
 81110ec:	1a1b      	subne	r3, r3, r0
 81110ee:	50a3      	strne	r3, [r4, r2]
 81110f0:	e7af      	b.n	8111052 <_malloc_r+0x22>
 81110f2:	6862      	ldr	r2, [r4, #4]
 81110f4:	42a3      	cmp	r3, r4
 81110f6:	bf0c      	ite	eq
 81110f8:	f8c8 2000 	streq.w	r2, [r8]
 81110fc:	605a      	strne	r2, [r3, #4]
 81110fe:	e7eb      	b.n	81110d8 <_malloc_r+0xa8>
 8111100:	4623      	mov	r3, r4
 8111102:	6864      	ldr	r4, [r4, #4]
 8111104:	e7ae      	b.n	8111064 <_malloc_r+0x34>
 8111106:	463c      	mov	r4, r7
 8111108:	687f      	ldr	r7, [r7, #4]
 811110a:	e7b6      	b.n	811107a <_malloc_r+0x4a>
 811110c:	461a      	mov	r2, r3
 811110e:	685b      	ldr	r3, [r3, #4]
 8111110:	42a3      	cmp	r3, r4
 8111112:	d1fb      	bne.n	811110c <_malloc_r+0xdc>
 8111114:	2300      	movs	r3, #0
 8111116:	6053      	str	r3, [r2, #4]
 8111118:	e7de      	b.n	81110d8 <_malloc_r+0xa8>
 811111a:	230c      	movs	r3, #12
 811111c:	6033      	str	r3, [r6, #0]
 811111e:	4630      	mov	r0, r6
 8111120:	f000 f80c 	bl	811113c <__malloc_unlock>
 8111124:	e794      	b.n	8111050 <_malloc_r+0x20>
 8111126:	6005      	str	r5, [r0, #0]
 8111128:	e7d6      	b.n	81110d8 <_malloc_r+0xa8>
 811112a:	bf00      	nop
 811112c:	10004f94 	.word	0x10004f94

08111130 <__malloc_lock>:
 8111130:	4801      	ldr	r0, [pc, #4]	@ (8111138 <__malloc_lock+0x8>)
 8111132:	f7ff bf00 	b.w	8110f36 <__retarget_lock_acquire_recursive>
 8111136:	bf00      	nop
 8111138:	10004f8c 	.word	0x10004f8c

0811113c <__malloc_unlock>:
 811113c:	4801      	ldr	r0, [pc, #4]	@ (8111144 <__malloc_unlock+0x8>)
 811113e:	f7ff befb 	b.w	8110f38 <__retarget_lock_release_recursive>
 8111142:	bf00      	nop
 8111144:	10004f8c 	.word	0x10004f8c

08111148 <__ssputs_r>:
 8111148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811114c:	688e      	ldr	r6, [r1, #8]
 811114e:	461f      	mov	r7, r3
 8111150:	42be      	cmp	r6, r7
 8111152:	680b      	ldr	r3, [r1, #0]
 8111154:	4682      	mov	sl, r0
 8111156:	460c      	mov	r4, r1
 8111158:	4690      	mov	r8, r2
 811115a:	d82d      	bhi.n	81111b8 <__ssputs_r+0x70>
 811115c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8111160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8111164:	d026      	beq.n	81111b4 <__ssputs_r+0x6c>
 8111166:	6965      	ldr	r5, [r4, #20]
 8111168:	6909      	ldr	r1, [r1, #16]
 811116a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 811116e:	eba3 0901 	sub.w	r9, r3, r1
 8111172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8111176:	1c7b      	adds	r3, r7, #1
 8111178:	444b      	add	r3, r9
 811117a:	106d      	asrs	r5, r5, #1
 811117c:	429d      	cmp	r5, r3
 811117e:	bf38      	it	cc
 8111180:	461d      	movcc	r5, r3
 8111182:	0553      	lsls	r3, r2, #21
 8111184:	d527      	bpl.n	81111d6 <__ssputs_r+0x8e>
 8111186:	4629      	mov	r1, r5
 8111188:	f7ff ff52 	bl	8111030 <_malloc_r>
 811118c:	4606      	mov	r6, r0
 811118e:	b360      	cbz	r0, 81111ea <__ssputs_r+0xa2>
 8111190:	6921      	ldr	r1, [r4, #16]
 8111192:	464a      	mov	r2, r9
 8111194:	f7ff fed1 	bl	8110f3a <memcpy>
 8111198:	89a3      	ldrh	r3, [r4, #12]
 811119a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 811119e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81111a2:	81a3      	strh	r3, [r4, #12]
 81111a4:	6126      	str	r6, [r4, #16]
 81111a6:	6165      	str	r5, [r4, #20]
 81111a8:	444e      	add	r6, r9
 81111aa:	eba5 0509 	sub.w	r5, r5, r9
 81111ae:	6026      	str	r6, [r4, #0]
 81111b0:	60a5      	str	r5, [r4, #8]
 81111b2:	463e      	mov	r6, r7
 81111b4:	42be      	cmp	r6, r7
 81111b6:	d900      	bls.n	81111ba <__ssputs_r+0x72>
 81111b8:	463e      	mov	r6, r7
 81111ba:	6820      	ldr	r0, [r4, #0]
 81111bc:	4632      	mov	r2, r6
 81111be:	4641      	mov	r1, r8
 81111c0:	f000 fcf6 	bl	8111bb0 <memmove>
 81111c4:	68a3      	ldr	r3, [r4, #8]
 81111c6:	1b9b      	subs	r3, r3, r6
 81111c8:	60a3      	str	r3, [r4, #8]
 81111ca:	6823      	ldr	r3, [r4, #0]
 81111cc:	4433      	add	r3, r6
 81111ce:	6023      	str	r3, [r4, #0]
 81111d0:	2000      	movs	r0, #0
 81111d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81111d6:	462a      	mov	r2, r5
 81111d8:	f000 fd36 	bl	8111c48 <_realloc_r>
 81111dc:	4606      	mov	r6, r0
 81111de:	2800      	cmp	r0, #0
 81111e0:	d1e0      	bne.n	81111a4 <__ssputs_r+0x5c>
 81111e2:	6921      	ldr	r1, [r4, #16]
 81111e4:	4650      	mov	r0, sl
 81111e6:	f7ff feb7 	bl	8110f58 <_free_r>
 81111ea:	230c      	movs	r3, #12
 81111ec:	f8ca 3000 	str.w	r3, [sl]
 81111f0:	89a3      	ldrh	r3, [r4, #12]
 81111f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81111f6:	81a3      	strh	r3, [r4, #12]
 81111f8:	f04f 30ff 	mov.w	r0, #4294967295
 81111fc:	e7e9      	b.n	81111d2 <__ssputs_r+0x8a>
	...

08111200 <_svfiprintf_r>:
 8111200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111204:	4698      	mov	r8, r3
 8111206:	898b      	ldrh	r3, [r1, #12]
 8111208:	061b      	lsls	r3, r3, #24
 811120a:	b09d      	sub	sp, #116	@ 0x74
 811120c:	4607      	mov	r7, r0
 811120e:	460d      	mov	r5, r1
 8111210:	4614      	mov	r4, r2
 8111212:	d510      	bpl.n	8111236 <_svfiprintf_r+0x36>
 8111214:	690b      	ldr	r3, [r1, #16]
 8111216:	b973      	cbnz	r3, 8111236 <_svfiprintf_r+0x36>
 8111218:	2140      	movs	r1, #64	@ 0x40
 811121a:	f7ff ff09 	bl	8111030 <_malloc_r>
 811121e:	6028      	str	r0, [r5, #0]
 8111220:	6128      	str	r0, [r5, #16]
 8111222:	b930      	cbnz	r0, 8111232 <_svfiprintf_r+0x32>
 8111224:	230c      	movs	r3, #12
 8111226:	603b      	str	r3, [r7, #0]
 8111228:	f04f 30ff 	mov.w	r0, #4294967295
 811122c:	b01d      	add	sp, #116	@ 0x74
 811122e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111232:	2340      	movs	r3, #64	@ 0x40
 8111234:	616b      	str	r3, [r5, #20]
 8111236:	2300      	movs	r3, #0
 8111238:	9309      	str	r3, [sp, #36]	@ 0x24
 811123a:	2320      	movs	r3, #32
 811123c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8111240:	f8cd 800c 	str.w	r8, [sp, #12]
 8111244:	2330      	movs	r3, #48	@ 0x30
 8111246:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 81113e4 <_svfiprintf_r+0x1e4>
 811124a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811124e:	f04f 0901 	mov.w	r9, #1
 8111252:	4623      	mov	r3, r4
 8111254:	469a      	mov	sl, r3
 8111256:	f813 2b01 	ldrb.w	r2, [r3], #1
 811125a:	b10a      	cbz	r2, 8111260 <_svfiprintf_r+0x60>
 811125c:	2a25      	cmp	r2, #37	@ 0x25
 811125e:	d1f9      	bne.n	8111254 <_svfiprintf_r+0x54>
 8111260:	ebba 0b04 	subs.w	fp, sl, r4
 8111264:	d00b      	beq.n	811127e <_svfiprintf_r+0x7e>
 8111266:	465b      	mov	r3, fp
 8111268:	4622      	mov	r2, r4
 811126a:	4629      	mov	r1, r5
 811126c:	4638      	mov	r0, r7
 811126e:	f7ff ff6b 	bl	8111148 <__ssputs_r>
 8111272:	3001      	adds	r0, #1
 8111274:	f000 80a7 	beq.w	81113c6 <_svfiprintf_r+0x1c6>
 8111278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811127a:	445a      	add	r2, fp
 811127c:	9209      	str	r2, [sp, #36]	@ 0x24
 811127e:	f89a 3000 	ldrb.w	r3, [sl]
 8111282:	2b00      	cmp	r3, #0
 8111284:	f000 809f 	beq.w	81113c6 <_svfiprintf_r+0x1c6>
 8111288:	2300      	movs	r3, #0
 811128a:	f04f 32ff 	mov.w	r2, #4294967295
 811128e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8111292:	f10a 0a01 	add.w	sl, sl, #1
 8111296:	9304      	str	r3, [sp, #16]
 8111298:	9307      	str	r3, [sp, #28]
 811129a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811129e:	931a      	str	r3, [sp, #104]	@ 0x68
 81112a0:	4654      	mov	r4, sl
 81112a2:	2205      	movs	r2, #5
 81112a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81112a8:	484e      	ldr	r0, [pc, #312]	@ (81113e4 <_svfiprintf_r+0x1e4>)
 81112aa:	f7ef f821 	bl	81002f0 <memchr>
 81112ae:	9a04      	ldr	r2, [sp, #16]
 81112b0:	b9d8      	cbnz	r0, 81112ea <_svfiprintf_r+0xea>
 81112b2:	06d0      	lsls	r0, r2, #27
 81112b4:	bf44      	itt	mi
 81112b6:	2320      	movmi	r3, #32
 81112b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81112bc:	0711      	lsls	r1, r2, #28
 81112be:	bf44      	itt	mi
 81112c0:	232b      	movmi	r3, #43	@ 0x2b
 81112c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81112c6:	f89a 3000 	ldrb.w	r3, [sl]
 81112ca:	2b2a      	cmp	r3, #42	@ 0x2a
 81112cc:	d015      	beq.n	81112fa <_svfiprintf_r+0xfa>
 81112ce:	9a07      	ldr	r2, [sp, #28]
 81112d0:	4654      	mov	r4, sl
 81112d2:	2000      	movs	r0, #0
 81112d4:	f04f 0c0a 	mov.w	ip, #10
 81112d8:	4621      	mov	r1, r4
 81112da:	f811 3b01 	ldrb.w	r3, [r1], #1
 81112de:	3b30      	subs	r3, #48	@ 0x30
 81112e0:	2b09      	cmp	r3, #9
 81112e2:	d94b      	bls.n	811137c <_svfiprintf_r+0x17c>
 81112e4:	b1b0      	cbz	r0, 8111314 <_svfiprintf_r+0x114>
 81112e6:	9207      	str	r2, [sp, #28]
 81112e8:	e014      	b.n	8111314 <_svfiprintf_r+0x114>
 81112ea:	eba0 0308 	sub.w	r3, r0, r8
 81112ee:	fa09 f303 	lsl.w	r3, r9, r3
 81112f2:	4313      	orrs	r3, r2
 81112f4:	9304      	str	r3, [sp, #16]
 81112f6:	46a2      	mov	sl, r4
 81112f8:	e7d2      	b.n	81112a0 <_svfiprintf_r+0xa0>
 81112fa:	9b03      	ldr	r3, [sp, #12]
 81112fc:	1d19      	adds	r1, r3, #4
 81112fe:	681b      	ldr	r3, [r3, #0]
 8111300:	9103      	str	r1, [sp, #12]
 8111302:	2b00      	cmp	r3, #0
 8111304:	bfbb      	ittet	lt
 8111306:	425b      	neglt	r3, r3
 8111308:	f042 0202 	orrlt.w	r2, r2, #2
 811130c:	9307      	strge	r3, [sp, #28]
 811130e:	9307      	strlt	r3, [sp, #28]
 8111310:	bfb8      	it	lt
 8111312:	9204      	strlt	r2, [sp, #16]
 8111314:	7823      	ldrb	r3, [r4, #0]
 8111316:	2b2e      	cmp	r3, #46	@ 0x2e
 8111318:	d10a      	bne.n	8111330 <_svfiprintf_r+0x130>
 811131a:	7863      	ldrb	r3, [r4, #1]
 811131c:	2b2a      	cmp	r3, #42	@ 0x2a
 811131e:	d132      	bne.n	8111386 <_svfiprintf_r+0x186>
 8111320:	9b03      	ldr	r3, [sp, #12]
 8111322:	1d1a      	adds	r2, r3, #4
 8111324:	681b      	ldr	r3, [r3, #0]
 8111326:	9203      	str	r2, [sp, #12]
 8111328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811132c:	3402      	adds	r4, #2
 811132e:	9305      	str	r3, [sp, #20]
 8111330:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 81113f4 <_svfiprintf_r+0x1f4>
 8111334:	7821      	ldrb	r1, [r4, #0]
 8111336:	2203      	movs	r2, #3
 8111338:	4650      	mov	r0, sl
 811133a:	f7ee ffd9 	bl	81002f0 <memchr>
 811133e:	b138      	cbz	r0, 8111350 <_svfiprintf_r+0x150>
 8111340:	9b04      	ldr	r3, [sp, #16]
 8111342:	eba0 000a 	sub.w	r0, r0, sl
 8111346:	2240      	movs	r2, #64	@ 0x40
 8111348:	4082      	lsls	r2, r0
 811134a:	4313      	orrs	r3, r2
 811134c:	3401      	adds	r4, #1
 811134e:	9304      	str	r3, [sp, #16]
 8111350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8111354:	4824      	ldr	r0, [pc, #144]	@ (81113e8 <_svfiprintf_r+0x1e8>)
 8111356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811135a:	2206      	movs	r2, #6
 811135c:	f7ee ffc8 	bl	81002f0 <memchr>
 8111360:	2800      	cmp	r0, #0
 8111362:	d036      	beq.n	81113d2 <_svfiprintf_r+0x1d2>
 8111364:	4b21      	ldr	r3, [pc, #132]	@ (81113ec <_svfiprintf_r+0x1ec>)
 8111366:	bb1b      	cbnz	r3, 81113b0 <_svfiprintf_r+0x1b0>
 8111368:	9b03      	ldr	r3, [sp, #12]
 811136a:	3307      	adds	r3, #7
 811136c:	f023 0307 	bic.w	r3, r3, #7
 8111370:	3308      	adds	r3, #8
 8111372:	9303      	str	r3, [sp, #12]
 8111374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111376:	4433      	add	r3, r6
 8111378:	9309      	str	r3, [sp, #36]	@ 0x24
 811137a:	e76a      	b.n	8111252 <_svfiprintf_r+0x52>
 811137c:	fb0c 3202 	mla	r2, ip, r2, r3
 8111380:	460c      	mov	r4, r1
 8111382:	2001      	movs	r0, #1
 8111384:	e7a8      	b.n	81112d8 <_svfiprintf_r+0xd8>
 8111386:	2300      	movs	r3, #0
 8111388:	3401      	adds	r4, #1
 811138a:	9305      	str	r3, [sp, #20]
 811138c:	4619      	mov	r1, r3
 811138e:	f04f 0c0a 	mov.w	ip, #10
 8111392:	4620      	mov	r0, r4
 8111394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8111398:	3a30      	subs	r2, #48	@ 0x30
 811139a:	2a09      	cmp	r2, #9
 811139c:	d903      	bls.n	81113a6 <_svfiprintf_r+0x1a6>
 811139e:	2b00      	cmp	r3, #0
 81113a0:	d0c6      	beq.n	8111330 <_svfiprintf_r+0x130>
 81113a2:	9105      	str	r1, [sp, #20]
 81113a4:	e7c4      	b.n	8111330 <_svfiprintf_r+0x130>
 81113a6:	fb0c 2101 	mla	r1, ip, r1, r2
 81113aa:	4604      	mov	r4, r0
 81113ac:	2301      	movs	r3, #1
 81113ae:	e7f0      	b.n	8111392 <_svfiprintf_r+0x192>
 81113b0:	ab03      	add	r3, sp, #12
 81113b2:	9300      	str	r3, [sp, #0]
 81113b4:	462a      	mov	r2, r5
 81113b6:	4b0e      	ldr	r3, [pc, #56]	@ (81113f0 <_svfiprintf_r+0x1f0>)
 81113b8:	a904      	add	r1, sp, #16
 81113ba:	4638      	mov	r0, r7
 81113bc:	f3af 8000 	nop.w
 81113c0:	1c42      	adds	r2, r0, #1
 81113c2:	4606      	mov	r6, r0
 81113c4:	d1d6      	bne.n	8111374 <_svfiprintf_r+0x174>
 81113c6:	89ab      	ldrh	r3, [r5, #12]
 81113c8:	065b      	lsls	r3, r3, #25
 81113ca:	f53f af2d 	bmi.w	8111228 <_svfiprintf_r+0x28>
 81113ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81113d0:	e72c      	b.n	811122c <_svfiprintf_r+0x2c>
 81113d2:	ab03      	add	r3, sp, #12
 81113d4:	9300      	str	r3, [sp, #0]
 81113d6:	462a      	mov	r2, r5
 81113d8:	4b05      	ldr	r3, [pc, #20]	@ (81113f0 <_svfiprintf_r+0x1f0>)
 81113da:	a904      	add	r1, sp, #16
 81113dc:	4638      	mov	r0, r7
 81113de:	f000 f9bb 	bl	8111758 <_printf_i>
 81113e2:	e7ed      	b.n	81113c0 <_svfiprintf_r+0x1c0>
 81113e4:	08112214 	.word	0x08112214
 81113e8:	0811221e 	.word	0x0811221e
 81113ec:	00000000 	.word	0x00000000
 81113f0:	08111149 	.word	0x08111149
 81113f4:	0811221a 	.word	0x0811221a

081113f8 <__sfputc_r>:
 81113f8:	6893      	ldr	r3, [r2, #8]
 81113fa:	3b01      	subs	r3, #1
 81113fc:	2b00      	cmp	r3, #0
 81113fe:	b410      	push	{r4}
 8111400:	6093      	str	r3, [r2, #8]
 8111402:	da08      	bge.n	8111416 <__sfputc_r+0x1e>
 8111404:	6994      	ldr	r4, [r2, #24]
 8111406:	42a3      	cmp	r3, r4
 8111408:	db01      	blt.n	811140e <__sfputc_r+0x16>
 811140a:	290a      	cmp	r1, #10
 811140c:	d103      	bne.n	8111416 <__sfputc_r+0x1e>
 811140e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8111412:	f7ff bc82 	b.w	8110d1a <__swbuf_r>
 8111416:	6813      	ldr	r3, [r2, #0]
 8111418:	1c58      	adds	r0, r3, #1
 811141a:	6010      	str	r0, [r2, #0]
 811141c:	7019      	strb	r1, [r3, #0]
 811141e:	4608      	mov	r0, r1
 8111420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8111424:	4770      	bx	lr

08111426 <__sfputs_r>:
 8111426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111428:	4606      	mov	r6, r0
 811142a:	460f      	mov	r7, r1
 811142c:	4614      	mov	r4, r2
 811142e:	18d5      	adds	r5, r2, r3
 8111430:	42ac      	cmp	r4, r5
 8111432:	d101      	bne.n	8111438 <__sfputs_r+0x12>
 8111434:	2000      	movs	r0, #0
 8111436:	e007      	b.n	8111448 <__sfputs_r+0x22>
 8111438:	f814 1b01 	ldrb.w	r1, [r4], #1
 811143c:	463a      	mov	r2, r7
 811143e:	4630      	mov	r0, r6
 8111440:	f7ff ffda 	bl	81113f8 <__sfputc_r>
 8111444:	1c43      	adds	r3, r0, #1
 8111446:	d1f3      	bne.n	8111430 <__sfputs_r+0xa>
 8111448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811144c <_vfiprintf_r>:
 811144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111450:	460d      	mov	r5, r1
 8111452:	b09d      	sub	sp, #116	@ 0x74
 8111454:	4614      	mov	r4, r2
 8111456:	4698      	mov	r8, r3
 8111458:	4606      	mov	r6, r0
 811145a:	b118      	cbz	r0, 8111464 <_vfiprintf_r+0x18>
 811145c:	6a03      	ldr	r3, [r0, #32]
 811145e:	b90b      	cbnz	r3, 8111464 <_vfiprintf_r+0x18>
 8111460:	f7ff fb50 	bl	8110b04 <__sinit>
 8111464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8111466:	07d9      	lsls	r1, r3, #31
 8111468:	d405      	bmi.n	8111476 <_vfiprintf_r+0x2a>
 811146a:	89ab      	ldrh	r3, [r5, #12]
 811146c:	059a      	lsls	r2, r3, #22
 811146e:	d402      	bmi.n	8111476 <_vfiprintf_r+0x2a>
 8111470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8111472:	f7ff fd60 	bl	8110f36 <__retarget_lock_acquire_recursive>
 8111476:	89ab      	ldrh	r3, [r5, #12]
 8111478:	071b      	lsls	r3, r3, #28
 811147a:	d501      	bpl.n	8111480 <_vfiprintf_r+0x34>
 811147c:	692b      	ldr	r3, [r5, #16]
 811147e:	b99b      	cbnz	r3, 81114a8 <_vfiprintf_r+0x5c>
 8111480:	4629      	mov	r1, r5
 8111482:	4630      	mov	r0, r6
 8111484:	f7ff fc88 	bl	8110d98 <__swsetup_r>
 8111488:	b170      	cbz	r0, 81114a8 <_vfiprintf_r+0x5c>
 811148a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811148c:	07dc      	lsls	r4, r3, #31
 811148e:	d504      	bpl.n	811149a <_vfiprintf_r+0x4e>
 8111490:	f04f 30ff 	mov.w	r0, #4294967295
 8111494:	b01d      	add	sp, #116	@ 0x74
 8111496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811149a:	89ab      	ldrh	r3, [r5, #12]
 811149c:	0598      	lsls	r0, r3, #22
 811149e:	d4f7      	bmi.n	8111490 <_vfiprintf_r+0x44>
 81114a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81114a2:	f7ff fd49 	bl	8110f38 <__retarget_lock_release_recursive>
 81114a6:	e7f3      	b.n	8111490 <_vfiprintf_r+0x44>
 81114a8:	2300      	movs	r3, #0
 81114aa:	9309      	str	r3, [sp, #36]	@ 0x24
 81114ac:	2320      	movs	r3, #32
 81114ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81114b2:	f8cd 800c 	str.w	r8, [sp, #12]
 81114b6:	2330      	movs	r3, #48	@ 0x30
 81114b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8111668 <_vfiprintf_r+0x21c>
 81114bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81114c0:	f04f 0901 	mov.w	r9, #1
 81114c4:	4623      	mov	r3, r4
 81114c6:	469a      	mov	sl, r3
 81114c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 81114cc:	b10a      	cbz	r2, 81114d2 <_vfiprintf_r+0x86>
 81114ce:	2a25      	cmp	r2, #37	@ 0x25
 81114d0:	d1f9      	bne.n	81114c6 <_vfiprintf_r+0x7a>
 81114d2:	ebba 0b04 	subs.w	fp, sl, r4
 81114d6:	d00b      	beq.n	81114f0 <_vfiprintf_r+0xa4>
 81114d8:	465b      	mov	r3, fp
 81114da:	4622      	mov	r2, r4
 81114dc:	4629      	mov	r1, r5
 81114de:	4630      	mov	r0, r6
 81114e0:	f7ff ffa1 	bl	8111426 <__sfputs_r>
 81114e4:	3001      	adds	r0, #1
 81114e6:	f000 80a7 	beq.w	8111638 <_vfiprintf_r+0x1ec>
 81114ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81114ec:	445a      	add	r2, fp
 81114ee:	9209      	str	r2, [sp, #36]	@ 0x24
 81114f0:	f89a 3000 	ldrb.w	r3, [sl]
 81114f4:	2b00      	cmp	r3, #0
 81114f6:	f000 809f 	beq.w	8111638 <_vfiprintf_r+0x1ec>
 81114fa:	2300      	movs	r3, #0
 81114fc:	f04f 32ff 	mov.w	r2, #4294967295
 8111500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8111504:	f10a 0a01 	add.w	sl, sl, #1
 8111508:	9304      	str	r3, [sp, #16]
 811150a:	9307      	str	r3, [sp, #28]
 811150c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8111510:	931a      	str	r3, [sp, #104]	@ 0x68
 8111512:	4654      	mov	r4, sl
 8111514:	2205      	movs	r2, #5
 8111516:	f814 1b01 	ldrb.w	r1, [r4], #1
 811151a:	4853      	ldr	r0, [pc, #332]	@ (8111668 <_vfiprintf_r+0x21c>)
 811151c:	f7ee fee8 	bl	81002f0 <memchr>
 8111520:	9a04      	ldr	r2, [sp, #16]
 8111522:	b9d8      	cbnz	r0, 811155c <_vfiprintf_r+0x110>
 8111524:	06d1      	lsls	r1, r2, #27
 8111526:	bf44      	itt	mi
 8111528:	2320      	movmi	r3, #32
 811152a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811152e:	0713      	lsls	r3, r2, #28
 8111530:	bf44      	itt	mi
 8111532:	232b      	movmi	r3, #43	@ 0x2b
 8111534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8111538:	f89a 3000 	ldrb.w	r3, [sl]
 811153c:	2b2a      	cmp	r3, #42	@ 0x2a
 811153e:	d015      	beq.n	811156c <_vfiprintf_r+0x120>
 8111540:	9a07      	ldr	r2, [sp, #28]
 8111542:	4654      	mov	r4, sl
 8111544:	2000      	movs	r0, #0
 8111546:	f04f 0c0a 	mov.w	ip, #10
 811154a:	4621      	mov	r1, r4
 811154c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8111550:	3b30      	subs	r3, #48	@ 0x30
 8111552:	2b09      	cmp	r3, #9
 8111554:	d94b      	bls.n	81115ee <_vfiprintf_r+0x1a2>
 8111556:	b1b0      	cbz	r0, 8111586 <_vfiprintf_r+0x13a>
 8111558:	9207      	str	r2, [sp, #28]
 811155a:	e014      	b.n	8111586 <_vfiprintf_r+0x13a>
 811155c:	eba0 0308 	sub.w	r3, r0, r8
 8111560:	fa09 f303 	lsl.w	r3, r9, r3
 8111564:	4313      	orrs	r3, r2
 8111566:	9304      	str	r3, [sp, #16]
 8111568:	46a2      	mov	sl, r4
 811156a:	e7d2      	b.n	8111512 <_vfiprintf_r+0xc6>
 811156c:	9b03      	ldr	r3, [sp, #12]
 811156e:	1d19      	adds	r1, r3, #4
 8111570:	681b      	ldr	r3, [r3, #0]
 8111572:	9103      	str	r1, [sp, #12]
 8111574:	2b00      	cmp	r3, #0
 8111576:	bfbb      	ittet	lt
 8111578:	425b      	neglt	r3, r3
 811157a:	f042 0202 	orrlt.w	r2, r2, #2
 811157e:	9307      	strge	r3, [sp, #28]
 8111580:	9307      	strlt	r3, [sp, #28]
 8111582:	bfb8      	it	lt
 8111584:	9204      	strlt	r2, [sp, #16]
 8111586:	7823      	ldrb	r3, [r4, #0]
 8111588:	2b2e      	cmp	r3, #46	@ 0x2e
 811158a:	d10a      	bne.n	81115a2 <_vfiprintf_r+0x156>
 811158c:	7863      	ldrb	r3, [r4, #1]
 811158e:	2b2a      	cmp	r3, #42	@ 0x2a
 8111590:	d132      	bne.n	81115f8 <_vfiprintf_r+0x1ac>
 8111592:	9b03      	ldr	r3, [sp, #12]
 8111594:	1d1a      	adds	r2, r3, #4
 8111596:	681b      	ldr	r3, [r3, #0]
 8111598:	9203      	str	r2, [sp, #12]
 811159a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811159e:	3402      	adds	r4, #2
 81115a0:	9305      	str	r3, [sp, #20]
 81115a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8111678 <_vfiprintf_r+0x22c>
 81115a6:	7821      	ldrb	r1, [r4, #0]
 81115a8:	2203      	movs	r2, #3
 81115aa:	4650      	mov	r0, sl
 81115ac:	f7ee fea0 	bl	81002f0 <memchr>
 81115b0:	b138      	cbz	r0, 81115c2 <_vfiprintf_r+0x176>
 81115b2:	9b04      	ldr	r3, [sp, #16]
 81115b4:	eba0 000a 	sub.w	r0, r0, sl
 81115b8:	2240      	movs	r2, #64	@ 0x40
 81115ba:	4082      	lsls	r2, r0
 81115bc:	4313      	orrs	r3, r2
 81115be:	3401      	adds	r4, #1
 81115c0:	9304      	str	r3, [sp, #16]
 81115c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 81115c6:	4829      	ldr	r0, [pc, #164]	@ (811166c <_vfiprintf_r+0x220>)
 81115c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81115cc:	2206      	movs	r2, #6
 81115ce:	f7ee fe8f 	bl	81002f0 <memchr>
 81115d2:	2800      	cmp	r0, #0
 81115d4:	d03f      	beq.n	8111656 <_vfiprintf_r+0x20a>
 81115d6:	4b26      	ldr	r3, [pc, #152]	@ (8111670 <_vfiprintf_r+0x224>)
 81115d8:	bb1b      	cbnz	r3, 8111622 <_vfiprintf_r+0x1d6>
 81115da:	9b03      	ldr	r3, [sp, #12]
 81115dc:	3307      	adds	r3, #7
 81115de:	f023 0307 	bic.w	r3, r3, #7
 81115e2:	3308      	adds	r3, #8
 81115e4:	9303      	str	r3, [sp, #12]
 81115e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81115e8:	443b      	add	r3, r7
 81115ea:	9309      	str	r3, [sp, #36]	@ 0x24
 81115ec:	e76a      	b.n	81114c4 <_vfiprintf_r+0x78>
 81115ee:	fb0c 3202 	mla	r2, ip, r2, r3
 81115f2:	460c      	mov	r4, r1
 81115f4:	2001      	movs	r0, #1
 81115f6:	e7a8      	b.n	811154a <_vfiprintf_r+0xfe>
 81115f8:	2300      	movs	r3, #0
 81115fa:	3401      	adds	r4, #1
 81115fc:	9305      	str	r3, [sp, #20]
 81115fe:	4619      	mov	r1, r3
 8111600:	f04f 0c0a 	mov.w	ip, #10
 8111604:	4620      	mov	r0, r4
 8111606:	f810 2b01 	ldrb.w	r2, [r0], #1
 811160a:	3a30      	subs	r2, #48	@ 0x30
 811160c:	2a09      	cmp	r2, #9
 811160e:	d903      	bls.n	8111618 <_vfiprintf_r+0x1cc>
 8111610:	2b00      	cmp	r3, #0
 8111612:	d0c6      	beq.n	81115a2 <_vfiprintf_r+0x156>
 8111614:	9105      	str	r1, [sp, #20]
 8111616:	e7c4      	b.n	81115a2 <_vfiprintf_r+0x156>
 8111618:	fb0c 2101 	mla	r1, ip, r1, r2
 811161c:	4604      	mov	r4, r0
 811161e:	2301      	movs	r3, #1
 8111620:	e7f0      	b.n	8111604 <_vfiprintf_r+0x1b8>
 8111622:	ab03      	add	r3, sp, #12
 8111624:	9300      	str	r3, [sp, #0]
 8111626:	462a      	mov	r2, r5
 8111628:	4b12      	ldr	r3, [pc, #72]	@ (8111674 <_vfiprintf_r+0x228>)
 811162a:	a904      	add	r1, sp, #16
 811162c:	4630      	mov	r0, r6
 811162e:	f3af 8000 	nop.w
 8111632:	4607      	mov	r7, r0
 8111634:	1c78      	adds	r0, r7, #1
 8111636:	d1d6      	bne.n	81115e6 <_vfiprintf_r+0x19a>
 8111638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811163a:	07d9      	lsls	r1, r3, #31
 811163c:	d405      	bmi.n	811164a <_vfiprintf_r+0x1fe>
 811163e:	89ab      	ldrh	r3, [r5, #12]
 8111640:	059a      	lsls	r2, r3, #22
 8111642:	d402      	bmi.n	811164a <_vfiprintf_r+0x1fe>
 8111644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8111646:	f7ff fc77 	bl	8110f38 <__retarget_lock_release_recursive>
 811164a:	89ab      	ldrh	r3, [r5, #12]
 811164c:	065b      	lsls	r3, r3, #25
 811164e:	f53f af1f 	bmi.w	8111490 <_vfiprintf_r+0x44>
 8111652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8111654:	e71e      	b.n	8111494 <_vfiprintf_r+0x48>
 8111656:	ab03      	add	r3, sp, #12
 8111658:	9300      	str	r3, [sp, #0]
 811165a:	462a      	mov	r2, r5
 811165c:	4b05      	ldr	r3, [pc, #20]	@ (8111674 <_vfiprintf_r+0x228>)
 811165e:	a904      	add	r1, sp, #16
 8111660:	4630      	mov	r0, r6
 8111662:	f000 f879 	bl	8111758 <_printf_i>
 8111666:	e7e4      	b.n	8111632 <_vfiprintf_r+0x1e6>
 8111668:	08112214 	.word	0x08112214
 811166c:	0811221e 	.word	0x0811221e
 8111670:	00000000 	.word	0x00000000
 8111674:	08111427 	.word	0x08111427
 8111678:	0811221a 	.word	0x0811221a

0811167c <_printf_common>:
 811167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111680:	4616      	mov	r6, r2
 8111682:	4698      	mov	r8, r3
 8111684:	688a      	ldr	r2, [r1, #8]
 8111686:	690b      	ldr	r3, [r1, #16]
 8111688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 811168c:	4293      	cmp	r3, r2
 811168e:	bfb8      	it	lt
 8111690:	4613      	movlt	r3, r2
 8111692:	6033      	str	r3, [r6, #0]
 8111694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8111698:	4607      	mov	r7, r0
 811169a:	460c      	mov	r4, r1
 811169c:	b10a      	cbz	r2, 81116a2 <_printf_common+0x26>
 811169e:	3301      	adds	r3, #1
 81116a0:	6033      	str	r3, [r6, #0]
 81116a2:	6823      	ldr	r3, [r4, #0]
 81116a4:	0699      	lsls	r1, r3, #26
 81116a6:	bf42      	ittt	mi
 81116a8:	6833      	ldrmi	r3, [r6, #0]
 81116aa:	3302      	addmi	r3, #2
 81116ac:	6033      	strmi	r3, [r6, #0]
 81116ae:	6825      	ldr	r5, [r4, #0]
 81116b0:	f015 0506 	ands.w	r5, r5, #6
 81116b4:	d106      	bne.n	81116c4 <_printf_common+0x48>
 81116b6:	f104 0a19 	add.w	sl, r4, #25
 81116ba:	68e3      	ldr	r3, [r4, #12]
 81116bc:	6832      	ldr	r2, [r6, #0]
 81116be:	1a9b      	subs	r3, r3, r2
 81116c0:	42ab      	cmp	r3, r5
 81116c2:	dc26      	bgt.n	8111712 <_printf_common+0x96>
 81116c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 81116c8:	6822      	ldr	r2, [r4, #0]
 81116ca:	3b00      	subs	r3, #0
 81116cc:	bf18      	it	ne
 81116ce:	2301      	movne	r3, #1
 81116d0:	0692      	lsls	r2, r2, #26
 81116d2:	d42b      	bmi.n	811172c <_printf_common+0xb0>
 81116d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81116d8:	4641      	mov	r1, r8
 81116da:	4638      	mov	r0, r7
 81116dc:	47c8      	blx	r9
 81116de:	3001      	adds	r0, #1
 81116e0:	d01e      	beq.n	8111720 <_printf_common+0xa4>
 81116e2:	6823      	ldr	r3, [r4, #0]
 81116e4:	6922      	ldr	r2, [r4, #16]
 81116e6:	f003 0306 	and.w	r3, r3, #6
 81116ea:	2b04      	cmp	r3, #4
 81116ec:	bf02      	ittt	eq
 81116ee:	68e5      	ldreq	r5, [r4, #12]
 81116f0:	6833      	ldreq	r3, [r6, #0]
 81116f2:	1aed      	subeq	r5, r5, r3
 81116f4:	68a3      	ldr	r3, [r4, #8]
 81116f6:	bf0c      	ite	eq
 81116f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81116fc:	2500      	movne	r5, #0
 81116fe:	4293      	cmp	r3, r2
 8111700:	bfc4      	itt	gt
 8111702:	1a9b      	subgt	r3, r3, r2
 8111704:	18ed      	addgt	r5, r5, r3
 8111706:	2600      	movs	r6, #0
 8111708:	341a      	adds	r4, #26
 811170a:	42b5      	cmp	r5, r6
 811170c:	d11a      	bne.n	8111744 <_printf_common+0xc8>
 811170e:	2000      	movs	r0, #0
 8111710:	e008      	b.n	8111724 <_printf_common+0xa8>
 8111712:	2301      	movs	r3, #1
 8111714:	4652      	mov	r2, sl
 8111716:	4641      	mov	r1, r8
 8111718:	4638      	mov	r0, r7
 811171a:	47c8      	blx	r9
 811171c:	3001      	adds	r0, #1
 811171e:	d103      	bne.n	8111728 <_printf_common+0xac>
 8111720:	f04f 30ff 	mov.w	r0, #4294967295
 8111724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111728:	3501      	adds	r5, #1
 811172a:	e7c6      	b.n	81116ba <_printf_common+0x3e>
 811172c:	18e1      	adds	r1, r4, r3
 811172e:	1c5a      	adds	r2, r3, #1
 8111730:	2030      	movs	r0, #48	@ 0x30
 8111732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8111736:	4422      	add	r2, r4
 8111738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 811173c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8111740:	3302      	adds	r3, #2
 8111742:	e7c7      	b.n	81116d4 <_printf_common+0x58>
 8111744:	2301      	movs	r3, #1
 8111746:	4622      	mov	r2, r4
 8111748:	4641      	mov	r1, r8
 811174a:	4638      	mov	r0, r7
 811174c:	47c8      	blx	r9
 811174e:	3001      	adds	r0, #1
 8111750:	d0e6      	beq.n	8111720 <_printf_common+0xa4>
 8111752:	3601      	adds	r6, #1
 8111754:	e7d9      	b.n	811170a <_printf_common+0x8e>
	...

08111758 <_printf_i>:
 8111758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811175c:	7e0f      	ldrb	r7, [r1, #24]
 811175e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8111760:	2f78      	cmp	r7, #120	@ 0x78
 8111762:	4691      	mov	r9, r2
 8111764:	4680      	mov	r8, r0
 8111766:	460c      	mov	r4, r1
 8111768:	469a      	mov	sl, r3
 811176a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 811176e:	d807      	bhi.n	8111780 <_printf_i+0x28>
 8111770:	2f62      	cmp	r7, #98	@ 0x62
 8111772:	d80a      	bhi.n	811178a <_printf_i+0x32>
 8111774:	2f00      	cmp	r7, #0
 8111776:	f000 80d1 	beq.w	811191c <_printf_i+0x1c4>
 811177a:	2f58      	cmp	r7, #88	@ 0x58
 811177c:	f000 80b8 	beq.w	81118f0 <_printf_i+0x198>
 8111780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8111784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8111788:	e03a      	b.n	8111800 <_printf_i+0xa8>
 811178a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 811178e:	2b15      	cmp	r3, #21
 8111790:	d8f6      	bhi.n	8111780 <_printf_i+0x28>
 8111792:	a101      	add	r1, pc, #4	@ (adr r1, 8111798 <_printf_i+0x40>)
 8111794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8111798:	081117f1 	.word	0x081117f1
 811179c:	08111805 	.word	0x08111805
 81117a0:	08111781 	.word	0x08111781
 81117a4:	08111781 	.word	0x08111781
 81117a8:	08111781 	.word	0x08111781
 81117ac:	08111781 	.word	0x08111781
 81117b0:	08111805 	.word	0x08111805
 81117b4:	08111781 	.word	0x08111781
 81117b8:	08111781 	.word	0x08111781
 81117bc:	08111781 	.word	0x08111781
 81117c0:	08111781 	.word	0x08111781
 81117c4:	08111903 	.word	0x08111903
 81117c8:	0811182f 	.word	0x0811182f
 81117cc:	081118bd 	.word	0x081118bd
 81117d0:	08111781 	.word	0x08111781
 81117d4:	08111781 	.word	0x08111781
 81117d8:	08111925 	.word	0x08111925
 81117dc:	08111781 	.word	0x08111781
 81117e0:	0811182f 	.word	0x0811182f
 81117e4:	08111781 	.word	0x08111781
 81117e8:	08111781 	.word	0x08111781
 81117ec:	081118c5 	.word	0x081118c5
 81117f0:	6833      	ldr	r3, [r6, #0]
 81117f2:	1d1a      	adds	r2, r3, #4
 81117f4:	681b      	ldr	r3, [r3, #0]
 81117f6:	6032      	str	r2, [r6, #0]
 81117f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81117fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8111800:	2301      	movs	r3, #1
 8111802:	e09c      	b.n	811193e <_printf_i+0x1e6>
 8111804:	6833      	ldr	r3, [r6, #0]
 8111806:	6820      	ldr	r0, [r4, #0]
 8111808:	1d19      	adds	r1, r3, #4
 811180a:	6031      	str	r1, [r6, #0]
 811180c:	0606      	lsls	r6, r0, #24
 811180e:	d501      	bpl.n	8111814 <_printf_i+0xbc>
 8111810:	681d      	ldr	r5, [r3, #0]
 8111812:	e003      	b.n	811181c <_printf_i+0xc4>
 8111814:	0645      	lsls	r5, r0, #25
 8111816:	d5fb      	bpl.n	8111810 <_printf_i+0xb8>
 8111818:	f9b3 5000 	ldrsh.w	r5, [r3]
 811181c:	2d00      	cmp	r5, #0
 811181e:	da03      	bge.n	8111828 <_printf_i+0xd0>
 8111820:	232d      	movs	r3, #45	@ 0x2d
 8111822:	426d      	negs	r5, r5
 8111824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111828:	4858      	ldr	r0, [pc, #352]	@ (811198c <_printf_i+0x234>)
 811182a:	230a      	movs	r3, #10
 811182c:	e011      	b.n	8111852 <_printf_i+0xfa>
 811182e:	6821      	ldr	r1, [r4, #0]
 8111830:	6833      	ldr	r3, [r6, #0]
 8111832:	0608      	lsls	r0, r1, #24
 8111834:	f853 5b04 	ldr.w	r5, [r3], #4
 8111838:	d402      	bmi.n	8111840 <_printf_i+0xe8>
 811183a:	0649      	lsls	r1, r1, #25
 811183c:	bf48      	it	mi
 811183e:	b2ad      	uxthmi	r5, r5
 8111840:	2f6f      	cmp	r7, #111	@ 0x6f
 8111842:	4852      	ldr	r0, [pc, #328]	@ (811198c <_printf_i+0x234>)
 8111844:	6033      	str	r3, [r6, #0]
 8111846:	bf14      	ite	ne
 8111848:	230a      	movne	r3, #10
 811184a:	2308      	moveq	r3, #8
 811184c:	2100      	movs	r1, #0
 811184e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8111852:	6866      	ldr	r6, [r4, #4]
 8111854:	60a6      	str	r6, [r4, #8]
 8111856:	2e00      	cmp	r6, #0
 8111858:	db05      	blt.n	8111866 <_printf_i+0x10e>
 811185a:	6821      	ldr	r1, [r4, #0]
 811185c:	432e      	orrs	r6, r5
 811185e:	f021 0104 	bic.w	r1, r1, #4
 8111862:	6021      	str	r1, [r4, #0]
 8111864:	d04b      	beq.n	81118fe <_printf_i+0x1a6>
 8111866:	4616      	mov	r6, r2
 8111868:	fbb5 f1f3 	udiv	r1, r5, r3
 811186c:	fb03 5711 	mls	r7, r3, r1, r5
 8111870:	5dc7      	ldrb	r7, [r0, r7]
 8111872:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8111876:	462f      	mov	r7, r5
 8111878:	42bb      	cmp	r3, r7
 811187a:	460d      	mov	r5, r1
 811187c:	d9f4      	bls.n	8111868 <_printf_i+0x110>
 811187e:	2b08      	cmp	r3, #8
 8111880:	d10b      	bne.n	811189a <_printf_i+0x142>
 8111882:	6823      	ldr	r3, [r4, #0]
 8111884:	07df      	lsls	r7, r3, #31
 8111886:	d508      	bpl.n	811189a <_printf_i+0x142>
 8111888:	6923      	ldr	r3, [r4, #16]
 811188a:	6861      	ldr	r1, [r4, #4]
 811188c:	4299      	cmp	r1, r3
 811188e:	bfde      	ittt	le
 8111890:	2330      	movle	r3, #48	@ 0x30
 8111892:	f806 3c01 	strble.w	r3, [r6, #-1]
 8111896:	f106 36ff 	addle.w	r6, r6, #4294967295
 811189a:	1b92      	subs	r2, r2, r6
 811189c:	6122      	str	r2, [r4, #16]
 811189e:	f8cd a000 	str.w	sl, [sp]
 81118a2:	464b      	mov	r3, r9
 81118a4:	aa03      	add	r2, sp, #12
 81118a6:	4621      	mov	r1, r4
 81118a8:	4640      	mov	r0, r8
 81118aa:	f7ff fee7 	bl	811167c <_printf_common>
 81118ae:	3001      	adds	r0, #1
 81118b0:	d14a      	bne.n	8111948 <_printf_i+0x1f0>
 81118b2:	f04f 30ff 	mov.w	r0, #4294967295
 81118b6:	b004      	add	sp, #16
 81118b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81118bc:	6823      	ldr	r3, [r4, #0]
 81118be:	f043 0320 	orr.w	r3, r3, #32
 81118c2:	6023      	str	r3, [r4, #0]
 81118c4:	4832      	ldr	r0, [pc, #200]	@ (8111990 <_printf_i+0x238>)
 81118c6:	2778      	movs	r7, #120	@ 0x78
 81118c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81118cc:	6823      	ldr	r3, [r4, #0]
 81118ce:	6831      	ldr	r1, [r6, #0]
 81118d0:	061f      	lsls	r7, r3, #24
 81118d2:	f851 5b04 	ldr.w	r5, [r1], #4
 81118d6:	d402      	bmi.n	81118de <_printf_i+0x186>
 81118d8:	065f      	lsls	r7, r3, #25
 81118da:	bf48      	it	mi
 81118dc:	b2ad      	uxthmi	r5, r5
 81118de:	6031      	str	r1, [r6, #0]
 81118e0:	07d9      	lsls	r1, r3, #31
 81118e2:	bf44      	itt	mi
 81118e4:	f043 0320 	orrmi.w	r3, r3, #32
 81118e8:	6023      	strmi	r3, [r4, #0]
 81118ea:	b11d      	cbz	r5, 81118f4 <_printf_i+0x19c>
 81118ec:	2310      	movs	r3, #16
 81118ee:	e7ad      	b.n	811184c <_printf_i+0xf4>
 81118f0:	4826      	ldr	r0, [pc, #152]	@ (811198c <_printf_i+0x234>)
 81118f2:	e7e9      	b.n	81118c8 <_printf_i+0x170>
 81118f4:	6823      	ldr	r3, [r4, #0]
 81118f6:	f023 0320 	bic.w	r3, r3, #32
 81118fa:	6023      	str	r3, [r4, #0]
 81118fc:	e7f6      	b.n	81118ec <_printf_i+0x194>
 81118fe:	4616      	mov	r6, r2
 8111900:	e7bd      	b.n	811187e <_printf_i+0x126>
 8111902:	6833      	ldr	r3, [r6, #0]
 8111904:	6825      	ldr	r5, [r4, #0]
 8111906:	6961      	ldr	r1, [r4, #20]
 8111908:	1d18      	adds	r0, r3, #4
 811190a:	6030      	str	r0, [r6, #0]
 811190c:	062e      	lsls	r6, r5, #24
 811190e:	681b      	ldr	r3, [r3, #0]
 8111910:	d501      	bpl.n	8111916 <_printf_i+0x1be>
 8111912:	6019      	str	r1, [r3, #0]
 8111914:	e002      	b.n	811191c <_printf_i+0x1c4>
 8111916:	0668      	lsls	r0, r5, #25
 8111918:	d5fb      	bpl.n	8111912 <_printf_i+0x1ba>
 811191a:	8019      	strh	r1, [r3, #0]
 811191c:	2300      	movs	r3, #0
 811191e:	6123      	str	r3, [r4, #16]
 8111920:	4616      	mov	r6, r2
 8111922:	e7bc      	b.n	811189e <_printf_i+0x146>
 8111924:	6833      	ldr	r3, [r6, #0]
 8111926:	1d1a      	adds	r2, r3, #4
 8111928:	6032      	str	r2, [r6, #0]
 811192a:	681e      	ldr	r6, [r3, #0]
 811192c:	6862      	ldr	r2, [r4, #4]
 811192e:	2100      	movs	r1, #0
 8111930:	4630      	mov	r0, r6
 8111932:	f7ee fcdd 	bl	81002f0 <memchr>
 8111936:	b108      	cbz	r0, 811193c <_printf_i+0x1e4>
 8111938:	1b80      	subs	r0, r0, r6
 811193a:	6060      	str	r0, [r4, #4]
 811193c:	6863      	ldr	r3, [r4, #4]
 811193e:	6123      	str	r3, [r4, #16]
 8111940:	2300      	movs	r3, #0
 8111942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111946:	e7aa      	b.n	811189e <_printf_i+0x146>
 8111948:	6923      	ldr	r3, [r4, #16]
 811194a:	4632      	mov	r2, r6
 811194c:	4649      	mov	r1, r9
 811194e:	4640      	mov	r0, r8
 8111950:	47d0      	blx	sl
 8111952:	3001      	adds	r0, #1
 8111954:	d0ad      	beq.n	81118b2 <_printf_i+0x15a>
 8111956:	6823      	ldr	r3, [r4, #0]
 8111958:	079b      	lsls	r3, r3, #30
 811195a:	d413      	bmi.n	8111984 <_printf_i+0x22c>
 811195c:	68e0      	ldr	r0, [r4, #12]
 811195e:	9b03      	ldr	r3, [sp, #12]
 8111960:	4298      	cmp	r0, r3
 8111962:	bfb8      	it	lt
 8111964:	4618      	movlt	r0, r3
 8111966:	e7a6      	b.n	81118b6 <_printf_i+0x15e>
 8111968:	2301      	movs	r3, #1
 811196a:	4632      	mov	r2, r6
 811196c:	4649      	mov	r1, r9
 811196e:	4640      	mov	r0, r8
 8111970:	47d0      	blx	sl
 8111972:	3001      	adds	r0, #1
 8111974:	d09d      	beq.n	81118b2 <_printf_i+0x15a>
 8111976:	3501      	adds	r5, #1
 8111978:	68e3      	ldr	r3, [r4, #12]
 811197a:	9903      	ldr	r1, [sp, #12]
 811197c:	1a5b      	subs	r3, r3, r1
 811197e:	42ab      	cmp	r3, r5
 8111980:	dcf2      	bgt.n	8111968 <_printf_i+0x210>
 8111982:	e7eb      	b.n	811195c <_printf_i+0x204>
 8111984:	2500      	movs	r5, #0
 8111986:	f104 0619 	add.w	r6, r4, #25
 811198a:	e7f5      	b.n	8111978 <_printf_i+0x220>
 811198c:	08112225 	.word	0x08112225
 8111990:	08112236 	.word	0x08112236

08111994 <__sflush_r>:
 8111994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8111998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811199c:	0716      	lsls	r6, r2, #28
 811199e:	4605      	mov	r5, r0
 81119a0:	460c      	mov	r4, r1
 81119a2:	d454      	bmi.n	8111a4e <__sflush_r+0xba>
 81119a4:	684b      	ldr	r3, [r1, #4]
 81119a6:	2b00      	cmp	r3, #0
 81119a8:	dc02      	bgt.n	81119b0 <__sflush_r+0x1c>
 81119aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81119ac:	2b00      	cmp	r3, #0
 81119ae:	dd48      	ble.n	8111a42 <__sflush_r+0xae>
 81119b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81119b2:	2e00      	cmp	r6, #0
 81119b4:	d045      	beq.n	8111a42 <__sflush_r+0xae>
 81119b6:	2300      	movs	r3, #0
 81119b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81119bc:	682f      	ldr	r7, [r5, #0]
 81119be:	6a21      	ldr	r1, [r4, #32]
 81119c0:	602b      	str	r3, [r5, #0]
 81119c2:	d030      	beq.n	8111a26 <__sflush_r+0x92>
 81119c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81119c6:	89a3      	ldrh	r3, [r4, #12]
 81119c8:	0759      	lsls	r1, r3, #29
 81119ca:	d505      	bpl.n	81119d8 <__sflush_r+0x44>
 81119cc:	6863      	ldr	r3, [r4, #4]
 81119ce:	1ad2      	subs	r2, r2, r3
 81119d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81119d2:	b10b      	cbz	r3, 81119d8 <__sflush_r+0x44>
 81119d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81119d6:	1ad2      	subs	r2, r2, r3
 81119d8:	2300      	movs	r3, #0
 81119da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81119dc:	6a21      	ldr	r1, [r4, #32]
 81119de:	4628      	mov	r0, r5
 81119e0:	47b0      	blx	r6
 81119e2:	1c43      	adds	r3, r0, #1
 81119e4:	89a3      	ldrh	r3, [r4, #12]
 81119e6:	d106      	bne.n	81119f6 <__sflush_r+0x62>
 81119e8:	6829      	ldr	r1, [r5, #0]
 81119ea:	291d      	cmp	r1, #29
 81119ec:	d82b      	bhi.n	8111a46 <__sflush_r+0xb2>
 81119ee:	4a2a      	ldr	r2, [pc, #168]	@ (8111a98 <__sflush_r+0x104>)
 81119f0:	40ca      	lsrs	r2, r1
 81119f2:	07d6      	lsls	r6, r2, #31
 81119f4:	d527      	bpl.n	8111a46 <__sflush_r+0xb2>
 81119f6:	2200      	movs	r2, #0
 81119f8:	6062      	str	r2, [r4, #4]
 81119fa:	04d9      	lsls	r1, r3, #19
 81119fc:	6922      	ldr	r2, [r4, #16]
 81119fe:	6022      	str	r2, [r4, #0]
 8111a00:	d504      	bpl.n	8111a0c <__sflush_r+0x78>
 8111a02:	1c42      	adds	r2, r0, #1
 8111a04:	d101      	bne.n	8111a0a <__sflush_r+0x76>
 8111a06:	682b      	ldr	r3, [r5, #0]
 8111a08:	b903      	cbnz	r3, 8111a0c <__sflush_r+0x78>
 8111a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8111a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8111a0e:	602f      	str	r7, [r5, #0]
 8111a10:	b1b9      	cbz	r1, 8111a42 <__sflush_r+0xae>
 8111a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8111a16:	4299      	cmp	r1, r3
 8111a18:	d002      	beq.n	8111a20 <__sflush_r+0x8c>
 8111a1a:	4628      	mov	r0, r5
 8111a1c:	f7ff fa9c 	bl	8110f58 <_free_r>
 8111a20:	2300      	movs	r3, #0
 8111a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8111a24:	e00d      	b.n	8111a42 <__sflush_r+0xae>
 8111a26:	2301      	movs	r3, #1
 8111a28:	4628      	mov	r0, r5
 8111a2a:	47b0      	blx	r6
 8111a2c:	4602      	mov	r2, r0
 8111a2e:	1c50      	adds	r0, r2, #1
 8111a30:	d1c9      	bne.n	81119c6 <__sflush_r+0x32>
 8111a32:	682b      	ldr	r3, [r5, #0]
 8111a34:	2b00      	cmp	r3, #0
 8111a36:	d0c6      	beq.n	81119c6 <__sflush_r+0x32>
 8111a38:	2b1d      	cmp	r3, #29
 8111a3a:	d001      	beq.n	8111a40 <__sflush_r+0xac>
 8111a3c:	2b16      	cmp	r3, #22
 8111a3e:	d11e      	bne.n	8111a7e <__sflush_r+0xea>
 8111a40:	602f      	str	r7, [r5, #0]
 8111a42:	2000      	movs	r0, #0
 8111a44:	e022      	b.n	8111a8c <__sflush_r+0xf8>
 8111a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8111a4a:	b21b      	sxth	r3, r3
 8111a4c:	e01b      	b.n	8111a86 <__sflush_r+0xf2>
 8111a4e:	690f      	ldr	r7, [r1, #16]
 8111a50:	2f00      	cmp	r7, #0
 8111a52:	d0f6      	beq.n	8111a42 <__sflush_r+0xae>
 8111a54:	0793      	lsls	r3, r2, #30
 8111a56:	680e      	ldr	r6, [r1, #0]
 8111a58:	bf08      	it	eq
 8111a5a:	694b      	ldreq	r3, [r1, #20]
 8111a5c:	600f      	str	r7, [r1, #0]
 8111a5e:	bf18      	it	ne
 8111a60:	2300      	movne	r3, #0
 8111a62:	eba6 0807 	sub.w	r8, r6, r7
 8111a66:	608b      	str	r3, [r1, #8]
 8111a68:	f1b8 0f00 	cmp.w	r8, #0
 8111a6c:	dde9      	ble.n	8111a42 <__sflush_r+0xae>
 8111a6e:	6a21      	ldr	r1, [r4, #32]
 8111a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8111a72:	4643      	mov	r3, r8
 8111a74:	463a      	mov	r2, r7
 8111a76:	4628      	mov	r0, r5
 8111a78:	47b0      	blx	r6
 8111a7a:	2800      	cmp	r0, #0
 8111a7c:	dc08      	bgt.n	8111a90 <__sflush_r+0xfc>
 8111a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8111a86:	81a3      	strh	r3, [r4, #12]
 8111a88:	f04f 30ff 	mov.w	r0, #4294967295
 8111a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111a90:	4407      	add	r7, r0
 8111a92:	eba8 0800 	sub.w	r8, r8, r0
 8111a96:	e7e7      	b.n	8111a68 <__sflush_r+0xd4>
 8111a98:	20400001 	.word	0x20400001

08111a9c <_fflush_r>:
 8111a9c:	b538      	push	{r3, r4, r5, lr}
 8111a9e:	690b      	ldr	r3, [r1, #16]
 8111aa0:	4605      	mov	r5, r0
 8111aa2:	460c      	mov	r4, r1
 8111aa4:	b913      	cbnz	r3, 8111aac <_fflush_r+0x10>
 8111aa6:	2500      	movs	r5, #0
 8111aa8:	4628      	mov	r0, r5
 8111aaa:	bd38      	pop	{r3, r4, r5, pc}
 8111aac:	b118      	cbz	r0, 8111ab6 <_fflush_r+0x1a>
 8111aae:	6a03      	ldr	r3, [r0, #32]
 8111ab0:	b90b      	cbnz	r3, 8111ab6 <_fflush_r+0x1a>
 8111ab2:	f7ff f827 	bl	8110b04 <__sinit>
 8111ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111aba:	2b00      	cmp	r3, #0
 8111abc:	d0f3      	beq.n	8111aa6 <_fflush_r+0xa>
 8111abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8111ac0:	07d0      	lsls	r0, r2, #31
 8111ac2:	d404      	bmi.n	8111ace <_fflush_r+0x32>
 8111ac4:	0599      	lsls	r1, r3, #22
 8111ac6:	d402      	bmi.n	8111ace <_fflush_r+0x32>
 8111ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8111aca:	f7ff fa34 	bl	8110f36 <__retarget_lock_acquire_recursive>
 8111ace:	4628      	mov	r0, r5
 8111ad0:	4621      	mov	r1, r4
 8111ad2:	f7ff ff5f 	bl	8111994 <__sflush_r>
 8111ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8111ad8:	07da      	lsls	r2, r3, #31
 8111ada:	4605      	mov	r5, r0
 8111adc:	d4e4      	bmi.n	8111aa8 <_fflush_r+0xc>
 8111ade:	89a3      	ldrh	r3, [r4, #12]
 8111ae0:	059b      	lsls	r3, r3, #22
 8111ae2:	d4e1      	bmi.n	8111aa8 <_fflush_r+0xc>
 8111ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8111ae6:	f7ff fa27 	bl	8110f38 <__retarget_lock_release_recursive>
 8111aea:	e7dd      	b.n	8111aa8 <_fflush_r+0xc>

08111aec <__swhatbuf_r>:
 8111aec:	b570      	push	{r4, r5, r6, lr}
 8111aee:	460c      	mov	r4, r1
 8111af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8111af4:	2900      	cmp	r1, #0
 8111af6:	b096      	sub	sp, #88	@ 0x58
 8111af8:	4615      	mov	r5, r2
 8111afa:	461e      	mov	r6, r3
 8111afc:	da0d      	bge.n	8111b1a <__swhatbuf_r+0x2e>
 8111afe:	89a3      	ldrh	r3, [r4, #12]
 8111b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8111b04:	f04f 0100 	mov.w	r1, #0
 8111b08:	bf14      	ite	ne
 8111b0a:	2340      	movne	r3, #64	@ 0x40
 8111b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8111b10:	2000      	movs	r0, #0
 8111b12:	6031      	str	r1, [r6, #0]
 8111b14:	602b      	str	r3, [r5, #0]
 8111b16:	b016      	add	sp, #88	@ 0x58
 8111b18:	bd70      	pop	{r4, r5, r6, pc}
 8111b1a:	466a      	mov	r2, sp
 8111b1c:	f000 f862 	bl	8111be4 <_fstat_r>
 8111b20:	2800      	cmp	r0, #0
 8111b22:	dbec      	blt.n	8111afe <__swhatbuf_r+0x12>
 8111b24:	9901      	ldr	r1, [sp, #4]
 8111b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8111b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8111b2e:	4259      	negs	r1, r3
 8111b30:	4159      	adcs	r1, r3
 8111b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8111b36:	e7eb      	b.n	8111b10 <__swhatbuf_r+0x24>

08111b38 <__smakebuf_r>:
 8111b38:	898b      	ldrh	r3, [r1, #12]
 8111b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8111b3c:	079d      	lsls	r5, r3, #30
 8111b3e:	4606      	mov	r6, r0
 8111b40:	460c      	mov	r4, r1
 8111b42:	d507      	bpl.n	8111b54 <__smakebuf_r+0x1c>
 8111b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8111b48:	6023      	str	r3, [r4, #0]
 8111b4a:	6123      	str	r3, [r4, #16]
 8111b4c:	2301      	movs	r3, #1
 8111b4e:	6163      	str	r3, [r4, #20]
 8111b50:	b003      	add	sp, #12
 8111b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8111b54:	ab01      	add	r3, sp, #4
 8111b56:	466a      	mov	r2, sp
 8111b58:	f7ff ffc8 	bl	8111aec <__swhatbuf_r>
 8111b5c:	9f00      	ldr	r7, [sp, #0]
 8111b5e:	4605      	mov	r5, r0
 8111b60:	4639      	mov	r1, r7
 8111b62:	4630      	mov	r0, r6
 8111b64:	f7ff fa64 	bl	8111030 <_malloc_r>
 8111b68:	b948      	cbnz	r0, 8111b7e <__smakebuf_r+0x46>
 8111b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111b6e:	059a      	lsls	r2, r3, #22
 8111b70:	d4ee      	bmi.n	8111b50 <__smakebuf_r+0x18>
 8111b72:	f023 0303 	bic.w	r3, r3, #3
 8111b76:	f043 0302 	orr.w	r3, r3, #2
 8111b7a:	81a3      	strh	r3, [r4, #12]
 8111b7c:	e7e2      	b.n	8111b44 <__smakebuf_r+0xc>
 8111b7e:	89a3      	ldrh	r3, [r4, #12]
 8111b80:	6020      	str	r0, [r4, #0]
 8111b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8111b86:	81a3      	strh	r3, [r4, #12]
 8111b88:	9b01      	ldr	r3, [sp, #4]
 8111b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8111b8e:	b15b      	cbz	r3, 8111ba8 <__smakebuf_r+0x70>
 8111b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8111b94:	4630      	mov	r0, r6
 8111b96:	f000 f837 	bl	8111c08 <_isatty_r>
 8111b9a:	b128      	cbz	r0, 8111ba8 <__smakebuf_r+0x70>
 8111b9c:	89a3      	ldrh	r3, [r4, #12]
 8111b9e:	f023 0303 	bic.w	r3, r3, #3
 8111ba2:	f043 0301 	orr.w	r3, r3, #1
 8111ba6:	81a3      	strh	r3, [r4, #12]
 8111ba8:	89a3      	ldrh	r3, [r4, #12]
 8111baa:	431d      	orrs	r5, r3
 8111bac:	81a5      	strh	r5, [r4, #12]
 8111bae:	e7cf      	b.n	8111b50 <__smakebuf_r+0x18>

08111bb0 <memmove>:
 8111bb0:	4288      	cmp	r0, r1
 8111bb2:	b510      	push	{r4, lr}
 8111bb4:	eb01 0402 	add.w	r4, r1, r2
 8111bb8:	d902      	bls.n	8111bc0 <memmove+0x10>
 8111bba:	4284      	cmp	r4, r0
 8111bbc:	4623      	mov	r3, r4
 8111bbe:	d807      	bhi.n	8111bd0 <memmove+0x20>
 8111bc0:	1e43      	subs	r3, r0, #1
 8111bc2:	42a1      	cmp	r1, r4
 8111bc4:	d008      	beq.n	8111bd8 <memmove+0x28>
 8111bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8111bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8111bce:	e7f8      	b.n	8111bc2 <memmove+0x12>
 8111bd0:	4402      	add	r2, r0
 8111bd2:	4601      	mov	r1, r0
 8111bd4:	428a      	cmp	r2, r1
 8111bd6:	d100      	bne.n	8111bda <memmove+0x2a>
 8111bd8:	bd10      	pop	{r4, pc}
 8111bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8111bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8111be2:	e7f7      	b.n	8111bd4 <memmove+0x24>

08111be4 <_fstat_r>:
 8111be4:	b538      	push	{r3, r4, r5, lr}
 8111be6:	4d07      	ldr	r5, [pc, #28]	@ (8111c04 <_fstat_r+0x20>)
 8111be8:	2300      	movs	r3, #0
 8111bea:	4604      	mov	r4, r0
 8111bec:	4608      	mov	r0, r1
 8111bee:	4611      	mov	r1, r2
 8111bf0:	602b      	str	r3, [r5, #0]
 8111bf2:	f000 f867 	bl	8111cc4 <_fstat>
 8111bf6:	1c43      	adds	r3, r0, #1
 8111bf8:	d102      	bne.n	8111c00 <_fstat_r+0x1c>
 8111bfa:	682b      	ldr	r3, [r5, #0]
 8111bfc:	b103      	cbz	r3, 8111c00 <_fstat_r+0x1c>
 8111bfe:	6023      	str	r3, [r4, #0]
 8111c00:	bd38      	pop	{r3, r4, r5, pc}
 8111c02:	bf00      	nop
 8111c04:	10004f88 	.word	0x10004f88

08111c08 <_isatty_r>:
 8111c08:	b538      	push	{r3, r4, r5, lr}
 8111c0a:	4d06      	ldr	r5, [pc, #24]	@ (8111c24 <_isatty_r+0x1c>)
 8111c0c:	2300      	movs	r3, #0
 8111c0e:	4604      	mov	r4, r0
 8111c10:	4608      	mov	r0, r1
 8111c12:	602b      	str	r3, [r5, #0]
 8111c14:	f000 f85e 	bl	8111cd4 <_isatty>
 8111c18:	1c43      	adds	r3, r0, #1
 8111c1a:	d102      	bne.n	8111c22 <_isatty_r+0x1a>
 8111c1c:	682b      	ldr	r3, [r5, #0]
 8111c1e:	b103      	cbz	r3, 8111c22 <_isatty_r+0x1a>
 8111c20:	6023      	str	r3, [r4, #0]
 8111c22:	bd38      	pop	{r3, r4, r5, pc}
 8111c24:	10004f88 	.word	0x10004f88

08111c28 <_sbrk_r>:
 8111c28:	b538      	push	{r3, r4, r5, lr}
 8111c2a:	4d06      	ldr	r5, [pc, #24]	@ (8111c44 <_sbrk_r+0x1c>)
 8111c2c:	2300      	movs	r3, #0
 8111c2e:	4604      	mov	r4, r0
 8111c30:	4608      	mov	r0, r1
 8111c32:	602b      	str	r3, [r5, #0]
 8111c34:	f7f0 fe7e 	bl	8102934 <_sbrk>
 8111c38:	1c43      	adds	r3, r0, #1
 8111c3a:	d102      	bne.n	8111c42 <_sbrk_r+0x1a>
 8111c3c:	682b      	ldr	r3, [r5, #0]
 8111c3e:	b103      	cbz	r3, 8111c42 <_sbrk_r+0x1a>
 8111c40:	6023      	str	r3, [r4, #0]
 8111c42:	bd38      	pop	{r3, r4, r5, pc}
 8111c44:	10004f88 	.word	0x10004f88

08111c48 <_realloc_r>:
 8111c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111c4c:	4607      	mov	r7, r0
 8111c4e:	4614      	mov	r4, r2
 8111c50:	460d      	mov	r5, r1
 8111c52:	b921      	cbnz	r1, 8111c5e <_realloc_r+0x16>
 8111c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8111c58:	4611      	mov	r1, r2
 8111c5a:	f7ff b9e9 	b.w	8111030 <_malloc_r>
 8111c5e:	b92a      	cbnz	r2, 8111c6c <_realloc_r+0x24>
 8111c60:	f7ff f97a 	bl	8110f58 <_free_r>
 8111c64:	4625      	mov	r5, r4
 8111c66:	4628      	mov	r0, r5
 8111c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111c6c:	f000 f81a 	bl	8111ca4 <_malloc_usable_size_r>
 8111c70:	4284      	cmp	r4, r0
 8111c72:	4606      	mov	r6, r0
 8111c74:	d802      	bhi.n	8111c7c <_realloc_r+0x34>
 8111c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8111c7a:	d8f4      	bhi.n	8111c66 <_realloc_r+0x1e>
 8111c7c:	4621      	mov	r1, r4
 8111c7e:	4638      	mov	r0, r7
 8111c80:	f7ff f9d6 	bl	8111030 <_malloc_r>
 8111c84:	4680      	mov	r8, r0
 8111c86:	b908      	cbnz	r0, 8111c8c <_realloc_r+0x44>
 8111c88:	4645      	mov	r5, r8
 8111c8a:	e7ec      	b.n	8111c66 <_realloc_r+0x1e>
 8111c8c:	42b4      	cmp	r4, r6
 8111c8e:	4622      	mov	r2, r4
 8111c90:	4629      	mov	r1, r5
 8111c92:	bf28      	it	cs
 8111c94:	4632      	movcs	r2, r6
 8111c96:	f7ff f950 	bl	8110f3a <memcpy>
 8111c9a:	4629      	mov	r1, r5
 8111c9c:	4638      	mov	r0, r7
 8111c9e:	f7ff f95b 	bl	8110f58 <_free_r>
 8111ca2:	e7f1      	b.n	8111c88 <_realloc_r+0x40>

08111ca4 <_malloc_usable_size_r>:
 8111ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8111ca8:	1f18      	subs	r0, r3, #4
 8111caa:	2b00      	cmp	r3, #0
 8111cac:	bfbc      	itt	lt
 8111cae:	580b      	ldrlt	r3, [r1, r0]
 8111cb0:	18c0      	addlt	r0, r0, r3
 8111cb2:	4770      	bx	lr

08111cb4 <_close>:
 8111cb4:	4b02      	ldr	r3, [pc, #8]	@ (8111cc0 <_close+0xc>)
 8111cb6:	2258      	movs	r2, #88	@ 0x58
 8111cb8:	601a      	str	r2, [r3, #0]
 8111cba:	f04f 30ff 	mov.w	r0, #4294967295
 8111cbe:	4770      	bx	lr
 8111cc0:	10004f88 	.word	0x10004f88

08111cc4 <_fstat>:
 8111cc4:	4b02      	ldr	r3, [pc, #8]	@ (8111cd0 <_fstat+0xc>)
 8111cc6:	2258      	movs	r2, #88	@ 0x58
 8111cc8:	601a      	str	r2, [r3, #0]
 8111cca:	f04f 30ff 	mov.w	r0, #4294967295
 8111cce:	4770      	bx	lr
 8111cd0:	10004f88 	.word	0x10004f88

08111cd4 <_isatty>:
 8111cd4:	4b02      	ldr	r3, [pc, #8]	@ (8111ce0 <_isatty+0xc>)
 8111cd6:	2258      	movs	r2, #88	@ 0x58
 8111cd8:	601a      	str	r2, [r3, #0]
 8111cda:	2000      	movs	r0, #0
 8111cdc:	4770      	bx	lr
 8111cde:	bf00      	nop
 8111ce0:	10004f88 	.word	0x10004f88

08111ce4 <_lseek>:
 8111ce4:	4b02      	ldr	r3, [pc, #8]	@ (8111cf0 <_lseek+0xc>)
 8111ce6:	2258      	movs	r2, #88	@ 0x58
 8111ce8:	601a      	str	r2, [r3, #0]
 8111cea:	f04f 30ff 	mov.w	r0, #4294967295
 8111cee:	4770      	bx	lr
 8111cf0:	10004f88 	.word	0x10004f88

08111cf4 <_read>:
 8111cf4:	4b02      	ldr	r3, [pc, #8]	@ (8111d00 <_read+0xc>)
 8111cf6:	2258      	movs	r2, #88	@ 0x58
 8111cf8:	601a      	str	r2, [r3, #0]
 8111cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8111cfe:	4770      	bx	lr
 8111d00:	10004f88 	.word	0x10004f88

08111d04 <_init>:
 8111d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111d06:	bf00      	nop
 8111d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8111d0a:	bc08      	pop	{r3}
 8111d0c:	469e      	mov	lr, r3
 8111d0e:	4770      	bx	lr

08111d10 <_fini>:
 8111d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111d12:	bf00      	nop
 8111d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8111d16:	bc08      	pop	{r3}
 8111d18:	469e      	mov	lr, r3
 8111d1a:	4770      	bx	lr
